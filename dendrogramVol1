<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="default-style"/>
  <title>Infinite Dendrogram: Volume 1</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css"/>
</head>

<body class="nomargin center">
  <section epub:type="bodymatter chapter" id="chapter0">
    <div class="main">
      <h1>Chapter Zero: <em>Infinite Dendrogram</em></h1>

      <p>July 15, 2043. On this date, the VRMMO <em>Infinite Dendrogram</em> was released around the world. It had been nearly half a century since man had first dreamt of a VRMMO (virtual reality massively multiplayer online) game.</p>

      <p>In the 2000s, a variety of media, such as manga, anime, and video games, began to incorporate VRMMOs into their stories as the ultimate “dream game.” From among a sea of creative entertainment, people eagerly looked forward to the release of a VRMMO, and in the 2010s, quasi-VR headsets were released, offering enhanced quality of sight and sound immersion.</p>

      <p>Although at first a mere product of fantasy, VRMMOs were anticipated, developed, and then finally given form. In the 2030s, a small number of full-dive VRMMO games were released, allowing players to enter game worlds using all five of their senses.</p>

      <p>The reason so few were released was due to the difficulty and enormous cost of development. This meant that only companies with leading technology and sufficient resources could even make an attempt. Or perhaps more were attempted, but never completed.</p>

      <p>However, the few completed games that did make it out into the world were quickly met with disappointment. Unlike the VRMMOs depicted in fiction, these ones lacked in realism, they assailed the senses with discomfort, and their graphics were hardly any different from existing game systems. Also, despite guarantees of a safe design, players one after another fell ill and were taken to the hospital.</p>

      <p>The development companies behind the initial dive VRMMOs all went bankrupt due to poor sales, bad reputations, and numerous lawsuits from afflicted players.</p>

      <p>A reviewer from the time had the following to say about these games: “They managed to create the ‘dream game,’ but they weren’t able to create the ‘dream.’”</p>

      <p>Dive VRMMO games continued to be developed, but none were made that could be considered a success.</p>

      <p>That is... until <em>Infinite Dendrogram</em> was released.</p>

      <p class="centerp section-marking">◇</p>

      <p>The lack of information about <em>Infinite Dendrogram</em> before its release was abnormal.</p>

      <p>It was kept secret the whole time, and on the day of release, the developers only made one announcement simultaneously across the global media networks. In it, they presented four key selling points for the game.</p>

      <p>First: the five senses would be perfectly simulated.</p>

      <p>Second: even if there were 100 million players, all of them would play in the same game world on a single server.</p>

      <p>Third: players could choose how they’d view the game world, with options including realistic, 3D CG, and 2D anime.</p>

      <p>Fourth: time within the game would flow three times faster than in the real world.</p>

      <p>In response to the announcement, voices from around the world could be heard saying: “Is this really even possible?” “Just how much money and tech did they use to make this?” “Even for a case of misleading advertisement, isn’t this going a bit far?”</p>

      <p>Although the announcement had an impact, people found its content simply absurd. Out of everyone that saw the announcement, and this included non-gamers, 99.9998% didn’t believe it and didn’t buy the game.</p>

      <p>The remaining 0.0002% of people, however, said things like, “It seems like a lie, but what if it’s true...” “I’ll try it,” “I believe it,” and they headed into stores to buy the game.</p>

      <p>The necessary hardware cost around 10,000 yen, and was an extraordinary, some would even say reckless, pricing scheme. This helped lure in customers, with some saying, “Well, even if it’s a lie, it’s only 10,000 yen.” So they bought it and started playing.</p>

      <p>And once they logged into the game... they all knew it was the real thing.</p>

      <p>Overcome with amazement at the game’s realism, they would log out and look at their clocks, only to be astonished even more. The dreams they saw were all real — the “dream game” was now a reality.</p>

      <p>The day after release, amid the clamor set off around the world by posts and comments from those who played the game, the developers released another announcement. This time, the contents of the game were detailed. A man named Lewis Carroll, the lead developer for <em>Infinite Dendrogram</em>, presented the broadcast announcement and said the following:</p>

      <p>“The game system in <em>Infinite Dendrogram</em> has a special feature. Rather than relying on thousands of possible combinations of jobs and skills, this feature provides absolute and distinct uniqueness. This feature is the Embryo. It will offer players truly infinite possibilities and unique customization.</p>

      <p>“Embryos will respond to personal circumstances and evolve from among an infinity of patterns. These patterns will not merely be different colors and parts, but will even include unique skills, allowing them to be truly limitless in scope. This is what <em>Infinite Dendrogram</em> is all about.</p>

      <p>“Yes, <em>Infinite Dendrogram</em> will provide you with a new world and your very own unique possibility.”</p>

      <p>These words served as the last trigger needed to turn the game into a giant movement.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>March 16, 2045 — Reiji Mukudori</p>

      <p>I, Reiji Mukudori, was sitting on my heels with the game in front of me and a nervous expression on my face.</p>

      <p>It probably sounded like an exaggeration, but after waiting a year and a half, I was finally going to be able to play <em>Infinite Dendrogram</em>. So, of course, I was nervous.</p>

      <p>“It’s been a long road,” I said.</p>

      <p>The game had been announced and released during the summer of my junior year in high school — at the same time I had been motivating myself to do my best on my college entrance exams.</p>

      <p>I’m sure there had been other game-loving high schoolers in their junior or senior years who had been left in despair like I had been, thinking, <em>why of all times did such an interesting-looking game have to come out during my entrance exam years?</em></p>

      <p>However, I had now successfully made it into a college in the city, and had taken the opportunity to start living on my own. I had finished moving yesterday, and my parents, who’d helped me, had already returned home.</p>

      <p><em>I can play games as much as I want now!</em></p>

      <p>I had headed to the game store this morning as soon as it opened and purchased a copy of <em>Infinite Dendrogram</em>. For about half a year after its release, it had apparently been difficult to get a hold of a copy, but a whole year and a half later, I was able to buy it without any trouble.</p>

      <p>My older brother, by the way, was one of the ones who had bought the game on release day. This whole time, he had been calling me saying, “Hurry up and let’s play <em>Dendro</em> together.” I hadn’t been sure if this made me feel bitter or simply jealous.</p>

      <p><em>But all those feelings end today!</em></p>

      <p>“...Let’s do this!” I braced myself and opened the box. Inside, were a helmet-type game system and a manual.</p>

      <p>According to the manual, in order to enter the game world, all you needed to do was put on the helmet and turn on the switch. There were other explanations regarding visuals and time as well, but “amazing” would be the only way I could describe them.</p>

      <p><em>Really, just how in the world did they make this game?</em> I wondered. <em>It seems to be ten, maybe twenty years ahead of current technology...</em></p>

      <p>However, now wasn’t the time to be scared. Following the instructions and recommendations in the manual, I put on the helmet and lay on my bed facing the ceiling. I then turned on the game.</p>

      <p>Instantly, my vision went black.</p>

      <p class="centerp section-marking">◇</p>

      <p>“Hello and welcommme.”</p>

      <p>Before I knew it, I was no longer in my room, but in a space that appeared to be the study of a Western-style, wooden building. The voice had come from a cat I had never seen before, which sat in front of me on a seemingly well-made, wooden rocking chair.</p>

      <p><em>...A cat?</em></p>

      <p>“I’m sorry for the intrusion,” I said. I was confused, but decided to respond with a greeting first.</p>

      <p>“Yes, that’s niiice,” said the cat. “I like people with proper mannerrrs.” The cat spoke in fluent Japanese, but with a slow drawl at the end of his sentences.</p>

      <p>“Is this like the game’s tutorial or something?” I asked.</p>

      <p>“That’s riiight. You’ll be sent into the game after you finish configuring various settings herrre. Oh, I’m Cheshire, control AI No. 13 for <em>Infinite Dendrograaam.</em> Nice to meet youuu.”</p>

      <p><em>Control AI... I see. No wonder it’s able to use fuzzy logic in its responses.</em></p>

      <p>Control AIs are man-made cyber intelligences with entire modern supercomputers serving as their brains. Their primary uses, as the name suggests, are in control and management. It’s said that just one of them can perfectly, and at high speeds, manage the databases and networks of a small country.</p>

      <p><em>If this one is No. 13, does that mean there are twelve other control AIs of equal ability involved in managing this game?</em></p>

      <p>“Nice to meet you, too,” I said.</p>

      <p>“All riiight,” said the cat. “First up is selecting the graphiiics. Samples of these will alternate, so choose which one you like the best, okaaay?”</p>

      <p>After the cat... Cheshire... said this, the surrounding scenery completely changed.</p>

      <p>The study I turned into a spacious area — a somewhat Middle Ages European townscape. There were many people walking about, and after a fixed period of time, their appearance would change. Actually, it wasn’t their appearance, but rather, the way I saw them was changing. It went from a realistic appearance to CG, from CG to anime, and then back to realistic.</p>

      <p>“...Wait, how are you doing this?” I asked.</p>

      <p>“Imagery perceived by sight is processed by the brain, after all, so there’s a waaay,” replied Cheshire. “And so, the way you see can be changed like this, but which one will you go wiiith? You can change it later by using an itemmm.”</p>

      <p>“I’ll leave it as-is,” I said.</p>

      <p>I thought it would be better to see normally until I got used to the game, so that’s what I did. Although I <em>was</em> interested in how it would feel to touch something that looked like it was from an anime.</p>

      <p>“Okaaay,” said Cheshire, and the scenery reverted back to the study. “Next is your player naaame. What do you want your name to be in the gaaame?”</p>

      <p>“I’ll go with Ray Starling.” This was a name I had often used in games before. It was simply a distorted version of my first name and the English translation of my last name, Mukudori.</p>

      <p>“Okay, then I’ll set it to thaaat,” said the cat. “Next, the settings for your appearaaance.”</p>

      <p>After Cheshire said this, a featureless mannequin and a bunch of window screens appeared before me. These screens contained words such as “height,” “weight,” “bust,” their corresponding sliders, as well as facial features.</p>

      <p>“These are...” I said slowly.</p>

      <p>“Use those parts and sliders to make your own avatar for the gaaame,” said Cheshire. “Oh, you can also make it into an animal like me, or even change your genderrr.”</p>

      <p><em>No, I’m not so sure about changing my gender in a game this realistic...</em></p>

      <p>“It’s okay to take your time and think it overrr,” said Cheshire. “We have three times the amount of time here than in the real wooorld. ...Oh yeah, there was that one time when someone repeatedly logged in and out and spent one month in Earth time making their avatarrr.”</p>

      <p><em>That’s a tremendous amount of effort and concentration, so I don’t think I’ll be able to go that far.</em></p>

      <p>It wasn’t just because of the sheer number of sliders and parts, but the values you could set for each of them were way too exact. It was almost like they were telling me to make a real human face.</p>

      <p><em>For a beginner, that’s way too difficult,</em> I thought. <em>In that case...</em></p>

      <p>“Can I just use my real appearance as the default and make some changes to that?” I asked.</p>

      <p>“You can do thaaat,” Cheshire said and waved his tail.</p>

      <p>The mannequin turned into me.</p>

      <p>“Now you just need to make some changes using this as your baaase,” said the cat.</p>

      <p>“Thanks,” I said.</p>

      <p>It was fairly simple after this. I left most of the settings the same, but changed my hair color to blond, and changed my ethnicity as well, which altered my face. While I worked on this, I wondered about what my face would look like if I set it to anime or CG. <em>I’d be able to see it if I played without changing any of the settings, but... no, it’s better that I don’t play online with my actual face.</em></p>

      <p>And like that, I finished creating my avatar after about thirty minutes or so.</p>

      <p>“And... finished,” I said.</p>

      <p>“Okaaay. Then I’ll hand over your starting itemmms.” Cheshire waved a padded paw in the air and a bag fell from empty space. “This is your storage bag, also known as your inventoryyy. The storage space inside it is from a different dimensionnn. You can store items in here if they’re yours, but on the flip side, you can’t put any items in here that arrren’t.”</p>

      <p>“I see,” I said.</p>

      <p><em>It’s a useful bag, but I guess that means it can’t be used to commit crimes.</em></p>

      <p>“Well,” Cheshire continued, “if it’s an item that dropped from someone you PKed, or one that you stole with the Steal skill, then it’ll go innn.”</p>

      <p>I fell silent. <em>I don’t know what to say to that.</em></p>

      <p>“By the way, if a player’s Steal skill is high enough in level, they can steal an item from even inside this 4D pocket-like item baaag,” the cat said. “So be carefulll.”</p>

      <p><em>Now just how exactly am I supposed to be careful against a thief that’s capable of stealing from the fourth dimension?</em></p>

      <p>“This bag is for beginners, but there are also other types, such as ones that are tough to steal from, small ones, and ones with a lot of capacityyy,” the cat said.</p>

      <p>“What is the capacity of this one, by the way?” I asked.</p>

      <p>“The size is about equal to one classroom, and the weight is maybe around one ton in Earth measuremeeents.”</p>

      <p>“It can fit quite a lot,” I said. “That’s plenty.”</p>

      <p>“It’s apparently not enough if you’re a merchant, thooough,” said the cat. “They’re likely to buy new onnnes. Oh, item bags will scatter their contents around if they get destroyed, so pay attention to their durabilityyy.”</p>

      <p>“I’ll be careful,” I said.</p>

      <p>“Next is a set of beginner equipmeeent. Ray, what will you piiick?” Cheshire pulled a catalog from a bookshelf and showed it to me.</p>

      <p>In it were full sets of various types of armor. There was the typical Eastern and Western style armor, but in addition to these, there were traditional outfits from China, India, the Middle East, and South America. On the opposite end, there were even outfits that seemed to be from Sci-Fi movies.</p>

      <p>“I’ll go with this, then,” I said, choosing a combination that consisted of innerwear, a jacket, jeans, and a bandana. The look vaguely resembled the male protagonist from a masterpiece game of the last century.</p>

      <p>I played retro games as well as modern games thanks to my brother, so although the look was a bit behind the times, it matched my tastes.</p>

      <p>“Okaaay. What will you pick for your first weaponnn?” the cat asked.</p>

      <p>I turned to a different page in the catalog. All kinds of weapons were listed, including a wooden sword, a practice sword with a dull blade, a knife, a bow, a sling, and a staff.</p>

      <p><em>I should choose something that matches my outfit.</em></p>

      <p>“I’ll go with the knife,” I said.</p>

      <p>“Okaaay. So for your weapon and equipment... Wazaaaam.” It was hard to tell if Cheshire’s voice was energetic or not, but as he said that, my appearance changed. My outfit switched to the one I had just chosen, and a knife now hung from a belt at my waist. Most impressive of all, my appearance had changed to mirror the avatar I’d made earlier.</p>

      <p>“Wow, this is something else,” I said as I looked at myself in the full-length mirror Cheshire had provided. <em>It looks pretty good.</em></p>

      <p>“Oh yeah, that’s right, here’s your starting moneyyy.” Cheshire handed me five coins that appeared to be made out of silver. “Five silver coins is worth 5,000 lirrr. One rice ball costs about 10 lir, by the waaay.”</p>

      <p><em>Then 1 lir would be about 10 yen,</em> I thought. <em>In that case, 5,000 lir is a lot of money.</em></p>

      <p>“Is it okay to get this much in the beginning?” I asked.</p>

      <p>“Yep. Be sure to learn how to make money before it runs out, thooough,” he said.</p>

      <p><em>In other words, I probably won’t get any more after this, so I should use it wisely.</em></p>

      <p>“Well then, it’s finally time to transfer your Embryooo,” he said.</p>

      <p>“Oh, the thing in all the rumors!” I said.</p>

      <p>Embryos.</p>

      <p>I’d heard they were the greatest feature in <em>Infinite Dendrogram</em>. They offered true uniqueness and evolved in infinite ways based on the player. They were partners that exceeded the likes of items and equipment.</p>

      <p>My brother, who was already playing the game, said, “If this hadn’t been a well-made dive VRMMO, but just a regular MMO instead, I’m sure it still would’ve been a hit as long as it had the Embryo system.”</p>

      <p>“Do you need an explanation on Embryooos?” asked the cat.</p>

      <p>“Since you’re offering, I guess I should listen to it,” I said. <em>It’s probably best to hear the tutorials for unique systems, after all.</em></p>

      <p>“Okaaay,” said the cat. “All players receive an Embryo at the starrrt. The only time they’ll look the same is while they are in this zeroth fooorm. With the first form and beyond, they’ll change in completely different ways based on their ownerrr.”</p>

      <p>“Ohhh,” I said. <em>As a gamer, I can’t help but be fascinated by features that allow for something to be totally unique.</em></p>

      <p>“Although the possibilities are infinite, there are some rough categorieees,” added the cat.</p>

      <p>“Oh, I didn’t know that,” I said. This was because I’d done my best to block out any information before I started playing. I’d been worried that I might abandon my entrance exams if I’d found out something about the game, as it would have made it harder to resist playing it.</p>

      <p>The only information I’d heard from my brother was that “it’s fun.” It might have been the case that he’d also been worried about my exams, and so he hadn’t told me anything specific.</p>

      <p>“The broad categories arrre: Type Arms — a device type that players can equip as a weapon or armorrr. Type Guardian — a monster type that protects the playerrr. Type Chariot — a vehicle type that players can riiide. Type Castle — a building type that players can reside innn. Type Territory — a barrier type that players can deployyy. That’s about ittt.”</p>

      <p>“Ohhh,” I said. I was starting to get excited to see how my Embryo would turn out.</p>

      <p>“Also, besides these ones, there are rare and advanced categories that an Embryo can evolve into, tooo. There are even categories that are unique to one Embryooo. It’d be nice if you could get onnne.”</p>

      <p>“Wow!” I exclaimed. “But if that’s the case, there are bound to be players who keep resetting their character until they get a rare category.”</p>

      <p>“Ahh, you can’t remake your character in this gaaame,” said the cat.</p>

      <p>“Huh?”</p>

      <p>“Even if someone bought different hardware and played the game, that person would log in as the same character as the first tiiime,” Cheshire explained. “Their Embryo would also be the saaame. This is because we keep records on our side of users’ brain wave dataaa.”</p>

      <p>“......” I was silent.</p>

      <p><em>They record our brain wave data...</em> I thought. <em>Yeah, that sounds kind of scary.</em></p>

      <p>“Even if they were able to reset, it’s all based on that person anywaaay, so I think their Embryo would end up exactly the saaame,” said the cat.</p>

      <p><em>Is that how it works?</em></p>

      <p>“Annnd... while we were talking, your Embryo finished transferrinnng,” the cat added.</p>

      <p>“Huh? ...Ah.” I realized that on the back of my left hand was now embedded a faintly glowing oval gem.</p>

      <p>“That’s your Embryooo,” Cheshire said. “It’ll be stuck to your left hand during its zeroth form, but it’ll come off after it hatches and reaches its first forrrm.”</p>

      <p><em>In other words, I guess it’s sort of like I’m incubating an egg.</em></p>

      <p>“By the way, is there any chance it can break while it’s an egg?” I asked.</p>

      <p>“That won’t happennn,” said the cat. “Any damage an Embryo receives while in its zeroth form will be passed on to the playerrr.”</p>

      <p><em>Ahh, I see. So that means the Embryo will be safe even if the player dies.</em></p>

      <p>“But after they hatch, Embryos can be damaged and break like anything elllse,” the cat said. “They’ll self-repair over time, thooough.”</p>

      <p><em>It’s kind of like a living creature.</em></p>

      <p>“By the way, after your Embryo turns into its first form, a tattoo of a crest will appear where the egg waaas,” said the cat. “It serves as a sort of identification for players in this worrrld. Without it, you wouldn’t be able to tell players apart from NPCees.”</p>

      <p>“Is that so?” I asked.</p>

      <p><em>But no, there’s no way you would mistake an NPC for a human... right?</em></p>

      <p>“Also, the crest has the ability to store your Embryooo,” said the cat. “When you don’t need it, you can keep your Embryo in your left hannnd. You’ll be together with it as long as you play this game, so please take care of ittt.”</p>

      <p>“Got it,” I said.</p>

      <p><em>I’m still not sure how my Embryo will evolve, but that’s fine. It all comes down to oneself anyway, so I guess it’ll work out on its own.</em></p>

      <p>“It’s nice to meet you, partner,” I said.</p>

      <p>Needless to say, there was no response from my Embryo, but I got the feeling that it shined slightly.</p>

      <p>“Lastly, please choose which nation to joiiin.” Cheshire laid out a map on the study’s desk. It was an old scroll map. After it was unfurled, however, pillars of light rose up from seven locations on the map, and from within them, I could see various towns. “The nations with pillars of light are the ones you can join in the beginninnng. What you see in the pillars is the capital of each nationnn.”</p>

      <p>Floating in letters of light around each of the pillars was the name and explanation of each nation.<br/><br/></p>

      <p>Surrounded by castle walls is a Western fantasy town, with a white limestone castle at its center.</p>

      <p>Kingdom of Altar: the land of knights.<br/><br/></p>

      <p>Sakura petals dance through the air in this city made of wood. A Japanese-style castle looms high above it.</p>

      <p>Tenchi: the land of blades.<br/><br/></p>

      <p>Subtle elegance hangs in the air of these mountains. A large river flows for all eternity through its valleys.</p>

      <p>Huang He Empire: the land of the hermits.<br/><br/></p>

      <p>Black smoke rises from countless factories and forms a cloud that blocks out the sky. On the ground is a modern day city made of steel.</p>

      <p>Dryfe Imperium: the land of machines.<br/><br/></p>

      <p>Bazaars nestle up to a giant oasis, surrounded by desert as far as the eye can see.</p>

      <p>Caldina: the commercial city-state union.<br/><br/></p>

      <p>Made from connecting countless large ships together, this man-made landmass floats in the middle of the open sea.</p>

      <p>Granvaloa: the maritime nation.<br/><br/></p>

      <p>At the base of Yggdrasil deep in the forest, elves, fairies, and demi-humans live in this secluded garden of flowers.</p>

      <p>Legendaria: the homeland of fairies.<br/><br/></p>

      <p>“Ohhh...” I said.</p>

      <p><em>Seeing this makes me want to visit every one of them,</em> I thought. <em>Tenchi has a similar feel to the Azuchi-Momoyama Period, while Huang He gives off a sense of Chinese fantasy. Dryfe seems like they’d have robots, and just walking through the bazaars of Caldina would feel like I was sightseeing. The seas of Granvaloa call out to me to seek adventure, and as for Legendaria, there’s no need to even think of a reason.</em></p>

      <p><em>However...</em></p>

      <p>“I’ll go with the Kingdom of Altar,” I said.</p>

      <p>“Okaaay,” said the cat. “By the way, as a quick survey, what would your reason for choosing that beee?”</p>

      <p>“My brother is waiting for me.”</p>

      <p>“Oh, is that so...”</p>

      <p>I had called my brother from the store right after I’d bought the game, and he’d said, “Then I’ll be waiting for you in the Kingdom of Altar’s capital.”</p>

      <p><em>...Since he’s waiting, I have no choice,</em> I thought. <em>But why did he choose the Kingdom of Altar, anyway?</em> <em>I’m pretty sure he likes robots and warships, so why didn’t he go with the Dryfe Imperium or Granvaloa? Well, I guess I’ll just have to ask him in person.</em></p>

      <p>“There are events that allow you to change the nation you belong to, so don’t feel so down about ittt,” said the cat.</p>

      <p>“Yeah, thanks...” I said.</p>

      <p><em>I need to change gears,</em> I thought. <em>The Kingdom of Altar seems kind of plain and normal, but it just might be a nice place.</em></p>

      <p>“Okay then, I’m going to send you to the Kingdom of Altar’s royal capital, Alteaaa,” said the cat.</p>

      <p>“Ah, just a second. What are the goals in this game?”</p>

      <p>In all the games I’d played since I was a kid, even online ones, they’d had established goals such as defeating the evil god or demon king. I thought this game would be the same, but when I asked this to Cheshire...</p>

      <p>“Anythinnng,” was the response I got.</p>

      <p>“Anything?” I asked.</p>

      <p>“That’s what I meannnt. Anythinnng. You can become a hero or the demon king, a king or a slave, a good person or an evil person. You can do something, or you can do nothing. You can stay in <em>Infinite Dendrogram</em>, or leave it. It’s all up to you. If it’s possible, then you can do anything you want.” Cheshire’s way of speaking had changed. “Just like the Embryo in your left hand, what’s about to begin is infinite in possibility.”</p>

      <p>His speech had morphed from the slow drawl. It was almost as if he were narrating something.</p>

      <p>“Welcome to <em>Infinite Dendrogram</em>. We warmly welcome you,” a voice said.</p>

      <p>As soon as these words were spoken, the study disappeared from my surroundings. The desk, the bookshelf, and even Cheshire, vanished, and I was left floating in the air.</p>

      <p>“Huh?”</p>

      <p>Below me was a familiar-looking world. I was looking down on the same continent I’d seen on the map just moments earlier. Before long, almost as if my body was being sucked down toward one point on the continent — the Kingdom of Altar — I started to fall at a great speed.</p>

      <p>And just like that, I set foot in the world of <em>Infinite Dendrogram</em>.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>In front of the South Gate, Royal Capital Altea, Kingdom of Altar — Ray Starling.</p>

      <p>“I thought I was going to die...” My heart was pounding after being suddenly dropped from the sky, and I forced in breaths to help calm myself down.</p>

      <p>The feeling of the fall still remained with me:</p>

      <p>The sight of scenery changing vividly before me at high speed.</p>

      <p>The sound of my body scraping against the air as I fell.</p>

      <p>The chill in the air whipping around me.</p>

      <p>The smell of wind I had never smelt before.</p>

      <p>The taste of dirt from the ground — I had fallen over in a daze, confused at how abnormally safe my landing had been. There hadn’t been any pain — it was apparently turned off by default — but all five of my other senses had perceived this world just as they would the real one.</p>

      <p>“This... is too real,” I said quietly.</p>

      <p><em>A true dive VRMMO...</em> I finally had a sense that the dream game had become a reality.</p>

      <p>I did think the theatrics had been a bit over the top, but I had now made my way into the world of <em>Infinite Dendrogram</em>.</p>

      <p>I looked about my surroundings and saw a large gate behind me. It was encompassed by white castle walls that stretched up as far as I could see. There were also soldiers clad in Western-style armor serving as its gatekeepers.</p>

      <p><em>This gate is one of the places I saw in Cheshire’s room, so it’s probably safe to say this is Altea, the Kingdom of Altar’s royal capital.</em></p>

      <p>The gate was open leading into the town, and for a while now, carriages and people had been coming and going.</p>

      <p><em>It seems I can pass through just fine.</em></p>

      <p>As it was my first time, I timidly — or, more accurately, suspiciously — passed through the gate and was able to enter the town without any trouble.</p>

      <p>“All right,” I said with relief. <em>It looks like they don’t do inspections for people entering or leaving Altea.</em></p>

      <p>Since I’d safely made it into town, all that remained was to head to where I was supposed to meet my brother.</p>

      <p>“If I remember correctly, he said a large water fountain on the capital’s central street,” I said. “He did say I could reach it by heading straight from the entrance, but... hmm... I’ll take a look just in case.”</p>

      <p>I recited the words “main menu” in my mind, and just like it was described in the manual, a game window appeared in front of me. The window was split into two; on the right side was my name and a simplified view of my stats, while on the left side was a list of various menu commands.</p>

      <p>I glanced over at my stats and saw that my current level was 0. Jobs in <em>Infinite Dendrogram</em> supposedly each had their own level, and since I was currently jobless, my level was stuck at 0.</p>

      <p>“Map... Here it is.” I found what I was looking for in the menu and opened it up. A new window appeared displaying a map of the Royal Capital Altea.</p>

      <p>Normally, a map had to be filled in by traveling around or by buying maps. However, the manual explained that a player’s starting area, the capital of the nation they joined and its surroundings, got input into the map from the start.</p>

      <p><em>This is useful.</em></p>

      <p>“I see. I see,” I murmured.</p>

      <p>The city of Altea was circular in shape and surrounded by castle walls. These walls had a gate at each of the four cardinal points, and stretching out from each of them was a large, stone-paved road leading to the center of the city.</p>

      <p>The roads would have intersected into a cross if they had continued; however, this was not the case. At the center of the royal capital was another ring of castle walls, and inside it was the area for nobility. Special permission was required to enter this area, and at its center was the royal castle.</p>

      <p><em>Well, I probably won’t have any need to go there for a while,</em> I thought.</p>

      <p>The central street we were supposed to meet at was the one running from the South Gate to the nobility area. The gate I had just passed through, by the way, was the South Gate.</p>

      <p><em>So if I simply head straight, I should be able to reach the water fountain.</em></p>

      <p>I was walking while looking at my map and thinking this, when...</p>

      <p>“Ah?!”</p>

      <p>“Huh?” Somehow, I had locked eyes with a woman I didn’t know. She had run out from a side alley, and since I’d been engrossed in my map, I hadn’t noticed until she was right upon me. I reacted late and wasn’t able to avoid her, causing us to collide. As a result, I was flung more than fifteen meters away.</p>

      <p>“Gah...” I muttered. <em>That felt like it caused some serious damage.</em></p>

      <p>As a matter of fact, the window screen I still had open showed that I’d lost 80% of my HP. In addition to this, I appeared to have broken some bones. The status effects “broken left arm” and “broken right leg” were now being displayed.</p>

      <p><em>Just one collision with a lady, and I receive such near-fatal wounds as these... come on, just how shockingly frail am I?</em></p>

      <p>“A-Are you all right?!” The woman that ran into me rushed over to my side with a pale look on her face. She had soft hair and kind facial features... and was wearing white, metal armor that looked absurdly heavy.</p>

      <p><em>I wouldn’t be surprised if that thing weighs a hundred kilos.</em></p>

      <p>“I-I’m...” I tried to tell her, “I’m okay. It was no big deal.” However, my body was still numb from the damage and I couldn’t properly move my tongue.</p>

      <p>“I’m so sorry! Force Heal!” Her hand instantly glowed white and particles of light fell from it onto my body. My HP was completely healed, and the status effects for my broken bones were also gone.</p>

      <p>“Oh... ohhh...”</p>

      <p><em>That must’ve been healing magic.</em> It was a common occurrence in video games to nearly die and then get completely healed, but this was what it was like to actually experience it. <em>...It’s kind of scary.</em></p>

      <p>“I’m terribly sorry! This is all because I wasn’t paying attention to what’s in front of me while running...” she said.</p>

      <p>“N-No, I was also looking away... By the way, are you okay?” I asked. We’d collided with enough force to give me near-fatal wounds, so I was worried that she might have been injured as well, but... she was completely unharmed.</p>

      <p>She appeared to be a really high-level player, and the equipment she was wearing looked to be of a high-grade as well. Her stats, then, would most likely be high, too.</p>

      <p><em>So that’s why our collision ended up the way it did.</em></p>

      <p>“I’m fine,” she replied. “But I caused you to get such a terrible injury...”</p>

      <p>“Oh no, y-you were kind enough to heal me, so I’ll be just fine.” I couldn’t help but speak politely. On top of that, I was fairly sure my voice was shaking. The damage from when we’d collided had caused me to lose my nerve.</p>

      <p>“B-By the way, it looked like you were in quite the hurry. Is there something wrong?” When I asked her this, the woman suddenly appeared to have remembered something.</p>

      <p>“Well actually, my little sister left the house and I was in the middle of searching for her.”</p>

      <p>“Your sister?” I asked.</p>

      <p>“Yes. This is her in this picture. Have you seen her anywhere?” Asking this, she took out a picture and showed it to me. <em>Although this world has a fantasy setting, it would appear that pictures are readily available.</em> In the picture was a cute little girl. She looked like a younger version of the woman in front of me, but with straight hair instead of wavy.</p>

      <p><em>Her sister, huh?</em> I thought. <em>Like me and my brother, she must be playing this game together with her sister.</em></p>

      <p>I could only stay silent as she looked at me in desperation. I felt bad for her, but I hadn’t seen her sister. “I’m sorry. I just started recently, and I just entered this town through that gate a moment ago...”</p>

      <p>“Is that so... Then she might already be inside... Um, this is my contact information,” the woman added. “If you happen to see my sister anywhere, please contact me! Also, I’m really sorry for running into you!” She took out a piece of paper, wrote something on it, and then handed it to me.</p>

      <p>“There’s no need to apologize, so please go and search for your sister,” I said.</p>

      <p>“Thank you... Well then, goodbye!” she said and darted off, leaving me with a memo in my hand. The following was written on it: “Liliana Grandria, Knights of the Royal Guard Vice Commander, Kingdom of Altar.”</p>

      <p>“Huh?”</p>

      <p>Characters I had never seen before were being translated into Japanese in my head. More shocking than that, however, was the rest of the memo...</p>

      <p>“The quest ‘Search for Milianne Grandria, Difficulty Level 5’ has started. Please see the quest screen for further details.”</p>

      <p>I was at a loss for words.</p>

      <p><em>Umm... yeah.</em></p>

      <p>Although she looked like a real human to me, this meant that she wasn’t actually a player, but instead...</p>

      <p>“She was an NPC?!”</p>

      <p>And just like that, I realized again just how unbelievably realistic <em>Infinite Dendrogram</em> was.</p>

      <p class="centerp section-marking">◇</p>

      <p>Shortly after I met Liliana and received my first quest, I arrived at the large water fountain on the central street where I was to meet my brother. On the way there, I had a look at the help information, and apparently difficulty level 5 quests were supposed to be undertaken by a party of advanced players. So without a doubt, it wasn’t something I could partake in.</p>

      <p><em>Why would a quest like this be given to a beginner, anyway?</em> I wondered. <em>I should just ask Bro about it for now.</em></p>

      <p>Thinking about this, I had hurried my way to the water fountain, and...</p>

      <p>The scene that greeted me left me speechless.</p>

      <p>There was a nearly two-meter-tall <em>bear costume</em> with a sign reading “Welcome little brother” parked in front of the water fountain.</p>

      <p>“...What in the world is that?” I managed.</p>

      <p><em>There’s no way... But... No, no way... But then again...</em></p>

      <p><em>This is where we’re supposed to meet.</em></p>

      <p><em>There likely aren’t that many people out there waiting for their younger brother.</em></p>

      <p><em>He wouldn’t know my character name, and it’s not like he can use my real one, so it makes sense to write “little brother” on the sign. I get that part.</em></p>

      <p><em>But...</em></p>

      <p>“Why the costume?” I asked aloud.</p>

      <p><em>It’s going to take some guts to talk to that thing.</em></p>

      <p>For a little while now, children had been gathering around the bear. I couldn’t tell if they were NPCs or players, but they seemed to be very attached to the bear. They were climbing onto its head and lap, as well as hanging from its arms.</p>

      <p>I wasn’t getting anywhere at this rate, so I steeled my nerves, and decided to talk to it. “Excuse me. I would like to ask you something...”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert1">
    <img alt="insert1" class="insert" src="../Images/Insert1.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter01">
    <div class="main">
      <p>“Yes, yes, just bear with me for a moment.”</p>

      <p><em>Was that a pun...?</em> I thought. <em>I get that it you’re a bear, but still...</em></p>

      <p>“Are you Shuichi Mukudori... Forget it, is that you, Bro?” I asked.</p>

      <p>“Indeed it is,” he said. “Hey, Reiji.”</p>

      <p><em>...I so wanted to be wrong.</em></p>

      <p>“I’m glad we were able to meet up.” The bear — I mean, my brother, Shuichi Mukudori — stood up and said, “Shall we go, then?”</p>

      <p>He then pulled out some candy from his storage bag — or rather, a pocket attached to his stomach — and passed them out to the children gathered around him.</p>

      <p><em>Is he pretending to be that famous character?</em> I thought. <em>In that case, he should be a cat, or at least a raccoon.</em></p>

      <p>“Yay!”</p>

      <p>“Thanks, Mr. Bear!”</p>

      <p>The children received their candy and then headed off in cheerful spirits. Before long, only my brother and I were left remaining.</p>

      <p>“I guess first up should be introductions,” my brother said. “My name here is Shu Starling.”</p>

      <p>“I’m Ray Starling,” I said. “So like I thought, we did end up with the same name.”</p>

      <p>Since it was so easy to use the English translation of our last name, Mukudori, whenever someone in my family made a character, eight out of ten times we’d end up with the name Starling.</p>

      <p>“So, what should we do?” my brother asked. “It looks like your Embryo hasn’t hatched yet, so should I show you around the town? While we’re at it, if you want to pick up some equipment, I can lend you some money at no interest.”</p>

      <p>“Oh, well, actually...” I explained to him about the quest I had just received.</p>

      <p>“Really... A quest from Liliana,” he said. “I’ve never received one before.”</p>

      <p>“Really, though, why would I get a quest like this when I’m at level 0?” I asked.</p>

      <p>“That’s because this world is realistic, and a lot of quests are triggered by coincidence,” he said. “Incidents don’t occur in order to create a quest, but quests arise when there happens to be an incident. There are many quests you won’t be able to trigger intentionally, and there’ll be a lot of cases where you end up going on one you didn’t intend to. Well, consider it a good baptism... you were able to get a sense for how realistic the people of this world are, right?”</p>

      <p>“Yeah,” I said. “It was so realistic, in fact, I’m a bit suspicious as to whether I’m talking to the real you, or just an NPC pretending to be you.”</p>

      <p>“Of course it’s me,” he said. “You better bear-lieve it.”</p>

      <p>“Stop it with the bear stuff!” It made me feel weird because I knew the person inside and could picture him.</p>

      <p>“Ha ha ha. By the way, Liliana is a contender for the first or second most popular person in this kingdom. She even has a fan club made up of both players and tians.”</p>

      <p>“There’s a fan club... Oh, and what’s a ‘tian’?” I asked.</p>

      <p>“A person that isn’t a player,” he said. “Well, you can just think of it as the general term for NPCs.”</p>

      <p>“Interesting... so that means even NPCs participate in fan clubs,” I said.</p>

      <p>“According to the developers, ‘their personalities and ability to think are on the same level as humans.’ So that kind of thing is the bear minimum of their capabilities.”</p>

      <p><em>Really, this game is so sophisticated, it’s almost alarming.</em></p>

      <p>“By the way, did it say anywhere in the quest information about where to search?” my brother asked.</p>

      <p>“No, nothing,” I said. “They’re telling me to search for someone without any hints. That’s why I don’t know where or how I should start.”</p>

      <p><em>Although to be accurate, this memo would count as a hint,</em> I figured.</p>

      <p>“Hmm,” he said. “Can you hand me that memo for a sec?”</p>

      <p>“Here you go.”</p>

      <p>My brother took the memo, but instead of reading its contents, he flipped it over and showed its back to me.<br/><br/></p>

      <p>Dear Sister,</p>

      <p>The shops were all out of remberries, so I’m going to go get some. I’m bringing bug-repellent incense, so I’ll be okay. Please look forward to it and wait for me.</p>

      <p>From Milia.<br/><br/></p>

      <p>“Isn’t this...” I said slowly.</p>

      <p>“She must have been in a real hurry,” said my brother. “She wrote her contact information on the back of the memo her sister left and gave it to you.”</p>

      <p><em>I didn’t notice it either.</em> Since the memo had been written on parchment paper, I hadn’t been able to see through it.</p>

      <p>“What are these remberries?” I asked.</p>

      <p>“Remberries are one of the high-grade specialties from around here,” he said. “Just think of them as really delicious fruit.”</p>

      <p>“‘Go get’ must mean that she went to go search for them,” I said. <em>Milianne seems to be quite the proactive kid.</em></p>

      <p>“There are two places around here where you can get remberries,” said my brother. “The first is an orchard within the capital. You can harvest there if you pay the fee of 5,000 lir per basket.”</p>

      <p><em>Isn’t that the entire amount you get at the beginning of the game?</em> I thought. <em>That’s expensive!</em></p>

      <p>“The other one is just outside the South Gate. It’s called Old Reve Orchard.”</p>

      <p>“Old Reve Orchard?” I asked.</p>

      <p>“Some things happened, and insect-type monsters have taken up living there. So it’s an abandoned orchard,” he said. “Even now, there are a lot of fruit trees growing wild there, but at the same time, it’s become a nest for monsters.”</p>

      <p>“So the stuff about bug-repellent incense must mean...” I said slowly.</p>

      <p>“Probably so.”</p>

      <p><em>That’s way too proactive!</em></p>

      <p>“Go to the safer orchard!” I shouted.</p>

      <p>“5,000 lir is asking a bit much from a child,” said my brother. “Even the market value of 50 lir for one would be tough.”</p>

      <p>“But still, that doesn’t mean...”</p>

      <p>“Old Reve Orchard, by the way, is a place players usually mistake for being beginner-friendly due to how close it is to the starting point,” he said. “However, it’s a dungeon where beginners enter and then get killed right off the bat. It’s also known as the ‘newbie killer.’”</p>

      <p><em>This couldn’t be any worse.</em></p>

      <p>I’d just realized this now, but when I’d met Liliana, she had probably been headed toward the old orchard. When Liliana had said, “Then she might already be inside,” she must have been convinced that Milianne had already entered the orchard because I hadn’t seen her after passing through the South Gate.</p>

      <p>“Well,” my brother continued, “in any case, it’d be best to clear this one quickly. It’s probably the type where you’ll fail if time elapses.”</p>

      <p>“What?” I asked.</p>

      <p>“I told you, right?” he said. “In this world, incidents are realistic and occur spontaneously. That’s why there are no guarantees that things will be fine until the player clears the quest, unlike in older games.”</p>

      <p>“Yeah, but...”</p>

      <p>“Let me tell you this from my experience as one of the starting players,” he said. “There have been examples in the past of people dying. A sage revered as a hero, the commander of the knights, and even the king of this nation — they all died.”</p>

      <p>“......” I didn’t know what to say.</p>

      <p>“Despite that, the world of <em>Infinite Dendrogram</em> carries on without a hitch,” he said. “That’s because it’s real.”</p>

      <p>I began to imagine...</p>

      <p><em>What if the girl in the picture gets attacked by monsters and tragically dies?</em> Imagining it gave me an unpleasant feeling. Thinking about Liliana caused those feelings to sink even further. <em>I know that they’re NPCs, but...</em></p>

      <p>“That’d leave a bad taste in my mouth,” I said.</p>

      <p>“Wouldn’t it?” my brother agreed. “So let’s clear it and shoot for a happy ending.”</p>

      <p>I couldn’t see my brother’s face because of the bear costume, but I had the feeling that he was smiling on the inside.</p>

      <p>Thus, my brother and my newbie self formed a party, and we set off to tackle my first quest.</p>

      <p>The quest to clear was “Search for Milianne Grandria.”</p>

      <p>The difficulty level, 5.</p>

      <p>The location was the trap dungeon “newbie killer,” Old Reve Orchard.</p>

      <p>The goal... was a happy ending.</p>

      <p><em>Start quest.</em></p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter1">
    <div class="main">
      <h1>Chapter One: Nemesis</h1>

      <p>“By the way, have you pawsed to look at your starting stats yet?” my brother asked me as we headed toward Old Reve Orchard.</p>

      <p><em>Come to think of it, not yet,</em> I realized.</p>

      <p>“Status information... Here it is.” I clicked on the option and a new window appeared displaying my stats.</p>

      <p>My level was of course 0, and I currently had no job equipped. It seemed multiple jobs could be equipped at once, and so in addition to the level for each job, there was also a total level. My level for both was still 0.</p>

      <p>The other stats displayed were HP, MP, SP, STR, END, DEX, AGI, and LUC. Each of them was fairly low; other than having 98 HP and 23 SP, the rest were all below 20. I didn’t have anything to compare them with, but those stats were probably weak.</p>

      <p><em>...But then again, I guess there’s no way a newbie at level 0 would be strong,</em> I reminded myself.</p>

      <p>“So I’ll be going into this dungeon called the ‘newbie killer’ at level 0, won’t I?” I asked.</p>

      <p>“You’ll bearly make it past zero if you don’t equip a job,” said my brother. “Do you want to get one before we go?”</p>

      <p>“...No, it doesn’t look like we have the time. I’ll go like this,” I said.</p>

      <p><em>It’d be unbearable if the girl in the picture were to die while we were doing that,</em> I thought. <em>The most important thing right now is speed.</em></p>

      <p>My brother and I talked as we ran.</p>

      <p>“Can I ask you a few things?” I asked.</p>

      <p>“I guess I can bear that.”</p>

      <p>“I didn’t see a stat for INT, so what factors into magic strength?” I asked. “There is magic in this game, right?” <em>Liliana did use healing magic, after all.</em></p>

      <p>“It’s based on your max MP and the level of the magic skill,” said my brother. “Also, the total amount of MP you pour into it. And there is no INT stat in this game, by the way. Your intelligence is the bear basics, yourself, after all.”</p>

      <p><em>That makes sense,</em> I thought. <em>I wouldn’t really get what it meant if you told me my intelligence went up.</em></p>

      <p>“Oh, and as for skills that use SP, their strength isn’t based on your SP, but on various other related stats,” my brother went on. “Well, those various stats will receive adjustments from your Embryo, so their variation will be infinite.”</p>

      <p>“That sounds complicated,” I said.</p>

      <p>“If you bear with it, I’m sure it’ll go fine! How things turn out will be a pawsitive reflection of your individuality.”</p>

      <p><em>...He’s really getting into those bear puns, isn’t he?</em></p>

      <p>“Oh, yeah. Let me give you some accessories I have.” Bro Bear handed me some items from his bag.</p>

      <p>When I looked at them, these included: ten Healing Potions that could easily heal me to max health, one Lifesaving Brooch, and four Dragonscale Ward accessories.</p>

      <p>“The Lifesaving Brooch bears the brunt of your fatal damage, but it has a 10% chance of breaking,” my brother explained. “How many times this is checked is determined by the amount of damage divided by your HP. The Dragonscale Ward will reduce incoming damage by 90%, but it’ll break after one use.”</p>

      <p><em>I see, they appear to be throwaway accessories, but they’ll definitely help.</em></p>

      <p>“This game has level and stat restrictions for equipment,” said my brother. “So I’ll beef you up with these accessories instead since they don’t have any level restrictions.”</p>

      <p><em>There are five slots for equipping accessories, so they’ll all fit perfectly.</em></p>

      <p>“Thanks, Bro... Hey that reminds me, what’s the death penalty in this game?”</p>

      <p>A death penalty: it was a feature found in many online games. To put it simply, it was some sort of demerit for a character that died. They could lose levels, for example, or have their stats lowered for a period of time.</p>

      <p><em>Since he’s trying to help me avoid dying, this game must have some kind of a death penalty,</em> I thought. This was why I wanted to ask him what that penalty was, but...</p>

      <p>“A 24 hour login ban.”</p>

      <p>The answer I received was unexpected.</p>

      <p>“...A what?” I asked.</p>

      <p>“If you die in this game, you won’t be able to log in for 24 hours in real time, or 72 hours in the game world,” he said.</p>

      <p><em>...Are they out of their minds?</em> I thought incredulously. <em>I can’t believe there’s a game that won’t let you play it as a death penalty.</em></p>

      <p>“The frightening thing about this penalty isn’t that you can’t play the game; it’s that three days will pass by in <em>Infinite Dendrogram</em> without you,” he said. “So for example, if you’re in the middle of a quest like we are, you’ll have to abandon the quest for three days. When you’re in a world as realistic as this one... that’s what’s so scary.”</p>

      <p><em>What would happen if Bro Bear and I were to leave this quest alone for three days?</em></p>

      <p>...The answer to that was obvious.</p>

      <p>“I’ll tag along and try not to die,” I said. “I’m not sure how useful I’ll be at level 0, though.”</p>

      <p><em>Or more like, I won’t be of any use at all.</em></p>

      <p>“By the way, like I mentioned earlier, Old Reve Orchard is a trap dungeon known as the ‘newbie killer,’” said my brother. “Innocent newbs starting <em>Dendro</em> without any prior knowledge enter the dungeon saying, ‘Yaay, I’m gonna go on an adventure nearby,’ and then it’s game over, they get their bear butts exposed and smacked to the extreme. They get insta-killed and can’t log in for a whole day.”</p>

      <p><em>It’s like a trauma-generating machine.</em></p>

      <p>“However, it’s strange. Why is the difficulty level 5? Based on the levels of the monsters in the dungeon... it’s too high.”</p>

      <p>As I listened to my brother mutter this, we passed through the South Gate of the Royal Capital Altea.</p>

      <p class="centerp section-marking">◇</p>

      <p>The orchard was located about ten minutes’ running distance from the South Gate. It was surrounded by a metal fence, and a worn-out sign at the entrance read, “Welcome to Reve Orchard.” The place, however, seemed long-abandoned. Plants grew wild, and the color on the sign had faded.</p>

      <p>“Well then, it’s time to storm in, but...” My brother stopped in front of the entrance to Old Reve Orchard, which was now a den of insect monsters. Right after that, a new window appeared before me.<br/><br/></p>

      <p>“Party request from Shu Starling.</p>

      <p>Will you join this party? Yes / No”<br/><br/></p>

      <p>“It’ll be easier to cover for you if I can constantly track your status,” he said.</p>

      <p>“Okay, got it.” I clicked “Yes” on the window, and as soon as I did, a screen opened up showing the status of our party. My brother’s name had been added to it as well.</p>

      <p><em>There’s space on the party screen for four more players, so this game must have a maximum party limit of six.</em></p>

      <p>Displayed along with my brother’s name were also his stats. However...</p>

      <p>“What’s going on with this?” I asked.</p>

      <p>On my brother’s status screen, everything other than his name was blacked out, including even his level and HP.</p>

      <p>“Ah. That’s the concealing ability of this suit,” he said. “If there’s a difference in level between me and an enemy or ally, then they can’t bear witness to my stats.”</p>

      <p><em>What kind of ability is that?</em> I thought. <em>That makes it harder to help with support magic... Not that I have any... Oh, that reminds me.</em></p>

      <p>“Hey Bro, I didn’t get the chance to ask this because of the quest, but why are you wearing a bear costume?” I asked.</p>

      <p>My brother rubbed the eyes of his costume with his bear fingers. “It’s a story that’ll leave us both in tears.”</p>

      <p>“We’re kind of busy, so hurry up and answer my question,” I said.</p>

      <p>“My little brother is looking at me so coldly...” he grumbled to himself, before gradually starting to speak. “So, you know how there’s a part where you create your character, right?”</p>

      <p>“Yeah.”</p>

      <p>“It was a pain to make it from scratch, so I tried to do it using myself as the base.”</p>

      <p>“So did I.”</p>

      <p>“Well, I made a bit of a mistake...”</p>

      <p>“A mistake...” I began. “What did you do?”</p>

      <p>“I accidentally confirmed it without making any changes.”</p>

      <p>“...Oh boy.”</p>

      <p>So in other words, inside the suit was my brother’s actual face and appearance. Playing an online game with your actual face was a risky thing to do. This was especially true in my brother’s case.</p>

      <p><em>Yeah, with that you’d have no choice but to wear something like a suit.</em></p>

      <p>“By the way, the reason I chose this kingdom is because I saw a store in the capital selling costumes,” he said.</p>

      <p>“Oh, so that’s why you didn’t go somewhere that was more along your tastes, like Dryfe or Granvaloa,” I said.</p>

      <p>“Drastic times called for drastic measures... Oh, and by the way, costume number one cost 4,980 lir.”</p>

      <p>“That’s almost the entire starting amount!” I cried. <em>Just how exactly did he get by in the beginning?!</em></p>

      <p>“On top of that, it was a gag item with no defense,” he said. “I was one of the first players, so there was no information available. Really, from that hopeless start, it’s been a path full of hardship until I got a hold of this costume.”</p>

      <p>“So what abilities does this one have?” I asked.</p>

      <p>“Take a look.”<br/><br/></p>

      <p>“Ultimate Suit Series: Hind Bear</p>

      <p>Ancient Legendary Armor</p>

      <p>DEF +903 (beary high)</p>

      <p>Skills:</p>

      <p>Disguise: completely hides your stats from anyone with a total level of 100 less than yours.</p>

      <p>Built-In AC: a built-in AC designed for any environment. The perfect temperature any time, any place.</p>

      <p>Power Assist: supports movement with muscle motors. STR +903.</p>

      <p>Bullet-Proof Made: able to withstand even crossfire. Reduces damage from physical ranged attacks by 903.</p>

      <p>Knife-Proof Made: feel safe on even the days with a lot of assassins. Reduces damage from physical close-ranged attacks by 903.</p>

      <p>Utility Bear Hands: mysteriously, these hands can properly grab things, and they can be used quite skillfully. Increased damage to fish and insect monsters.</p>

      <p>????: ■”<br/><br/></p>

      <p><em>What’s with this overly high-spec gag item?</em></p>

      <p>“What’s ‘+903 (beary high)’ supposed to mean?” I asked. “Is it actually as high as that implies, though? Wait, what level are you anyway, Bro Bear?”</p>

      <p><em>I can’t see his stats at all right now, so at the very least, his total level should be over 100, but...</em></p>

      <p>“That’s a bearied se-cr-et,” he said.</p>

      <p><em>Man, that’s irritating.</em></p>

      <p>“All right then, that’s enough of our comedy skit for now. Let’s go save the girl.”</p>

      <p>“...About 90% of the material came from you, Bro Bear, but I agree,” I said. “Let’s go.”</p>

      <p>We made our way into Old Reve Orchard. Once inside, we followed a path of weeds and broken signs. On one of the signs was written, “500 metels to remberry field.”</p>

      <p>“I take it that means 500 meters?” I asked.</p>

      <p>“Pretty easy to understand, isn’t it?” my brother agreed. “Also... have you noticed?”</p>

      <p>“...The sound, right?” I asked. “I’ve been hearing it for a while now.”</p>

      <p>From the direction the sign pointed in, I could hear clashing sounds and the cries of something inhuman. I couldn’t see anything due to all the plants in the way; however, Liliana, who’d entered the dungeon ahead of us, was without a doubt fighting something.</p>

      <p>That was when I realized that the sound of battle could only be heard from the remberry field, while everywhere else was quiet.</p>

      <p>“Are there no other players here?” I asked.</p>

      <p>“Ahh, there are a lot of people with trauma from this dungeon,” said my brother. “On top of that, the drop items and materials you can gather at these levels aren’t all that great, either. Also, the insects attack in swarms, and a lot of them can cause Poison or Paralyze, so a counter for status effects is a must.”</p>

      <p><em>I guess it’s what you’d call an unpopular hunting ground.</em></p>

      <p>“Well, thanks to that, it does make it easier for me to fight...” my brother muttered. “Baldr, activate in second form.”</p>

      <p>“Ready.” An electronic voice I hadn’t heard before answered him.</p>

      <p>The back of my brother’s left hand began to glow through his costume, and then something suddenly flew out from it. The bear’s silhouette now had the following strange additions to it: a ring of gun barrels, a motorized mechanism for quick reloading, an ammunition belt, and a giant drum-like magazine.</p>

      <p>Right there before me was a heavy firearm known as the Gatling gun.</p>

      <p>“...Isn’t this game supposed to be primarily fantasy-based?” I asked. As I looked at my brother’s Embryo, which was likely a Type Arms, I couldn’t help but ask this question.</p>

      <p><em>I envisioned Type Arms to be more, you know, like a demon sword or a demon spear. Is something like a Gatling gun allowed?</em> I wondered.</p>

      <p>“The machine Imperium Dryfe also exists in this world, so my Embryo is just fine.” Bro Bear laughed as he hoisted the drum magazine on his back and lifted the barrel of the Gatling gun under his right arm.</p>

      <p>As I stared, somewhat shocked at the surreal sight of him...</p>

      <p>“KIKIKI...”</p>

      <p>“CHIKI... CHIKI...”</p>

      <p>Bee and ant-type insect monsters had begun to swarm around us.</p>

      <p>“All right then, let’s bear-eak our way through to the remberry field,” Bro Bear said, as he readied his Gatling gun... and fired away. “YEAAAAAAAAAAAAAHHHHHHHHH!”</p>

      <p>In the next instant, the sound of explosions roared about us. The insect monsters were smashed to pieces, and their bodily fluids were scattered all around.</p>

      <p>The gun barrel spun, and each bullet it spit out added to the number of corpses. As soon as the monsters fell to the ground, they turned into specks of light and disappeared.</p>

      <p>It was a one-sided killing spree. Bro Bear mowed down the monsters faster than they could appear. In under a minute, a few thousand empty cartridges had been ejected from the Gatling gun.</p>

      <p>Normally, there would be no way he could hold and fire something that heavy-looking. However, based on what he had showed me earlier, his costume was essentially a power suit.</p>

      <p><em>His STR is at least ninety times higher than mine, so that might be why it’s possible,</em> I thought. <em>Even so, it’s bizarre for him to be shooting while walking.</em></p>

      <p>The reason he didn’t run out of ammo while firing at that pace was probably because his Gatling gun was an Embryo. It was likely using some sort of mysterious power.</p>

      <p><em>Seeing him carry a Gatling gun and rapidly fire like that... It’s almost like that one scene from that old, famous movie,</em> I thought. <em>I think it was the second film in a series about cyborgs, and the most well-known title of an actor who later became a state governor.</em></p>

      <p><em>Well, given that it’s a bear costume doing it and not a muscle-bulging, macho man actor, it’d probably turn into a C-class movie.</em></p>

      <p>“In any case, it really doesn’t look like I’ll be of any use...” I said. If I were to carelessly get out in front, I would probably end up like Swiss cheese in an instant.</p>

      <p>“Oh, you can ignore the drop items. I want you to stick right behind me,” said my brother. He was referring to the drop items that had remained behind after the monsters disappeared.</p>

      <p><em>Parts like this are really game-like.</em></p>

      <p>“Gotcha,” I said. “Hm? Isn’t this situation kind of like...”</p>

      <p>It was a situation found in a lot in games. The low-level player character would get help in the beginning from a high-level character and proceed through the game. This character would be really powerful and helpful, but would usually end up dying. The death would sometimes be used to close out the opening act.</p>

      <p>“‘Uuuuuurgh,’ I think it is,” I said. “That brings back memories.”</p>

      <p>“...Wait, I’d be the one that dies in that scenario.” My brother’s voice sounded unsettled.</p>

      <p>It was hard to tell if we were in battle, working, or doing a comedy skit, but we traversed the 500 meters and arrived at the remberry field.</p>

      <p class="centerp section-marking">◇</p>

      <p>“Who’s there?! Y-You’re...” As expected, Liliana was engaged in battle at the remberry field with a swarm of insect monsters. She was taking on a countless number of them while protecting her younger sister behind her.</p>

      <p>“Yes, we made it!” I said, relieved.</p>

      <p>“The bear cavalry (no horses) has arrived!” my brother agreed.</p>

      <p>He fired his Gatling gun again in grand style. The insects that had been encircling Liliana started to fall at an incredible rate.</p>

      <p>I was worried he might hit the two of them, but he handled his Gatling gun skillfully, and there wasn’t even a ricochet. He easily wiped out the encirclement of insects, and we made it safely over to the two sisters.</p>

      <p>“Are you all right?” I asked, repeating back the same words Liliana had said to me earlier.</p>

      <p>“You’re the one from before... Why are you here?” She looked at me in surprise.</p>

      <p><em>Hm? She’s reacting as if she just realized who I was,</em> I thought. <em>So then when she said “Y-You’re” a moment ago, was that directed at... my brother?</em></p>

      <p>“And you, as well...” Liliana said. “Really, why?”</p>

      <p>“We came to help,” said my brother. “My little brother was saying, ‘I can’t leave them alone! I’m going to go rescue her, no matter what!’ so I figured I’d bear with him.”</p>

      <p><em>I didn’t say that!</em> I thought. <em>I don’t recall saying anything that embarrassing!</em></p>

      <p>“Your little brother... so that’s why,” Liliana whispered to herself as if she had understood something.</p>

      <p><em>The mood here... I think Liliana and my brother just might know each other.</em></p>

      <p>Liliana turned to me and bowed deeply. “Thank you very much. If you two hadn’t come, I wouldn’t have been able to protect my sister, Milia.”</p>

      <p>“O-Oh, no,” I said. “All I did was watch from behind...”</p>

      <p>“Still, please let me thank you,” she said. “Even though I caused you trouble, you brought reinforcements to come save me... I won’t forget this kind deed.”</p>

      <p>Her words went beyond making me feel embarrassed; they made me feel a sense of guilt. The quest had been automatically accepted for me, and all I had done was stick safely behind my brother like a parasite.</p>

      <p>That guilt caused me to avert my gaze from Liliana, and when I did, it landed on her sister, Milianne.</p>

      <p><em>She’s as cute as she was in the picture. No, even more so.</em></p>

      <p>“Loli?” my brother asked. “Lolicon?”</p>

      <p><em>No I’m not!</em> I fumed.</p>

      <p>“Sniffle, sniffle...” Milianne was crying.</p>

      <p><em>Well, yeah, she would be,</em> I thought. <em>She was surrounded by a bunch of insect monsters, and her life was even in danger.</em></p>

      <p>However, given that there were still about five fruits — most likely the remberries — inside the basket she was holding, she really had her stuff together.</p>

      <p>“A-Anyway, let’s get out of here,” I suggested. “It’ll be dangerous if more monsters come.”</p>

      <p>“Very well,” replied Liliana, and a change occurred on my menu screen.<br/><br/></p>

      <p>“NPCs have joined your party.</p>

      <p>Liliana Grandria has joined.</p>

      <p>Milianne Grandria has joined.”<br/><br/></p>

      <p><em>Ahh, NPCs can join parties, too. And their stats are...</em></p>

      <p>Milianne’s stats were lower than mine were at level 0. Liliana’s stats, however, were very high. Her Paladin level was 60, and her total level was 210. She even had over 5,000 HP.</p>

      <p><em>Well, then again, she is the Vice Commander of the Knights of the Royal Guard, which means she’s ranked second out of all the knights in this kingdom,</em> I thought. <em>So it shouldn’t be a surprise she’s this strong.</em></p>

      <p>I then noticed that Bro Bear was silent and his expression was serious. I couldn’t actually see it directly, but given how long I had known him, I could tell from the mood.</p>

      <p>“Ray, the quest still hasn’t been completed, has it?” he asked.</p>

      <p>“Um, yeah,” I said. “It hasn’t changed at all.”</p>

      <p>“I see.” Bro Bear readied his Gatling gun and looked about our surroundings. He appeared far more serious than when he had been mowing down insects earlier.</p>

      <p>“Bro...?”</p>

      <p>“Ray, the difficulty levels of quests are calculated individually by the control AIs in charge of them. The control AI takes into account information about the surrounding environment and people related to the quest.”</p>

      <p>“What?” I asked.</p>

      <p><em>So the difficulties are calculated with information on the environment and related people? Control AIs really are impressive to be able to do that for every quest... but what does that have to do with anything?</em></p>

      <p>“So, I was thinking the difficulty for this quest was high due to a time limit.” My brother started to put his thoughts into words bit by bit. “I thought we cleared it easily because I’m suited for fighting against large numbers, but...”</p>

      <p>His gaze fell to one spot on the ground.</p>

      <p>“...we met up with Liliana and eliminated the swarm of insects. And yet, the quest still isn’t complete. In other words, this quest has a difficultly of 5 even after taking into account that Liliana’s total level is 210.”</p>

      <p>Right after he said this, the ground where he was looking exploded. Something huge and long flew out from it.</p>

      <p>“GYULUUUUUUUUAAAAAAA!” It was a giant centipede almost thirty meters long. “Clink!”</p>

      <p>The giant centipede had large, stag beetle-like jaws growing on its face in all four directions. Its skin was also covered in reptile-like scales. The bullet my brother had swiftly fired at it had been easily repelled.</p>

      <p>It was completely different from the bugs my brother had been trampling over earlier. Even a beginner like me could tell.</p>

      <p><em>This thing is strong.</em></p>

      <p>I could hear Liliana’s shocked voice beside me. “A Demi-Dragon Worm!”</p>

      <p>“GIIIEEEEAAAAAAAA!” The ground exploded again, and another Demi-Dragon Worm appeared.</p>

      <p>“A Demi-Dragon class monster, huh...” my brother said. “I get it now. If we need to protect this girl while facing off against several of these, then I can see why it has this difficulty rating even with some help. But even so!”</p>

      <p>His voice sounded cheerful, almost as if his worries had disappeared. I, on the other hand, was intimidated by the two monsters and was at a loss for words.</p>

      <p>“If you’re up against me, that amount just isn’t going to cut it!” My brother then lifted up both his arms and said, “It’d be fine to just smash them to pieces, but this is a good opportunity! Baldr! Activate your fourth fo—”</p>

      <p>“GIIIEEEAAALEAAAAAA!”</p>

      <p>“GYULUUUUUUUUAAAAAAA!”</p>

      <p>“GYUIIILUUUUAAAAAAAAAA!”</p>

      <p>“GYULUUUUUUUULOOAAAAAAA!”</p>

      <p>Just then, four more Demi-Dragon Worms appeared from the ground in each direction, trapping my brother.</p>

      <p>“Hey, wait, I can bearly move right now!” he protested. “Really though, there are still—” The newly appeared Demi-Dragon Worms locked their jaws onto my brother and then disappeared into the ground.</p>

      <p>“.........Huh?” I couldn’t process what I had just seen.</p>

      <p>“Ah!” gasped Liliana, as she bit her lip at the unexpected turn of events.</p>

      <p>I checked the party status, but my brother’s stats were still blacked out. I couldn’t tell if he was alive or dead.</p>

      <p>“Um, Bro, I’m sorry for triggering a flag, but... isn’t this a bit sudden?” I hesitated.</p>

      <p>With my brother missing, the remaining two Demi-Dragon Worms drew toward us.</p>

      <p>I was terrified. In an instant, I had been cast from the safe zone behind my brother into danger.</p>

      <p>The biggest animal I had ever seen in my life was an elephant. Now, monsters far larger than that were bearing down toward me with cold hostility. Even if I knew this was a game, my legs shook.</p>

      <p>“...There’s something I wish to ask of you,” Liliana said to me.</p>

      <p>“Wh-What is it?”</p>

      <p>“I’ll hold back one of them. Both, if possible. During that time, could you please take my sister to safety?”</p>

      <p>“But...” I paused.</p>

      <p><em>There are two of them,</em> I thought. <em>Even for Liliana, by herself that’d be...</em></p>

      <p><em>No, I’m thinking wrong,</em> I reminded myself. <em>At level 0, I won’t be of any help to her. In fact, I’d just get in her way if I stayed behind. That would put not only me, but Milianne in danger as well.</em></p>

      <p>“...All right.” I pulled Milianne’s hand and started running. Behind us, the battle between Liliana and the Demi-Dragon Worms commenced.</p>

      <p class="centerp section-marking">◇</p>

      <p>The path where my brother had just recently mowed down enemies with his Gatling gun was clear of monsters.</p>

      <p><em>We can make it to the exit in one go like this,</em> I thought. <em>I have to say, though...</em> I only realized this after running desperately, but this game also incorporates the concept of fatigue.</p>

      <p>On top of that, my legs were shaking, and the game was kind enough to display that I had the status effect Fear. <em>Infinite Dendrogram’s</em> absolute realism even went so far as to convey the terror of a giant creature.</p>

      <p>Even so, I ran, making sure that I never let go of Milianne’s hand.</p>

      <p>“Heh... Heh...” Following behind me, Milianne also ran in earnest. Her face was full of dread.</p>

      <p>Both scared, we continued to run.</p>

      <p>“By the way...” I said to Milianne. It was an attempt to help ease our worries, if even for a bit. I wasn’t sure myself just exactly whose mind I was trying to put at ease though. “Milianne... Milia, so why did you come all the way here to get remberries?”</p>

      <p>I asked her this half out of curiosity; the other half was for distraction.</p>

      <p>“T-Today is Sister’s birthday... She loves remberry cake, so I thought I would make it for her...” she stuttered.</p>

      <p>“I see,” I said.</p>

      <p>“But there weren’t any for sale at the shops, so I didn’t know what to do,” she said. “And then, a guy with glasses told me, ‘If you have this incense, you can go get some from the orchard outside.’”</p>

      <p><em>...So this is that four eyes’ fault,</em> I thought. <em>I don’t know what he was thinking telling her that, but I’d like to punch that idiot for sending a kid to a place this dangerous.</em></p>

      <p>“Sister came to get me, but the effect of the incense wore off...” she said.</p>

      <p>We had covered half the distance while we were talking.</p>

      <p><em>Just the other half left,</em> I thought. <em>At this rate, we’ll make it the rest of the way.</em></p>

      <p>“...uluuuu!” Just then, I heard a roar and felt the ground tremble behind me.</p>

      <p>I made the decision on the spur of the moment. I picked up Milianne and jumped to the side.</p>

      <p>In the next instant, a Demi-Dragon Worm burst from the ground and chomped its jaws as it passed through the area where we had just been running.</p>

      <p>“She couldn’t have...!” An unpleasant thought compelled me to turn around, but I could still hear the sounds of battle.</p>

      <p>Liliana was still fighting.</p>

      <p><em>Could this be one of the two she was fighting, and it left to chase after us?</em> I wondered. <em>Or maybe it’s one of the ones that dragged my brother underground? The real issue is that, no matter which one it is, I don’t have a way of fighting back.</em></p>

      <p>My stats were still at their default levels, and the Embryo on my left hand still hadn’t hatched. <em>Even if it did hatch now, I can’t imagine a newly-hatched Embryo would be able to stand up against an enemy that my brother’s Gatling gun didn’t work against.</em></p>

      <p>My heart pounded in terror and unease, while a cold sweat broke out on my forehead and down my back. I thought I might die just from how realistic it felt.</p>

      <p>“GYULUUUUUUUUUEAAAAA!” The Demi-Dragon Worm exposed its long body from the ground and roared, not in an attempt to intimidate us, but rather in triumphant laughter.</p>

      <p>“...The end of the road, huh?” I muttered.</p>

      <p><em>The “newbie killer,” Old Reve Orchard,</em> I thought. <em>It looks like I’ll also experience my first death here.</em></p>

      <p><em>But...</em></p>

      <p>“W-Waaah...” Milianne was crying in my arms.</p>

      <p><em>She’s an NPC... a tian. Unlike me, if she dies, she won’t come back.</em> The thought left me unsettled. <em>Bro said that even the king died. I’m sure there aren’t any special circumstances just for her. In this world, she’ll die just like anybody else.</em></p>

      <p>“...Like I said, that’d leave a bad taste in my mouth!” I took off the Lifesaving Brooch and equipped it to Milianne. “Milia, can you run to the entrance from here by yourself?”</p>

      <p>“...What?” She looked up at me with unease.</p>

      <p>“I have to go and beat up this damn centipede for a bit,” I said.</p>

      <p>Right after I said this, the Demi-Dragon Worm charged at us. I pushed Milianne away, and like getting hit by a truck, I flew into the air.</p>

      <p>“Gah... hah...”</p>

      <p>It was a powerful impact, even worse than when I had collided with Liliana back in the town.</p>

      <p>However, the damage had been 93. My remaining HP was 5... <em>I’m still alive.</em></p>

      <p>One of the four Dragonscale Wards I had equipped had broken and disappeared. I’d survived thanks to its ability to reduce the damage of the attack by 90%.</p>

      <p>I forced my numb body to move and drank a Healing Potion from the item menu. My HP was fully restored.</p>

      <p><em>I can still move.</em></p>

      <p>As I turned around, I saw that Milianne was still standing there.</p>

      <p>“Go! I’ll take care of this guy!” I shouted.</p>

      <p>It was a big lie; there was nothing I could do. However, I could at least buy some time. If she could run away during that time, that was all that mattered.</p>

      <p>Milianne stood up and ran for the exit.</p>

      <p><em>If she can get to the exit and return to the field, there should be other players and tians there. This is for the best,</em> I thought, and was then immediately flung into the air again.</p>

      <p>It was my second cycle of near-death, the Dragonscale breaking, healing with a potion, and then recovery.</p>

      <p>“Hah! If you include the death penalty, I can take another three of your hits, you damn centipede!” I shouted.</p>

      <p>The third attack came, but this time I avoided it. <em>Even at default stats, if I move, I can dodge it.</em></p>

      <p>However...</p>

      <p>“What?!” I was caught by its tail and knocked aside.</p>

      <p>The damage was nearly the same. My HP was dangerously low again, and another Dragonscale broke.</p>

      <p>“Damn... it.”</p>

      <p><em>Only one more left.</em></p>

      <p>Milianne still hadn’t made it to the exit.</p>

      <p><em>At the very least, I have to bide my time until then,</em> I told myself. As I thought this, the Demi-Dragon Worm changed its focus of attack.</p>

      <p>“GYUUUUEAAAA!” It twisted its large body around and laid its sights on Milianne.</p>

      <p>“Hey, you bastard! What are you looking at?” I shouted.</p>

      <p>It ignored me and charged after her.</p>

      <p>“Waaaiiiitttt!”</p>

      <p>I chased after it, but I couldn’t catch up with it at my speed. The large Demi-Dragon Worm struck Milianne, sending her small body floating upward into the air like a leaf. The basket she had been holding so dearly was forced from her hands, and tumbled to the ground.</p>

      <p>“Aaaaahhh!” I dived headfirst and caught her falling body. There was a large impact as I caught her, and the last Dragonscale shattered.</p>

      <p><em>That’s not the real issue right now.</em></p>

      <p>I was frightened to do it, but I looked at Milianne’s face. A pain different from physical pain was stinging at my heart.</p>

      <p>She was unconscious... but unhurt. In exchange, the Lifesaving Brooch I had placed on her had shattered.</p>

      <p><em>It apparently works even when equipped to Milianne,</em> I thought, relieved. <em>However, now that the brooch is broken, there won’t be a next time.</em></p>

      <p>My last Dragonscale was also gone. We no longer had any means to withstand the Demi-Dragon Worm’s attack.</p>

      <p><em>Liliana’s still fighting,</em> I thought. <em>Bro still hasn’t come back since disappearing into the ground... I’m all out of options.</em></p>

      <p>“GYUUUUAAAAAAAA!” The monster in front of me had become irritated at its tough prey, but it now appeared to be shaking in joy at finally being able to finish things.</p>

      <p>In a last-ditch effort, I tried drawing the knife I had received with my starting equipment. However, after removing the knife from its sheath, I discovered that its blade was broken. Before I could even use it, it seemed the repeated collisions had caused the knife to break.</p>

      <p>The chances for us to survive were now at zero.</p>

      <p>I looked at the unconscious girl in my arms.</p>

      <p>Her weight, her warmth, her breathing, and the emotions she had showed me — they were no different from real life. She was alive, so realistically alive.</p>

      <p>And like death in the real world, that life was about to be lost.</p>

      <p>“...Damn it.” I couldn’t give up.</p>

      <p>For me, this world was a game. It wasn’t a problem if I died.</p>

      <p><em>But even if I know this world is a game, it’d leave a bad taste in my mouth if this girl were to disappear from it forever.</em> I clenched my fist in frustration.</p>

      <p>On the back of that hand... was my Embryo in its egg-like zeroth form.</p>

      <p>“Hey...”</p>

      <p><em>I...</em></p>

      <p>“If they say an Embryo is supposed to offer a player... If you’re supposed to offer me infinite possibility...” I pleaded, “...then give me that possibility.”</p>

      <p>The monster in front of me raised its head to deliver the final blow.</p>

      <p>“Give me the possibility for a happy ending, the possibility to save this girl!” I cried.</p>

      <p>To my left hand I pleaded. To the incarnation of this world of possibilities known as <em>Infinite Dendrogram</em>, I pleaded from the bottom of my heart.</p>

      <p>“Wake up already and give me even 1% of a possibility!” I cried.</p>

      <p>The Demi-Dragon Worm launched its last attack.</p>

      <p>“You’re an unexpectedly overbearing Master, aren’t you?” said a voice. “However, I am one that is born from you. I don’t dislike that part about you.”</p>

      <p>In an instant, the fatal charge was blocked by someone.</p>

      <p>“...Huh?”</p>

      <p>Just like when my brother had disappeared into the ground, I couldn’t process what was happening before my eyes.</p>

      <p>I couldn’t understand why in front of me was not the tragedy that should have taken place, but instead, a miracle that shouldn’t have occurred.</p>

      <p>The Demi-Dragon Worm that was supposed to kill us had been repelled by a wall of light and was bent over backwards.</p>

      <p>My Embryo had vanished from the back of my left hand, and in its place was a glowing, blue crest.</p>

      <p>Between the Demi-Dragon Worm and us now stood a girl I didn’t know. Her jet black hair waved in the wind, and her skin glistened like white porcelain. She swung her gothic skirt made of black fabric and white frills as she turned to look at me. Her eyes were made of the black of night and a white that reminded me of the stars.</p>

      <p>“Morning,” was the first thing she said.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert2">
    <img alt="insert2" class="insert" src="../Images/Insert2.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter11">
    <div class="main">
      <p>I couldn’t say anything.</p>

      <p>“Hm, you seem out of it,” she said. “Good grief, aren’t you something? I forced myself to wake up because you told me to, and yet...”</p>

      <p>The way she spoke almost made the mystique she had disappear, but her words made me think of something.</p>

      <p>“Are you my...” I began. <em>...Embryo?</em></p>

      <p>“Of course,” she said. “Well then, Master, that damn centipede is still in good health. To cheer things up in celebration of my birthday, what do you say we finish it off in style?”</p>

      <p>“How?” I burst out.</p>

      <p>Before I could even finish asking this, the girl had disappeared. She lost her human form and turned into a swarm of black, shining lights that enveloped my right arm, and then transformed into a black greatsword. It was organic and sinister looking, but in some way, still beautiful.</p>

      <p>“I’ll leave the timing to you,” she said, her voice coming from the sword. “Swing down when the damn centipede comes charging at us. We’re all going to die if you screw up, got it?”</p>

      <p>It felt like she was telling me, “I gave you your chance, now the rest is up to you.”</p>

      <p>“...Got it.” I was aware there were things that needed to be done before asking any questions.</p>

      <p>The Demi-Dragon Worm seemed to be furious as it charged at us faster than it ever had before. It was a straight shot at a speed I was able to see, but not avoid.</p>

      <p>However, I still had time to swing my sword.</p>

      <p>“The three times Master almost died, and the one attack I absorbed... The four attacks you made with everything you had...”</p>

      <p>Right before the jaws of the Demi-Dragon Worm could reach me...</p>

      <p>“I’ll double them and pay you back,” said the girl as I swung down the black greatsword.</p>

      <p>“Vengeance is Mine!” she shouted.</p>

      <p>There was an impact the moment the greatsword made contact.</p>

      <p>Then a moment of stillness.</p>

      <p>Right after, the Demi-Dragon Worm, almost as if it had been crushed by a monster several times its size, shattered into pieces starting with its head.</p>

      <p><em>Just exactly how many times today am I going to see something I struggle to understand?</em> I wondered.</p>

      <p>While I was thinking this, I looked at what was in front of me. The Demi-Dragon Worm’s large body was gradually breaking into pieces that turned into light and vanished.</p>

      <p>Behind me was Milianne, still unconscious, and beside me was the girl. She had changed back from the black sword.</p>

      <p>“Success, success,” she said happily. “Isn’t that great, Master? You grabbed hold of the possibility you’d hoped for.”</p>

      <p>“You really are my Embryo, aren’t you?” I asked.</p>

      <p>The girl lightly lifted her frilled skirt and bowed with contrived respect. “I’m Nemesis, a Type Maiden with Arms Embryo. I was born from your heart, body, and soul.” The girl — Nemesis — introduced herself like that and grinned broadly. “It’s nice to meet you, Master.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter2">
    <div class="main">
      <h1>Chapter Two: Dinner and Intentions</h1>

      <p><em>Outside Old Reve Orchard — Ray Starling</em></p>

      <p>After I defeated the Demi-Dragon Worm, I picked up its drop item, a Demi-Dragon Worm Treasure Coffer, and escaped from Old Reve Orchard while carrying Milianne.</p>

      <p>I didn’t think about going to aid Liliana.</p>

      <p>On the window screen displaying our party members’ status, I could see that she was doing fine. Moreover, there was no way that a miracle like what had just happened would occur a second or third time. I had the feeling that if I were to get full of myself now, then it would definitely ruin things.</p>

      <p>“Withdrawing is the right choice.” Nemesis, who was apparently my Embryo, explained the battle situation like so. “That tian girl won’t die. She’s the stronger of the two, so even if it takes some time, she’ll win for sure against that damn centipede.”</p>

      <p>“Even though you were just born, you seem to be more informed about this world than I am,” I said.</p>

      <p><em>It appears she even knows about Liliana, so maybe she has memories from before she hatched.</em></p>

      <p>“That’s because even if I take the form of a human, I’m not one,” she said. “Mysterious things like that exist. More importantly, Master, if you possess a thing called curiosity, then isn’t it about time you had something to ask me?”</p>

      <p>Nothing sprang to mind. I didn’t respond.</p>

      <p><em>I’m starting to get a handle on it, but Nemesis seems to be the type that likes to speak in a roundabout way,</em> I thought. <em>Well, I guess I’m not one to talk, since I’m able to understand her.</em></p>

      <p>In other words, she was saying, “Hurry up and check out my abilities on the status screen.”</p>

      <p>I looked at the status screen and saw that a category for Embryo had been added. I clicked on it right away and a window appeared displaying Nemesis and her parameters. Displayed on the window was the name “Maiden of Vengeance Nemesis,” and “Type Maiden with Arms.”</p>

      <p>Additionally, there were ATK and DEF stats listed, as well as modifiers for each stat. The ATK and DEF stats applied when equipping Nemesis as a weapon.</p>

      <p><em>So this is the same as normal weapons and armor.</em></p>

      <p>The stat modifiers, however, appeared to always be in effect just by having Nemesis around, and they apparently weren’t just a set value boost to my stats. When leveling up, increases in my stats would also take these modifiers into account.</p>

      <p>As an overall evaluation, her stats weren’t that strong. The modifier for HP was a bit high, but the rest were low. The ATK stat for equipping Nemesis was only about 50.</p>

      <p><em>It’s strange to compare this with Bro Bear’s costume, but even after taking that into account, my stats themselves don’t seem like they’ve gone up that much,</em> I thought. <em>Well, I guess that goes without saying since Nemesis was only just born as an Embryo. But in that case, how was I able to defeat the Demi-Dragon Worm?</em></p>

      <p>As I pondered this, I found the section for skills. Listed there were the two skills “Counter Absorption” and “Vengeance is Mine.”</p>

      <p>The Counter Absorption skill was the wall of light that Nemesis had used. It had a max stock of two uses, and with each use, a wall of light could be created to nullify attacks. It replenished one of its stock every 24 hours.</p>

      <p>And then there was the skill that had defeated the Demi-Dragon Worm, Vengeance is Mine.</p>

      <p>This skill took the total damage received from an enemy within 24 hours, doubled it, and then unleashed that damage as an attack that ignored all defense. Even damage that had been reduced by other skills and items, or nullified by Counter Absorption, was added to the total.</p>

      <p><em>But once the skill is used, it looks like the damage counter is reset for that enemy,</em> I noticed.</p>

      <p>“Okay, I get it now,” I said. “So that’s how I was able to defeat that Demi-Dragon Worm.”</p>

      <p><em>Although the damage was reduced by the Dragonscale Wards, I did take three of its hits,</em> I thought. <em>On top of that, Nemesis nullified one attack with her other skill, Counter Absorption. So that’s four in total, and the damage would come out to roughly 3,600. Plus, the ability for Vengeance is Mine then doubled this to around 7,200.</em></p>

      <p><em>I don’t know how much life that Demi-Dragon Worm had, but this must mean that it wasn’t more than 7,200 HP. Or maybe its head was a weak spot, and landing a direct hit on it had some effect.</em></p>

      <p>“...Even if I know how the trick worked, it’s still a miracle,” I thought aloud.</p>

      <p>The one-hit killer move had only worked because I had been weak, and my opponent had been strong. What had also played a big role was that I had overcome several near deaths thanks to the items my brother had given me. But more than anything, Nemesis’s skills had been a perfect match for the situation.</p>

      <p>“The end result sure seems convenient,” I said to myself.</p>

      <p><em>Embryos are supposed to be unique and based on things like one’s personality, biorhythm, and attributes, right?</em> I thought. <em>Looking at the results this time, it almost seems like it was set up. Also, a skill that gets stronger the more damage I take... I feel as if I’m getting treated like a huge masochist.</em></p>

      <p>“A masochist, huh... I’ll have you know, this is the result of my having observed you, Master. There were no mistakes,” said Nemesis, seemingly offended.</p>

      <p><em>Wait, can she hear my thoughts?</em></p>

      <p>“But anyway, you said ‘observed’?” I asked.</p>

      <p>“The zeroth form is a time period for Embryos to observe their Masters,” she said. “After observing their psychology and behavior, an Embryo’s first form is then born based on this.”</p>

      <p><em>I see,</em> I thought. <em>So in other words, my experiences since starting have more or less been factored in.</em></p>

      <p><em>...Now that I think about it, I collided with Liliana right after I started, and then I also fought a Demi-Dragon Worm. I feel like I’ve been taking a lot of near-fatal damage. So I guess these skills are the end result of all of that, huh?</em></p>

      <p>“Well,” continued Nemesis, “even if the experiences and behaviors are the same, there will be differences in an Embryo’s form and skills based on each Master. Also... I think Counter Absorption was derived from your personality.”</p>

      <p>“Hm?” I asked. <em>I wonder what she means by that.</em></p>

      <p>“Oh, and another thing,” she went on. “I’ll go ahead and say this myself, but a Type Maiden Embryo is quite rare, you know? You should be grateful to me and reflect upon how blessed you are.”</p>

      <p><em>Oh yeah, that’s right,</em> I realized. <em>Maiden wasn’t one of the normal categories Cheshire mentioned. She seems to be a rare type, and it’s a big help that she’s explaining various things to me, but it’s still somewhat of an iffy feeling having a girl come out of an Embryo that’s based on me.</em></p>

      <p>“Iffy? Did you say ‘iffy?’” she asked huffily.</p>

      <p><em>Ah, that’s right. She can hear my thoughts.</em></p>

      <p>“I <em>can</em> hear them!” she shouted. “Iffy? What do you mean by ‘iffy?’ You hit the jackpot with me! This beauty! This rarity! What could there be to complain about?”</p>

      <p>“No I didn’t mean that you were iffy, Nemesis, but the fact that you emerged from me, you see...”</p>

      <p>As we went back and forth, Liliana appeared from the exit of Old Reve Orchard. The armor she was clad in was dirty with mud and dust, but Liliana herself seemed to be unharmed.</p>

      <p>“Milia!” Finding us, Liliana quickly ran to our side, and after looking at her sister’s sleeping face, she let out a sigh of relief.</p>

      <p>“Thank you very much... for protecting my sister... Truly, thank you!” Liliana burst out as tears fell from her eyes.</p>

      <p>“Um, yeah...” I said. <em>This is troubling. I don’t know how to respond.</em></p>

      <p>“That’s right,” said Nemesis. “You should be grateful to my Master, and even more so to me.”</p>

      <p><em>And that’s Nemesis for you...</em></p>

      <p>“Is she your...?” asked Liliana.</p>

      <p>“Yeah, umm... my Embryo.”</p>

      <p>Liliana looked at Nemesis, slightly surprised. “I see. So, after all, as his brother, you’re also a Master chosen by an Embryo. But a Maiden, it’s almost like that...”</p>

      <p>Just as she was about to say something...</p>

      <p>“All right! I’ve escaped from the bearied underground world!” Bro Bear jumped out from the ground together with a loud sound effect.</p>

      <p>“...Ummm,” I said. <em>You were still alive, Bro? Well, his stats were displayed the whole time, just blackened out so I couldn’t tell, but still...</em></p>

      <p>For some reason, Bro Bear wasn’t carrying his Gatling gun, but instead had a shovel in his right hand.</p>

      <p><em>That can’t be how he moved through the ground, can it?</em> I wondered.</p>

      <p>“The underground tunnel is now open!” he proclaimed.</p>

      <p>Right after he said this, the ground shook slightly, and the sound of something caving in could be heard. The hole Bro Bear had come out of then closed.</p>

      <p>“And it caved in right away!”</p>

      <p><em>Oh, shut up.</em></p>

      <p>“You were all right, Bro?” I asked.</p>

      <p>“Oh yeah! Me and Baldr’s fourth form tore them to shreds!”</p>

      <p>“Fourth? Not the Gatling gun from earlier?” I asked.</p>

      <p>“That’s the second form.”</p>

      <p><em>I guess that means there are various forms.</em></p>

      <p>“For some Embryos, you can use their previous forms at will,” Nemesis chimed in. “Brother Bear’s Embryo must’ve been one of those types.”</p>

      <p><em>...Is “Brother Bear” referring to my brother?</em> I wondered.</p>

      <p>“Ray, is that blali your Embryo?” he asked me.</p>

      <p>He meant “black loli,” shortened to “blali”... <em>Neither of those terms are all that great.</em></p>

      <p>“It’s a pleasure to meet you,” she said. “I’m Nemesis, Ray Starling’s Maiden with Arms Embryo. I hope we get along, Brother Bear.”</p>

      <p><em>It appears Nemesis is determined to push through with calling him “Brother Bear.”</em></p>

      <p>“Setting that aside... Bro, if you were alive, I wish you’d come out sooner,” I said. “I was this close to dying.”</p>

      <p><em>A total of about four times, actually.</em></p>

      <p>“That would’ve been difficult,” he said. “Because the whole time, I was locked in battle underground with all the Demi-Drags.”</p>

      <p><em>All the Demi-Drags?</em></p>

      <p>“There were swarms of Demi-Drags bearied in an underground cave,” he continued. “I don’t hate bugs, but that really sent shivers down my spine.”</p>

      <p>I stayed silent.</p>

      <p><em>That thing?! Swarms of them...</em></p>

      <p><em>Good thing I didn’t stick around for long.</em></p>

      <p>“An outbreak of those centipedes... the ‘newbie killer’ is way too scary,” I said. <em>I guess that’s just what you’d expect from a trauma-generating machine.</em></p>

      <p>“Normally there shouldn’t have been even one Demi-Drag living there...” said my brother.</p>

      <p>“Huh?” I asked.</p>

      <p>“Oh, well. I took care of every one that I found, so they shouldn’t multiply anymore,” he said. “More importantly, let’s head home.”</p>

      <p>“You’re right,” I agreed. “Let’s head back.”</p>

      <p>And so like that, Nemesis, Bro Bear, Liliana, Milianne, and I all started on our way back.</p>

      <p>Due to our close proximity to the royal capital, we arrived in no time. After we passed through the gate, we then parted ways with Liliana and Milianne.</p>

      <p>Before leaving, Liliana said, “I’ll be sure to repay this debt of gratitude.”</p>

      <p>Milianne, who had woken up, gave each of us a remberry from the basket she had held onto so dearly, and said, “Thank you.”</p>

      <p>As I watched the two sisters walk home hand-in-hand...</p>

      <p>The message, “Quest ‘Search for Milianne Grandria’ has been completed,” was displayed, and I finally felt like the quest had ended.</p>

      <p>“It’s over...” I said, exhausted. <em>I feel like I’ve gone through some crazy danger and chaos right off the bat.</em></p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert3">
    <img alt="insert3" class="insert" src="../Images/Insert3.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter21">
    <div class="main">
      <p>“The reward is one remberry, huh?” asked Nemesis. “A tad shabby considering what we went through, I’d say.”</p>

      <p><em>If I recall, it’s a fruit worth about 500 yen.</em></p>

      <p>However, I felt that it had more value than that.</p>

      <p>I wiped the remberry on my clothes and took a bite. It had the taste of a strawberry and the texture of an apple, but that one bite was more delicious than either one.</p>

      <p>It was the taste of accomplishment.</p>

      <p>“All righty then, it’s time to party,” said my brother. “It’s dinnertime. Since today is Ray’s first day playing, I prepared a feast.”</p>

      <p>“You did?” I asked.</p>

      <p>“I have heaps of meats and vegetables ready. Not that bear-bones stuff, either! Top-grade stuff.”</p>

      <p>“Ohh, that sounds fascinating,” chimed in Nemesis.</p>

      <p><em>That does sound tasty,</em> I thought. <em>Nemesis seems to agree, as well... Wait, Embryos eat food too?</em></p>

      <p>“And for dessert I’ve got remberries.”</p>

      <p>“Ohhh...” I said. “Wait, what?”</p>

      <p>“For dinner, I bought up all the remberries available at the market this morning. It’s all-you-can-eat.”</p>

      <p>“.........You.”</p>

      <p><em>If I remember correctly, the reason Milianne went to Old Reve Orchard was because all the remberries were sold out, right?</em> I thought. <em>Which means...</em></p>

      <p>“Damn it, Bro Bear, you were the start of this whole mess!” I couldn’t stop myself from shouting, and it echoed about the royal capital as the sun began to set.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>After chewing my brother out for a while, we made our way to the restaurant he had made reservations at. It was run by a player, and not only did they serve their own food, they also allowed customers to bring their own ingredients that chefs from the restaurant would then cook. My brother had apparently already handed over a mountain of ingredients.</p>

      <p>“All right, in celebration of Ray’s first day and completing his first quest, cheers! Thank you beary much!”</p>

      <p>“Cheers!” said Nemesis and I, as we all clinked our drinks together. My brother had a rem liqueur (made from remberry), while Nemesis and I had a drink that was similar to orange juice.</p>

      <p><em>Infinite Dendrogram</em> checked age restrictions based on each player’s citizenship, so I apparently wouldn’t be able to drink alcohol until I turned twenty. If I were to go into further detail, sexual material was R 18, while alcohol and tobacco was R 20.</p>

      <p><em>Since these things exist in the game, I’m not sure if I should call this wholesome or indecent.</em></p>

      <p>“Hmph. Thanks to my kiddy Master, I can’t drink any alcohol, either,” Nemesis griped. “Six years in our time... that’s long.”</p>

      <p>“Based on appearances, when it comes to who shouldn’t be drinking, you’re number two,” I pointed out.</p>

      <p><em>Number one would be my brother... for various reasons,</em> I thought. <em>...Don’t drink alcohol from a glass while in a bear costume.</em></p>

      <p>“Chomp, chomp,” grunted my brother. “Go on now, eat up. Meat. Eat some meat. Chomp, chomp, chomp, chomp.” My brother ate the food laid out on the table and encouraged us to do the same.</p>

      <p><em>Really, you can eat and drink while wearing that costume?</em> I thought. <em>It’s high-spec, even in weird ways.</em></p>

      <p>“Okay, okay... What is this? It’s delicious!” I cried. I was surprised at the taste after trying the unknown food I had been recommended. It had been made using ingredients and cooking methods I didn’t know, and yet it had all come together in a tastiness I could comprehend. On top of everything, it was incredibly delicious.</p>

      <p>“The owner of this place is a Star Chef,” said my brother. “It’s the top class fur the Cook Job. His cooking skills would be about a three star in our world.”</p>

      <p>“That’s amazing,” I said. “But after eating a feast like this, it’ll be tough to deal with the difference between this and what I eat in the real world.”</p>

      <p><em>It should be about dinnertime for me back home, and I should be getting hungry.</em></p>

      <p>“By the way, my body back in the real world should still be lying down, right?” I asked.</p>

      <p>“Yes. But you’ll get a notice if something happens in the real world. Like fur bathroom breaks or hunger, for example.”</p>

      <p>Right after he said this, a window appeared at the edge of my sight.<br/><br/></p>

      <p>“Notice: urge to urinate.</p>

      <p>Notice: hunger.”<br/><br/></p>

      <p><em>Oh, I see.</em> “Okay, then I’m going to log off for a bit,” I said.</p>

      <p>“All right. Try to come back as soon as you can.”</p>

      <p>“Do return quickly, Master,” said my Embryo. “I can’t help myself to the food until you come back.”</p>

      <p>“Yeah, yeah,” I said, and then selected the Logout option from the Main Menu.</p>

      <p>“Logging out. Should your next log in point be your save point or current location?”</p>

      <p>“Current location,” I replied.</p>

      <p>“Understood. We await your return.”</p>

      <p>And like that, my avatar disappeared from the world, and as if waking from a dream, my consciousness receded from <em>Infinite Dendrogram.</em></p>

      <p class="centerp section-marking">◇</p>

      <p>“...Ohh.” The first thing I did after logging out of <em>Infinite Dendrogram</em> was check the clock. The time was about three hours later than when I had started the game. I was impressed to see that time really had only advanced by a third of what I had spent in the game world.</p>

      <p>I then went to the bathroom. After that, I ate a balanced nutrition bar and drank some mineral water to replenish my body’s nutrients. Although I had eaten inside the game, my actual stomach hadn’t been filled.</p>

      <p>I checked my cellphone in case I had any missed calls or messages, but there were none. I also looked at the news on my computer, but there wasn’t anything that stood out.</p>

      <p>After about ten or so minutes, I logged back in.</p>

      <p class="centerp section-marking">◇</p>

      <p>“Welcome back.”</p>

      <p>“...You,” I said.</p>

      <p>Upon arriving back, I saw that the food on the table was all different. It appeared that he’d eaten everything that had been there initially.</p>

      <p><em>...For him to eat all that food by himself... is my brother really a bear?</em> I wondered.</p>

      <p>“Waahh?! The a la carte I was looking forward to is gone!” As I logged in, Nemesis materialized and let out a scream.</p>

      <p>“Don’t worry,” said my brother. “There’s still plenty of food left. What you’ve seen so far is only about 10% of it.”</p>

      <p>“That’s too much! Just how many people is this for?” I exclaimed.</p>

      <p><em>If Nemesis hadn’t been born, then it would’ve been just the two of us. Why did he prepare so much?!</em></p>

      <p>“...Oh well,” I said finally. “By the way, Bro, I still have a few things I want to ask you.”</p>

      <p>“How I got this costume?”</p>

      <p>“No... well, I am a bit interested, but no.”</p>

      <p>There were two system-related things and one thing about Liliana that I was curious about. <em>I guess I’ll start with the easier questions.</em></p>

      <p>“Embryos change form as they evolve, don’t they?” I asked.</p>

      <p>“That’s right. My Baldr increased its weapon-y-ness. It also got beary much bigger.”</p>

      <p><em>I thought that Gatling gun was quite large, but... that was only its second form, right? Anything bigger than that and I don’t think you’d be able to carry it.</em></p>

      <p>“By the way, I wasn’t able to show it to you, but the fourth form I used today is a tank,” he said.</p>

      <p>“A tank?!” <em>Is that even allowed?</em> “So Nemesis will also eventually turn into something different from her current human form... like maybe even a tank.”</p>

      <p>Nemesis, who was eating beside me, became scared and said, “Th-That’s so ominous.”</p>

      <p>“How they evolve depends on their Master, but in your case, Nemesis will probably always be a Maiden,” said my brother. “Although the ‘with Arms’ part might change to a different type.”</p>

      <p>“Speaking of that, Nemesis turned into a sword. What would she be regarded as?” I asked.</p>

      <p>“Like I was saying, she’s a Maiden Embryo that turns into an Arms. Maidens are generally hybrids... A mix of various types.”</p>

      <p>“Really?” I asked. <em>That seems like kind of a bargain.</em></p>

      <p>After I thought this though, Nemesis complained, “What do you mean, I’m a cheap girl?!”</p>

      <p>“There’s one person I know that has a Maiden Embryo,” my brother explained. “She stayed as a Maiden while the ‘with’ part changed into various things. It’s even become a Superior Embryo now.”</p>

      <p><em>A Superior Embryo?</em></p>

      <p>“The first to third forms of an Embryo are called low-rank, while the fourth to sixth forms are called high-rank,” explained my brother. “And then the current highest level that can be reached, the seventh form, is called a Superior Embryo. It’s called this because it surpasses the limits of the high-rank forms.”</p>

      <p>“The final form... Superior Embryo,” I murmured. <em>I wonder if Nemesis will reach that one day. She’s still in her first form, though, so I don’t know how long it’ll take to reach that.</em></p>

      <p>“By the way, out of all the players, there are fewer than a hundred that have reached this form,” my brother added.</p>

      <p><em>The game has over 100,000 active players, and yet there are less than a hundred?!</em> I thought. <em>Just how difficult of a path is it?</em></p>

      <p>“Those people are way too hardcore,” I said.</p>

      <p>“It’s not like they all achieved it solely through their play time,” my brother said. “There are a lot of players who started on release day and still haven’t reached it, while there are those who were able to do it in half a year.”</p>

      <p><em>Does that mean it requires some special conditions?</em></p>

      <p>“Oh yeah, Bro, you started playing on release day,” I said. “So how far has your Embryo evolved? What form is it up to?”</p>

      <p>“That’s a bearied se-cr-et.”</p>

      <p><em>That’s annoying.</em></p>

      <p>Also, Bro Bear mostly spoke normally when he was explaining things, but used bear puns when he was teasing me. It was irritating, now that I had caught on to this.</p>

      <p>While Bro Bear and I had been talking, Nemesis had cleaned off all the food on her plate before I had even realized it.</p>

      <p><em>...We were talking about you, you know.</em></p>

      <p>“Okay, on to my next question,” I said. “It’s about our standing in this world.”</p>

      <p>“And by that you mean?”</p>

      <p>I was thinking over how Liliana had spoken and acted. “Liliana called me something like ‘a Master chosen by an Embryo,’ and not a player. I don’t really get what the circumstances are regarding that... or what the status for us as players is within the setting.”</p>

      <p><em>Somehow, I didn’t get the feeling she was thinking of me as a player in a game.</em></p>

      <p>“Hmm,” said my brother. “You can find out about that by reading the background setting on the official site, but... you’ll lose several hours of time if you do, so I’ll give you the short explanation.” My brother then began his lecture on the world’s setting.</p>

      <p>“In this world there are Masters and tians. All of us players are called Masters here. The meaning is something like, ‘One chosen by an Embryo.’ So a Master is someone who raises and uses an Embryo that possesses infinite possibilities. Due to this, a Master’s power is enormous, but in exchange, they are burdened with one condition.”</p>

      <p>“Condition?” I asked.</p>

      <p>“Their bodies are frequently spirited away to a different world.”</p>

      <p><em>...Hm?</em></p>

      <p>“A Master may vanish from this world for as little as a few minutes, or for as long as several months,” said my brother. “Also, there are times when they return to the place where they vanished, as well as times when they are flung to a special location called a save point.”</p>

      <p><em>Wait, isn’t that...</em></p>

      <p>“At the moment before death, a Master can also use the power of an Embryo to send their body to another world and survive,” said my brother. “However, if this happens, they will not return for at least three days.”</p>

      <p>“So what that means is that logging out and the death penalty for players have been incorporated into the foundation of this world?” I asked.</p>

      <p>“That’s right,” he said.</p>

      <p>“...Wow.”</p>

      <p><em>As far as I can tell from interacting with Liliana and Milianne, the way tians think is at the same level as real humans,</em> I thought. <em>So in order to allow those tians to go about without realizing this world is a game, they’ve defined how players return to the real world and their immortality as truths of this world.</em></p>

      <p><em>I see. There’s a lot more to it than I thought.</em></p>

      <p>“By the way,” my brother continued, “sometimes there are players that go around saying, ‘this world is a game,’ but the tians view them as ‘pitiable Masters that have gone mad from being sent to different worlds.’”</p>

      <p>“...Ahh,” I said.</p>

      <p>“Also, since Masters disappear so irregularly, for the most part they don’t take on important positions in the kingdom,” he added. “Even if you join the knights in order to get the job Knight, you won’t be given regular work. Instead you’ll get tasks specific to Masters.”</p>

      <p><em>In other words, you’re given jobs where it’d be fine even if you disappeared during it.</em></p>

      <p>“Well,” said my brother, “in terms of strength, we’re stronger because of our Embryos, so the jobs that get sent our way usually pay higher rewards than the ones for tians.”</p>

      <p><em>I wonder if I’ll be asked to go slay a monster by myself,</em> I thought. <em>Well, okay then, that resolved the bigger questions I had regarding the game’s system. Which just leaves...</em></p>

      <p>“Bro, did something happen between you and Liliana?” I asked.</p>

      <p>“I don’t know what you’re talking about.”</p>

      <p>“Don’t try to dodge the question. Liliana clearly knew who you were.” <em>And if I were to add to that, it didn’t feel like it was a good impression she had, either.</em> “What did you do?”</p>

      <p><em>Surely he didn’t make a move on her, right? For example, saying something like, “Yaay! It’s a real female knight! I just can’t get enough!” and then hugging her?</em></p>

      <p>“I didn’t do anything.” Contrary to my expectations, my brother answered in a serious tone. “It’s because I didn’t do anything... that she probably resents me.”</p>

      <p>“What do you mean?” I asked.</p>

      <p>“It’ll be another long story,” he said. “And unlike before, it’s not going to be a fun one.”</p>

      <p>“I don’t mind.”</p>

      <p>After I said this, my brother let out a sigh and then began to talk. “Two months ago in real time, half a year ago in <em>Dendro</em> time, there was a war. The machine Imperium Dryfe invaded the Kingdom of Altar.”</p>

      <p>The machine Imperium Dryfe: it was one of the nations a player could choose when first starting. It was at odds with this fantasy world as it had an advanced mechanical civilization.</p>

      <p><em>...Although I don’t have the right to talk about being at odds, given that I have a tank-riding bear in my family.</em></p>

      <p>“The reason given by their nation was to obtain the Kingdom of Altar’s fertile land,” my brother said. “As for the game’s side... it was a war event.”</p>

      <p>The manual had mentioned war events. They were large-scale battles between nations, and big quests with the fate of each nation on the line.</p>

      <p>“It was a large battle involving Masters and tians,” said my brother. “Well, it was a type of event that doesn’t happen very often and one of the game’s bigger features, but...” he sighed. “The result was a crushing defeat for the Kingdom of Altar. A third of our territory was lost, and among tians, the court magician Arch Wiseman, half of the knights, and the king died. Put simply, many of the key people running this kingdom perished in battle.”</p>

      <p>“...Why did they lose so badly? Is Dryfe that powerful?” I asked.</p>

      <p><em>No, that’s hard to believe,</em> I thought. <em>It’d be different in real life, but since this is a game, I’m sure they’ve taken measures to balance this.</em></p>

      <p>“The strength of both countries was essentially even,” he answered. “This includes the nations’ power, the soldiers’ levels, and the fighting ability of important tians. However, the strength of Masters on top of that is a different story.”</p>

      <p>“So you’re saying they lost to Dryfe because of the difference in the number of players?” I asked.</p>

      <p><em>Dryfe certainly seems like a nation where those who like it would really like it, so maybe a bunch of players joined it,</em> I thought. <em>...No, that can’t be it. If that were the case, this kingdom would also...</em></p>

      <p>“The reason they lost is because out of all the Masters that were eligible to join the war, most didn’t participate,” he said.</p>

      <p>“What?” It was an answer I didn’t expect.</p>

      <p><em>The fate of the kingdom was at stake, and it was a big-time event, yet they didn’t participate?</em></p>

      <p>“The king of Altar was, how to put it, an old-fashioned person,” my brother said. “He said, ‘This is a crisis for our kingdom. Warriors of this nation, now is the time to rise up!’ It was great that he gave this speech and joined the front-lines, but that was it.”</p>

      <p>“That was it?” I asked.</p>

      <p>“There were no rewards. Essentially, he felt that if you belong to this nation, then it’s a given that you should rise up during its crisis.”</p>

      <p><em>...I get that the fate of the kingdom was at stake, but I still feel that’s being a bit cheap,</em> I thought. <em>Is that how it’s normally done?</em></p>

      <p>“Of course, for Masters... for players, they’re enjoying this world but they aren’t staking their lives on this game,” my brother said. “If they die, they just can’t log back in for 24 hours. That’s why even if the kingdom was in a crisis, there were many who thought that if there wasn’t anything to gain, then there wasn’t any meaning in participating.”</p>

      <p><em>I would be just the opposite,</em> I thought. <em>If the login restriction was the only negative that came from dying, then I would consider joining the war, but I guess everyone thinks differently. There is the cost of the healing items you use during battle, and it’d be a huge minus if you fought some strong enemy and your equipment got destroyed.</em></p>

      <p>“Regarding this issue, the fact that Dryfe on the other side clearly stated their rewards was a big factor,” he explained, and went on to describe them.</p>

      <p>Apparently they had been quite exceptional.</p>

      <p>They had offered 5,000 lir for every Kingdom of Altar soldier defeated. For each Embryo holder — in other words, each Master — the reward had been 50,000 lir. In addition to this, they had offered various rewards for defeating key people, such as rare items and a privileged status within the nation.</p>

      <p>As a result, the morale of Dryfe’s players had risen, while the motivation of players in the Kingdom of Altar had dropped considerably.</p>

      <p>“There were even some players saying things like, ‘I want to fight on Dryfe’s side,’ and ‘There might be a rare event if this kingdom gets destroyed,’” my brother said.</p>

      <p>I wasn’t sure what to say. <em>As a gamer, I can’t say I don’t understand how they feel. I can understand them, but...</em></p>

      <p>“And the real decisive blow for the crushing loss was that the Kingdom of Altar’s Big Three — the top players for the kill rankings, duel rankings, and clan rankings — all passed on participating.”</p>

      <p>“Rankings?” I asked. “They have those?”</p>

      <p>“That over there,” he said and pointed outside the window.</p>

      <p>This restaurant faced the square with the water fountain where I had met up with my brother. He pointed at a splendid-looking notice board in front of the water fountain.</p>

      <p>“That’s the Kingdom of Altar’s ranking board. It’s updated every three months in game time. There are the kill rankings where you compete with your accomplishments defeating monsters. Then there are the duel rankings for PvP achievements, and the clan rankings that compare the size of clans. The top thirty ranking players for each of these is listed there.”</p>

      <p>“Hmm,” I said.</p>

      <p>“And this part is important: the only players that can participate in wars are the ones in those rankings. As for the clan rankings, if you’re a member of a clan within the top thirty, then you can participate. So you could temporarily join a clan as a mercenary and fight in a war.”</p>

      <p><em>So in any case, that means a player can’t fight in wars unless they make it into those rankings.</em></p>

      <p>And at the time of the last war, the top-ranking players for each category, known as the Big Three, had supposedly said the following when the kingdom sought their participation:</p>

      <p>The top of the kill rankings, King of Destruction (name unknown), had said, “I don’t want to participate in a big event and carelessly expose my face.”</p>

      <p>The top of the duel rankings, Over Gladiator Figaro, had said, “I’m not interested in sloppy fights.”</p>

      <p>The leader of the top clan on the clan rankings, High Priestess Tsukuyo Fuso of The Lunar Society, had said, “We were unable to reach an agreement with the Kingdom of Altar.”</p>

      <p>As a result, the other ranking players’ already low motivation had been brought down even further.</p>

      <p><em>I’m sure they could see it’d be a losing battle,</em> I thought. And like that, the war had started without many of the ranking players.</p>

      <p>The ones that had participated had included some of the ranking clans, players that had temporarily joined them, such as members of fan clubs for popular tians like Liliana, as well as naive players.</p>

      <p>The result had been a terrible sight.</p>

      <p>The scene on the battlefield could only have been described as a massacre. The overall number of players had been disparate, and most devastating of all was that the top-ranking players on Dryfe’s side had all participated.</p>

      <p>Top of the Dryfe Imperium’s kill rankings, King of Beasts.</p>

      <p>Top of the Dryfe Imperium’s duel rankings, Hell General Logan Goddhart.</p>

      <p>Top of the Dryfe Imperium’s clan rankings, Giga Professor Mr. Franklin, leader of the clan, Triangle of Wisdom.</p>

      <p>Two out of the three had Superior Embryos, and their fighting power had been enormous. The Knights of the Royal Guard Commander and the Arch Wiseman had died at the hands of these three. Even the king had been killed.</p>

      <p>“If things had kept going as they were, without a doubt, this kingdom would’ve been on a straight shot to ruin,” said my brother. “But after being forced to give up a third of our territory, the nation of Caldina began their invasion into Dryfe. Except for some troops they left behind in the territory they took, the rest of Dryfe’s forces retreated back to their homeland, and so the Kingdom of Altar managed to survive by a hair.”</p>

      <p>However, my brother continued to explain, since Caldina had already pulled out of Dryfe, Dryfe would likely attack again in a few months.</p>

      <p><em>...He was right,</em> I thought. <em>This wasn’t a fun story.</em></p>

      <p>“So what’s this about you saying that Liliana resents you?” I asked.</p>

      <p>“That’s because I was one of the ranking players listed there that didn’t participate,” he said. “Moreover, the former commander of the knights that died in battle was Liliana and Milia’s father.”</p>

      <p>“...Man,” I said. <em>This really isn’t a fun story.</em></p>

      <p>“And so, having heard this not-so-fun story, what do you plan to do, Master?” Nemesis, who had been engrossed in her food this whole time and hadn’t joined our conversation, asked.</p>

      <p>“There’s nothing I can do, right?” I asked.</p>

      <p><em>What will I do when Dryfe attacks again... well, for now, I’ve already made my decision.</em></p>

      <p>“Even if there’s no reward, I’m not too keen on refusing to participate,” I said. “Even if there’s a cost, I would think there’s some value in taking part.” <em>Even if you were to just view it as a game event.</em></p>

      <p>“Yeah, well, you’re right about that, but the players’ mood at the time was more of a boycott against the cheap nation,” said my brother. “I even get the feeling that Dryfe might’ve prepared their crazy rewards as a way to create this mood.”</p>

      <p><em>If that’s the case, then the Kingdom of Altar probably lost to Dryfe strategically before the battle even began.</em></p>

      <p>“Why didn’t you join, Bro?” I asked. “Was it because of the lack of reward for you, too?”</p>

      <p>“...In my case, it was because having my equipment break would equal exposing my real face.”</p>

      <p>“...Ahh, yeah.”</p>

      <p><em>Well yeah, that would be a huge problem, but still...</em></p>

      <p>“Well, I’ve changed my equipment since then, so I’ll be joining next time,” he said.</p>

      <p><em>That costume’s DEF stat and physical damage reduction are certainly impressive,</em> I thought. <em>Although it’s still a gag item, no matter how you look at it.</em></p>

      <p>“The next time we do fight, though,” he continued, “the strength of their nation will have increased, while ours will have weakened. So it’ll be tough.”</p>

      <p>“Weakened?” I asked.</p>

      <p>“Since losing the war, there have been a lot of players switching to different nations. There are even tians leaving the kingdom. People on online chat boards have been saying things like, ‘The Kingdom of Altar is past its prime,’ and ‘It’s game over.’”</p>

      <p>I remained silent.</p>

      <p><em>Defections, refugees, and rampant resignation... That’s the path of a country headed towards collapse in the real world.</em></p>

      <p>“With the latest update to the rankings, about 70% have been replaced,” he said.</p>

      <p>“Hmm...” I said. <em>Put another way, now might be the chance to get on the ranking boards.</em></p>

      <p>“In that case, I guess I’ll start from there,” I said.</p>

      <p><em>Listening to all this has helped me solidify my plans... no, my plans are still the same, but my goals have increased.</em></p>

      <p>“Have you decided on a new objective?” asked Nemesis.</p>

      <p>I nodded. “As things stand, there aren’t a lot of things I can do, and I can’t take part in the war.”</p>

      <p><em>Which is why...</em></p>

      <p>“First I’ll raise my level,” I said, “and then I guess I’ll aim to get onto the rankings.”</p>

      <p class="centerp section-marking">◆◆◆</p>

      <p>Earth — Undisclosed Chat Room</p>

      <p>Members: Professor</p>

      <p>General has joined.</p>

      <p>Beast King has joined.</p>

      <p>Members: Professor, General, Beast King</p>

      <p>Professor: Good evening.</p>

      <p>General: good evening</p>

      <p>Beast King: eve</p>

      <p>Professor: Gentlemen...</p>

      <p>Professor: Did you both watch the video I sent you through Infinite Dendrogram?</p>

      <p>Beast King: saw it</p>

      <p>General: thats why we’re here, obviously</p>

      <p>Professor: That’s true.</p>

      <p>Professor: Now then, regarding our plan to eliminate an important tian. To put it simply...</p>

      <p>Professor: It failed.</p>

      <p>General: ya, fail</p>

      <p>Professor: Those things I released in the dungeon...</p>

      <p>Professor: The horde of Demi-Dragon Worms got wiped out, didn’t they?</p>

      <p>General: werent there holes in this plan from the start?</p>

      <p>General: giving the targets sister bug repellant incense and directing her to the orchard</p>

      <p>General: and then springing a trap on the target there</p>

      <p>Professor: Originally, I had a different set of steps planned.</p>

      <p>Professor: But for some reason all the remberries had disappeared from the market.</p>

      <p>Professor: Even the portion I intended to use for my plan was gone. lol.</p>

      <p>Professor: Tis a real shame.</p>

      <p>Professor: The plan was to give a poisoned remberry to the little sister...</p>

      <p>Professor: and use that to kill the older sister.</p>

      <p>Professor: Lil Sis, “Big Sis, congratulations.”</p>

      <p>Professor: Big Sis, “Thanks. Guhah!”</p>

      <p>Professor: Lil Sis, “Big Siiisss!”</p>

      <p>Professor: This was how it was supposed to go, so what a shame, riiiiiiight?! boo hoo, lol.</p>

      <p>General: what u think is a shame isnt important</p>

      <p>General: the issue is that the new plan got thwarted</p>

      <p>Professor: Wasn’t that bear scary? To go up against almost 100 Demi-Dragon Worms by himself...</p>

      <p>Professor: and even more, to win unscathed.</p>

      <p>Professor: Just one of those things should be a match for a player with a high-rank job. lol.</p>

      <p>General: thats not that big a deal</p>

      <p>General: its possible if ur leveled up and strong...i could do that too</p>

      <p>General: but...defeating a demi dragon worm at lvl 0 with no job</p>

      <p>General: i dont remember anyone being able to do something that absurd</p>

      <p>Professor: My, my. So does that mean his Excellency the General is more concerned by that newbie than the bear?</p>

      <p>General: pfft...i look forward to crushing him</p>

      <p>Professor: As usual, way to play the stereotypical evil top brass character.</p>

      <p>Professor: Me too though! lol.</p>

      <p>General: whatever. this is how i am</p>

      <p>Professor: lol.</p>

      <p>General: but i cant deny it if u call me evil</p>

      <p>General: the destruction of a nation...its this games first big event</p>

      <p>General: i look forward to the chance when dryfe, no, when WE get to accomplish that</p>

      <p>Professor: Well, last time ended with us just taking out some key people and gaining a portion of their territory, so that was a bit hard to stomach.</p>

      <p>General: i had fun fighting with the knight commander</p>

      <p>Professor: The king was boring.</p>

      <p>Professor: It would’ve been better to fight a bunch of soldiers instead.</p>

      <p>General: the arch wiseman...was it beast king that took him out?</p>

      <p>Professor: That was pretty awesome. Just what I’d expect from our strongest player.</p>

      <p>General: hey</p>

      <p>Professor: Oh, okay, okay. His Excellency the General and Beast King are both the strongest. lol.</p>

      <p>General: ya whatever. i’ll prove it to u in the next war</p>

      <p>General: this time i’ll put an end to the kingdom of Altar</p>

      <p>Professor: Yes, please do let me see that. lol.</p>

      <p>General: btw, beast kings been silent the whole time, but dont u have something u want to say?</p>

      <p>Beast King: the bear, was really, cute</p>

      <p>General: ...............</p>

      <p>Professor: ............... lol.</p>

      <p>General: ...i dont understand ur taste, beast king</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter3">
    <div class="main">
      <h1>Chapter Three: Starting Point</h1>

      <p><em>Heaven’s Three Star Restaurant, Royal Capital Altea — Ray Starling</em></p>

      <p>Last night, after I had talked about various things with my brother, the dinner had turned into a normal banquet.</p>

      <p>My brother and Nemesis, who had eaten more than double what I had, had given up partway and had left more than half the food untouched. So we’d passed out the remaining food and drinks to the other customers in the restaurant, and the entire scene had morphed into a party.</p>

      <p>If an observer were to look about the restaurant, they wouldn’t be able to tell who among those partying was a player (Master), and who was an NPC (tian).</p>

      <p><em>The one saying to my brother “Hey big spender” is probably a player,</em> I thought. <em>That was a joke from a retro game. The one with a glass of wine in one hand and an exaggerated way of speaking is probably a tian.</em></p>

      <p>Other than the distinction of who had an Embryo crest, these were the only sorts of vague differences... <em>They all look human to me.</em></p>

      <p>The whole scene made me appreciate again just how amazing <em>Infinite Dendrogram</em> was, and along with this, I felt there was something I needed to think about.</p>

      <p>I felt this, however...</p>

      <p>“My head hurts...” I groaned. The headache made it impossible in my current state to think about anything philosophical.</p>

      <p>“Is this a hangover?” groaned Nemesis from beside me, holding her head like I was. I looked about the restaurant and saw that every person at the party who had consumed that drink was in the same state as us.</p>

      <p><em>A hangover...</em> I thought. <em>Yeah, this must be a hangover.</em></p>

      <p>Normally, underage players couldn’t drink any alcohol. However, among those who had joined the party yesterday, there had been a Master with a skill that could change water into “an alcohol-like drink.” To which I’d just like to ask, “Why would there be a skill like that?”</p>

      <p>“This isn’t alcohol, okaaay?” the person who’d offered me the drink had said. “It’s just juice, okaaay? Drink it and you’ll just feel as light as air, okaaay?”</p>

      <p>It had tasted great, so I had drunk several cups. And so when the sun had risen, I found myself in this state.</p>

      <p>“Ugh... Why does it have to show up here, too?” I muttered.</p>

      <p>“Hangover” was also displayed on my status, and even though the pain setting should had been turned off, my head was throbbing.</p>

      <p>“That drink, it was similar to alcohol but it was probably actually poison,” said Nemesis.</p>

      <p>“Ahh, a poison disguised as alcohol that gives you status effects, huh?” I responded.</p>

      <p>In that case, it made sense that a skill like that existed, as well as why I had been able to drink it while ignoring the underage restrictions.</p>

      <p>There was a folk tale about something like that in Japan, so there might’ve been an Embryo based on that.</p>

      <p><em>The person who made the drinks was just fine after drinking it, though.</em></p>

      <p>“Why would you drug someone like this...?” I wondered aloud.</p>

      <p>“It’s Lei-Lei’s beary special way of welcoming you.” Bro Bear, who had been passing out water to those suffering with a hangover, said this with a strained laugh.</p>

      <p>“Welcoming?” I asked.</p>

      <p>“She makes sure to get every newbie to drink that Divine Oni Poison Sake (light).”</p>

      <p>“Why would anyone do such a thing...?”</p>

      <p>“She’s teaching you the lesson, ‘Surprise attacks like this exist, so you need to be careful, okaaay,’ by letting you experience it.”</p>

      <p><em>Oh, I see,</em> I thought. <em>No wonder I thought the people who didn’t drink her alcohol seemed like they were grinning or looking on with nostalgia. I’m sure they received the same welcome earlier.</em></p>

      <p>“...I learned a good lesson, then,” I said.</p>

      <p>“By the way, she’s one of the Masters I mentioned yesterday who bears a Superior Embryo,” said my brother. “She’s also known as the Prodigal of Feasts Lei-Lei.”</p>

      <p>“Prodigal of Feasts...” I murmured.</p>

      <p><em>She seems like an extraordinary person, but I wonder how she got a second name like that?</em></p>

      <p>“Oh, also by the way, she wasn’t able to participate in the previous war due to a schedule conflict in real life, it seems,” said my brother.</p>

      <p><em>I guess it goes without saying, but there are people who’re too busy to participate in the game’s events.</em></p>

      <p class="centerp section-marking">◇</p>

      <p>In the end, I wasn’t able to move during the morning until my hangover had passed.</p>

      <p><em>...The item someone from the restaurant gave me to cure the Hangover effect didn’t work,</em> I thought unhappily. <em>That’s some pretty nasty poison for you not to be able to cure its status effect...</em></p>

      <p>Putting that aside, we were back to normal, so we had decided to go shopping in town.</p>

      <p>“Hey, Bro, I want to sell the drop item I got from the Demi-Drag and buy some beginner equipment, Dragonscales, and brooches. Do you know where they sell those?” I asked.</p>

      <p>“What? You’re going to stock up on those?” Bro Bear’s expression looked troubled.</p>

      <p><em>Nemesis’s skill requires that I take damage, so I was thinking that the Lifesaving Brooch and Dragonscale Ward were a must, but...</em></p>

      <p>“Is there some sort of problem?” I asked.</p>

      <p>“Those accessories are beary expensive,” he said. “The Dragonscale Ward is the top ward-type accessory and costs about 300,000 lir for one. The Lifesaving Brooch goes for about 5,000,000 lir.”</p>

      <p>“Say what?” I burst out.</p>

      <p><em>That’s 3,000,000 and 50,000,000 in yen. Those items were that expensive?</em> I was taken aback. <em>However, thinking about it, I guess that’s reasonable. It is on the level of determining life or death for you. I would’ve died several times if it hadn’t been for them.</em></p>

      <p>“...I’ll hold off for now,” I said. <em>Also, sorry for breaking them all yesterday...</em></p>

      <p>“That’d be for the beary best,” my brother said. “As for beginner equipment, I know a player-run shop that’s fair. By the way, did you already open the Demi-Drag’s drop item?”</p>

      <p>“Open it?” I asked.</p>

      <p>“For boss monsters like the Demi-Drag, the items they drop are usually crates. Inside should be one item derived from the boss you defeated, and then one to five random items based on the boss’s level.”</p>

      <p>“Oh, really?” I asked.</p>

      <p><em>Come to think of it, the item it dropped was a Demi-Dragon Worm Treasure Coffer,</em> I remembered. <em>I’m pretty sure “coffer” is another word for “chest.”</em></p>

      <p>I selected it from the item list and the message “Will you open this item?” was displayed.</p>

      <p>“Would it be better to open this?” I asked.</p>

      <p>“Hmm... There’s a chance it’ll be a miss, so you could just sell it as-is,” said my brother. “But if it’s from a Demi-Drag, then it might have something quite good in it. So I think it’s okay to open it.”</p>

      <p>“Okay, then ‘yes’ it is.”<br/><br/></p>

      <p>Acquired Natural Demi-Dragon Worm Full-body Armor.</p>

      <p>Acquired Ementerium.<br/><br/></p>

      <p>“It says I got natural full-body armor and Ementerium,” I said.</p>

      <p>“Full-body armor is beary nice,” he said. “It should have a skill that reduces physical damage by 150.”</p>

      <p><em>Wow, that’s really good... I think, but I’m not sure anymore after having seen Bro Bear’s costume.</em></p>

      <p>“What does ‘natural’ mean?” I asked.</p>

      <p>“Oh, it means that it’s a naturally-made full-body armor.”</p>

      <p><em>...What does “a naturally-made full-body armor” mean?</em></p>

      <p>“All right, then I’ll equip it right away...” I said. “Huh? I can’t.”</p>

      <p>I looked closer and saw that the following messages were displayed: “You do not meet the level requirement,” and “You must have a total level of 150 and a job level of 51 in order to equip this item.”</p>

      <p>“...I guess I can’t use this for a while,” I said in disappointment.</p>

      <p>“It looks like it’ll be some time before you can equip it, so I think it’d be fine if you sold it,” said my brother. “It’ll fetch you at least 400,000 lir. Also, Ementerium is an item you sell. It’s worth about 20,000 lir.”</p>

      <p><em>Ohh, those are pretty good prices,</em> I thought. <em>Although they don’t even come close to reaching the brooch.</em></p>

      <p>“Ementerium though... For the Demi-Drag’s drop item that you’re supposed to sell, it only goes for 20,000?” I said to myself.</p>

      <p><em>If, for example, the full-body armor that he said was a winner hadn’t been in the crate, and instead it had been an item based on the Demi-Drag with the same value as Ementerium, then that’d be a total of 40,000,</em> I thought. <em>I’m finally starting to understand how extraordinary Dryfe’s rewards were that I heard about yesterday. I’m sure it’d be much easier to defeat eight soldiers than one Demi-Drag. I bet it was a</em> profitable <em>battlefield for those that took part.</em></p>

      <p><em>...In any case, I’ve acquired some war funds, so I guess I’ll go buy some equipment.</em><br/><br/></p>

      <p>At the shop my brother had recommended, I had them choose a few items for me that I could equip even at level 0.</p>

      <p>The equipment was supposedly part of something called the Riot series, and they were widely used by lower level players. It was a set consisting of light armor, bracers, pants, and boots.</p>

      <p>The equipment I had bought happened to be the quality product of an armor craftsmen. Due to this, the Riot light armor had received the following bonus effects: Increased HP, HP +200; and Reduced Damage, which reduced physical damage by 10.</p>

      <p><em>This will probably be a big help while my level is still low.</em></p>

      <p>“Nemesis will do fine for my weapon, so I should be good to go grind levels now,” I said.</p>

      <p>“Not ‘Nemesis will do fine!’ You should be saying, ‘Nemesis is the greatest!’” my Embryo shouted.</p>

      <p>“Ne-me-sis is the grea-test,” I intoned.</p>

      <p>“Don’t say it so monotone!”</p>

      <p>I had also sold the drop items to this shop for the market value of 420,000 lir. Buying the set of equipment and some healing items, by the way, had cost me only about 20,000 lir. I still had the complete amount I had received for selling the full-body armor, but as there was no need to use it, I decided to just keep it.</p>

      <p>At any rate, I was now prepared to go grind levels.</p>

      <p>“Ah, hold on a sec,” said my brother. “Before you go grind levels, you should equip a job. You’ll be at level 0 forever if you don’t.”</p>

      <p>“...Ohh,” I said. <em>I forgot. I’m still jobless.</em></p>

      <p>“Should I explain a bit about jobs?” asked my brother.</p>

      <p>“Please do,” I replied.</p>

      <p>My brother explained the following things to me.</p>

      <p>Jobs in <em>Infinite Dendrogram</em> were divided into three large categories: low-rank jobs, high-rank jobs, and Superior jobs.</p>

      <p>Low-rank jobs were ones that jobless players acquired first. They were easy to get, and had a level cap of 50. High-rank jobs had set conditions for acquiring them, and they were capped at 100. Six low-rank and two high-rank jobs could be equipped at once, giving a player a total level cap of 500.</p>

      <p>So then what about Superior jobs?</p>

      <p>Superior jobs were extremely difficult to acquire, and on top of that, only the first player that acquired the job would be allowed to equip it. Also, the greatest feature of Superior jobs was that they had no level cap.</p>

      <p>That’s right. With Superior jobs, your level, that was normally maxed out at 500, could be increased as much as you liked.</p>

      <p>There was no balance whatsoever to this. But of course, as your level rose, so did the amount of experience needed for each new level. That was why even without a cap, there apparently weren’t many people with ridiculously high levels.</p>

      <p><em>...Which is to say, there</em> are <em>a few players with ridiculously high levels,</em> I thought. <em>Given how there were also those Superior Embryos that came up last night, I feel like the development team is deliberately setting up different levels of strength.</em></p>

      <p>Also, it appeared that there were even cases where tians had Superior jobs.</p>

      <p>This is somewhat of a digression, but the terms “low-rank job” and “high-rank job” used their translated versions in each player’s language. The term “Superior job,” however, was unified across all countries and cultural regions.</p>

      <p><em>Given how this overlaps with Superior Embryos, I wonder if the development team is trying to give some deeper meaning to the term “Superior,”</em> I thought.</p>

      <p>By the way, when using just the word “Superior,” this apparently referred to a Superior Embryo and its Master.</p>

      <p><em>...Like I thought, it’s confusing.</em></p>

      <p>“What’ll happen if I choose a job that doesn’t mesh well with my Embryo?” I asked.</p>

      <p>“If you’re at a save point, you can reset your job whenever you like,” replied my brother. “And even if you reset your job, your Embryo’s growth won’t change.”</p>

      <p>So that was why there were apparently some players that would repeatedly reset their jobs in order to try various ones. You could repeat this process until you found a job that suited you. After finding it, your Embryo would have developed due to the time spent up until then, so you’d then be able to level up even easier than before.</p>

      <p>“Speaking of jobs... what are the jobs of the ranking players you talked about yesterday?” I asked.</p>

      <p>“If they came up in yesterday’s conversation, then they all have Superior jobs,” said my brother.</p>

      <p>“I thought as much,” I said. <em>Titles like “King” and “High Priest” certainly seemed like ones only one person could acquire.</em> “Do you know what kind of requirements they had?”</p>

      <p>“Oh... The requirements for King of Destruction were: surpassing 100 million total damage dealt, defeating a certain number of high-rank boss monsters solo, and also completing a special quest,” said my brother. “The rest probably had something similar.”</p>

      <p><em>100 million damage... I could use the same skill I used against the Demi-Drag, Vengeance is Mine, 10,000 times and it still wouldn’t be enough,</em> I thought. <em>The jobs for ranking players are as impressive as I’d expect.</em></p>

      <p>“By the way, the stat modifiers stack for all the jobs you have equipped, but you won’t be able to use some skills if the grouping of your main job changes,” said my brother. “So that means you won’t be able to use Gunner skills while you’re a Cook.”</p>

      <p>“Oh, really?” I asked. “Being something like a Cook and Soldier seems like it’d work out, though.” <em>Like in that one movie.</em></p>

      <p>“Well, you can also change your main job at save points, and you can still use skills if they’re within the same grouping,” said my brother.</p>

      <p><em>It’s probably best to keep that in mind when choosing which jobs to equip.</em></p>

      <p>“Okay, then what jobs can I equip now?” I asked.</p>

      <p>“Ta-daa! The Suitable Job Diagnostics Catalog,” he said in a voice as if he were going to take out some sort of secret tool. What he did pull out, though, was a thick book. “If you read this catalog, you can find the job that best fits you out of all the ones you can equip right now.”</p>

      <p>“That’s useful,” I said.</p>

      <p>“Since the format is a questionnaire, I don’t know if it’ll really be the best fit, but this’ll work just fine when you’re not sure what to do,” he said. “Because at any rate, there are over a hundred low-rank jobs that you can equip in this town from the beginning.”</p>

      <p>“That’s way too many!” I cried.</p>

      <p>“Well, you’ll probably be using this going forward, so I’ll give this to you.” He handed me the book.</p>

      <p>“Thanks,” I said. <em>At any rate, let’s give it a try.</em></p>

      <p>And so, after five or so minutes the results came in...</p>

      <p>“A Paladin?” I thought aloud. <em>It’s certainly a staple in games, but I’m not so sure it fits me.</em></p>

      <p>“Ahh,” said my brother, “Paladins get a boost to their HP, STR, and END. Also, they can learn damage-reducing skills and healing magic.”</p>

      <p><em>I see,</em> I thought. <em>In that case, it’s perfect. As long as I’m using Nemesis, then it’ll probably be a great match.</em></p>

      <p>“That’s strange, though,” he continued. “Paladin isn’t a job you can get from the start. I mean, it’s a high-rank job.”</p>

      <p>“A high-rank job?” I asked.</p>

      <p>“Yeah,” he said. “You can’t get it unless you meet certain conditions.”</p>

      <p>“What kind of conditions?” I asked.</p>

      <p>“First, you need to defeat a boss of a certain strength... a Demi-Dragon class monster, while also doing more than half the damage to it.”</p>

      <p>“I did that,” I said. <em>I cleared that in the battle with the Demi-Drag.</em></p>

      <p>“Next, you need to donate 200,000 lir to the church.”</p>

      <p>“I can do that,” I said. <em>Right now I have around 400,000 lir.</em></p>

      <p>“And last, you need the recommendation of a key person related to the knights,” he finished.</p>

      <p>“A recommendation... that I don’t have,” I said. <em>I just started playing</em> Dendro, <em>so I don’t think I’ll be able to get a recommendation.</em></p>

      <p>“Wait, wait. Didn’t something along those lines happen just yesterday?” Nemesis, who had been quietly listening the whole time, suddenly cut in.</p>

      <p>“I see,” said my brother. “So that was the real reward from yesterday’s quest. Well, of course they wouldn’t display such a tactless message as, ‘Your relationship with so-and-so has deepened.’”</p>

      <p>“Huh?” I asked. <em>Somehow, the two of them seem to have gotten something I didn’t.</em></p>

      <p>“Master... have you forgotten just who it was you helped yesterday?” asked Nemesis.</p>

      <p>“...Ah.”<br/><br/></p>

      <p>We then made our way over to Liliana’s house. Liliana was the Vice Commander of the Knights of the Royal Guard, and likely because of what had happened yesterday, she was at home with Milianne.</p>

      <p>We received a warm welcome and thanks for the day before. After we chatted with the two, I mentioned to Liliana that I wanted to become a Paladin. She readily agreed and wrote a recommendation letter for me right away.</p>

      <p>I took care of the donation at the church as well, and within the day, I had become a Paladin.</p>

      <p>And with this, I was finally prepared to go grind levels.</p>

      <p class="centerp section-marking">◇</p>

      <p>“All right, then this is where I’ll take my leave,” Bro Bear struck up his hand and said.</p>

      <p>“What? You’re not going to help us grind levels, Brother Bear?” asked Nemesis.</p>

      <p>“I had planned from the start to go separate ways after the welcome party was over,” he said.</p>

      <p>“Why’s that?” I asked.</p>

      <p>“If you do power leveling, then a gap will develop between your status and actual playing skill,” he said. “A player’s skills and ingenuity are beary important in <em>Dendro</em>, so you need to set out on your own to develop these as well.”</p>

      <p>“I’m here too, though, so it’ll be the two of us,” said Nemesis.</p>

      <p>Power leveling was a method of easily grinding levels by getting help from a stronger player. An example of this would be letting the stronger player take all the hits from a strong monster, during which you would chip away at its health, defeat it, and then instantly gain levels.</p>

      <p><em>Yeah, I guess if I did that, my level would go up, but my skills wouldn’t improve.</em></p>

      <p>“Also, <em>Dendro</em> has the Embryo system,” said my brother. “If you constantly ask fur others to help you, your Embryo won’t develop in a good way.”</p>

      <p>“Is that how it works?” I asked.</p>

      <p>“It’s possible,” answered Nemesis.</p>

      <p><em>Since Nemesis was born this way as a result of my play style since starting, I guess it is possible.</em></p>

      <p>“And so, I’ll say adios to you here-,” said my brother. “But if you get into any serious trouble, contact me.”</p>

      <p>“Yeah, if I get into serious trouble,” I agreed.</p>

      <p>“That’s all right, but for starters, try to do your best on your own,” he added.</p>

      <p>“Got it,” I said. “And, um, thanks for all your help since yesterday.”</p>

      <p>“Don’t worry about it. I bearlieve it’s only fair to help you out a bit. Oh, and also...” Bro Bear brought the head of his costume closer to me. “If anything happens with a ranking player, make sure you contact me right away.” His voice had taken on a more serious tone again.</p>

      <p>“Bro?” I asked.</p>

      <p>“Well, that thing from yesterday might’ve been just an anomaly. But crazy things shouldn’t happen that often, so just relax and enjoy <em>Dendro</em>.” Bro Bear said this and left, leaving just me and Nemesis behind.</p>

      <p>At the same time, a message was displayed saying, “The party has been disbanded.” My brother’s status, which had been showing the whole time, also disappeared.</p>

      <p>“Well then, Master,” said Nemesis. “It’s finally time for you — no, for us — to stand on our own feet, but have you decided on where to go?”</p>

      <p>“Bro told me about some low-level hunting grounds, so I think I’ll go check those out,” I said.</p>

      <p>“I’m looking forward to grinding levels,” said Nemesis. “Heh heh heh! Tonight I starve for blood.”</p>

      <p>“It’s still noon, you know?” I said.</p>

      <p class="centerp section-marking">◇</p>

      <p>The first hunting ground we headed to was Easter Plains, right outside of Altea’s East Gate. It had a very clear view, and I could see monsters leaping about here and there, as well as the players fighting them.</p>

      <p><em>That reminds me, this is the first time I’ve seen other players fight.</em></p>

      <p>“All right, then let’s get started too, shall we?” I asked.</p>

      <p>“Yeah,” said Nemesis, and she then changed into the same black greatsword as yesterday.</p>

      <p>I swung the greatsword up and down as I held it in my right hand — or rather, it was wrapped around my whole arm.</p>

      <p>“This really isn’t as heavy as it looks,” I commented.</p>

      <p><em>Even at my STR level, I can swing it with no trouble,</em> I thought. <em>It’s about the same weight as that fake sword I bought as a souvenir a long time ago on my school field trip. Or maybe about the same as a metal pipe.</em></p>

      <p>“Isn’t it rude to mention a lady’s weight?” asked Nemesis.</p>

      <p>“But this is clearly lighter than when you’re in your human form,” I said. <em>What happened to the law of conservation of mass?</em></p>

      <p>“...You’re concerned about the law of conservation of mass in a world with magic and where time flows differently?” she asked.</p>

      <p><em>Well, yeah, that’s true, but...</em></p>

      <p>“And besides, it shouldn’t feel light to anybody else,” she said. “It’ll only feel light for you.”</p>

      <p>“Is that how it is?” I asked.</p>

      <p>“That’s how it is.”</p>

      <p><em>Okay, then I guess I’ll leave it at that,</em> I thought. <em>My level isn’t going to get any higher if I spend all my time asking questions.</em></p>

      <p>“All right then, time to start grinding levels,” I said.</p>

      <p>“I’m itching to get started.”<br/><br/></p>

      <p>Two hours later.</p>

      <p>My level had gone up by 3, and I hadn’t taken any damage yet.</p>

      <p>“...How come I’m not taking any damage even though I’ve been getting pummeled?” I wondered.</p>

      <p>Since I had arrived here, I had been fighting monsters like Little Goblins and Pashi Rabbits. They were the type you could take one glance at and say, “Ah, these are the small fry monsters you find in the beginning.” However, no matter how many times they had attacked me, I hadn’t taken any damage.</p>

      <p>“You shouldn’t be surprised,” replied Nemesis. “You have fairly good equipment for your level. Also, wasn’t there a Reduced Damage skill? Isn’t all the damage below 10 becoming 0 because of that?”</p>

      <p><em>So that means the monsters here can’t do more than 10 damage to me.</em></p>

      <p>My initial HP had been a little under 100. Taking into account that this was a hunting ground for beginners, it was possible they had only placed monsters here with low enough strength that they wouldn’t kill a player with that amount of HP.</p>

      <p>Incidentally, my HP was now over 700 at level 4. Liliana’s HP had been in the 5,000s with a Paladin level of 60 and a total level of 210, but at this rate, by the time I reached Paladin level 60, my HP would probably be well over 6,000.</p>

      <p>“This may get crazy down the road,” I said.</p>

      <p>“It might be because it’s a high-rank job, but its stat boosts are nice,” said Nemesis. “Also, HP is the highest out of all my stat modifiers.”</p>

      <p>So the large growth in my HP was apparently the result of the total modifiers from the Paladin Job and my Embryo. <em>The modifier for Embryos is pretty big,</em> I realized.</p>

      <p>Although it wasn’t as much as my HP, my other stats had of course gone up, as well. In addition, I also learned the healing magic skill First Heal.</p>

      <p><em>With this, I can heal myself to some degree now.</em></p>

      <p>“Hmm... I guess I’ll change spots, then,” I said. <em>As things stand, I should be okay somewhere with enemies that are a little stronger.</em></p>

      <p>“Yeah, I agree,” said Nemesis. “I also felt things were a bit underwhelming.”</p>

      <p><em>Well, yeah, that’s because it only takes us one hit to slice the goblins and rabbits in half,</em> I thought. <em>Even though I was the one doing it, it was still kind of scary. The monsters’ corpses don’t remain behind, but if they did, it’d be one extremely gory sight.</em></p>

      <p>“Let’s see,” I said, “the next suitable hunting ground would be Noz Forest, just past the North Gate.”</p>

      <p>“Then shall we first return to the royal capital?” asked Nemesis. “It’s almost time for sweets, after all.”</p>

      <p><em>Time for sweets...</em></p>

      <p>“I’m okay with paying for some drinks,” I said, “but...”</p>

      <p><em>What will I do if she eats as much as dinner last night?</em> I wondered. <em>I would like to keep the remaining money I got from selling those items to get my next set of equipment.</em><br/><br/></p>

      <p>At any rate, we headed back toward the royal capital. On the way, I watched the other players as they fought. There were a lot of players with outfits that were in the catalog from the tutorial, so they were probably beginners like me. However, even if they had the beginner outfits, they all had at least one thing other players didn’t.</p>

      <p>One player had a sickle and chain. The player would hurl it in the air and the chain would extend on its own to attack the monster — or so I had thought, but for some reason, it was the sickle that would travel underground and then attack the monster instead.</p>

      <p>Another player had a baby carriage. Inside the carriage was an egg-like object, and for some reason, the player was pushing the carriage with their left hand, while desperately swinging a sword in their right hand to fight off monsters.</p>

      <p>Another player had a stone hut. There was an opening at one section in the wall, and the player was attacking monsters from there with a slingshot. Monsters that bit onto the hut stopped moving as if they were stunned.</p>

      <p>Another player had a red barrier. Monsters that entered the barrier would blow up as if they had stepped on a mine.</p>

      <p><em>Ah, the player got blown away as well,</em> I noticed. <em>I wonder if all of those are Embryos like Nemesis.</em></p>

      <p>“...There are a lot of different types,” I said, amazed.</p>

      <p>“The sickle and chain is an Arms, the hut is a Castle, and the mine field is a Territory,” explained Nemesis. “The baby carriage is... what exactly? A tool that’s an Arms? Or maybe a Chariot?”</p>

      <p><em>So those are the non-Maiden base category Embryos... they look really interesting.</em></p>

      <p>“Are you cheating on me?! Are you thinking about cheating while you’re embracing me with your right hand?!” cried Nemesis.</p>

      <p><em>...Does this count as embracing?</em></p>

      <p>“I’m not thinking about cheating or anything, I just thought it was interesting how they all have their own abilities and personalities,” I said. “It’s really fantasy-like.”</p>

      <p><em>Bro Bear’s Embryo was such a heavy firearm, the issue went way beyond whether or not it was fantasy-like,</em> I added silently.</p>

      <p>“Well, having something solely unique to each Master is the fundamental principle of Embryos, after all,” said Nemesis.</p>

      <p>“Also, compared to the others, your first form is fairly rugged, Nemesis.”</p>

      <p>“Rugged?!” she exclaimed.</p>

      <p><em>Yeah, your greatsword mode, that is.</em><br/><br/></p>

      <p>As we continued to walk like that, we came across another player engaged in battle with monsters. Unlike before, however, I could see the silhouettes of two people.</p>

      <p>One of them wore a coat that appeared to be starting equipment. He was a player of about middle or high school age. He was dirty with mud and blood from battle, but even still, he was an attractive young boy that you could get away with calling either cool or cute.</p>

      <p>As for appearances, the other person was quite unique, as well. She had a demon tail and bat wings, and was a beautiful, imp-like young girl.</p>

      <p>“Haaa!”</p>

      <p>“Take that!”</p>

      <p>The two of them were fighting with all they had, but they were surrounded by four Little Goblins, and the odds were slightly stacked against them.</p>

      <p><em>Now, I’d like to help, but it wouldn’t be good to just cut into their battle.</em></p>

      <p>“First Heal,” I said, and healed both of their HP. I did it partly as a way to test the new healing magic I had just learned but hadn’t yet used. It was what you might describe as a drive-by heal. I couldn’t see their HP since we weren’t in the same party, but their wounds noticeably disappeared.</p>

      <p>“Ah! That helps a lot!” one of them cried.</p>

      <p>“Thank youuu!”</p>

      <p>The two regrouped and resumed fighting.</p>

      <p class="centerp section-marking">◇</p>

      <p>After about five minutes, the two managed to wipe out the Little Goblins.</p>

      <p>“Good work out there,” I said. “First Heal.” I cast the healing magic one more time on the two after they had finished fighting.</p>

      <p>“Thank you very much for healing us! That really helps,” one of them said.</p>

      <p>“Thanks,” the other added gratefully.</p>

      <p>“I just wanted to try out my healing magic, so no need to worry about it,” I said. <em>If anything, it feels awkward to be thanked.</em></p>

      <p>“Well, you have been getting thanked non-stop since yesterday...” said Nemesis. Her weight then unexpectedly disappeared from my right hand, and she was standing next to me in her human form.</p>

      <p>“Huh? What?!” one of them gasped.</p>

      <p>“Oh? Are you...” asked the other.</p>

      <p>The two of them appeared to be surprised, but Nemesis paid no mind to that and just stared at the imp girl.</p>

      <p>“I see, I see,” said Nemesis. “A fellow Maiden... no, a Guardian, huh? However, it’s rare for a Guardian to look this close to a human.”</p>

      <p>“Hey, stop staring at her, Nemesis,” I said. “That’s rude.”</p>

      <p>“My apologies,” she said. “I was just curious about something.”</p>

      <p>Just what that something was... well, I was curious about it, too.</p>

      <p>“I’m sorry, my Embryo was being rude,” I said.</p>

      <p>“Please don’t worry about it,” said the other player. “That’s amazing, though. There are even Embryos that transform!”</p>

      <p>“That’s right. I’m Nemesis, a Type Maiden with Arms Embryo!” Nemesis introduced herself with such vigor it seemed like a sound effect should’ve accompanied her.</p>

      <p><em>...This is embarrassing.</em></p>

      <p>“Oh, sorry for the late introduction, but I’m Ray Starling,” I said. “I started playing <em>Infinite Dendrogram</em> yesterday.”</p>

      <p>“Ah, I’m Rook,” said the other player. “I also just started playing yesterday.”</p>

      <p>“I’m Babylon! A Type Guardian Embryo! Call me Babi, okay?” the girl announced.</p>

      <p>“Rook and Babi,” I repeated back their names. “I have to say, though, weren’t Guardians supposed to be a type of monster?”</p>

      <p><em>Other than her tail and wings, Babi looks exactly like a human. You could even say that there’s no difference, since I’m pretty sure tails and wings can be added when creating a character. If I had to say which she looked more like, between a monster and a human, I would say a human.</em></p>

      <p>“That’s because I’m a succubus!” she declared. “I’m sexy and cute and everyone falls head over heels for me!”</p>

      <p><em>Succubus......... a succubus?</em></p>

      <p>“Babi, I told you not to be so open about that in front of people...!” Rook wailed.</p>

      <p>“Whaaat? But I’m an Embryo that takes pride in being a succubus, so it’s not embarrassing at all.”</p>

      <p>“It’s embarrassing for me!” he cried.</p>

      <p>“...Rook, you’re embarrassed by me?” Babi looked at him with puppy dog eyes.</p>

      <p>Even as someone on the sidelines, I thought that looking up at him with teary eyes was just unfair.</p>

      <p>Rook became flustered in an instant. “You see, umm, I’m not embarrassed by you, Babi. It’s just that it’d be embarrassing if people were to start prying into my inner thoughts since you were born from me, you see...”</p>

      <p><em>What is this sense of deja vu?</em> I thought. <em>Also, I feel like I could get along with Rook.</em></p>

      <p>“Now, now, you shouldn’t cause too much trouble for your Master, Babi,” Nemesis scolded.</p>

      <p>“You’re one to talk,” I muttered.</p>

      <p class="centerp section-marking">◇</p>

      <p>Rook and Babi were done with their hunting, so we decided to band up and make our way back to the capital as one group. And, since we had no reason not to, Nemesis and I invited them to our little sweets party.</p>

      <p>They gladly accepted, but...</p>

      <p>“Peaches sure are delicious this time of year.” Despite it being her first time eating peach tarts, Nemesis spoke as though she knew everything about it and hastily sank her teeth into her seventeenth serving.</p>

      <p>“No sweet thing is complete without <em>this</em>.” Babi poured chili sauce all over her strawberry parfait.</p>

      <p>“...No, chili sauce shouldn’t even be an option,” I said.</p>

      <p>“I think so, too...” Rook agreed. “But the speed at which Nemesis eats is also quite...”</p>

      <p>“Yeah, I know exactly what you mean...” I said.</p>

      <p>The scene before us was strange in many ways. For example, despite not being older than a day, Nemesis and Babi were familiar with the concept of seasonal fruit, they had their own tastes, and they expressed awareness of flavoring.</p>

      <p>Yesterday Nemesis had told me that, despite being humanoid in form, she wasn’t really like us. But that didn’t stop the sight before me from seriously throwing me off.</p>

      <p>“When born, we Embryos make use of our Master’s memories,” she had explained after reading my mind. “Our knowledge of this world came from the world’s system, but our knowledge of worldly affairs came from our Masters.”</p>

      <p><em>Oh, so that’s how she knows about peach seasons and the like.</em></p>

      <p>“Basically, we Embryos know <em>everything</em> about our Masters,” she added.</p>

      <p>“What kind of girls do I prefer, then?” I asked.</p>

      <p>“Ones like me, of course!”</p>

      <p>“Wrong.”</p>

      <p>“Why?!” she howled.</p>

      <p>So, to sum it up, they didn’t know <em>everything</em>, but merely came equipped with common sense.</p>

      <p>“Still, what kind of common sense would make Babi eat something so... blasphemous?” I couldn’t help but ask.</p>

      <p>“Perhaps she does it <em>because</em> it’s blasphemous, no?” Nemesis answered. “After all, her name is Babylon, right?”</p>

      <p>The Whore of Babylon was a figure from the Book of Revelation, often portrayed riding a seven-headed beast as she spread depravity, adultery, and defilement, making her a sworn enemy of the martyr. I had no idea if any of that applied to Babi, but Nemesis had the name of the Greek goddess of vengeance or divine punishment, and befittingly, her ability was a counterattack. There was reason to believe that Embryo names were related to their powers.</p>

      <p>“That aside, Babi, being a succubus, you must know many ways to express your sexuality and make men go crazy about you,” Nemesis commented.</p>

      <p><em>What the hell are you saying, you damn goth loli?</em></p>

      <p>“Of course I do,” said Babi.</p>

      <p><em>D-Does she really?</em></p>

      <p>Babi’s words actually made Rook choke on his food a bit.</p>

      <p>“Ho ho...” Nemesis said gleefully. “Care to share?”</p>

      <p>“Umm, there’s the shoulder massage, the massage where you lightly step on the lower back, and the best one — the lap-pillow and ear-cleaning combo! Sexy, right?!” Babi exclaimed.</p>

      <p>“...Hm?” Nemesis asked.</p>

      <p><em>Sexy?</em> I thought. <em>None of that goes beyond normal massage. I wouldn’t even call it “lewd.”</em></p>

      <p>“That’s not what I wanted to hear. Don’t you have anything befitting the name ‘Whore of Babylon?’” Nemesis asked.</p>

      <p>“Like?” Babi looked puzzled.</p>

      <p>“W-Well, I-I’m not one to know...”</p>

      <p><em>Don’t give her a question that flusters yourself, you damn goth loli.</em></p>

      <p>“Umm... I’m underage, so I think that Babi is just acting accordingly...” Rook stopped choking on his food and gave us a highly agreeable reason.</p>

      <p>“Ahh, age restrictions, huh.” I expressed my understanding. Just like they affected alcohol and tobacco, age restrictions reduced the sexiness of succubi to the point of making it equivalent to girls giving massages to their dads.</p>

      <p><em>Man is it hard to tell if</em> Infinite Dendrogram <em>is wholesome or indecent.</em></p>

      <p class="centerp section-marking">◇</p>

      <p>Before parting ways, Rook and I — both being newbies — made a little promise to party up and go adventuring sometime.</p>

      <p>Also, Rook didn’t have a job yet. In fact, he’d started playing without having read anything about the game, so he didn’t even know how to get one.</p>

      <p>I let him take a look at the Suitable Job Diagnostics Catalog my brother had given me, and he quickly found a job he was interested in. To make it into a little surprise for the next time we partied up, I chose not to ask what it was.</p>

      <p>Anyway, after Rook and I went our own ways, I walked to the northern Noz Forest.</p>

      <p>“Shall we?” I asked Nemesis.</p>

      <p>“Yes, let’s raise your level.”</p>

      <p>With Nemesis already in her greatsword form, I entered the second easiest hunting ground in the capital’s surroundings.</p>

      <p>Unlike Easter Plains, this place had a number of trees that took a toll on visibility. The forest was so dense that it was hard to see twenty meters ahead. However, I could hear the sounds of battle coming from the distance, so it clearly wasn’t <em>completely</em> inaccessible to us players. The sounds were probably being made by beginners like myself, who were no longer satisfied by the Easter Plains.</p>

      <p>About two minutes after we began searching for monsters, we found some wolf-like beasts. Right when they entered my vision, the name “Teal Wolf” was displayed above them. There were three in total.</p>

      <p>“Man, this is sudden,” I said. As in most RPGs, fighting multiple enemies right after entering a higher level hunting ground wasn’t the best idea, but I had no choice.</p>

      <p>Quick and nimble as they were, the wolves made the first move as the one closest to us jumped and bit into me. The hit dealt 22 points of damage, and it was the first time I’d felt pain that day.</p>

      <p>Since I would be able to take about thirty such attacks, I decided to go on the offensive.</p>

      <p>As the Teal Wolves surrounded me, I targeted only the one straight ahead. They all began attacking, slightly out of sync with each other. I ignored the two coming from behind and intercepted the one right ahead.</p>

      <p>The hit from my black greatsword made the wolf whine in pain. Unlike Little Goblins and Pashi Rabbits, it didn’t get split in half, but the damage I gave was great enough to make its movements more dull.</p>

      <p>“Yeah, this isn’t anything I can’t handle,” I said.</p>

      <p>I continued the grind.</p>

      <p class="centerp section-marking">◇</p>

      <p>Several minutes later, with my health at 50% and a level higher than I’d had before, I stood surrounded by drops from three monsters.</p>

      <p>“All right, so we can take on three of these at once,” I said.</p>

      <p>“Indeed we can,” Nemesis agreed.</p>

      <p>In preparation for the next battle, I restored my health with First Heal. Possessing both high HP and an ability to self-heal, Paladins were simply ideal for leveling.</p>

      <p>“All right, I’m healed.” I said.</p>

      <p>“So, now you’re just level 5 and already have over 800 HP,” Nemesis commented. “Your defense has increased, too, so you might even be able to bear a Demi-Drag’s attack without any accessories. Don’t you think so?”</p>

      <p>“...Even if I can, I’d like to avoid boss battles for now,” I replied. Endlessly repeating events <em>that</em> intense would simply drain my life away. “I’ll hunt standard monsters until I reach level 20.”</p>

      <p>“That’s a good idea.” said Nemesis. “I might’ve evolved into my second form by that point.”</p>

      <p>“What will happen when you evolve, anyway?” I asked. “My brother said that Embryos don’t change <em>too</em> much.”</p>

      <p>“I imagine it won’t go beyond new skills and changes to the weapon,” she answered. “Though, I do not know if the same can be said for the evolution between the third and fourth form.”</p>

      <p>“High-rank evolution, was it?” I asked.</p>

      <p>“Yes,” Nemesis confirmed. “First to third forms are low-rank, while fourth and above are high-rank. As far as I understand it, high-rank forms display a whole different level of uniqueness. There are even cases where the focus on certain skills leads to Embryos entering their own, unique categories.”</p>

      <p>The fourth form of my brother’s Baldr was a tank, which was categorized as a “Chariot.” However, it had originally been an Arms-type gun, meaning that it had evolved into a different category.</p>

      <p>“If high-rank forms display a lot of uniqueness, what about the seventh — Superior — form?” I asked.</p>

      <p>“There are no details on that in the knowledge I was granted with my birth,” she replied. “We’re simply not given this kind of information, it seems.”</p>

      <p>“I think I see how it is,” I said. It was top secret knowledge not meant to be seen by the average person. Not surprising that there were fewer than a hundred people who got there.</p>

      <p>“However, I <em>do</em> know that Embryos of fourth or higher forms get called ‘high-rank’ not just for classification, but for power, as well,” Nemesis said, giving more details. “That’s why you must hurry and uplift me into the fourth form... and beyond, if you can.”</p>

      <p>“Well, that’s the plan, anyway.”</p>

      <p>The rankings were probably full of people with high-rank Embryos, so if I wanted to get there, I had no choice but to get on their level.</p>

      <p>“For now, I have no choice but to do some honest leveling,” I said. “I’m gonna reach level 13 and move on to another hunting ground while it’s still today.”</p>

      <p>The orange patches of sky I saw between the trees clearly showed that it was getting late, but I had no intention of ending the hunt just yet.</p>

      <p><em>Hell, more monsters spawn at night, so it actually makes me excited.</em></p>

      <p>“That’s the spirit,” said Nemesis.</p>

      <p>“All right, then, let’s g—”</p>

      <p>Suddenly, my vision slanted.</p>

      <p>No — it wasn’t just my vision, but myself.</p>

      <p>The numbness — the remnant of an impact — on my forehead was a sign that something had just hit my temporal region. My status display showed me that it had taken away a whole 80% of my HP.</p>

      <p>“...The hell?” I’d been struck by sudden critical damage with no rhyme or reason behind it. Since it’d hit my head, I was left dizzy and unable to properly move my limbs.</p>

      <p>“Master!” Nemesis raised her voice.</p>

      <p>I thought she was simply worried about me, but I was wrong. It was a warning.</p>

      <p>“Hh! Counter Absorption!” she cried. Twenty-four hours had passed since she’d used it yesterday, so Nemesis could use Counter Absorption again. Right as she did that, the newly-created wall of light was hit by something.</p>

      <p>“Gyaghg, ghgee!”</p>

      <p>It was a small monster that combined the aerodynamic shape of a bullet with the dreadful visage of a preta. It writhed — to no avail — as it tried to break through the wall of light. More likely than not, the damage I’d taken a second ago had been dealt by this thing.</p>

      <p>“Is this a monster?” I asked.</p>

      <p><em>...No way,</em> I thought in disbelief. <em>This monster’s offensive ability is way too great compared to the Teal Wolves I’ve been fighting. However, it didn’t seem like it was a boss monster like the Demi-Dragon Worm, either. I mean, it doesn’t even have the name pop-up that appears over every monster in sight. Could it be...</em></p>

      <p>“Kh!” Counter Absorption’s wall of light vanished, and so did the monster that had hit it.</p>

      <p>“A suicidal-type monster that dies right after its first attack,” Nemesis explained. “It’s both a monster and not at the same time... Master! This is a...!”</p>

      <p>“...Guardian!” I completed her sentence.</p>

      <p>Type Guardian... A monster-type Embryo. Unlike Babi, who was of the same type, this one was a <em>real</em> monster.</p>

      <p>“Master, retreat! Someone is targeting you!” Nemesis exclaimed.</p>

      <p>“Don’t have to tell me twice!” I cried.</p>

      <p>With my dizziness gone, I dashed towards the North Gate while healing myself.</p>

      <p>Soon enough, I became fully aware of the situation. Screams of players were echoing all over Noz Forest. It wasn’t just one or two people, either, but dozens of them. Since that monster was an Embryo, the one responsible was another player.</p>

      <p>PK — Player Killing. Just as the name implied, it was the act of killing other players — a concept that had existed since the dawn of MMOs. The person who had attacked me was attacking other players, too, increasing his number of victims with every passing second.</p>

      <p>With Nemesis’s buff and stat increase due to the high-rank job, my HP was significantly larger than that of most people close to my level, and yet a single attack had been enough to bring me to the verge of death. No player without similar circumstances could survive it.</p>

      <p>It was no longer a “newbies’ hunting ground”... but a “<em>newbie</em>-hunting ground.” We had become the hunted.</p>

      <p>“That Guardian died right then and there, so why are the victims increasing?!” I cried.</p>

      <p>“They’re probably part of a high-rank Guardian categorization. Type Legion,” Nemesis answered. “It’s an Embryo that’s basically a colony. As far as I know, the quantity comes at a great cost to quality!”</p>

      <p>“You’re saying that the attack that almost killed me was ‘low quality?’ Nice joke,” I said.</p>

      <p><em>Wait, if the Embryo is a high-rank, the Master must be high-rank, too,</em> I realized.</p>

      <p>“We’re at a disadvantage!” cried Nemesis.</p>

      <p><em>We have to hurry back to the capital,</em> I agreed. <em>This player-killing asshole shouldn’t follow us there.</em></p>

      <p>However, before I could act out my thoughts...</p>

      <p>“Gyaghghghghghghgh!” I heard it behind me — a monster flying towards me like a meteor.</p>

      <p>“Mast—!”</p>

      <p><em>It’s going to kill m—</em></p>

      <p>“Like hell!” Turning around, I swung my black greatsword at the bullet monster.</p>

      <p>“Ghh...ghghghgh.” The impact made the bullet monster blast away into the trees, ending its life and role.</p>

      <p>“...I did it!”</p>

      <p>“Well done, Master!” Nemesis cried. “Now, you just have to—”</p>

      <p><em>—run to the city.</em> Nemesis didn’t get to finish her sentence. In her greatsword form, Nemesis didn’t have a face. However, I could easily tell what she was looking at.</p>

      <p>Someone was standing there beyond the trees, lightly veiled by a dark haze. I couldn’t tell whether it was a man or a woman, young or old, or even if it was actually human or not. Though light, the haze distorted the silhouette to the point of making me unable to see such basic things. All I could tell was that the figure held a gun-like object in its right hand...</p>

      <p>...and that an Embryo crest was shining on its left.</p>

      <p>At that point, it couldn’t have been more obvious.</p>

      <p>It was this person. This person was the one trying to kill me.</p>

      <p>“Run away! Master!” Nemesis exclaimed.</p>

      <p>Before I could even respond, I began dashing with all I had. The distance was twenty meters. It was much smaller than the distance I had to run when escaping the orchard, and the city was right beyond it.</p>

      <p>I kept on running.</p>

      <p>However, I suddenly heard a gunshot. At the same moment, I felt a dreadful, daunting sensation.</p>

      <p>I had to keep running.</p>

      <p>But the terrible chills running down my spine made me turn around. The sight that awaited my eyes was beyond anything I could expect.</p>

      <p>Nemesis and I had been able to fend off a mere two of those bullet monsters, and still only barely. And, upon turning around, I was greeted by a hellish <em>swarm</em> of the very same creatures, numbering so many that they blocked out the view behind them.</p>

      <p>A moment later, before I could even blink, the monsters charged at me and pulverized my body.</p>

      <p><b>[Fatal Damage]</b></p>

      <p><b>[Party Eliminated]</b></p>

      <p><b>[Resurrection Period Expired]</b></p>

      <p><b>[Death Penalty: 24 Hour Login Ban]</b></p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>Reiji Mukudori.</p>

      <p>“...Ghh!”</p>

      <p>Right after they destroyed me, my consciousness was ejected to reality as if I had been only dreaming. Unlike how people felt when waking up after a good night’s sleep, my mind was completely clear. However, I wasn’t sure if I could properly process and accept what had just happened.</p>

      <p>Sure, I’d heard the final message loud and clear. And I was fully aware that the penalty for dying was now in effect. But I still couldn’t wrap my head around what had actually happened back there.</p>

      <p>“Let’s just test it and...” Sure enough, I wasn’t able to log in to <em>Infinite Dendrogram.</em></p>

      <p>As I made my attempt, I noticed the message on the display fixed to the side of the device. It said “Penalty Active. 23h:55m:16s remaining.”</p>

      <p>“...Well, damn,” I said.</p>

      <p>I looked outside and realized that dawn had yet to break. The clock said that it wasn’t even five in the morning. There wasn’t much I could do at this time of day.</p>

      <p>“...Guess I’ll sleep for now.” I spread myself out on the bed and tried to pass out. However, when I closed my eyes, I couldn’t help but picture the moment I’d been killed. That led to me trying to imagine what I could’ve done to survive.</p>

      <p>It was a case of Tetris Syndrome. Just like people would imagine what block placement would get them to a higher score, I ran my head through various survival strategies.</p>

      <p>As such thoughts dominated my head, I realized just how shoddy my movements had been. With the regrets and considerations of what I could’ve, should’ve, and would’ve done spinning in my mind, I eventually fell asleep.</p>

      <p class="centerp section-marking">◇</p>

      <p>I woke up at about eight in the morning and had my breakfast while watching the morning news. They were discussing something about the entertainment industry and the world tour of that famous singer — Rachel Raymuse. It wasn’t anything I could bring myself to care for.</p>

      <p>“...Man, this is dull.” I was referring to the taste of the food I was eating.</p>

      <p>Since I had all the time in the world right now, I’d decided to make something myself, but the result had been far below the fancy meals I’d had in the game. I had a feeling that continuing to live like this would quickly drain away my excitement for real food.</p>

      <p>After I finished eating and took care of the dishes, I went to an online message board and looked for info. It didn’t take long for me to find something on the incident I’d been involved in.</p>

      <p>The tragedy at Noz Forest was actually big news in the message board dedicated to <em>Infinite Dendrogram.</em></p>

      <p>Normally, simple player killing would never get this much attention, but this was a special case. That was because players were still being hunted in all the beginners’ hunting grounds. However, this was only happening in the Kingdom of Altar.</p>

      <p>Simultaneously and continuously, the kingdom’s newbies were being killed off. It was clear that it was an operation executed by multiple members of an organized force. The only question left was: Who was behind it?</p>

      <p>Most people on the message board suspected the Dryfe Imperium, which was rumored to be planning to attack Altar soon. The reasoning behind the suspicion was the idea that Dryfe was trying to keep Altar’s war potential low for when they decided to make their move. Since it was only happening in the kingdom, the possibility of that being true was high.</p>

      <p>As one would expect, the kingdom’s players were responding to this. Some volunteered to act as vigilantes and hunt down the player killers. A number of bigger battles had happened between the two sides. However, the vigilantes had failed to get even a single victory. That made it quite obvious that the player killers were made up of highly proficient players. Just like the others, the one who had killed me at Noz Forest remained undefeated, but there was a slight difference. The vigilantes weren’t even able to find the player killer.</p>

      <p>The beginner hunt showed no sign of stopping, but no one could even find the person responsible, let alone defeat them.</p>

      <p>“...It had to be that person, right?” I said. Back then, I’d seen both the bullet monster Embryo and its Master. Due to the strange mist surrounding them, I hadn’t been able to tell if they were male or female, young or old. That might’ve had something to do with the vigilantes’ inability to find them.</p>

      <p>I ran my eyes through the comments, which were many and varied. Some said, “Welp, the Kingdom is screwed,” others went “Dryfe players are such scumbags,” and some saw this as an opportunity and said, “If you’re thinking of deserting, I recommend Caldina. Noobs welcome.”</p>

      <p>Among them, I saw complaints from unrelated people.</p>

      <p>One said, “Man, I got killed while I was just passing by. My Embryo was <em>this</em> close to evolving and the death penalty messed it all up.”</p>

      <p>Another replied with “Same here, and I was about to start living the high-rank dream...”</p>

      <p>Were there more death penalties than the login ban? It got me curious, so I typed up and posted a message saying “Noob here. Just started and died for the first time. What’s this about death penalties?”</p>

      <p>Replies came quickly.</p>

      <p>One simply went “Get lost, noob.”</p>

      <p>Another was fooling around and said, “Let me teach you my ways. Step one: You get naked...” but there were those who properly explained it to me.</p>

      <p>Apparently, there were rumors that a high number of death penalties decreased the speed at which Embryos evolved. Most players believed this information and treated it as truth.</p>

      <p>It was hard to gauge, considering that Embryos were unique to each player, but rough comparisons showed that Embryos belonging to players with many death penalties evolved slower than those with less. This demerit might’ve been one of the reasons why the kingdom’s players weren’t enthusiastic about participating in the war.</p>

      <p>After giving my thanks for the info, I switched to another board.</p>

      <p>I thought I’d be seeing grim posts about war and player killing everywhere I went, but Tenchi and Huang He were full of people talking about the tame events going on there.</p>

      <p>Cherries were blooming in Tenchi, so people were talking about the cherry blossom viewing sponsored by the tian “Conquest General.”</p>

      <p>In Huang He, panda-like monsters were breeding so much that a whole mountain had become black and white. It was possible to use a camera item to take photos or films and send the output to external media. Someone had posted a screenshot of the panda event, and the heartwarming sight made me smile.</p>

      <p>The only battle-related event I found was in Legendaria. There was a great battle royale to compete for tickets to the concert where “everyone’s idol” — Fairy Queen Titania — was the main event. Though it was clearly PVP, everyone seemed to be having tons of fun.</p>

      <p>“...Why is the Kingdom of Altar the only place that’s getting terrorized and reaching the verge of death?” I began to understand why some players would want to defect.</p>

      <p>Reading it all was a real buzzkill, so I just turned the PC off.</p>

      <p><em>All right, what now?</em> I thought. <em>My death penalty ends before dawn tomorrow. I guess it’s a good time to take care of some stuff.</em></p>

      <p>I had to stock up on household supplies and food, not to mention that I’d yet to unpack all the things I had brought here upon moving. Plus I had to start getting ready for college, which would begin in just a month.</p>

      <p>There were lots of things I had to do in reality.</p>

      <p class="centerp section-marking">◇</p>

      <p>By the time I was done shopping, unpacking my stuff, and finishing up dinner, it was already past ten o’clock. I checked the message boards, and sure enough, the player killers weren’t taken care of even after two days of in-game time. If the rumors were true and Dryfe Imperium players were really the ones responsible, they would likely try to keep the situation like this until right before the war started. That put me in a bit of a pickle, since I wouldn’t be able to use any of the standard places for leveling. All the hunting grounds close to the four gates of the capital were occupied by player killers. That meant that I couldn’t even leave the capital.</p>

      <p>Even if I somehow broke through their blockade and got to another town, the only hunting grounds that fit my level were around the capital.</p>

      <p><em>If there’s one place I can go to...</em></p>

      <p>“Guess I have no other choice,” I said aloud.</p>

      <p><em>...it’s that special beginner’s hunting ground that my brother told me about.</em></p>

      <p>All of the hunting grounds he’d told me about were beyond the four gates of the capital, but there was one exception. I’d been told it was a place that the player killers couldn’t reach, and since I hadn’t seen anyone posting that it was affected, it was probably true. However, that hunting ground had problems of its own.</p>

      <p>My brother had told me what those problems were, and I’d become averse to the idea of going there. However, since I couldn’t use the standard hunting grounds, that place was my only real option.</p>

      <p>I went to sleep early, woke up at dawn, confirmed that the penalty was gone, and hastily logged in.</p>

      <p class="centerp section-marking">◇</p>

      <p>Three days had passed in the game. The time of day was evening — just like when I’d died.</p>

      <p>The place I’d spawned at wasn’t Noz Forest, but the large fountain where my brother had waited for me on the first day. While we had been walking around the town and shopping, he had told me that it was one of the capital’s save points, so I’d set it as the place where I’d revive.</p>

      <p><em>All is as it should be,</em> I thought. <em>The death penalty ends and you automatically revive at your save point.</em></p>

      <p>“...I see you’re back, Master.” Before I realized it, Nemesis was standing next to me in her human form. She’d left the crest without me noticing it.</p>

      <p>“Yeah. I’m back,” I said.</p>

      <p>She said nothing.</p>

      <p>“...Hmm.”</p>

      <p><em>Man, this is awkward.</em> The fact that I had gotten the death penalty made our reunion really unpleasant. I’d gotten killed because of my own ineptitude, so I had to apologize to her...</p>

      <p>“Sor—”</p>

      <p>“No need.” She stopped me before I could finish.</p>

      <p><em>Oh, yeah, she knows exactly what I’m thinking.</em></p>

      <p>“Stop thinking such ludicrous things,” she said. “I’m the one who feels awkward and needs to apologize.”</p>

      <p>“Eh?”</p>

      <p><em>Why?</em></p>

      <p>“...Before the incident, I went on and on about how I was the greatest and nothing could ever match me, but the very first time we fought against an enemy Embryo, I could do nothing to protect you from dying. I am infuriated by my own lack of worth and power.” Nemesis expressed her frustration by biting into her lip so hard that I could see a small trail of blood go down her chin. <em>That</em> was just how guilty she felt.</p>

      <p><em>But...</em></p>

      <p>“But you’re wrong.” I said. “If you hadn’t protected me against the second attack, we would’ve been defeated way earlier. Seriously, it’s my fault for being bad at the game. It makes me look pretty pathetic when you consider that I want to join the rankings.”</p>

      <p>“No! It’s my fault because my skill wasn’t strong enough to protect you from the final attack!” Nemesis exclaimed.</p>

      <p>“Don’t be stupid! It’s my fault because I couldn’t operate in a manner appropriate for our ability!”</p>

      <p>Nemesis hit me in the chest. The punch was very weak. And the words that left her mouth...</p>

      <p>“It was my lack of power. If you hadn’t been a Master — a player — I... you and me both... would now be gone forever... and that scares me beyond belief...”</p>

      <p>The words that left her mouth displayed a fragility far greater than the fist on my chest. The same girl that hadn’t stopped talking about the extent of her greatness was now showing her weak side.</p>

      <p>“Nemesis...” I said.</p>

      <p>She only sniffled in response. Nemesis was crying. Her permeable tears were a sure sign of fragility and transience. When she cried, Nemesis didn’t seem like a mere game character.</p>

      <p>“...you might be right.”</p>

      <p>My words made her shoulders shiver. As if to calm them down, I placed my hands on them.</p>

      <p>“However, Nemesis, I really don’t think that this failure is only your fault,” I continued. She was one or two heads shorter than me, so I bent down a little bit and looked her straight in the eyes. “And... just as you said, it wasn’t only my own powerlessness, either.”</p>

      <p>“Master...?” Nemesis asked.</p>

      <p>Nemesis wasn’t the only one who was inept. Nor was my powerlessness the only thing to blame for this.</p>

      <p>“This failure... is <em>our</em> fault,” I concluded. That was the only correct answer. “My level was low. You haven’t matured as an Embryo. And most important of all — we both lacked experience. That’s why we were killed by him.”</p>

      <p>That defeat was in the past, and the past wasn’t something you could change.</p>

      <p><em>This death penalty might leave a stain on our record.</em></p>

      <p>“Even so, both of us are alive,” I said.</p>

      <p>I had gotten killed, but since I was a player — a Master — my life continued as normal. And, if you ignored the possibility of her evolution slowing, Nemesis was okay, too.</p>

      <p>“Which means it’s all fine, isn’t it?” I said. “We can still go on and become stronger than before.”</p>

      <p><em>We Masters and Embryos can get back on our feet countless times,</em> I thought. <em>Who cares about a stain on our record, anyway? I don’t want the path I travel to be a bed of roses. Even if we’re slightly hurt, we’re still standing on our own two feet, aren’t we?</em></p>

      <p>“Let’s become strong and have our revenge on that scumbag,” I said.</p>

      <p><em>In fact, we have a new goal now,</em> I thought. <em>We’ll level up, evolve, become better at the game, and eventually grind him into paste, fair and square.</em></p>

      <p>“...You are an unexpectedly demanding man.” My words made Nemesis adopt a wry smile. “However, you couldn’t be more right,” she went on. “Indeed, not letting go of the past when it hinders your march to the future is the height of folly. We still have a road in front of us.”</p>

      <p>She wiped away her tears. All that was left on her face was a familiar, indomitable grin.</p>

      <p>“I don’t know his name, but that Master will get what’s coming to him.” Nemesis raised her right hand. “Let’s go, Master! Let’s become strong — no, the strongest! No one will be able to harm us then!”</p>

      <p>“Hell yeah!” I cried. “Let’s do this, Nemesis!”</p>

      <p>And so, we linked our arms together. I didn’t get any inelegant messages saying something along the lines of “Your bond with Nemesis has deepened,” but I could feel it having happened. Nemesis and I were closer than ever before.</p>

      <p>That moment was our true starting point.</p>

      <p class="centerp section-marking">◇</p>

      <p>By the way, I didn’t care about it while talking to Nemesis, but since the fountain was a save point, we were surrounded by many other players. They could see and hear our exchange with no problem, and when Nemesis and I joined hands, we were greeted by a round of applause.</p>

      <p>With our faces red from embarrassment, we chose to leave the place, giving our conversation an unsatisfying ending.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter4">
    <div class="main">
      <h1>Chapter Four: Tomb Labyrinth</h1>

      <p><em>Royal Capital Altea — Paladin Ray Starling.</em></p>

      <p>After running away from the fountain plaza, we went out on a large road surrounded by shops on both sides.</p>

      <p>“All right, so we both want to become strong,” I said. “Our best option would have been to level in the hunting grounds surrounding the capital, but the current situation doesn’t allow that.”</p>

      <p>“The player killers are still active, after all,” Nemesis agreed.</p>

      <p>If we wanted to have our revenge on the player killers, we’d have to level in Noz Forest, but with them still being there, we’d end up getting PK’d the moment we left the capital.</p>

      <p>“That’s why we’ll go to the last available hunting ground that my brother told us about,” I said.</p>

      <p>“The Tomb Labyrinth, correct?” she asked.</p>

      <p>“Yeah,” I said.</p>

      <p>Tomb Labyrinth. Out of all the hunting grounds surrounding the capital, it was the only one that was <em>inside</em> it. It was a great, maze-like dungeon that extended below the capital’s graveyard.</p>

      <p>While my death penalty had been active, I’d taken a look at the walkthrough wiki and found out some important things about it.</p>

      <p>First, it was an underground dungeon with a theme and set of monsters that changed every five floors down.</p>

      <p>Second, the deeper you went, the stronger the monsters became.</p>

      <p>Third, the lower floors were swarming with monsters so powerful that they put Demi-Dragon Worms to shame.</p>

      <p>Fourth, the monsters in the upper floors were weak — about as strong as those appearing around the capital.</p>

      <p>Fifth, the walkthrough wiki’s volunteers had confirmed 415 floors so far.</p>

      <p>The most important point was the fourth one. In the upper floors, we newbies could level without worrying about getting killed by players.</p>

      <p>“Normally, the other beginners would completely flood it, but that won’t happen here, right?” Nemesis spoke.</p>

      <p>“Yeah, most of the other beginners should be unable to get in,” I replied.</p>

      <p>“...Tough world, isn’t it?” she asked.</p>

      <p>“Seriously.”</p>

      <p>Once we remembered the reason why the other beginners couldn’t enter, Nemesis and I heaved a long sigh.</p>

      <p>After dinner, we arrived at the graveyard where we could find the Tomb Labyrinth.</p>

      <p>As obvious as it might’ve been, the graves here were Western-style, not Japanese. We were surrounded by countless tombstones, displaying the names of the deceased and the years they had been born in and died. It was a large graveyard, so there was a map at the entrance. It showed that the Tomb Labyrinth was quite a distance inside. There was even a guardroom for the soldiers stationed there.</p>

      <p>Making our way to our destination, we walked through the graveyard.</p>

      <p><em>I’ve gotta say... this unfamiliar sight of a Western graveyard at night is pretty creepy,</em> I thought. <em>Though I guess thoughts like that will only get Nemesis to make fun of me and... hm?</em></p>

      <p>“Nemesis?” I asked.</p>

      <p>She didn’t respond. There was no expression on her face. In fact, she was making an active effort to not display any emotions.</p>

      <p><em>It’s gonna be our first battle since coming back from the death penalty, so she might be a bit on-edge,</em> I thought.</p>

      <p>“Nemesis,” I said.</p>

      <p>“What... is... it...?” Nemesis spoke so clumsily that I could almost hear her voice creak like the mouth of some rusty old doll.</p>

      <p>“...It’s nothing.”</p>

      <p>“I... see...”</p>

      <p>I wondered, <em>Is she on-edge or just tense? I can’t tell. Well, I don’t mind if she’s on-edge. We just recently revived, after all. But man, this graveyard is really grim.</em></p>

      <p>Well, nighttime graveyards weren’t lit up by anything, so it was only natural for them to be grim. It was the perfect place for one of those generic horror movie scenes in which zombies crawled out of their graves, banded up into an army, and closed in while losing parts of their bodies.</p>

      <p>“...Hm?” I asked.</p>

      <p>Right after I pictured a horror scenario, Nemesis took hold of my hand. I could feel it shaking, and when I looked at her face, I saw nothing but anxiety.</p>

      <p><em>...Oh, I see how it is.</em></p>

      <p>“Are you... afraid of ghosts and stuff?” I asked.</p>

      <p>She didn’t respond. Instead, she simply looked away.</p>

      <p><em>I guess she is and doesn’t want to say it,</em> I thought.</p>

      <p>Nemesis always spoke in a proud manner, ate a lot, and was slightly arrogant. Yet, she was afraid of ghosts. Despite us becoming closer, I still didn’t have a good grasp of her character.</p>

      <p>“If you’re afraid, why not just change your form right now?” I suggested.</p>

      <p>“...Okay.” Still holding on to my hand, Nemesis transformed into a greatsword. For some reason, I could feel her becoming more composed.</p>

      <p><em>I guess her form has an effect on her mental strength,</em> I thought. <em>Keeping her psyche safe comes at the cost of making me look like a weirdo who hangs around graveyards with an unsheathed greatsword in hand, but whatever. I’ll just go to the entrance before anyone notices.</em></p>

      <p class="centerp section-marking">◇</p>

      <p>I finally arrived at the entrance to the Tomb Labyrinth. It took me about ten minutes, which spoke volumes about just how large the graveyard was.</p>

      <p><em>Well, there’s a large labyrinth underground, so it’s only to be expected,</em> I thought. And since I was near the entrance to a dungeon now, no one would tell me off for holding a weapon.</p>

      <p>The gate to the Tomb Labyrinth was made of stone and looked really sturdy. There was a soldier stationed right next to it. He quickly noticed us.</p>

      <p>“Master, are you wishing to explore the Tomb Labyrinth? You need to have a ‘Tomb Labyrinth Exploration Permit’ to do that,” he said.</p>

      <p>A Tomb Labyrinth Exploration Permit. This item was the very reason why no beginners were exploring the Tomb Labyrinth.</p>

      <p>It was a possible reward for quests of difficulty level three or a random drop from boss monsters. They were being sold on the player market, too, but one went for an average of 100,000 lir. It wasn’t an amount an average beginner could easily procure. Basically, this was a harsh beginner’s hunting ground that required the players to pay a kind of toll.</p>

      <p>Luckily for me, I’d had the leftover money I’d gotten from selling the Demi-Dragon Worm’s drops. So, before going to this graveyard, I had bought my permit. I’d even finished filling it in and actually making it effective, so I was good to go.</p>

      <p>When I reached for my items and dug for the Permit with my left hand...</p>

      <p>“Oh? You’re a Paladin, aren’t you?” the soldier asked. “Then there’s no need for that. Please go inside.”</p>

      <p>He moved away from the gate without me having to show my permit.</p>

      <p><em>...Excuse me?</em> I thought.</p>

      <p>“...What about the Tomb Labyrinth Exploration Permit?” I asked.</p>

      <p>“Paladins don’t need one,” he answered.</p>

      <p><em>...Are you for real?</em></p>

      <p>“Oh dear, what a waste of 100,000 lir,” Nemesis chimed in.</p>

      <p>“Oohhh...” Groaning, I fell to my knees.</p>

      <p>Not even the death penalty could do it, but this loss of money had made me collapse in an instant.</p>

      <p>The shock was huge. If I had to gauge it, it was about three times worse than playing one of those retro RPGs, spending tons of time getting enough money to buy an iron sword, only to get it from the next treasure chest you found.</p>

      <p><em>Goddammit, that money is the equivalent of 1,000,000 yen...</em> I thought. <em>I filled it in, too, so it’s exclusive to me and I can’t even resell it now...</em></p>

      <p><em>Why didn’t my brother tell me about this...? Well, I guess he wouldn't know, not being a Paladin and all.</em></p>

      <p>As I kneeled on the ground due to the shock, the soldier called out to me in a worried tone. “A-Are you okay, sir?”</p>

      <p>Nemesis chimed in, “I know you’re shocked, but nothing will come out of moping about it.”</p>

      <p>“...Y-Yeah, you’re right,” I said.</p>

      <p><em>Time to get a grip,</em> I told myself. <em>I simply have to raid this dungeon with the intention of making up for the lost money.</em></p>

      <p>“So, can I go inside?” I asked.</p>

      <p>“Y-Yes. Be careful, sir.” The soldier spoke a spell that opened the gate. Beyond it, I saw a gloomy darkness and a staircase leading down.</p>

      <p>“Let’s go, then,” I said.</p>

      <p>“Onward,” Nemesis agreed.</p>

      <p>We made our first step into the Tomb Labyrinth.</p>

      <p>My brother told me about the Tomb Labyrinth during a little break we had while we were buying my gear.</p>

      <p>“Here’s something to bear in mind: the largest dungeon in this country is <em>inside</em> the capital,” he’d said.</p>

      <p>He had just finished telling me about the beginner’s hunting grounds surrounding the city, so this info was like a little bonus.</p>

      <p>“<em>Inside</em> the capital? What do you mean?” I’d asked.</p>

      <p>“Bear-ly a few dozen meters below us, there’s a dungeon called the ‘Tomb Labyrinth,’ and it’s the largest one in the Kingdom of Altar — no, this whole continent,” he’d explained.</p>

      <p>Nemesis and I had stared darkly at the ground we were standing on.</p>

      <p>“It doesn’t seem like Dryfe even needs to do anything for this country to be destroyed,” said Nemesis.</p>

      <p>“Just bear with me here. The Tomb Labyrinth is a created dungeon,” my brother had continued. “The monsters inside will never crawl out — you can be paw-sitive about that.”</p>

      <p>“‘Created dungeon?’” I repeated the unfamiliar term, and my brother instantly began explaining it.</p>

      <p>“<em>Dendro</em> has two bear-ly similar types of dungeons,” he began.</p>

      <p><em>You really like giving explanations, don’t you, bro?</em> I thought.</p>

      <p>“The first type is a ‘natural dungeon,’” he continued. “It’s used fur places that weren’t dungeons before, but that got the function due to various circumstances. The Old Orchard is the bear-fect example.”</p>

      <p>He went on to add that natural dungeons also included dens created by intelligent creatures and fortresses felled by monsters.</p>

      <p>“The other type is a ‘created dungeon,’” he went on. “Just as the name implies, these are places that were created fur the sole purpose of being dungeons. Bear with me if I sound a bit meta here, but they’re basically dungeons made by the devs.”</p>

      <p>“Oh?” I asked, expressing my desire to know more.</p>

      <p>“There are three main differences between natural and created dungeons that you must always bear in mind,” he answered. “First of all, monsters in created dungeons never go outside.”</p>

      <p><em>That makes sense,</em> I thought. <em>Living in the capital would be too dangerous otherwise.</em></p>

      <p>“The second difference is that monsters automatically respawn regardless of any ecosystems and reasonable causes,” he continued.</p>

      <p>The people of this world had realistic personalities and lives, and monsters normally weren’t different in that regard, since they adhered to proper ecosystems. They wouldn’t simply appear with no rhyme or reason. Just as dead tians wouldn’t come back to life, entire species of monsters could be made extinct.</p>

      <p>However, that didn’t apply to created dungeons, where monsters respawned without limit. It was perfectly natural for there to be undead-type monsters despite the lack of corpses.</p>

      <p>“The third difference is that every few floors you run into a boss monster that — along with its standard drops — gives you additional rewards,” he added.</p>

      <p>Unlimited monsters meant unlimited treasure. The grade of the drops increased the lower you went, and — in the deeper levels — items that could be sold for 1,000,000 lir weren’t uncommon.</p>

      <p>This dungeon was a real cornucopia.</p>

      <p>“There are other created dungeons, but the one with the most bear-able entry requirements is the Tomb Labyrinth,” my brother added. “When you look at <em>Dendro</em> as a game, this is obviously the best reason to choose the Kingdom of Altar. After all, to get in, you only need to have a permit and be aligned with the kingdom.”</p>

      <p>He paused for a moment, then continued.</p>

      <p>“Just like the fertile land around these parts, it’s one of the reasons why Dryfe wants to conquer this country. They can’t enter the Tomb Labyrinth until they do that, you know?”</p>

      <p><em>So, to Dryfe, the Kingdom of Altar is like a treasury with an endless supply of commodities, eh?</em> I thought.</p>

      <p>“Did you stay with the kingdom so you could raid the Tomb Labyrinth?” I asked. “Is this the reason why you didn’t switch to the country you like once you got your suit?”</p>

      <p>“I’ve bear-ly been there,” he answered.</p>

      <p>Not the reply I’d been expecting.</p>

      <p>“Why?” I asked.</p>

      <p>“...Baldr’s fifth and higher forms are too large to use in the dungeon,” he admitted.</p>

      <p>I had no words. The saying “less is more” crossed my mind. I didn’t know if it fit his case, but it was a clear example that there were pros and cons to everything.</p>

      <p><em>And holy crap, what kind of Embryo is larger than a tank?</em> I thought.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>And now, Nemesis and I were exploring the very same Tomb Labyrinth my brother and I had talked about. Since it was underground, I expected it to be pitch black inside, but it was actually relatively well-lit. This was because the walls and ceiling were covered in luminescent minerals.</p>

      <p>The labyrinth’s hallways were quite wide — enough to let about ten people walk side by side. The ceiling, however, wasn’t too high. Just as my brother had said — it would get in the way of anything particularly big.</p>

      <p>I thought that simply breaking the ceiling would solve that problem, but my attacks couldn’t even put a scratch on it. This dungeon was clearly indestructible.</p>

      <p>“Despite having the eerie word ‘tomb’ in its name, it’s quite a clean dungeon,” Nemesis commented.</p>

      <p>“It’s probably being cleaned automatically,” I said. I could only assume that, instead of realism, the main force at work in this dungeon was the will of the developers.</p>

      <p>“I wasn’t sure if I could handle a tomb, but if all of it is like this, then there’s nothing to worry about,” Nemesis said. She was getting increasingly motivated. “I’ll split apart all the monsters this dungeon sends our way!”</p>

      <p>“Hate to rain on your parade, but the only monster type that spawns in this floor is undead,” I said.</p>

      <p>“...Eh?” She let out an expression of shock and confusion.</p>

      <p>I pointed further into the hallway. <em>Speak of the devil.</em></p>

      <p>Clad in tattered clothing, there was a person — or, rather, a monster that looked like a person’s bones. The fact that it was a monster was proven by the name above it — Civilian Skeleton.</p>

      <p>Just as the name said, it was clearly the skeleton of a civilian, rather than that of a soldier or knight. It had no weapon, so it merely extended its empty hands and closed in on me while making a rattling sound.</p>

      <p>Due to <em>Infinite Dendrogram</em> having such realistic graphics, the skeleton was quite a scary sight. The hints of red and yellow on the bones — likely left behind by dried bodily fluids — made the sight a bit too vivid and slightly unpleasant.</p>

      <p><em>Things like this make me wish I had chosen anime or CG as my visual setting,</em> I thought.</p>

      <p>Despite the gross presence, Nemesis wasn’t saying a word.</p>

      <p>“Nemesis?” I called out to her.</p>

      <p>More silence. She didn’t respond at all.</p>

      <p><em>I guess she’s trying not to think about anything,</em> I thought. After all, I was about to use her to attack it.</p>

      <p>“Let’s do this,” I said and brandished my greatsword. I had my reservations about attacking a person’s bones, but since I had to, I charged at the monster.</p>

      <p>My attack made the skeleton’s arm and shoulder shatter into many pieces. I then swung towards its head with the flat of the greatsword.</p>

      <p>The skeleton’s skull got easily pulverized, turning the monster into shining dust that vanished.</p>

      <p>“Can’t you do it without making me touch it so much?” Nemesis complained.</p>

      <p>“Are you saying we have some means of fighting besides slashing and smashing?” I asked. I had no offensive magic, and Nemesis’s only skills were the defensive Counter Absorption and the counterattack Vengeance is Mine. Though I’d bought some consumable magic items, they were limited.</p>

      <p><em>Physical melee attacks are my only option with these enemies,</em> I thought.</p>

      <p>“That is true, but... it’s hard on my mental health,” Nemesis complained.</p>

      <p>“Well, at least we’re fighting skeletons here, not anywhere else,” I said.</p>

      <p>By “here,” I was referring to the fact that we were in a created dungeon. The Civilian Skeletons here weren’t actual remains of people, but monsters made just for the sake of being monsters. Even though they were eerie, they weren’t haunted or anything.</p>

      <p><em>When you think about it, these monsters are strangely sanitary,</em> I thought. <em>They even come out dry and fresh.</em></p>

      <p>“Hmm... that makes it a bit easier to bear,” Nemesis agreed.</p>

      <p>“Good to know,” I said. “Ah, there’s another monst—”</p>

      <p>I cut my sentence short and could hear Nemesis gasp. The creature that had come from the corner of the hallway made us both lose our words.</p>

      <p>Just like the skeleton, it was an undead-type monster. However, unlike the bare, bony frame from before, this one was... fatter. That was because its bones were covered in rotten, maggot-infested flesh.</p>

      <p>However, the covering wasn’t complete, and you could see yellow and dark red liquids dripping out of the places where its flesh was missing. Since my five senses in the game were about as strong as they were in reality, I could even smell the indescribably bad stench it was emitting.</p>

      <p>Above its head, I could see its name — Wounded Zombie.</p>

      <p>And so, the sight of the otherworldly, revolting creature made the explorer cast a D6 for a sanity check and...</p>

      <p>“...Whoa! This thing is so grotesque it made my mind drift away into another game!” I exclaimed.</p>

      <p><em>This is a bit much, honestly,</em> I thought. <em>Though I guess it’s natural for an undead lair to have zombies right next to its skeletons.</em></p>

      <p>Unlike the skeleton from before — which had been silent except for the rattling — this zombie was closing in on us while groaning and splashing its fluids on the ground.</p>

      <p>“Looks like we have another fight on our hands,” I said.</p>

      <p>“Huh?! W-Wait! Are you seriously going to use me to cut <em>that</em>?!” Nemesis yelped.</p>

      <p>“...Like I said, that’s not a dead person,” I said. “It’s just a monster made for this dungeon.”</p>

      <p>“No no no no! I don’t care how it was born, I simply <em>do not</em> want to cut that!” she insisted.</p>

      <p>“Nemesis...” I began. <em>It looks like she really doesn’t want to do this, so...</em> “I’ll polish you when we get back, so just bite the bullet for now.”</p>

      <p>“Nooooooo!”</p>

      <p>I raised Nemesis as high as the pitch of her scream and charged towards the zombie.</p>

      <p class="centerp section-marking">◇</p>

      <p>Silent sniffling resounded through the hallways. Its source was none other than Nemesis. Still in my hand, she was weeping like some cursed weapon as I continued walking through the Tomb Labyrinth.</p>

      <p>Since we’d entered, we had defeated twelve zombies, thirty skeletons, and five monsters known as “Haunted Spirits.” That had gotten me two level-ups, making me level 7. My total HP was now above 1,000.</p>

      <p>“Th-The rotten flesh... the maggots...” Nemesis continued weeping. The battles with the zombies had taken a toll on her sanity.</p>

      <p>If there was a silver lining to this cloud of hers, it was the fact that the monster corpses completely disappeared, leaving nothing but the drops. Otherwise, both Nemesis and I would look terrible due to all the flesh and fluids covering us.</p>

      <p>“Ohh... I never expected you to be such a sadist...” Nemesis moaned.</p>

      <p>“Hey, I didn’t do it because I wanted to,” I responded. “It was necessary.”</p>

      <p>“...I feel like you performed a strangely high number of full swings, though,” she snapped suspiciously.</p>

      <p>“It’s just your imagination,” I said. Though doing them had made me look like the villain from some splatter flick, full swings with my greatsword had been extremely effective at shattering the fragile undead around here. It had made me feel like I was in a Western action game.</p>

      <p>Also, although unrelated, the groans of the zombies had all been drowned out by Nemesis’s screaming whenever she had their scattered flesh on her. I eventually got used to it, making it much like background music.</p>

      <p>“Damn, the last battle cost me half of my Gems,” I said. A Gem was an item type I had prepared for battles against spirits.</p>

      <p>As the name implied, spirits were ghost-like monsters that had the annoying property of being immune to physical attacks. Not only that, they also drained MP or SP instead of HP and had attacks that applied debuffs to their targets.</p>

      <p>I had no offensive magic, so I couldn’t do much against them. And though Vengeance is Mine could harm spirits, it could only counter based on the HP I’d lost — not MP or SP. I was woefully underequipped to battle them.</p>

      <p>However, I’d read the wiki info on the Tomb Labyrinth, and I’d known I’d run into spirits here. So I’d been aware that I’d need a countermeasure against them, and bought the Gems for this very purpose.</p>

      <p>When used, a White Lance Gem would release a shining spear of holy magic, making it really effective against spirits.</p>

      <p>However, they could only be used once, and each cost a whole 1,000 lir. I’d bought a total of ten, but the encounters so far had already cost me half of them.</p>

      <p><em>But there’s a little problem...</em> I thought.</p>

      <p>“I wonder how much we will get for the drops we’ve gathered so far,” Nemesis said.</p>

      <p>She’d finished the thought in my stead. For one, it was clear as day that I’d yet to gather even 10% of the money I’d spent on the Gems. To be able to continuously hunt in this dungeon, I wanted to make up for the lir I’d lost, but the returns here were far too small.</p>

      <p>Zombies and skeletons dropped items such as Tattered Clothing or Bone Pieces, and I wasn’t even sure if they could be exchanged for money. Spirits were even worse, since they didn’t drop anything at all.</p>

      <p>If, at the very least, the monsters here had been animal-type, I could have made some nice money selling their pelts or fangs. But as things actually were, my wallet was in serious trouble.</p>

      <p>“Let’s try going a bit further,” I said. “We didn’t even find the stairs to the next floor, after all.”</p>

      <p><em>Maybe we’ll find a treasure chest if we keep it up,</em> I thought. Despite being in a dungeon, we’d yet to see a single one of those.</p>

      <p>“Understood,” Nemesis agreed. “...By the way, Master?”</p>

      <p>“What?” I asked.</p>

      <p>“Once we’re back, I will hold you to your word, and you <em>will</em> polish me,” she said.</p>

      <p>“Well yeah, sure,” I replied.</p>

      <p><em>I guess the fact that the fluids and pieces of flesh disappeared didn’t do much to better her mood.</em></p>

      <p class="centerp section-marking">◇</p>

      <p>A few minutes later, we came across a set of stairs of the same design as the ones we had used at the entrance.</p>

      <p>“Well, this seems like the end of this floor,” I said.</p>

      <p>“No boss to be seen here,” Nemesis added. “I was told that you encounter them every five floors.”</p>

      <p>The floors in the Tomb Labyrinth came in sets of five. The first five floors were the haunt of undead monsters, and the fifth had an undead boss.</p>

      <p>Defeating it would open the entrance to the sixth floor, which was infested by an entirely different monster type until floor ten, and from there, the pattern repeated seemingly endlessly.</p>

      <p>The walkthrough site described floors until 415, which was in the domain of dragons. The boss on that floor was too strong for anyone to defeat, so anything beyond was simply called uncharted territory.</p>

      <p>That term wasn’t appropriate, though, since it actually referred to the fact that no one among those managing the walkthrough site or contributing to the wiki had ever made it past that floor. It was entirely possible that someone knew what was beyond floor 415, but kept it secret to have a little advantage.</p>

      <p><em>Man, I have absolutely no business pondering places I can’t even get to,</em> I thought. <em>I’ll just leave for now. But man, what should I do about this dungeon’s high cost and low returns...?</em></p>

      <p>As I got lost in thought, Nemesis called out to me. “Master!”</p>

      <p>Her quiet voice was a signal for me to be cautious.</p>

      <p>“What’s wrong?” I asked.</p>

      <p>“Someone is coming up the stairs,” she answered.</p>

      <p>I instantly shifted my attention to the staircase.</p>

      <p>I strained my ears and could faintly hear the echoes of someone’s footsteps as they went up the stairs.</p>

      <p>Monsters couldn’t go between floors, so it was clearly a player. Done with their business here, someone was taking their leave by using the stairs.</p>

      <p>Strangely enough, however, there was only one set of footsteps. If someone had come here to explore the dungeon instead of — like myself — grinding levels in the low-level floors, they would surely come with a party.</p>

      <p>As I considered that, the footsteps suddenly stopped.</p>

      <p>A moment later, from the darkness below, something extended towards me. It was almost too fast for me to perceive.</p>

      <p>There was some distance between me and its source, so I could sense it coming. However, right when I came to realize what it was, it was already right in front of me.</p>

      <p>The thing coming straight towards my face was an attack against me.</p>

      <p>“Counter Absorption!” Nemesis and I shouted, and something slammed against the newly-created barrier of light.</p>

      <p>That something... was a chain.</p>

      <p>Its end had the shape of a pyramid. Though blocked by the Counter Absorption barrier, it continued applying an immeasurable amount of pressure to it, making me fully aware that it could have pulverized my head in a single hit.</p>

      <p>“Th-This power...!” Nemesis’s voice made it obvious that it was hard to bear. She hadn’t reacted like that when defending against the Demi-Dragon Worm’s attacks, or the bullet monster’s.</p>

      <p><em>That means that this attack is far greater than those two!</em> I thought in disbelief.</p>

      <p>“I... I can’t take it...!” Nemesis groaned. The barrier of light that had defended me against such powerful attacks began to crack, and...</p>

      <p>A sudden turn of events. Right before the barrier shattered, the chain returned to its source.</p>

      <p>We got a moment of reprieve.</p>

      <p>However, such an action from this opponent could only mean one thing.</p>

      <p>“They’re going to attack again! Prepare yourself!” Nemesis shouted.</p>

      <p>Just as she’d said, they were preparing for a second attack.</p>

      <p>I hastily jumped back, creating some distance between us.</p>

      <p>“...What do we do now?” I asked both Nemesis and myself.</p>

      <p>We had one more Counter Absorption use, but that was the extent of it. We couldn’t handle anything beyond the next attack.</p>

      <p>I got into a battle-ready posture and waited for the chain to come at us again.</p>

      <p>Some time passed, and I grew confused. The next attack showed no sign of happening.</p>

      <p>I couldn’t sense the chain coming, but I could hear the footsteps as the attacker resumed going up the stairs.</p>

      <p>“Master... which do you choose?”</p>

      <p>I instantly understood what Nemesis had in mind.</p>

      <p>There were only two options for me: to turn back and run away, or to face whoever was coming up.</p>

      <p>If the first attack was anything to go by, the power difference between us was so great that I couldn’t ever hope to win. I had a feeling that this person was stronger than the player killer we’d sworn to get revenge on.</p>

      <p>If it was possible, I didn’t want to fight them, but the possibility of having that chain attack me from behind crossed my mind, rendering me unable to move from my battle-ready posture.</p>

      <p><em>If I can’t move, running isn’t even an option,</em> I thought.</p>

      <p>Hesitant as I was, I couldn’t expect either choice to bring me much success, so I could only go with a certain gamble.</p>

      <p><em>When he comes up, I’ll nullify his next attack, multiply all the damage he was supposed to give me, and launch a counterattack,</em> I laid out the plan in my head. <em>I have no idea if I’ll land the hit or if it’ll be enough to kill him, but it’s my only chance.</em></p>

      <p>Knowing my thoughts, Nemesis readied herself and aligned her attitude with mine.</p>

      <p>The footsteps became louder, and — sooner than later — the person was in sight.</p>

      <p>It was a young man who looked several years older than me. Though he had a nice face, he looked as though he was glaring at something. I would have even gone as far as to call him slit-eyed.</p>

      <p>His apparel was simply bizarre. Though the metal armor on his upper body was from the Riot set — the same as mine — for some reason or another, his lower body was covered in a hakama. Then there were his metal greaves, six familiar chains — three in each hand — rings on all of his fingers, and a feathered hat on his head.</p>

      <p>But the most extreme article of clothing he wore was the blue long coat hanging on his shoulders.</p>

      <p>None of his clothes were strange by design, but the coordination between them resulted in something truly bizarre.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert4">
    <img alt="insert4" class="insert" src="../Images/Insert4.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter41">
    <div class="main">
      <p>It seemed like a generic case of “I equipped only the highest quality items and ended up looking weird” that every gamer was familiar with.</p>

      <p>The reason I assumed the gear was high quality was simply because it all <em>looked</em> masterfully made, even to my inexperienced eye.</p>

      <p>The man in strange clothing threw me a glance...</p>

      <p>“...So it <em>was</em> a person.”</p>

      <p>...and spoke up with a sigh.</p>

      <p>A moment later...</p>

      <p>“I attacked you because I thought you were a monster! I’m so sorry! My bad!” He bowed before me and apologized.</p>

      <p>“...Huh?” I said.</p>

      <p class="centerp section-marking">◇</p>

      <p>Still in the room with the staircase, the strangely-dressed man and I began having a little chat.</p>

      <p>Nemesis had returned to her human form.</p>

      <p>The room we were in was protected by a barrier item — placed by the man — that kept monsters at bay, so we were safe.</p>

      <p>The first thing I found out upon speaking to him was that he wasn’t a PKer. Also, his mannerisms and the way he spoke gave me the impression that he was a... reasonably good person.</p>

      <p>As for why such a man would attack me...</p>

      <p>“So, you confused me with a monster, huh?” I repeated his excuse.</p>

      <p>“Yep... I’m really sorry,” he said.</p>

      <p>As he’d been making his way up here, he had felt someone examining the hints of his presence. The light shining behind me had made my silhouette look inhuman, so, just to be on the safe side, he had attacked me.</p>

      <p>...I couldn’t really blame him. After all, in her black greatsword form, Nemesis would reach right up to my shoulder. My silhouette could easily look monstrous.</p>

      <p>“Monstr—?!” Nemesis yelled.</p>

      <p>My observation seemed to have been quite a shock to Nemesis, but I chose to ignore it.</p>

      <p>“So tell me, why are you going solo in such a shallow floor?” The strange man asked.</p>

      <p>“Oh, I’m just leveling,” I replied.</p>

      <p>“Leveling? Why here, of all places?” He seemed puzzled. “Your total level is... 7, huh? Shouldn’t someone your level be leveling outside? It’s both easier and more profitable. I know you’re a Paladin and didn’t have to buy a permit, but still.”</p>

      <p><em>...I did buy one, though,</em> I thought and lamented the wasted money once more. I also couldn’t help but notice that he’d been able to see my level.</p>

      <p>“Didn’t you know? No one can use the beginner’s hunting grounds due to the terrorism there,” I explained.</p>

      <p>“Terrorism?” he asked.</p>

      <p>“Yes, player killers are terrorizing the beginner’s hunting grounds around the capital. It’s been going on for three in-game days now.”</p>

      <p>“...I’ve been in this dungeon for five, so I had no idea.” He added that he didn’t even check the Internet for game-related news.</p>

      <p>I couldn’t hold back my surprise. “You’ve been in the Tomb Labyrinth for five whole days?! What where you doing here?!”</p>

      <p>“Just a little marathon,” he said. “I wanted to see how far down I could go while playing solo, and then I simply came back up.”</p>

      <p><em>A bit of a tryhard, isn’t he?</em> I thought. His gear and the power behind his attack were proof that his level was really high.</p>

      <p>“How deep did you get this time?” I asked, just out of curiosity.</p>

      <p>“I got to floor 418,” he said. “That’s one more than my previous record.”</p>

      <p>The young man had spoken a number that was nigh impossible to believe.</p>

      <p>“...What.” That was about the only way I could react. Even while in a party, the tough guys from the walkthrough site could only reach floor 415.</p>

      <p>It was quite hard to accept that he had been able to go beyond where they’d gone and reach the uncharted ground while going solo.</p>

      <p>“You are...?” Nemesis asked for his name.</p>

      <p>“Oh, my name is Figaro,” he replied. “Nice to meet you.”</p>

      <p>“I’m Ray Starling,” I said. “This is my Embryo — Nemesis — and... ah!”</p>

      <p>As I introduced myself, I finally realized where I’d heard his name before.</p>

      <p>Figaro — Over Gladiator Figaro.</p>

      <p>That was the name of the one sitting at the top of the Kingdom of Altar’s duel rankings.</p>

      <p>“Are you <em>that</em> Figaro? From the rankings?” I asked.</p>

      <p>“Yep, that’s me,” he answered. “I go through lots of matches in the arena.”</p>

      <p>“Arena? Matches?” His words slightly confused me.</p>

      <p>“Yep. The arena,” he said. “In the kingdom, it’s in Gideon, city of duels. When dueling in the arena, you don’t die, even when you’re killed, and you can even win money depending on the audience you pull. It’s fun.”</p>

      <p>“‘Don’t die, even if you’re killed?’” I raised an eyebrow.</p>

      <p>“There’s a magical field that makes it work that way,” he explained. “It’s like a recreational activity with some betting on the side. There are some other tourist attractions, and the town is always lively, so I recommend you visit it someday.”</p>

      <p><em>I guess people’s tendency to cling to their desires is fully functional even when their country is on the verge of ruin,</em> I thought.</p>

      <p>“Gideon is not too far after you pass the mountain in the south, and... oh, right.” He suddenly stopped. “If the terrorists are preventing the use of beginners’ hunting spots, then the Sauda Mountain Pass is blocked, as well. The idea of there being less traffic there is... troubling.”</p>

      <p>Figaro fell silent, pondering something...</p>

      <p>“All right, then. I’ll do something about it.”</p>

      <p>...and said that.</p>

      <p>“I also have to make up for the attack I did, after all,” he added. “I’ll take care of the player killers in Sauda Mountain Pass.”</p>

      <p>“Take care? How?” asked Nemesis. “...Negotiation?”</p>

      <p>The question mark behind that word was almost audible.</p>

      <p>“You should be able to use the pass by tomorrow, so you just get some levels and come over to Gideon,” said Figaro. “Most of the time, you can find me there or in this dungeon.”</p>

      <p>“Ah, okay,” I nodded.</p>

      <p>“All right, I’ll be going, then,” he said, getting ready to leave. “Oh, have this.”</p>

      <p>Figaro reached into his bag and took out a small stone. It was a Gem — just like the ones I’d used — but this one was of a different color and carried a different kind of magic.</p>

      <p>“It’s imbued with ‘Escape Gate’ — a spell that lets you leave created dungeons,” Figaro explained. “Get all the levels you can and use it to leave this place.”</p>

      <p>“Are you sure I can have this?” I asked.</p>

      <p>“Sure am,” he said. “It’s another thing I’m doing to make up for the attack I did. After all, it would’ve been really bad if I’d given a death penalty to a newbie like yourself.”</p>

      <p>“Thank you so much,” I said. I was sincerely grateful. With this item, I could continue the hunt without having to think about the dangers I’d face on the way back.</p>

      <p><em>Figaro really is a good guy.</em></p>

      <p>“But man, you two are pretty good,” he added.</p>

      <p>I raised an eyebrow.</p>

      <p>“You were able to withstand my attack, weren’t you?” he asked.</p>

      <p>“Well, yeah, but that’s what our skill is,” I said.</p>

      <p>“I wasn’t talking about the damage,” he said. “You didn’t break when I came up the stairs.”</p>

      <p><em>Didn’t break?</em> I thought. <em>What does he mean by that?</em></p>

      <p>“I’m fond of people who don’t break,” he continued. “I like you. Hope we get to fight in the arena someday.”</p>

      <p>“That’d be nice,” I said. If — as Figaro had said — there was no death penalty there, I could act on my curiosity and fight him just to find out how strong the top of the rankings really was.</p>

      <p>“Yep. I’m looking forward to it,” said Figaro. “I’ll dedicate this cleaning to the pleasures of the future.”</p>

      <p>“Cleaning?” I asked.</p>

      <p>Figaro stood up.</p>

      <p>“See ya later, then,” he said, instead of elaborating on the strange term.</p>

      <p>“See you, too. Thank you for the Gem,” I said, choosing not to push it.</p>

      <p>With a bright smile on his face, Figaro waved us goodbye and left the room.</p>

      <p class="centerp section-marking">◇</p>

      <p>“Over Gladiator Figaro, huh?” Nemesis spoke. “Not the kind of person I expected him to be.”</p>

      <p>“Same here,” I agreed. “Based on what my brother said, I expected him to be more rebellious.”</p>

      <p>He’d told me that the reason Figaro hadn’t joined the war was because he “wasn’t interested in sloppy fights.” That had made him sound really obstinate and rebellious, but upon meeting the guy, I could only assume that he’d had his reasons.</p>

      <p>“All right, let’s get started, then,” I said. “We’ve got a Gem that lets us leave this place with no problem, so let’s go all out.”</p>

      <p>“Yeah, let’s do it,” Nemesis agreed. “No undead can be as scary as that attack from before.”</p>

      <p>Apparently, that event had made her sense of fear go numb.</p>

      <p><em>Perfect,</em> I thought. <em>We’ll be able to progress at a faster pace.</em> Up until that point, a part of me had been holding back — for Nemesis’ sake. <em>Now I can turn this little adventure into a real splatter flick.</em></p>

      <p>“Let’s resume the hunt!” I roared.</p>

      <p>“Bring it on!” she joined me.</p>

      <p>A few hours later, I was polishing Nemesis — still in her sword form — as she silently wept.</p>

      <p>This continued until the break of dawn.</p>

      <p class="centerp section-marking">◇</p>

      <p>It was ten in the morning, the day after we’d explored the Tomb Labyrinth.</p>

      <p>It was time to check out, so I walked out of the inn while drowsily rubbing my eyes.</p>

      <p>The reason for my drowsiness was the fact that I had stayed up until dawn polishing Nemesis, who had still been asleep.</p>

      <p>Instead of being in her human or sword form, she was currently inside the crest on my left hand. Nemesis was outside of it most of the time, but for most people, Embryos were something to keep in their crests.</p>

      <p>That was obvious, of course. Otherwise, my brother would have to walk around with a Gatling gun in his hands or ride around in a tank.</p>

      <p><em>And that’s something that’d have him taken away by the police for questioning,</em> I thought.</p>

      <p>Nemesis’s personality kept her outside most of the time, but now, she was focused on sleeping inside the crest.</p>

      <p><em>Seems like the R-18 zombie fest took quite a toll on her mind,</em> I thought.</p>

      <p>However, thanks to that, I’d gotten to level 12 and gained two new skills. They were “Paladin’s Aegis” and “Instant Equip.”</p>

      <p>Paladin’s Aegis was an always-active defensive skill. It was pretty good, too, since it reduced all incoming damage — magic or physical — by a whole 10%. A Paladin simply wasn’t complete without it. Since it cost absolutely no MP, it was possible to just activate it and treat it as a passive skill.</p>

      <p>The other skill — Instant Equip — allowed the user to quickly switch to wielding another weapon from their inventory. There was no need to dig through the items in the 4D bag to find it. The skill wasn’t unique to Paladins — everyone who used any sort of weapon would get it sooner or later.</p>

      <p>There were downsides to both skills, though. For example, Paladin’s Aegis could only be used by jobs in the knight grouping, while Instant Equip had a cooldown of five minutes.</p>

      <p><em>...Well, it’s not like I have a weapon I could switch to using Instant Equip,</em> I thought. Nemesis wouldn’t shut up about it if I did.</p>

      <p>“I won’t let you... cheat on me... with another weapon...” Nemesis murmured in between her breaths.</p>

      <p><em>...Is she talking in her sleep?</em> I wondered.</p>

      <p>The first thing I did once I went outside was search for info regarding the player killings in the beginners’ hunting grounds.</p>

      <p>Figaro had said that Sauda Mountain Pass would be open by now, but I had to confirm it for myself. And, sure enough, the player killing terror in that area was over. In fact, it was disappearing in the other areas, too.</p>

      <p>“I can understand the south, but the others...?” I whispered. It even included the place I had died at — Noz Forest.</p>

      <p>If the timing was anything to go by, the south had been taken care of by Figaro, but what about the others? As such questions went through my mind...</p>

      <p>“Ah, Ray!” someone called out to me. “Hey there!”</p>

      <p>“Hm?” I turned to the familiar voice’s source. It was coming from the front of a store next to the street.</p>

      <p>In a mere moment, I realized that it was Rook — the guy I’d met in one of the beginners’ hunting grounds. Unlike last time, his graceful face wasn’t covered in dirt, and he was smiling at me while — for one reason or another — wearing the uniform of a shop run by tians.</p>

      <p>“Hello,” I greeted him. “Why are you wearing that?”</p>

      <p>“Getting skills while working part-time,” he answered.</p>

      <p>Apparently, the suitable job Rook had been diagnosed with and had chosen was close to the merchant grouping. Due to that, he’d been able to learn various mercantile skills by working at shops. Just like me, he’d gained skills without having to rely on the hunting grounds.</p>

      <p>“So, what job did you pick?” I asked.</p>

      <p>“Pimp!” he answered with excitement.</p>

      <p><em>Pimp... as in... Pimp?</em> I wondered. <em>Why does that job even exist? And why is an underage boy able to take it? In fact, why is that his “suitable job” in the first place?</em></p>

      <p>“...My guess is that it’s because he has a succubus with him,” Nemesis said sleepily, still in the crest.</p>

      <p><em>Well, that makes sense,</em> I thought. <em>Look at those bright eyes of his, though. Does Rook even know what the word “Pimp” means?</em></p>

      <p>“...What kind of skills do you Pimps have, anyway?” I asked.</p>

      <p>“I’ve got these ones so far!” Rook said eagerly and showed me his skill summary.</p>

      <p>Wordlessly, both Nemesis and I ran our eyes through it.</p>

      <p>In conclusion — he was a true pimp.</p>

      <p>There was Male Temptation — a skill that Charmed females and had a chance to tame monsters. Then there were Female Monster Strengthening and Female Slave Strengthening, which did exactly what the names said. I couldn’t ignore Influence, either, which increased the rewards from doing work and made the whole picture look very... “master”-oriented.</p>

      <p>The only normal skill among those was “Insightful Eye,” which seemed to have come as an extra.</p>

      <p><em>But man, “Charm” is quite a scary debuff,</em> I thought.</p>

      <p>According to the game’s help files, it was a stronger form of the “Confuse” debuff. Charmed creatures would protect the one who Charmed them and attack their enemies. Basically, it made them guard the enemy and fight their allies. Players weren’t excluded from its effects, either — their bodies would simply start moving on their own.</p>

      <p>“There’s a theme here, isn’t there?” said Rook. “I guess Pimp is a monster-taming kind of job?”</p>

      <p>“...Something like that, I guess,” I replied. Women were a strange kind of monster, after all.</p>

      <p>In exchange for him showing me his skills, I showed mine, too.</p>

      <p>Upon seeing my Paladin’s Aegis and Instant Equip, Rook’s eyes lit up. He yelled out, “That’s so cool!”</p>

      <p><em>...Why must such an earnest, good young boy be a Pimp?</em> I wondered.</p>

      <p class="centerp section-marking">◇</p>

      <p>Rook quit his part-time position at the shop, so I waited for him to take care of whatever he needed to, and then joined him for lunch. He had only been working there because of the player killings, so no one had had any problems with him quitting now that they were over.</p>

      <p>In fact, the owner thanked him. That was because — during the three days Rook had spent standing in front of the shop — they’d gotten five times more customers than usual. One thing to note was that all the new customers were women — Master and tian alike.</p>

      <p>As we walked through the streets, I could feel a lot of people staring at us. To be specific, the women around us were staring at Rook.</p>

      <p>“Just look at that pretty boy... he’s so cute, I might faint,” one of them said.</p>

      <p>“That’s some amazing character creation skill. Wait, how do you even make a boy <em>that</em> pretty?!” another joined in.</p>

      <p>“He seems a bit too natural for it to be character creation,” a third one added.</p>

      <p>Hearing their comments made me throw a glance at Rook.</p>

      <p>“...Hmm,” I pondered. When I’d first met him, he’d just seemed like a pretty boy covered in dirt from battle, but now that he was clean, it was obvious that he was among the most handsome men in the world. It felt as though he’d been the result of some miracle that had happened in his ongoing transition from “boy” to “young man.” The silver hair covering his head made him look like a fairy representing the ephemeral nature of snow.</p>

      <p>“...Master,” Nemesis said, having read my mind. “Is it just me, or is your description of his appearance better than the one you gave me when we first met?”</p>

      <p><em>No comment.</em></p>

      <p>“By the way, Rook,” I said, “how much did you work on your character’s appearance when starting the game?”</p>

      <p>“I changed my hair color,” he answered.</p>

      <p>“...That’s it?”</p>

      <p>“Yes.”</p>

      <p>So a guy <em>this</em> handsome actually existed in reality, meaning that his Embryo being Babi and job being Pimp could all be attributed to him being handsome.</p>

      <p><em>I can only assume that the Pimp industry is limited to handsome people,</em> I thought.</p>

      <p>“What do you think his relationship is with the blond guy next to him?” the girls continued their chatter.</p>

      <p>“Well, I’d say that they’re <em>doing it</em>,” one of them concluded.</p>

      <p>“Which one takes it?” a third one asked.</p>

      <p>“The blond one,” the other two replied in unison.</p>

      <p>“I think so, too!” the third squealed. “The pretty boy’s smile is that of a sadistic top!”</p>

      <p>The exchange made a chill go down my spine, but I pretended to not hear it.</p>

      <p>“Now that I think about it, I haven’t seen Babi yet. Where is she?” I asked. <em>Is she in the crest? Like Nemesis?</em></p>

      <p>“Babi is working part-time, too,” Rook answered. “She’s in a massage parlor nearby.”</p>

      <p>“Massage parlor...?” The implications of a succubus doing such services made me imagine only the most indecent of things.</p>

      <p>However, once I got there, I became made aware that it was a wholesome place that didn’t even need to operate from a back alley.</p>

      <p>“...Yep, it’s a massage parlor, all right,” I said.</p>

      <p>“Yes,” Rook confirmed. “What about it?”</p>

      <p>“Rook! I’m done with my job here!” With perfect timing, Babi ran out of the massage parlor and stood right next to Rook.</p>

      <p>“Ah, hello there, Ray! Hey there, Nemesis!” she added, noticing us.</p>

      <p>“Hello.” I returned the greeting.</p>

      <p>“It has been a while.” Nemesis, who was no longer in the crest on my left hand, now stood beside me in her human form.</p>

      <p>With all of us back together, it was time for lunch.</p>

      <p>My brother had told me about a nearby shop, so I chose it simply because I had no reason not to. His recommendations rarely disappointed, after all.</p>

      <p class="centerp section-marking">◇</p>

      <p>As we dug into our meals, we continued exchanging information and chatting.</p>

      <p>Rook and Babi spoke about their time working, while I told them about the hunting grounds and the Tomb Labyrinth.</p>

      <p>“I got a new skill today!” Babi announced.</p>

      <p>She’d gotten a skill despite being away from Rook. Humanoid Guardian type Embryos were able to gain new skills by working, training, and learning while separated from their Masters.</p>

      <p>Babi’s current setup had a skill called Lilim Temptation, which could Charm males. It was the opposite of Rook’s Male Temptation, which was effective against women. When together, they could Charm both sexes, giving them a great advantage in countless situations. Another interesting skill she had was Lilim Drain, which allowed her to drain HP, MP and SP from Charmed enemies.</p>

      <p>As for the skill she’d gained in the massage parlor, it was Angelic Massage, which could take away the effects of Exhaustion.</p>

      <p>“By the way, Nemesis’s skills got me curious. Can she use Counter Absorption and Vengeance is Mine when she’s all by herself?” Rook asked.</p>

      <p>That was a good question. I could recall her having used Counter Absorption on her own volition, but what about Vengeance?</p>

      <p>“I cannot use Vengeance is Mine by myself,” she answered. “It can only be used when I become a weapon and get equipped.”</p>

      <p>“Oh, I see,” I said, understanding. According to Nemesis, Counter Absorption was closer to a Guardian type skill, while Vengeance is Mine was more of an Arms type ability. Guardians had autonomy, but Arms and Chariots had a lot of skills which could only work when they were equipped.</p>

      <p>“It just hit me that I asked to see your skills, but didn’t ask for your level. What is it now?” I asked Rook, looking at him. <em>He hasn’t been able to grind much these past few days, so if our last meeting was anything to go by, he should be at about level 5.</em></p>

      <p>“I’m level 25,” he said.</p>

      <p>“25?!” I couldn’t hold my shock. <em>That’s more than double my level!</em> “How?! Where did you raise your level? The hunting grounds weren’t an option, so—”</p>

      <p><em>Hell, I don’t think he could get that many levels even if he could use the hunting grounds!</em> I thought.</p>

      <p>“Yeah,” he agreed. “I couldn’t go hunting, but I got lots of XP for completing a Pimp guild quest.”</p>

      <p>“A Pimp guild quest?” I repeated, dumbfounded.</p>

      <p>I hadn’t been aware of it, but taking a job unlocked quests from the guild of that particular job grouping, and clearing them rewarded the player with experience. However, with the exception of those given to non-battle jobs, most of the quests in guilds required the player to defeat or defend something, so newbies like myself couldn’t do much there.</p>

      <p><em>Hell, I’m a Paladin — a high-rank job — so it’s probably even worse for me,</em> I thought.</p>

      <p>“I see... but...” There was something I was curious about. “...A job that only a Pimp can do?” I asked.</p>

      <p><em>Is there anything in that vein that isn’t R-18?</em></p>

      <p>“The one I cleared was a quest to find a model for a painting,” Rook explained. “Here’s a copy.”</p>

      <p>“Let’s see here...” I said and looked at it.<br/><br/></p>

      <p class="noindent"><em>Maestro Grantzian Valleno is looking for a model, difficulty level 6.</em></p>

      <p class="noindent"><em>One of the Kingdom of Altar’s greatest artists — Grantzian — is looking for a model for a new painting.</em></p>

      <p class="noindent"><em>Please bring someone that he would be satisfied with.</em></p>

      <p class="noindent"><em>Depending on the model, they might be asked to pose nude.</em></p>

      <p class="noindent"><em>Be advised that Grantzian is a fastidious sort and that his standards are sky-high.</em><br/><br/></p>

      <p>I had no words. The difficulty of this quest was actually a level higher than the one where I’d had to help Milianne.</p>

      <p>“So, you went and cleared it by showing Babi to him, right?” I asked.</p>

      <p>“No. Well, that was my original intention, but...”</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>“Pardon the intrusion. I am Rook from the Pimp guild, and I came here with a model.”</p>

      <p>“Hmph, another one of you useless cretins who are only good at handling your crotches. All you wretches ever bring to me are atrocious hags. So, where is the...”</p>

      <p>“Umm, is anything the matter?”</p>

      <p>“You’re hired!”</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>“For some reason, <em>I</em> had to be the model,” said Rook. “Well, it got me some levels and it made Mr. Grantzian happy, so I didn’t mind it at all.”</p>

      <p>“...I see. Good for you,” I said.</p>

      <p><em>Man, this world is really kind to handsome people...</em></p>

      <p class="centerp section-marking">◇</p>

      <p>By the time we’d finished our lunch, my exchange with Rook was nearing its end.</p>

      <p>I’d thought <em>I’d</em> had some strange experiences since I’d started the game, but his adventures had been quite something, too. I had no idea if we were unique in that regard or if getting entangled in unusual events was the norm in this world.</p>

      <p>“By the way, Ray,” Rook addressed me.</p>

      <p>“Hm? What?” I responded.</p>

      <p>“We just talked about the player killers, and there’s something that I can’t get out of my head,” he said.</p>

      <p><em>...It’s probably the same thing that I’m interested in,</em> I thought.</p>

      <p>“When you met Figaro, he said he would do something about the player killers in the south, right?” he asked.</p>

      <p>“Yeah, he said something about the hunting ground there being the passage to the city of duels,” I answered.</p>

      <p>“But the player killing is over in all the hunting grounds, isn’t it?” he asked.</p>

      <p><em>Exactly,</em> I thought. That had been the question on my mind before I’d met up with Rook.</p>

      <p>There would’ve been no surprise if Figaro — the top of the duel rankings — had ended the player killing in the hunting grounds. In fact, if he’d simply given them all the death penalty, the player killing wouldn’t be happening for a whole three days. However, Figaro had only mentioned the Sauda Mountain Pass in the south. Therefore, it was strange that the player killings in the other places were over, too.</p>

      <p>“I have three possible scenarios in mind,” I said.</p>

      <p>“Do tell,” Rook said, looking interested.</p>

      <p>“Scenario number one: Figaro did something about the other three, as well,” I said.</p>

      <p><em>This scenario is quite unlikely, though,</em> I thought. He’d probably taken care of the southern player killers to secure the means of travel between the capital and the city of duels — his main haunt. However, he’d had no reason to take care of the problems in the other areas.</p>

      <p>“Scenario number two: upon finding out that someone took care of the player killers in the south, the others ceased their activity, as well.”</p>

      <p><em>This one seems a bit questionable,</em> I thought. Sure, getting killed would disable the player killers’ activity for a whole three days here, but this particular event was organized terrorism meant to prevent Kingdom of Altar’s players from growing stronger.</p>

      <p>From the way they’d sealed all four sides of the kingdom, it was obvious that they were acting as one. Due to that, it was hard to believe that they’d stop just because one side got neutralized. In fact, I would expect them to make up for the loss by sending over some of their killers from the other areas.</p>

      <p>Suddenly, another possibility came to mind.</p>

      <p><em>What if the countermeasures Figaro took aren’t as small-scale and haphazard as I think they are?</em> I thought. <em>What if he actually negotiated with the player killers?</em></p>

      <p>If that was the case, it was no surprise that all the player killing had stopped.</p>

      <p><em>However, that’s quite a questionable assumption, too,</em> I thought. <em>Figaro was a good guy, but he didn’t seem like the type to act like that. I didn’t talk to him for long, but the impression he gave me didn’t seem to fit that scenario. After all, he almost killed me just because he couldn’t see what I was. That brings him closer to “musclehead” territory... or just makes him seem like a person who is rough in the way he operates.</em></p>

      <p>“Umm, Ray,” Rook said, “what’s the third scenario?”</p>

      <p><em>Whoa, I got lost in thought,</em> I realized.</p>

      <p>After a short process of elimination, I voiced the third possibility.</p>

      <p>“Scenario number three: at the same time as Figaro was doing his thing in the south, the other places were taken care of by other people,” I said.</p>

      <p>If Figaro wasn’t the one who’d taken care of them all and if the others hadn’t just backed down, it could only mean that someone else had gone to the other hunting grounds at the same time as him. After all, they were player killers, so there must’ve been many people who wanted them gone. Therefore, it was fair to assume that someone had gone to take care of them at about the same time as Figaro.</p>

      <p>I felt it reasonable to believe that the single cause led to a coincidence in timing — a synchronicity, of sorts.</p>

      <p>“And you are completely right!” an unfamiliar voice broke in.</p>

      <p>It was way too sudden. Before I realized it, a woman I didn’t know was sitting down at our round table — on a chair between myself and Rook.</p>

      <p>Despite her being right next to me, I hadn’t noticed her at all until she began speaking. Which was odd, because her appearance was strange and unique, making it nigh impossible to ignore her presence.</p>

      <p>Her hair was black and long enough to cover her neck, while her face was that of someone around my age, but neither of those points were what made her seem strange. All of her oddity was in her apparel. However, the reasons were completely different from Figaro’s.</p>

      <p>That guy had had clothes befitting a fantasy setting, but there had been no uniformity in his overall appearance. This woman’s clothing, however, was completely uniform. It just happened to be a men’s business suit that didn’t fit the fantasy setting at all.</p>

      <p>Not only that, but her eyes were covered by a pair of sunglasses. I wouldn’t have found her appearance the least bit weird if we’d been in reality, instead of the game. Though, even in reality, it would be pretty strange to wear sunglasses indoors.</p>

      <p>“Umm... You are...?” Rook asked as I examined the woman.</p>

      <p>“Oh, do forgive me,” she said. “I found your conversation so interesting that I couldn’t help but join in. This is who I am.”</p>

      <p>As I noticed that she was talking in a slightly tomboy-ish way, she took out a business card... which was actually just a status window with her name, job, et cetera, but whatever.<br/><br/></p>

      <p><em>Name: Marie Adler.</em></p>

      <p class="noindent"><em>Job: Journalist belonging to the company known as “DIN.”</em><br/><br/></p>

      <p><em>The existence of the job “Pimp” is surprising enough, and now I run into a Journalist,</em> I thought. <em>This game sure has great job variety.</em></p>

      <p>“What’s DIN?” I asked.</p>

      <p>“Short for <em>Dendrogram</em> Information Network,” Marie answered. “Some call us newspaper reporters. However, when we want to sound cool, we like to go for ‘intelligence agency without borders.’ We gather information from countries all over and sell it to other countries.”</p>

      <p>“...Is that a safe thing to do in the current environment?” I asked. The kingdom was at war with a neighboring country. People who could leak info to the enemy seemed like prime candidates for arrest.</p>

      <p>“Well, we have many DIN fans in the upper echelons of every country,” she answered. “Though I’m just an underling, so I specialize in info for citizens and Masters.”</p>

      <p>“Any examples?” I asked.</p>

      <p>“For the citizens, we recently took photos of and wrote about the pandas that were breeding so much they covered an entire mountain in Huang He.”</p>

      <p><em>...Oh yeah, I saw that in the message boards,</em> I thought.</p>

      <p>“As for Masters, we recently gathered info about the player killers that were terrorizing the Kingdom of Altar’s surroundings,” she continued.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert5">
    <img alt="insert5" class="insert" src="../Images/Insert5.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter42">
    <div class="main">
      <p>“...Hmm,” I pondered. If she handled info like that, she might know how it all played out and ended.</p>

      <p>“You said that he was completely right. Do you know the truth behind the event?” asked Nemesis.</p>

      <p>“Do you want to know? 600 lir per area, please,” Marie said. “You can also buy the info on all four of the places at once for 2,000.”</p>

      <p><em>I see. So she only appeared before us to sell some info,</em> I thought. <em>As much as I hate to admit it, I’m interested in what happened, so...</em></p>

      <p>“...I’ll pay,” I said.</p>

      <p>“Ah! Ray, let me pay half of the money!” Rook joined in.</p>

      <p>We both gave 1,000 lir each.</p>

      <p>“Thank you for your business,” she said. “I’ll start with the conclusion: the player killers who occupied the hunting grounds around the capital city of Altea have been completely annihilated.”</p>

      <p><em>Now that’s a rough word,</em> I thought.</p>

      <p>“Annihilated?” I asked.</p>

      <p>“Almost all the player killers in the hunting grounds are on their death penalty now,” she answered. “With something so extreme happening, I don’t think they’re gonna do this dirty work again. Some of the relevant clans might even split up.”</p>

      <p><em>Work? Clan?</em></p>

      <p>“Umm...” I expressed my confusion.</p>

      <p>“Oh, forgive me,” she said. “The player killer group responsible for this event was actually a union between several player killer clans.”</p>

      <p>“A union...?” I raised an eyebrow. <em>I was told it wasn’t a solo effort, but an actual union between player killer clans?</em> I thought. <em>...Wait, our country actually has enough player killer clans to create a union?</em></p>

      <p>“Yes,” she answered. “Easter Plains at the east was occupied by K&amp;R. Sauda Mountain Pass to the south was occupied by Mad Castle. Wez Sea Route to the west was occupied by Goblin Street. These three clans were responsible for the recent player killing.”</p>

      <p><em>Two of those clan names sound really villainous,</em> I thought. They’d probably chosen them on purpose. <em>What about the north, though? That one’s the most important to me.</em></p>

      <p>“As for their motives... Apparently, they did it because someone hired them to do the player killing,” Marie added.</p>

      <p>“Was it Dryfe?” Rook asked.</p>

      <p>The question made her slightly raise her arms and shake her head. “That’s the rumor, but we at DIN don’t have any conclusive proof of that, so I can only say that I don’t know,” she answered.</p>

      <p><em>Well, as things are now, the only one who could be happy about Altar being damaged in such a way are Dryfe — the country we’re at war with — so it’s quite likely,</em> I thought. <em>Though it does seem a bit too direct.</em></p>

      <p>“From their perspective, it was probably just an attractive scenario where they could get some extra rewards for their player killing by merely switching their hunting grounds, but the world wasn’t too kind to them,” she continued. “They were annihilated by a certain four Masters.”</p>

      <p>“Four...” I repeated the number. Just four Masters had destroyed the player killers in all four areas.</p>

      <p><em>Is that even possible?</em> I wondered. <em>Well, I guess the south made sense, considering Figaro was involved.</em></p>

      <p>With that in mind, the other hunting grounds had been...</p>

      <p>“Yes, it was made possible by the work of the four Superiors loyal to the Kingdom of Altar,” she said. “They were the ones who exterminated all the player killer clans.”</p>

      <p>Superior.</p>

      <p>That was the term used to describe the ones who had made their Embryos evolve to the final — seventh — form. They were the elite of the elite among players, and the total number of them didn’t even cross a hundred yet.</p>

      <p>“King of Destruction the Unknown, Figaro the Endless Chain, Tsukuyo Fuso of the Lunar World, and Lei-Lei, the Prodigal of Feasts,” she said, naming the four. “They all went to a separate hunting ground and exterminated all the player killer clans occupying them. Oh, but Tsukuyo Fuso had her clan with her.”</p>

      <p>“Oho...” I said, interested.</p>

      <p><em>So Figaro’s nickname is “Endless Chain,” huh? Is it because he uses chains?</em> I pondered. <em>Also, is the King of Destruction’s nickname seriously just “Unknown?” What the hell? We don’t even know his name, so he could be a serious weirdo.</em></p>

      <p>“Now, take a look here.” Marie took out a crystal ball and placed it on the table.</p>

      <p>“What’s this?” I asked.</p>

      <p>“Well, it’s basically an item to display visual media,” she explained. “It shows what you record on magical cameras.”</p>

      <p><em>Magical cameras?</em> I raised an eyebrow. <em>Well, it’s obviously a camera that works magically, but I can’t help but wonder if the devs think anything goes as long as you put “magic” next to it.</em></p>

      <p>“Due to all the recent happenings here in the Kingdom of Altar, we at DIN increased the numbers of secret cam... I mean, information-gathering equipment we place here,” she said.</p>

      <p><em>...Illegal spying, eh?</em> I thought.</p>

      <p>“Some of them happened to film the end of these terror events,” Marie continued as if it wasn’t a big deal. “This thing has it all in full detail.”</p>

      <p>She activated the crystal ball.</p>

      <p>“Since you two were talking about it, let’s begin with a look at the south, where Figaro the Endless Chain went...”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter5">
    <div class="main">
      <h1>Chapter Five: Superior</h1>

      <p><em>Clan Leader of Mad Castle — Full Armor Giant Barbaroy Bad Burn.</em></p>

      <p>In <em>Dendro,</em> there were two ways for players to fight amongst themselves.</p>

      <p>The first one was dueling.</p>

      <p>Players would gather in an arena, agree on a set of conditions and rules, decide what items the victor would get and begin fighting. Since no one would die even if their HP hit 0 and all the damage done would be reverted the moment the battle ended, duels were much like a casual pastime.</p>

      <p>The other means was player killing.</p>

      <p>Players would attack other players outside of an arena and give them the death penalty. Players who died this way would drop money and items at random... just like monsters.</p>

      <p>One of the differences between losing a duel and dying from player killing was that the former allowed you to choose what items you lost, while the latter randomized it. The other difference was in whether the defeated side died or not.</p>

      <p>That was the reason why there were those who specialized in dueling...</p>

      <p>...and those like us, who specialized in player killing.</p>

      <p><em>I, leader of the clan ‘Mad Castle’ — Barbaroy Bad Burn — love player killing.</em></p>

      <p><em>In fact, my clan and I are enjoying some wholesome player killing right at this very moment,</em> I thought.</p>

      <p>“Uaahhh! Waaahhh!” A newbie player who looked like — and probably was — an elementary schooler was crying as he attacked me with his starting gear. However, no matter how many times he tried, the damage he did was always 0.</p>

      <p>“Khahah! Come on! Damage me for at least 1 HP and I’ll let ya go!” I laughed.</p>

      <p>Not that that could ever happen. Mine was a high-rank job focused on endurance — Full Armor Giant.</p>

      <p>Not only that, but I had Damage Decrease, which decreased all incoming damage by 20%, and Damage Reduction, which took away 500 damage from all attacks, so a newbie like him couldn’t damage me even if he landed a critical hit.</p>

      <p>“Uohh! Uohhh!” Still crying, the newbie attacked me while making an attempt to run away. However, I quickly stood in his path before he could complete his escape.</p>

      <p>Despite having a heavy, non-agile job, I was still much faster than a newbie, not to mention that I had my Embryo’s ability. I also made sure to prevent him from logging out.</p>

      <p>To log out in this game, a player needed about thirty seconds of free time. No one could do it unless they were able to spend those thirty seconds without being touched or attacked by someone else. It was a fact of the game that was meant to prevent crime, but it could easily be used <em>for</em> crime.</p>

      <p>Well, player killing wasn’t actually forbidden, so it wasn’t really a “crime” in any sense of the word.</p>

      <p>Also, for one reason or another — likely as a means against harassment — players were able to commit suicide. Even if players were rendered unable to move even a single finger, they could give themselves the death penalty at will. However, by doing that, players dropped way more money and items than when killed by a player killer, so there weren’t many who used that function.</p>

      <p>“All right, time’s up,” I said.</p>

      <p>“Ah!” the newbie gasped. As he continued his fruitless struggle, I held my large shield in both hands and swung it down on him.</p>

      <p>My shield — which was one meter in diameter — became a giant stamp and left a mark on the ground. The ink was the player. Of course, since he’d died, what was left of the newbie quickly disappeared.</p>

      <p><em>Good thing I’d set my visuals to CG. The sight would’ve been pretty damn grotesque if I’d set it to realistic.</em></p>

      <p><em>There’s something seriously wrong with those who pick realistic visuals,</em> I thought. <em>Battles with undead monsters get really grim from that perspective.</em></p>

      <p>“Eheehee! You sure are a scumbag, boss! You even made me feel bad for the kid!” laughed one of my clan members.</p>

      <p>“Khahah! Holy shit, I sure won’t be eating any tomatoes today,” another joined in.</p>

      <p>“What do you say to cheeseburgers for dinner, then?” I grinned. “As you can see, I can get the mincemeat as if it’s no big deal.”</p>

      <p>“I think I’ll pass, LOL.” The clan members working with me began their usual banter, and I joined in, making sure to sound as scummy as possible.</p>

      <p><em>Roleplaying as a bad guy sure is fun,</em> I thought. <em>Probably has something to do with being able to show off a side of you that you can’t show anywhere else.</em></p>

      <p>For example, in reality, Ban-blu — the one grinning at my side — was a public service worker with a husband and kids, but that couldn’t have mattered less here.</p>

      <p>Mad Castle’s motto was thus: “Forget reality, get hyped up, and kill some players.”</p>

      <p>It wasn’t the least bit enjoyable to the ones getting killed, mind you. However, in this game — where everyone was competing for more power — it was the weaklings’ own fault for being weak.</p>

      <p>“I’ve heard of people who got so traumatized by player killers that they stopped playing,” said one of my people.</p>

      <p>“Like I care,” I said. Seriously, I couldn’t have cared less if I’d tried. “Killing” and “getting killed” were both part of the game.</p>

      <p>“So, boss, including this brat, how many have we killed by now?” asked a clan member.</p>

      <p>“Well, I stopped counting the ones I’d killed when I hit fifty,” I replied.</p>

      <p>My Mad Castle clan was occupying the Sauda Mountain Pass south of the capital, and had been killing any players who happened to pass by. We only went for those we were able to handle, but so far, everyone had been weak enough for me to do it solo.</p>

      <p>There had been a group that had come here to stop us, but me and my clan had had no problem taking care of them, too.</p>

      <p>“But man, this is a good deal we’ve got,” said one of my people. “All we do is kill some players, and the money comes a-flowing like a fountain.”</p>

      <p>“Yeah, it’s great,” I replied.</p>

      <p><em>Deal. That’s the word for it,</em> I thought. We were player killing here because we had a deal going on. For every death penalty we gave, we received a flat 10,000 lir reward. And this deal would last for a whole month, game time.</p>

      <p>We couldn’t ask for better conditions. And that was without mentioning that — being a newbie hunting ground — this place was full of scrubs we could crush like insects.</p>

      <p>The first day we’d started had been so damn good that it’d gotten us more than 1,000,000 lir. It’d been hilarious.</p>

      <p>What was just as funny was the fact that it had become big news.</p>

      <p>Unlike the clan in the north, we didn’t hide our identities. That led people to find out who we were, but to us villain roleplayers, that was only a blessing.</p>

      <p>“Though, man, we sure don’t get as many players now as we did at the start,” one of my people said. “Guess they’re all scared shitless now. Oh, yeah. Last night, at the tavern, I heard that the guys in the east don’t have much to do, either.”</p>

      <p>The other three hunting grounds surrounding the capital were occupied by other player killers. Just like our clan, the ones in the east and west were full of delinquents who didn’t give a damn about what people thought and just wanted to kill some players.</p>

      <p>“Though I’ve heard that Goblin Street — the guys in the west — are getting some serious extra cash,” another one added.</p>

      <p>“Well, that’s because they go after NPCs, too,” I said.</p>

      <p>“Ain’t that just scary?” he said.</p>

      <p>“Maybe,” I said.</p>

      <p>Player killing wasn’t a crime. <em>Dendro</em>’s laws ignored all conflicts between Masters. However, killing NPCs was a serious offense.</p>

      <p>Ending an NPC’s life without a valid reason — such as self-defense, them being criminals, or taking part in a war event — would cause them to recognize the offending player as a criminal and put them on a wanted list.</p>

      <p>Getting on a country’s wanted list made the player unable to use the country’s save points.</p>

      <p>If that had been all there was to it, simply switching to another country’s save points would solve the problem, but overdoing it with the killing would get the player on the wanted list of <em>every</em> country. When on all the seven lists, the player would be simply <em>done</em>. They wouldn’t be able to use any countries’ save points.</p>

      <p>Considering that getting the death penalty in such a situation would send you to <em>that place</em>, the risks were way too high.</p>

      <p>The guys at Goblin Street probably had save points at Caldina or something, but we had no intention of going through those lengths just so we could kill NPCs.</p>

      <p>In fact, killing NPCs didn’t make me feel good.</p>

      <p>Once, I’d killed a criminal NPC, and it’d made me feel like crap — as if I’d broken an expensive vase. That was why we chose to not touch any NPCs trying to pass through this hunting ground.</p>

      <p><em>Well, we’re too scared to try, anyway,</em> I thought.</p>

      <p>“Yeah, I’ll stick to player killing. It’s both comfortable and fun,” one of my clan members spoke up again.</p>

      <p>“True,” another replied. “Something’s seriously wrong with the guys in the west. Even if we’re all player killers, I wouldn’t want to get involved with that lot.”</p>

      <p>I simply listened to them. <em>In all honesty, I’m more afraid of the one in the north than the ones in the west,</em> I thought.</p>

      <p>The person in Noz Forest was bad news.</p>

      <p>Unlike in the other places, it wasn’t a clan there, but a single player killer. I didn’t know his name. All I knew about him was that he was a trickster good at hiding himself, and that what he was doing was his day job.</p>

      <p>There was no better term for it — day job.</p>

      <p>He’d been playing as a hit man for as long as he’d been known in <em>Dendro.</em></p>

      <p>Players who were killed by other players or received some sort of harassment would sometimes grow vengeful and develop grudges. Killing players based on the requests of such people was part of his daily life. I’d even heard that he’d once gotten a request to assassinate a Superior that was on wanted lists.</p>

      <p>“Superiors” were players that had made their Embryos evolve to their seventh forms — the elite of the elite. No one in their right mind would even think of fighting someone like that. I was no exception.</p>

      <p>However, though he’d received serious amounts of damage, that player had been able to give the Superior a death penalty and send him to <em>that place</em>. Due to that, he’d gotten the title of “Superior Killer.”</p>

      <p>Though we were business partners right now, I didn’t really want to meet him.</p>

      <p>I didn’t think I’d lose to him, but hit men like him — elusive as they were — just seemed far worse than both player and NPC killers. Not getting involved with them was the right idea.</p>

      <p>“Boss, we’ve got another one,” one of my clan members called me.</p>

      <p>He was contacting me by using an item that allowed communication between members of the same clan.</p>

      <p>We had six parties consisting of six people each. Every member of every party had split up and formed groups of six with members of other parties before positioning themselves in different places all across the area.</p>

      <p>With this setup, if one group got destroyed in some sort of surprise attack, the actual party members would be able to tell that something was wrong by looking at their party status. It was a large-scale battle tactic that we were all accustomed to using.</p>

      <p>“Whoa, damn. This sucker has some good-looking gear on him,” he spoke through the long-distance contact item.</p>

      <p>“Well then, if he’s not a newbie, he’s here to hunt us down, huh?” I asked.</p>

      <p>“Seems like it,” he answered. “He’s alone, though.”</p>

      <p>“Alone? Then there’s no problem,” I said. “Just attack, threaten him into taking his gear off, and kill him.”</p>

      <p>“Hee hee hee, sounds good, boss,” he laughed. “Today, we’ll sell that gear and have a wild part—”</p>

      <p><b>[Party Member “Jordan α” Has Died]</b></p>

      <p><b>[Resurrection Period Expired]</b></p>

      <p><b>[Due to the Death Penalty, “Jordan α” was Logged Out]</b></p>

      <p><em>Huh?</em> was all I could think. “H-Hey! Stop with the jokes! Shit like this freaks me out when it’s so sudde—”</p>

      <p><b>[Party Member “Lowered Beltmars” Has Died]</b></p>

      <p><b>[Resurrection Period Expired]</b></p>

      <p><b>[Due to the Death Penalty, “Lowered Beltmars” was Logged Out]</b></p>

      <p>Another party member I’d been in contact with had died.</p>

      <p>The “resurrection period” was the time in which resurrection items and magic could have an effect. If someone successfully resurrected the player before the period ended, the player would avoid the death penalty. However, the time given was dependent on the state of the corpse.</p>

      <p>The two deaths had been instant and had left basically no resurrection period. I could only assume that they’d been turned into mincemeat in but a single moment.</p>

      <p>Upon looking at the clan members at my side, I noticed that they had all turned pale.</p>

      <p>Once I asked what was up, they said their party members who’d been in the same places as Jordan α and Lowered Beltmars were also dead.</p>

      <p>Basically, the twelve clan members positioned at those two places had all met a nearly simultaneous and swift death.</p>

      <p><em>Did they all get ganked by a group of players?</em> I thought. <em>There’s no way.</em></p>

      <p>After all, each place had had a person with a great “Enemy Detect” skill. It should’ve been impossible for a group of players to prepare such an attack without getting noticed.</p>

      <p><em>But if the one who did it was already spotted... and if it’s really just one, then...</em></p>

      <p>“I-It’s a player! A player from Altar!” one of my party members from another position contacted me. “I saw a chain! It took Marlo and—”</p>

      <p><b>[Party Member “Ma-mdoh” Has Died]</b></p>

      <p><b>[Resurrection Period Expired]</b></p>

      <p><b>[Due to the Death Penalty, “Ma-mdoh” was Logged Out]</b></p>

      <p>The screams coming from the other side before getting cut out were a sign that the third group had been eliminated.</p>

      <p>However, before dying, the party member had left me some valuable information. He’d mentioned that the player used a chain. There was little doubt that it was the same well-equipped “sucker” they’d seen before dying.</p>

      <p><em>Well, now this “sucker” is massacring our members as if it’s nothing,</em> I thought. <em>This one clearly isn’t your average Joe.</em></p>

      <p>The Kingdom of Altar happened to have a famous player who used chains. His name was...</p>

      <p>“I-It’s Figarooooo!” shouted another party member. “Why is the Over Gladiator here?! He—”</p>

      <p><b>[Party Member “Mohawk X” Has Died]</b></p>

      <p><b>[Resurrection Period Expired]</b></p>

      <p><b>[Due to the Death Penalty, “Mohawk X” was Logged Out]</b></p>

      <p>...Over Gladiator Figaro.</p>

      <p>“The Endless Chain,” “One of Altar’s Big Three,” “The King of Hanging Around the City of Duels,” et cetera... He had many names and was one of the strongest players in not just the Kingdom of Altar, but in the whole game itself.</p>

      <p>He was a Superior, and there were even rumors that that weirdo raided created dungeons <em>solo</em>.</p>

      <p>That lunatic was now with us, on this mountain...</p>

      <p>...and he clearly had it in for us.</p>

      <p>It wasn’t an unexpected scenario.</p>

      <p>Since we were committing acts of terror against the kingdom’s players, it was only natural for the ones sitting at the top of the kingdom’s rankings to come take care of us.</p>

      <p>However, the rumors had suggested that Figaro wasn’t the type to get involved in such events. I’d heard he spent most of his playing time either raiding the dungeon or dueling in the Colosseum.</p>

      <p>After all, he hadn’t even participated in the war, and yet...</p>

      <p><b>[Party Member “Goro Mushoku” Has Died]</b></p>

      <p><b>[Resurrection Period Expired]</b></p>

      <p><b>[Due to the Death Penalty, “Goro Mushoku” was Logged Out]</b></p>

      <p>Suddenly, I heard some rattling. A frustrated grunt escaped my mouth. Right after I got the message that the members in the fifth position were eliminated — meaning that we were the last — my “Killing Intent Perception” skill went off and warned me about the attack coming my way.</p>

      <p>I didn’t know the direction it was coming from. Still, I only needed to know it was coming to be able to do something about it.</p>

      <p>A moment later, I saw a chain with a pyramid-like tip flying right at me.</p>

      <p>“Astro Guard!” I activated a Full Armor Giant defensive skill. It rendered me unable to move in exchange for multiplying my defense by five.</p>

      <p>With this, my total defense was now over 15,000 — the greatest I could reach.</p>

      <p>The chain hit my shield with a dreadful amount of power behind it.</p>

      <p>“...Whoa!” I exclaimed. My HP had gone down.</p>

      <p>My defense was over 15,000, I had a skill that decreased all damage by 20% and another one that took away another 500, yet he had been able to break through all these walls and deal damage to me. It was only natural that the guys positioned at the other places had gotten slaughtered without even getting time to heal.</p>

      <p>Thus, the chain that I deflected...</p>

      <p>“Gyeeaahhh!”</p>

      <p>...went towards and pulverized Ban-blu.</p>

      <p>She wasn’t the only one, though — besides me, everyone positioned here was attacked by the chains and scattered into a thousand pieces.</p>

      <p>“...Sorry,” I said. “I can’t move, so I couldn’t protect you.”</p>

      <p>With that, the survivors around me disappeared, and I could no longer contact anyone.</p>

      <p><em>Looks like they’re all dead and dealing with the death penalty now,</em> I thought. Still immobile, I kept up my Astro Guard stance.</p>

      <p>Besides the chains — which were making metallic sounds as they hit and slightly damaged me — the only thing moving was the Over Gladiator, Figaro. I saw him walking up the mountain road when I tried to trace where the chains were coming from.</p>

      <p>He had a well-proportioned face, so if — unlike me — he hadn’t spent a significant amount of time on character creation and had just gone with the defaults, it was fair to assume that he was handsome in real life, as well.</p>

      <p>His apparel was strange, but by using “Identification” — a skill that allowed me to see item names and values — I discovered that everything he was wearing was highly powerful and extremely rare. In fact, some of them were so rare that my Identification level wasn’t high enough to identify them.</p>

      <p>“The bastard’s even wearing some UBM special rewards as if it’s no big deal...” I grumbled.</p>

      <p>Special rewards for MVPs in UBM battles — Unique Boss Monster — were bound to the MVP and thus couldn’t be transferred or dropped. So, despite being damn strong, they were worthless to us.</p>

      <p>Though Figaro’s face and apparel were deserving of a comment or two, there was something about him that just couldn’t be ignored. It was the red chains — several of them — wrapped around both of his arms.</p>

      <p>This game had a limit to how many weapons you could wield. The standard amount was either one for both hands or one in one hand and another in the other — like me with my shield. Besides that, normal players could use throwing weapons or items like Gems, but that was the extent of the weapons they could utilize.</p>

      <p>However, this Figaro guy was wielding six chains — three on each arm.</p>

      <p>And yes, I was completely certain that there were six chains — not just two that seemed separate. They all had the same name — Crimson Dead Keeper — but they weren’t connected in any way.</p>

      <p>Though Figaro didn’t seem to be moving them, all the chains automatically extended and went straight towards me.</p>

      <p><em>Most would think this is a joke, but they’d be wrong,</em> I thought.</p>

      <p>According to the Identification results, Crimson Dead Keepers had the skills “Auto Enemy Detect” and “Range Extend.” You’d be hard pressed to find a more user-friendly weapon.</p>

      <p>From the fact that Identification worked on them, it was obvious that they weren’t his Embryo. Which made it all the more obvious that he was actually wielding a total of six weapons.</p>

      <p>It was way over the standard wield limit, but I had been aware that the Gladiator job grouping had a skill that allowed the player to wield more weapons. The ultimate maximum was supposed to be a mere three, but since Over Gladiator was a Superior job of that grouping, it wouldn’t have been strange for it to have a stronger version of that skill.</p>

      <p>Basically, it meant that he’d eliminated all of my clan without using his Embryo and by relying only on his Over Gladiator skills and weapons in hand.</p>

      <p>“I’m sure getting blocked a lot today.”</p>

      <p>Figaro’s first words didn’t make even a bit of sense to me.</p>

      <p>“You have some good defense, but I guess it’s normal for a Full Armor Giant,” he continued. “Still, it’s rare for anyone to be <em>this</em> tough. Is your Embryo focused on defense or something?”</p>

      <p>I stayed silent. He was stating his impressions, but I had no reason to respond in any capacity. I could try bluffing, but if he had Truth Discernment — a skill that informed the user if another person was lying — he’d see right through me and I’d only end up giving him info...</p>

      <p>...such as the fact that my Embryo’s power wasn’t defensive at all.</p>

      <p>“...Hm. Looks like I’ve taken care of every player killer besides you,” he said.</p>

      <p>Either by simply feeling it or by seeing that his chains’ Auto Enemy Detect weren’t picking up anyone but me, he’d concluded that I was the last. And with those words, it became obvious that he’d come here to kill us — the player killers near the capital.</p>

      <p>“So, can I assume that you’re this PK group’s leader?” he asked.</p>

      <p>“...What if I said ‘yes?’” I replied.</p>

      <p>“My only goal here is to secure the means of travel between the duel city and the capital,” he explained. “If you promise to leave this mountain pass, I’ll gladly let you go.”</p>

      <p>“...Is that something you say after killing every single one of my clan members?” I asked.</p>

      <p>“If I hadn’t done that, you wouldn’t even be willing to negotiate.”</p>

      <p><em>He’s not wrong,</em> I thought.</p>

      <p>Until he’d eliminated us, we’d all considered him to be just another sucker for easy pickings, so we would’ve attacked him even if he’d had something to say. After all, we’d had no idea that there was such a huge gap in power between us and a Superior.</p>

      <p>However, that made me consider something.</p>

      <p><em>Just how much stronger is he compared to me — a Master with an Embryo in its sixth form? If I can land a perfect hit with my Embryo’s ultimate skill... I might be able to kill him. Sure, with him having a Superior job, his level is probably far greater than mine. My level is 500 — the maximum I can reach with low-rank and high-rank jobs — and his can easily be two times higher than that. However, the results of PvP battles aren’t decided by level or stats. What matters is how well you can prevent your opponent from using their powers effectively while attacking them with your own. The Superior Killer got his name for a reason. It shouldn’t be impossible for me to do it, too.</em></p>

      <p>“All right,” I said. “I’ll leave this place as soon as I can. We, Mad Castle, won’t be hunting any more newbies here.”</p>

      <p>That wasn’t a lie. With players of this caliber now coming after us, our little PK feast in this area was all but done.</p>

      <p><em>We’ll back away... right after I kill him, anyway.</em></p>

      <p>“I have a Contract here. Wanna use it?” I reached into my item pouch and took out a piece of parchment.</p>

      <p>It was a Contract — a type of item used in agreements between players. Anyone who went against the conditions would receive either a temporary loss of stats, some debuffs, or even the death penalty.</p>

      <p>“Well...” Figaro said. “I don’t see why not. Let’s do it.”</p>

      <p>“...Okay, I’m done filling it in,” I said. “Take a look at it.”</p>

      <p>Saying that, I began to bring the Contract to Figaro.</p>

      <p>Five meters.</p>

      <p>Four meters.</p>

      <p>Three meters.</p>

      <p>Two meters — he was now in range.</p>

      <p>A magic circle appeared below my feet and spread around me. It was my Embryo — Atlas.</p>

      <p>“Heaven’s Weight!” One of Atlas’ skills was the increase of weight.</p>

      <p>It was able to apply continuous damage to everything in the effective range by increasing the gravity of the surroundings.</p>

      <p>The effect was stronger based on distance, reaching its peak at two meters, where the gravity was 500 times greater than usual. At the same time, it applied the “Binding” debuff, rendering Figaro unable to move even a single finger.</p>

      <p>The chains automatically tried to attack me, but the overwhelming gravity forced them to the ground, where they could only crawl.</p>

      <p>So far, no one had ever been able to break out of this combo between Binding and super gravity.</p>

      <p>A standard high-ranking player would have already been crushed to death, but I wasn’t naïve enough to believe that the Superior before me would die as easily.</p>

      <p>It was time to use Atlas’s ultimate attack.</p>

      <p>“Astro Guard!”</p>

      <p>I used Astro Guard again to multiply my defense by five...</p>

      <p>“Emancipated Giant, Atlas!”</p>

      <p>...followed by the skill named after Atlas itself.</p>

      <p>It converted my defense to offense and multiplied my attack power by ten for ten seconds. My attack power was now over 150,000. A clean hit from that should’ve been enough to instakill anyone — even a Superior.</p>

      <p>And as Figaro was still unable to move, I began barraging him with Atlas’ strongest attack.</p>

      <p>“Break and die!” I roared.</p>

      <p>The ground below me shattered, caved in, and became a large crater. But I didn’t give a damn.</p>

      <p>For all I knew, he could have multiple resurrection or related accessories. I had to spend each and every one of these ten seconds attacking him.</p>

      <p>Suddenly, a sound.</p>

      <p>As I continued my barrage, a chain wrapped around my neck. It shocked the words out of me.</p>

      <p>I looked down. What I saw was the ground I’d shattered with my barrage, but Figaro was nowhere to be seen.</p>

      <p>If he wasn’t before me, there was only one place he could be at. By that, I meant “at the other end of the chain tightening around my neck.”</p>

      <p>It was going upwards, so I looked up and saw Figaro hanging about ten meters up in the air.</p>

      <p>“H-How?!” I howled in shock. He’d been affected by five hundred times the normal gravity and had had the Binding debuff — there was no way he could’ve jumped that high.</p>

      <p>“...Ah,” I said.</p>

      <p>Suddenly, a realization.</p>

      <p>I had heard many things about Figaro. Among them was that, for the Over Gladiator, raiding a created dungeon solo was part of his daily life. The very idea of solo raiding was stupid, but any lunatics who attempted it had to make sure they met a certain condition.</p>

      <p>It wasn’t high stats.</p>

      <p>Nor was it the means of healing.</p>

      <p>It was all about countermeasures to debuffs.</p>

      <p>Paralysis, Sleep, Petrification, and, of course, Instant Death.</p>

      <p>When going solo, players didn’t have any allies that could help them with such debuffs, so getting one of them would be the equivalent of dying.</p>

      <p>Thus, anyone raiding solo would have to have a means of dealing with debuffs. Therefore, it was only obvious that this solo-focused Superior would have been prepared for that.</p>

      <p>He had some equipment I couldn’t identify. One of them probably nullified all Binding effects.</p>

      <p>“No... There’s no way!” I shouted.</p>

      <p>I’d been about to accept that conclusion, but I simply couldn’t. The Binding from my Heaven’s Weight was a personal skill from a high-rank Embryo. There was no way it could’ve been nullified so easily.</p>

      <p>Suddenly, another realization.</p>

      <p><em>I thought that he wasn’t using his Embryo. But what if I’m wrong? What if his Superior Embryo is already active? What if it’s the reason why he was able to nullify my Binding and jump as if the 500 times greater gravity doesn’t matter at a—?</em></p>

      <p>Another sound. I instantly looked up at Figaro.</p>

      <p>Due to the light behind him, I couldn’t make out his expression.</p>

      <p>However, it gave me chills I couldn’t describe.</p>

      <p>When he landed, I got a good look at his face, which made the chills turn even worse.</p>

      <p>The sound again. His narrow eyes were open wide and shining red. His mouth was in a smile — sharp like a crescent moon and open wide enough to see his throat. The sounds coming from his throat were downright inhuman. It was reminiscent of growls that your average monster would sound — meaningless and thick with bloodlust.</p>

      <p>A short scream escaped my mouth. At that moment, he raised both of his chained hands up into the sky.</p>

      <p>That motion made the chains wrapped around my neck begin to pull upwards.</p>

      <p>My body — more than two meters worth of armored flesh — was separated from the surface and got distanced from the earth.</p>

      <p>My ears were overwhelmed by the sound of air grazing my whole body.</p>

      <p>Likely by using his chains’ Range Extend skill, he made them raise me up at incredible speeds and didn’t seem to know where to stop. Figaro was now but a dot on the surface. A moment later, I was higher than the mountain peak, reached the clouds and went beyond.</p>

      <p>Soon enough, I no longer had any air around me. I made my lungs work at full capacity, yet nothing was coming in. The word “suffocation” came to mind.</p>

      <p>Though <em>Dendro</em> allowed the player to reduce all pain to nothing but dull impacts, it didn’t do anything about the anguish of oxygen deprivation.</p>

      <p>However, there was no need for me to worry about suffocating, because something far scarier happened.</p>

      <p>As if it was only obvious, the chains began to get pulled back down to the ground.</p>

      <p>The sights I’d seen on my way up now went by me at an even faster speed, making me feel as if someone had rewinded my life.</p>

      <p>“HYAAAAAHHHHHH!” A scream of despair escaped my mouth.</p>

      <p>It didn’t matter that I was in a game. The fall I was experiencing was thick with fear of death.</p>

      <p>It didn’t matter that there was no pain. The shape of fear living beings feel when faced with imminent death was unrelated to that.</p>

      <p>The game’s realism conveyed the fear of death all too well.</p>

      <p>From sky high and at a ridiculously high speed, I was falling to my death.</p>

      <p>Still with a monstrous smile on his face, Figaro was waiting for me on the surface.</p>

      <p>Once again, he made that sinister, incomprehensible sound. One of his chains was replaced by another weapon — a chainsaw-like greatsword.</p>

      <p>He swung it straight at where I was falling.</p>

      <p>A moment later, a twisted, crunching sound ripped from my own body, and I...</p>

      <p><b>[Fatal Damage]</b></p>

      <p><b>[Party Eliminated]</b></p>

      <p><b>[Resurrection Period Expired]</b></p>

      <p><b>[Death Penalty: 24 Hour Login Ban]</b><br/><br/></p>

      <p><em>Rangyu Restaurant, Kingdom of Altar — Paladin Ray Starling.</em></p>

      <p>“...That was one brutal fight.” After watching the clip in Marie’s crystal ball, I was seriously taken aback. It was paused at the frame where the huge, armored guy — the PK leader — was getting split in half.</p>

      <p>According to Marie, the armor guy was an infamous player who had had high defense and a counterattack-like ultimate skill that dealt serious damage.</p>

      <p>Due to that description, I found him somewhat relatable and began to feel that his demise — that mangled corpse — was a glimpse of my future if I ever fought Figaro.</p>

      <p>“And that’s how everyone in Mad Castle met with a sad end,” said Marie. “Even if they recover from this, they’ll never return to player killing in that area.”</p>

      <p><em>Makes sense, considering that stopping the traffic there would make Figaro get involved again,</em> I thought.</p>

      <p>“If I ever find myself in the duel city, I’ll have to remember to thank Figaro for this,” I said.</p>

      <p>“Indeed,” mumbled Nemesis.</p>

      <p>“Hm?” I looked at her.</p>

      <p>For some reason, she seemed a bit sulky. Instead of looking at the crystal ball, she was merely eating with Babi, who didn’t seem to care about any of this whatsoever.</p>

      <p>The amount Nemesis consumed was as great as always, but it almost seemed like she was stress eating.</p>

      <p><em>Why, though?</em> I thought.</p>

      <p>“Okay, now let me show you the next one.” This time, Marie’s crystal displayed a familiar place. It was the first hunting ground I’d ever leveled at — Easter Plains.</p>

      <p>Sure enough, there was a group of player killers there. Though they were hiding from players and waiting for their next prey, they weren’t hidden from the camera.</p>

      <p>A few moments later, another group — and quite a strange one, at that — came from the direction of the capital.</p>

      <p>I couldn’t tell the exact number, but there were surely more than a hundred of them — all marching towards the player killers.</p>

      <p>Each and every single one of the group had an outfit with a crescent moon and a closed eye on it. The design seemed familiar, but I couldn’t recall where I’d seen it.</p>

      <p>In response to the group’s sudden appearance, the player killers became visibly perplexed and only continued hiding.</p>

      <p>Soon enough, a single lady walked out of the strange group.</p>

      <p>She had black hair that was reminiscent of nightly darkness and reached as far as the back of her knees, which were hidden by her ceremonial kimono. Her beauty made me feel as though I was looking at Princess Kaguya, straight out of the children’s tale.</p>

      <p>Suddenly, the beauty raised her hand, making the world go through what seemed like a theatrical blackout.</p>

      <p>Mere moments ago, it had been daytime and the sun had been shining, but she’d somehow brought forth a “night.” It was complete with a blue moon that was downright impossible in reality and perhaps even the game.</p>

      <p>A moment later, the player killers who were bathed in the blue moonlight grabbed hold of their throats and began to writhe in pain, which rendered them unable to move properly.</p>

      <p>As if they had been waiting for this, the strange group split up and began systematically killing the writhing player killers. With their victims unable to move in any capacity, it seemed less like a battle and more like a tedious job.</p>

      <p>However, there was an exception.</p>

      <p>A certain player killer — a Beastman type female player with wolf-like ears and tail — could still move even when exposed to the moonlight.</p>

      <p>According to Marie, that was one of K&amp;R’s two leaders.</p>

      <p>Using her claws and fangs, she savagely clawed her way through the enemies surrounding her and closed in on Princess Kaguya.</p>

      <p>However, it was all in vain.</p>

      <p>The hundreds surrounding her were too much for her to handle, so she ended up dying at the edge of a spear.</p>

      <p>The sight made the beauty reminiscent of Princess Kaguya cackle in a discomforting manner.</p>

      <p>“That’s Tsukuyo Fuso of the Lunar World,” Marie explained. “She is the owner of the clan known as The Lunar Society... though I guess the term ‘founder’ or ‘spiritual leader’ is more appropriate.”</p>

      <p>“Spiritual leader?” I raised an eyebrow. It was a strange title, but it reminded me that her job was “High Priestess.”</p>

      <p>Nevertheless, I found it to be somewhat questionable...</p>

      <p>“Um, is this Lunar Society related to the Japanese cult of the same name?” asked Rook.</p>

      <p>“...Oh.” His words reminded me of where I’d heard that before. “The Lunar Society” was the name of a cult that existed in reality.</p>

      <p>“Yes,” answered Marie. “The clan ‘The Lunar Society’ is a part — or, rather, the headquarters — of the cult of the same name.”</p>

      <p>“...Why are they advancing their religion in a game, of all places?” I asked.</p>

      <p>“The Lunar Society’s first teaching is ‘Escape the shackles of flesh and betake yourself to the true world of souls,’” she explained. “I guess they consider <em>Dendro</em> to be that world.”</p>

      <p><em>...I’m fully aware of this world’s realism,</em> I thought. <em>Our five senses and the tians we interact with can’t be distinguished from the real thing. But... is that really enough reason to take it that far?</em></p>

      <p>“If their goal is to ‘betake themselves to the true world of souls’ and they accomplished it by getting here... what are they doing now?” I inquired.</p>

      <p>“Oh, yes. Their second teaching is the main one,” Marie said. “It goes something like, ‘Embrace this free world and celebrate your liberty to your soul’s content.’”</p>

      <p><em>...Sounds like the dogma of some dark god,</em> I thought.</p>

      <p>“The Lunar Society is quite feared among the players,” she continued. “Not only are they more than a thousand strong, they also have roots in reality, so many players are afraid that getting on the cult’s bad side might get something done to them in real life.”</p>

      <p><em>Well, that’s a scary thought,</em> I thought. <em>If there’s the possibility of them abducting me or something, I’d rather not get involved with them, either.</em></p>

      <p>“By the way, as far as we know, their reason for going after the player killers was the fact that one of their followers was killed by them,” Marie added. “It’s scary that such a thing can get the entire clan to go after you, isn’t it?”</p>

      <p><em>...Would I be wrong to assume that — right next to the war — the cult is another reason why people are leaving the kingdom?</em> I thought.</p>

      <p>Next, Marie displayed what had happened in the west.</p>

      <p>What I saw first was Lei-Lei — the girl that had participated in the party we’d had on my first day. Just like that time, she was wearing a Chinese dress despite having a northern European face. From what my brother had told me, she was from there in real life, too.</p>

      <p>Lei-Lei’s fighting style as I saw it in the crystal ball was simple. She didn’t bring them up to the sky just to have them fall on a chainsaw, nor did she make them writhe just to have a group come up and impale them.</p>

      <p>She simply walked up to the hiding player killers and punched them. That was all. However, the results were downright ridiculous.</p>

      <p>Figaro’s chains basically turned his opponents into mincemeat, but this was on another level.</p>

      <p>The player killers were completely liquefied. They were bursting so easily, it almost made me think that they weren’t people, but people-shaped water balloons. The moment Lei-Lei touched them, their flesh simply collapsed, leaving only a blood and entrail-colored liquid and the skin that released it.</p>

      <p>Speaking of skin, it was flying around everywhere, decorating just about every surrounding tree. Because they instantly died, it would quickly disappear, but the sight itself wouldn’t leave my mind as easily.</p>

      <p><em>I think I can see why she’s called the Prodigal of Feasts,</em> I thought. <em>No proper feast is complete without meat and drink, and she provided both. ...What a grim thought, though.</em></p>

      <p>Despite seeming like a really jovial character in the party, Lei-Lei had a seriously scary fighting style.</p>

      <p>Marie didn’t know why Lei-Lei had decided to eliminate the player killers.</p>

      <p>With what happened in the south, east, and west now being clear, all that was left was the north — Noz Forest.</p>

      <p>It was the place I was the most curious about. After all, I had died there once.</p>

      <p>“Now, about the north...” Marie seemed somewhat reluctant.</p>

      <p><em>Just what is she about to show us?</em> I thought.</p>

      <p>“Well, I’ll just play it, then.” Marie controlled the crystal ball and made it show the forest.</p>

      <p>It had been filmed during nighttime, when I’d still been raiding the Tomb Labyrinth. Apparently, this was the earliest of the four eliminations.</p>

      <p>However, I couldn’t see the player killer anywhere.</p>

      <p>Sure, the trees and the night’s darkness made it hard to see, but there was absolutely no sign of him.</p>

      <p>As I continued intently looking at the crystal ball and searching for him, the screen suddenly turned red as the footage ended.</p>

      <p>It quickly changed to a recording from another camera, but just like the last one, it quickly got cut off, as well.</p>

      <p>The next recording wasn’t a clip of the inside of the forest, but an overhead view of the whole area. The camera was probably placed on the capital’s outer walls.</p>

      <p>Anyway, it showed with great clarity what was happening in the forest.</p>

      <p>The forest was being bombarded by artillery shells and set aflame by a rain of incendiary bombs.</p>

      <p>Not showing a single person, the clip ended with just that — a flaming forest, making it feel like a scene cut from some war movie.</p>

      <p>“Um... what is this?” Rook’s question made Marie smile awkwardly.</p>

      <p>“Ahaha... This is, uh... the battle between King of Destruction the Unknown and the unidentified player killer widely known as the ‘Superior Killer’...” The tone of her explanation made it seem like she had no confidence about what she was saying.</p>

      <p><em>I can see why,</em> I thought. <em>The clip shows neither the player killer nor the King of Destruction eliminating him. It’s nothing but a display of environmental destruction.</em></p>

      <p>“...If it doesn’t show the King of Destruction, how can you be sure that he was the one who did it?” I asked Marie. “Hell, we don’t even see the player killer, so it might not be this ‘Superior Killer,’ either.”</p>

      <p>“Good point,” she replied. “From what we know about him, it’s all but confirmed that the PK is the Superior Killer, but we don’t have any conclusive proof about the one who attacked him being the King of Destruction. This is only an assumption based on the extent of the destruction displayed here. But you see, the King of Destruction has always been an enigmatic figure that doesn’t let anyone know much about him...”</p>

      <p><em>Oh yeah,</em> I thought. <em>His reason for not participating in the war was that he “didn’t want to stand out.” Though that’s not very convincing when coming from someone who just turned an entire forest to cinders.</em></p>

      <p>“Oh, but there are rumors that the King’s Embryo is a battleship! Take a closer look here!” Marie pointed her finger at a certain spot on the crystal ball.</p>

      <p>Beyond the burning forest, shrouded by the darkness of night, there was a large, black silhouette. Its outline was too acute to be the ridgeline of a mountain, and indeed, many would assume it to be a battleship.</p>

      <p>“So battleship Embryos exist, huh?” I said, not particularly surprised. My brother’s was a tank, so this wasn’t outside the realm of expectation.</p>

      <p>In fact, I’d been more startled by Tsukuyo Fuso’s Embryo. I had a feeling that it was the “night” itself.</p>

      <p>“But wait, wouldn’t such a large-scale attack harm more than just the Superior Killer?” I asked. <em>What if it actually killed some tians...?</em></p>

      <p>“I don’t think we have to worry about that,” Marie answered. “With all the player killing, almost no one dared to go through there. In fact, I think the King of Destruction only took such a flashy approach because he was certain that no one else would get caught up in it.”</p>

      <p>“I see.” I nodded. Or maybe he’d turned the whole forest to ash simply because he couldn’t find anyone. From what I had read on the Internet, no one besides me had even seen the Superior Killer.</p>

      <p><em>Now that I think about it, how did DIN get ahold of information that led them to believe that the player killer was the Superior Killer?</em> I wondered.</p>

      <p>“Do you know the reason why the King of Destruction attacked the Superior Killer?” I asked.</p>

      <p>“We have no clue whatsoever.” Marie raised her hands up in resignation. “Despite being a player that gets strongly involved in many events across all countries, his identity and most of the reasons for his involvement are completely unknown.”</p>

      <p>“And that’s why he’s called ‘The Unknown,’ right?” I asked.</p>

      <p>“Yes,” she nodded. “We are completely clueless as to what drove him to cause such large-scale destruction...”</p>

      <p><em>...I wonder if something pissed him off,</em> I thought.</p>

      <p>“Wait, aren’t there too many holes in the information about the north? Isn’t this intel a bit too vague?” Rook asked.</p>

      <p>I couldn’t help but agree with Rook. The price had been 600 lir per area, but the information for Noz Forest seemed worth a lot less than that.</p>

      <p>“Oh...?! Now that you mention it...” Marie muttered. “Ah! But wait! There’s some extra info that comes with this!”</p>

      <p>“Extra info?” I asked.</p>

      <p>“Indeed! It’s this: the Superior Killer left these flames alive!”</p>

      <p>In response to Marie’s words...</p>

      <p>“Oh?”</p>

      <p>...Nemesis — who, up until that point, had been eating with Babi while barely looking at the crystal ball — finally showed some interest.</p>

      <p>I could somewhat understand why this was the only piece of info that had gotten a reaction out of her.</p>

      <p>In fact, I’d finally realized why Nemesis was behaving the way she was. She was frustrated that the player killers had all been eliminated. She didn’t like having the one she’d promised to get revenge on be taken away by someone else. I could relate to that, as well.</p>

      <p>However...</p>

      <p>“That’s great news,” said Nemesis.</p>

      <p>...he was still alive.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter6">
    <div class="main">
      <h1>Chapter Six: The Cat’s Tea Party</h1>

      <p><em>Noz Forest — Paladin Ray Starling.</em></p>

      <p>After Rook and I bought Marie’s info and made a plan to meet up later, Nemesis and I went to the place that used to be Noz Forest.</p>

      <p>“This is just...” I said.</p>

      <p>Beyond the northern gate, there was a great wasteland as far as the eye could see. The forest had simply disappeared, leaving only felled trees reduced to nothing but charcoal.</p>

      <p>Noz Forest could no longer be used as a hunting ground, nor was it deserving of the name “forest.” In a city-building sim, the wasteland before me would’ve been a great place for building.</p>

      <p>Sadly, <em>Infinite Dendrogram</em> was an RPG.</p>

      <p><em>But man, it’s hard to believe that a single player can change the map this much,</em> I thought.</p>

      <p>I saw bullet holes, explosion marks, and could even smell the lingering stench of gunpowder. I had no clue if the King’s Embryo really <em>was</em> a battleship, but there was little doubt that — just like my brother’s Baldr — it was either heavy weaponry or something greater in the same vein.</p>

      <p>Another thing I noted was that — while the other three had targeted the player killers directly — the King of Destruction had, well... destroyed the map. Sure, he’d lived up to his name, but it didn’t make it less of a bother. It seemed as ludicrous as removing the whole arm in response to a diseased finger.</p>

      <p>“...This is gonna have bad aftereffects — no doubt about it,” I said.</p>

      <p>“People have already started leaving here at an even faster rate,” added Nemesis.</p>

      <p>We were talking about the local tians.</p>

      <p>Yesterday’s bombing had put the entire capital into a state of panic. Thinking that Dryfe’s army was launching a surprise attack, the knights had moved out through the northern gate. By that point, however, the bombing had already been over, leaving nothing but a burning Noz Forest.</p>

      <p>Though it didn’t seem like the flames would spread to the capital, they couldn’t have just left them burning as they were, so the knights had spent the entire night putting them out, and were still taking care of the aftermath.</p>

      <p>All of this had been told to me by Liliana.</p>

      <p>We’d met by accident a short while ago, and she had palpable bags under her eyes. She’d even said, “If you became a Paladin, then come and help us out...” in a slightly whiny manner.</p>

      <p>“I know we were underground when the bombing happened and all, but I’m still surprised we didn’t notice it,” I commented.</p>

      <p>“I had other things to worry about back then,” said Nemesis. “You, on the other hand, were simply tired and had your senses dulled by fatigue.”</p>

      <p>Anyway, the event that had reduced Noz Forest — a place the capital’s citizens took for granted — to ashes had been enough to make the already-tense populace go into panic mode. Since morning, the amount of people leaving the capital had been increasing by the hour.</p>

      <p>Another reason for the increase was the fact that the four PK groups were taken care of. Though the player killers had been primarily targeting Masters, tians were also in danger of getting attacked if they weren’t lucky, which had made traffic around the capital grind to a complete halt. Today, the roads were opened again, making the people practically flood out of the city.</p>

      <p><em>Now that I think about it, tians can’t differentiate between Masters and other tians,</em> I thought. <em>Though we Masters use Embryos and are basically immortal, both tians and Masters share the basis of being human. Therefore, to tians, player killers are nothing but murderers. That goes double for the player killers who also go for tians.</em></p>

      <p>“Man, taking care of this PK business sure came at a cost,” I said.</p>

      <p>“One of the hunting grounds became unusable, after all,” Nemesis agreed. “Also, the horror experience back in the Tomb Labyrinth was all for naught.”</p>

      <p>Despite all the money we’d spent on it, the advantage we’d gained had lasted for only a single night. Though I <em>did</em> feel fortunate to have met Figaro.</p>

      <p>“I’ve gotta say, though...” I spoke. “This ‘Superior Killer’ guy escaped from an attack that destroyed the entire forest.”</p>

      <p>From what Marie had told me about the player killer in Noz Forest, the source of DIN’s information about him had been Marie herself. Though a bit late, she had gone to gather material about yesterday’s calamity right as it was happening. While doing so, she had happened to see the Superior Killer escape from the onslaught that was turning the forest to ash and run off into the distance.</p>

      <p>In her own words, “He was using a skill with a concealment effect that hid his identity, but from the features of the Embryo he was using, I couldn’t be more sure that it was him!”</p>

      <p>Once I asked for those features, she said that it was a handgun-shaped Embryo that shot bullet-like animals. The description matched the one who had killed me.</p>

      <p>Apparently, the Superior Killer had been using those bullet-like animals to cancel out all the attacks coming his way. By doing that, he’d been able to safely reach the capital. Despite all he had already done up to that point, the King of Destruction couldn’t attack the capital, and had given up on pursuing the Superior Killer.</p>

      <p>When all of that was considered, he had been successful where I hadn’t — in a battle with the sole goal of retreating from a stronger force.</p>

      <p>I was glad to not have the target of my revenge get taken away from me by the King of Destruction, but that notion made me slightly vexed.</p>

      <p>“...Let’s go back, then,” I said. “We have plans with Rook, after all.”</p>

      <p>“True... hm?” Nemesis said.</p>

      <p>As we were about to make our way back to the capital, Nemesis focused on a single point of the landscape as if she’d just noticed something.</p>

      <p>“What’s wrong?” I asked.</p>

      <p>“What do you make of <em>that</em>?” Nemesis pointed at something, but I couldn’t see anything there.</p>

      <p>“What do you see?” I asked.</p>

      <p>“There’s a heat haze despite it not being hot,” she said. “Wait, is that... distorted space?”</p>

      <p>Nemesis walked over to where she was pointing... and simply disappeared.</p>

      <p>“...Huh?! Nemesis!” I called out, ran over to where she’d vanished, and passed through an invisible curtain.</p>

      <p>I described it as a “curtain” simply because — even though there was some sort of resistance — it was extremely weak. Once I’d walked through the invisible curtain...</p>

      <p>“...Huh?!”</p>

      <p>...I was in a mysterious space that was neither dark nor bright, and didn’t even seem to have the concept of up and down.</p>

      <p>The space was littered with countless blue, permeable windows and was already occupied by two familiar faces.</p>

      <p>Once of them was Nemesis, who looked back at me as I confirmed that she was completely unharmed. “Master, this place is...”</p>

      <p>The other person — no, the word “person” didn’t apply here.</p>

      <p>“...Ohh? Why are you heere?”</p>

      <p>The creature skillfully operating the windows was Cheshire — the control AI I’d met when I had begun playing <em>Infinite Dendrogram.</em></p>

      <p class="centerp section-marking">◇</p>

      <p>A few minutes had passed since we’d found ourselves in the mysterious space beyond the invisible curtain.</p>

      <p>Nemesis and I were sitting in chairs and drinking the tea Cheshire had prepared for us.</p>

      <p>As we had turned perplexed, Cheshire had said, “I’ll explain it all, but just standing around while I do that isn’t fun, riight?” and made the tea for us.</p>

      <p>At first, this space had had nothing besides the windows — there hadn’t even been a floor — but Cheshire had reached into a pocket and taken out chairs and a table as if it was nothing.</p>

      <p>It reminded me of that cartoon about a cat robot I had been watching since I was a child. Though, unlike that cat robot, Cheshire had a set of ears.</p>

      <p>“So, what is a control AI doing here?” I asked.</p>

      <p>“Preliminary arrangements for environmental maintenaance,” it answered. “The real work here will be done by control AIs numbers 3 and 5 — the ones responsible for monsters and the environmeent. This space is basically an impromptu operating rooom.”</p>

      <p><em>Like a prefab used in construction sites, huh?</em> I thought.</p>

      <p>“Though, only we can see and enter these placees,” said Cheshire. “But the Embryo girl here seems to be a Maiden-type, and I guess things like this can happen with theem. She basically dragged you in here, didn’t she, Raay?”</p>

      <p>“What’s so different about Maidens?” I asked.</p>

      <p>“They’re closer to us in some waays,” Cheshire answered. “They even keep the *** functionalityy.”</p>

      <p><em>Hm?</em></p>

      <p>“What did you say just now?” I was perplexed.</p>

      <p>“Oh, sorryy,” it apologized. “That’s information I can’t verbaliize. It’s nothing big, though, so don’t mind iit.”</p>

      <p>That answer only left me with more questions, but the AI probably had some developer-set duty of confidentiality it had to protect. We were already behind the scenes, anyway.</p>

      <p>I also had other things I wanted to ask, so I decided not to push it.</p>

      <p>“So you’re gonna fix this area?” I inquired.</p>

      <p><em>Infinite Dendrogram</em> prioritized realism. That was the reason why places such as the Old Orchard could be invaded by bug monsters, but beginners’ hunting grounds such as the Noz Forest could be an exception.</p>

      <p>However, Cheshire shook its head.</p>

      <p>“Noo. We will not directly recreate the now-lost Noz Forest. However, we can arrange some factors that would allow it to take the form of a similar environment. My job is to prepare for thaat.”</p>

      <p>Cheshire stopped speaking for a moment and took a sip of the black tea before continuing.</p>

      <p><em>Not that it matters, but you’d think a cat wouldn’t be able to handle such a hot drink,</em> I thought.</p>

      <p>“This is a free world, after aall. We — the control AIs — will never undo the effects a creature’s autonomous actions have on this world — be they player, tian or monsteer. The results of freedom are none of our conceern. However, there are some exceptions. After all, we have a control AI meant for punishmeents.”</p>

      <p>“Punishments?” I asked. “If PK is perfectly fine, then what is actually deserving of that?”</p>

      <p>“Hmm... Getting on a country’s wanted list, I gueess,” Cheshire answered. “You know how this world has laws, right? However, when arrested, players easily can escape jail by simply logging out or killing themseelves. Neither the police nor the knights have any means of preventing thaat. That’s why we have a control AI operating a jail for players, nicknamed the ‘gaol.’ The AI also processes the player’s inability to use save points when on a wanted list.”</p>

      <p><em>That makes sense,</em> I thought. <em>If getting arrested or receiving the death penalty were the only demerits to committing crimes, some would just go about repeating them.</em></p>

      <p>“That’s part of the setting, tooo,” Cheshire continued. “‘A Master who has sinned and cannot return to a save point shall be transferred to the gaol,’ and all thaat. That’s why you should register on save points in as many countries as you caan.”</p>

      <p>“...I have absolutely no intention of doing something that’d get me on wanted lists, though,” I commented.</p>

      <p>“That’s good, tooo,” said Cheshire. “Well, even if you get on one, you won’t be sent to the gaol as long as you don’t diee.”</p>

      <p><em>...This system sure is lenient on strong criminals,</em> I thought.</p>

      <p>“Hmm... If there are control AIs responsible for punishments... what are <em>you</em> responsible for, cat?” asked Nemesis.</p>

      <p>“I’m the control AI handling choores,” Cheshire answered.</p>

      <p><em>Chores?</em> I thought.</p>

      <p>“We AIs also have things we’re good and bad aat,” Cheshire explained. “For example, I’m horrible at management functioons. Especially when it’s related to environment managemeent.”</p>

      <p>“That’s not what you’re doing right now?” I asked.</p>

      <p>“This is just a preliminary arrangemeent,” it answered. “A proper environmental simulation would include management of the cloud particles’ entropyy.”</p>

      <p>I was silent. Just thinking about the scale of it gave me a headache.</p>

      <p><em>Though I guess being able to do that is part of being a proper control AI,</em> I thought. <em>Well, Cheshire said it’s not capable of that, though.</em></p>

      <p>“My primary work is to be the tutorial guiide,” it continued. “It’s work given to control AIs with unallocated calculation resourcees. I welcome half of the players coming heere.”</p>

      <p>That sounded like an impressive amount.</p>

      <p>“I’m doing the tutorial work right now, in faact. Like soo.” Upon saying that, Cheshire split into five.</p>

      <p>Five, differently-patterned cats spoke while handling the windows around them.</p>

      <p>“Like soo,” said the first.</p>

      <p>“But there’s no reason to split in heere,” said the second.</p>

      <p>“Even if there’s five of me, it doesn’t affect my work speeed,” said the third.</p>

      <p>“After all, the calculation volume I use doesn’t change at aall,” said the fourth.</p>

      <p>“In fact, it slightly increases the calculation time and slows me down,” said the fifth. And thus, the five became one again.</p>

      <p>I was silent again. All this talk about calculations had made me remember that we were in a game server. This might’ve the first time I’d been presented with a display of cyber technology.</p>

      <p>“I get to handle the chores because I’m good at processing the splitting I just shoowed,” said Cheshire.</p>

      <p>“I see,” I nodded. “So, if you take half of the newcomers, the other half is taken by other AIs, right?”</p>

      <p>“Yees,” it answered. “There’s even an AI that doesn’t allow you to redo your character’s appearance after you set it once.”</p>

      <p>“...Yeah, I <em>really</em> think it should allow that,” I said.</p>

      <p>That might’ve been the control AI that my brother had been assigned to.</p>

      <p class="centerp section-marking">◇</p>

      <p>After an approximately twenty-minute-long chat with Cheshire, we chose to take our leave.</p>

      <p>“Not counting the welcoming, it’s been so long since I met a person while being in this foorm,” said Cheshire. “I’d love to present you with some souveniir... but since I’m part of development, that would be favoritism — a big no-noo.”</p>

      <p>“No need for that,” I said. “The tea and sweets are more than enough. Thanks.”</p>

      <p>“Indeed,” Nemesis agreed. “They were delicious.”</p>

      <p><em>...With how much she ate, a part of me feels like we’re already in the “no-no” territory,</em> I thought.</p>

      <p>“Oh, my. Having you say that makes me feel like making them was really worth iit,” said Cheshire.</p>

      <p><em>Those cookies were handmade?</em> I thought. <em>That’s unexpected. ...Okay, hold on now. How the hell can those cat hands make cookies?</em></p>

      <p>“You should consider selling them on the market.” said Nemesis.</p>

      <p>“I’ll think about iit,” replied Cheshire. “Oh, right. You’re heading to Gideon soon, aren’t you, Ray?”</p>

      <p>I’d talked a bit about that during the tea party.</p>

      <p>“Yeah, I am,” I said.</p>

      <p>“...Take care noow.” Cheshire’s words seemed ominous.</p>

      <p>“Is there something I should know?” I asked.</p>

      <p>“There is, buut...” It seemed apprehensive about saying it.</p>

      <p><em>Is it something it can’t reveal?</em> I thought.</p>

      <p>“I’ll just keep it in the safe range, theen: ‘The demon’s heart lies in its stomach.’”</p>

      <p>“Hm?” I raised an eyebrow.</p>

      <p>“That’s aall,” said Cheshire. “Though, it’s not like you’re guaranteed to meet iit.”</p>

      <p>Cheshire had given me a riddle... or a clue you’d find in a mystery novel. I couldn’t tell.</p>

      <p><em>...Well, guess I’ll record it in my memo window,</em> I thought and did exactly that.</p>

      <p>“I don’t know if we’ll ever meet again, but if we do, then until next tiime,” Cheshire waved goodbye.</p>

      <p>“Yeah, see ya,” I reciprocated.</p>

      <p>We passed through the exit the cat had created and returned to the previous map. Beyond it was the same wasteland we’d been in before. When I asked Nemesis about it, she said that she could no longer see the entrance to Cheshire’s workplace.</p>

      <p>I looked at the time and found out that it was a bit past three o’clock in the afternoon. We had planned to meet Rook at four, so we still had enough time.</p>

      <p>Nemesis and I made our way to the meeting spot — the facility known only as the Adventurer’s Guild.</p>

      <p class="centerp section-marking">◇</p>

      <p><em>Infinite Dendrogram</em> had three types of quests a player could accept.</p>

      <p>The first type was like the first quest I’d ever gotten — “random event quests.”</p>

      <p>The second type was like one Rook did for his job — “job quests.”</p>

      <p>The third type was “guild quests.” In other words, the ones received at a facility known as the “Adventurers’ Guild.”</p>

      <p>Due to the word “guild,” some could confuse it with job guilds, but the quests were different in nature. The Adventurers’ Guild was a service that managed many and varied requests, such as elimination, escorting, collection, or miscellaneous matters. Once registered, anyone could accept quests, regardless of their job or even if they were Masters or tians.</p>

      <p>Of course, I was no exception.</p>

      <p>My level was decent, so I decided to continue progressing through the game while making some coin from the requests there.</p>

      <p>Also, ever since we’d met, Rook and I had been talking about how cool it’d be to party up, so we decided to do that while taking on the same quest.</p>

      <p>And so...</p>

      <p>“...There are so many requests that I have no idea which one to choose,” I muttered.</p>

      <p>“True...” Rook agreed.</p>

      <p>Inside the Adventurers’ Guild, Rook and I were letting our heads lie on a round table as we both eyed a thick book... and honestly, I was tired beyond words.</p>

      <p>The books we had were quest catalogs that displayed every request the guild had available.</p>

      <p>It was magically enchanted to add new requests and remove taken ones in real-time, making the number of quests being displayed grow and drop without stop. Also, it didn’t display quests from a difficulty level the players couldn’t take.</p>

      <p>To us, it displayed all quests up to difficulty level three, and apparently, access to levels four and higher was based on the amount of completed lower-level quests.</p>

      <p>Despite the lack of requests we couldn’t see, the catalog was far too thick. It had approximately one thousand pages.</p>

      <p>The catalog’s thickness, too, had been caused by the King of Destruction and other Superiors. Due to the King destroying Noz Forest, the amount of people wanting to escape the capital had increased. Not to mention that the emancipation of the roads leading to other cities had revitalized the trading routes. As a result, there was a great spike in requests for escorts that could protect those travelers.</p>

      <p>The problem <em>we</em> were faced with, however, was that...</p>

      <p>“...The rewards and difficulties for requests from those going to Gideon are so all over the place that I can’t choose,” I said.</p>

      <p>“True...” Rook agreed.</p>

      <p>There were dozens of escort quests where the destination was the city of duels — the place where we could find Figaro. However, there were requests that had different rewards despite having the same difficulty, and vice versa.</p>

      <p>Since we couldn’t accept any quests without thinking things through, the ones with favorable conditions often got picked by other people and disappeared from the catalog right as we were considering them.</p>

      <p>“Also, escort quests aren’t even appealing,” I said.</p>

      <p>“True...” Rook agreed.</p>

      <p>The ones who took the escort quests had to protect the requesters for the entire journey. However, Rook and I were players. We had to log out every now and then, and we couldn’t do any protection when we weren’t in the game.</p>

      <p>In the game’s setting, we Masters got “sent to another world every now and then,” and the tians were fully aware of that. Therefore, we players weren’t suited for escort quests, so most of them were taken by tians. Though, there were some exceptions made for Masters of a particularly high level.</p>

      <p>“Maybe we should look for quests where we have to kill or deliver something,” I suggested. “Though the rewards would be smaller.”</p>

      <p>“True...” Rook agreed.</p>

      <p>“...Rook, that’s all you’ve been saying for a while now,” I said.</p>

      <p>“Oh, sorry,” he said, finally speaking a different word. “Reading this made me remember some things...”</p>

      <p>From the fact that he looked like a middle-schooler, I could only assume that he was remembering a time he’d studied for his exams.</p>

      <p>“Father’s handmade textbook was even thicker than this...” he mumbled as he went through the pages with an empty look in his eyes.</p>

      <p>If Rook’s face was really the same as it was in reality, he was of Western descent.</p>

      <p><em>I guess the exam struggle is severe all around the world,</em> I thought. <em>The college entrance exams I had to go through were so damn hard...</em></p>

      <p>“Hmm...”</p>

      <p>“Mmm...”</p>

      <p>Nemesis and Babi were intently looking at books, too. However, they weren’t quest catalogs.</p>

      <p>Nemesis was examining the bounty list, while Babi was staring at the guild’s food and drink menu.</p>

      <p>“Master,” Nemesis spoke up. “It says here that those traveling on the road to Gideon sometimes encounter two boss monsters with bounties on them — King of the Wolf Pack, Lobohta and Great Miasmic Demon, Gardranda. I hope we meet them.”</p>

      <p>“I’m not sure if I want to experience something so blatantly dangerous...” I replied.</p>

      <p>“Hey, Rook,” said Babi. “Don’t you think that this Special Pudding a la Mode would be great with Death Sauce? Want to order it?”</p>

      <p>“I don’t think I want to experience something so blatantly dangerous...” Rook replied.</p>

      <p>We shifted our attention away from their... disturbed suggestions and focused on our quest catalogs.</p>

      <p>First of all, it was already set in stone that we would accept a quest we could do on the way to Gideon. Rook wanted to go there because the city of duels had a beast market.</p>

      <p>On the subject of Rook, though... In our little information exchange, I had found out that — despite being twice the level I was — he had low stats. Though his MP and SP were higher than mine, I had double or more of every other stat.</p>

      <p>It was less about me being a Paladin — a high-rank job — and more about Rook’s Pimp being a low-stat job. A Pimp’s playstyle seemed to be focused on a gamble — you either Charm or die.</p>

      <p>At this point, I had absolutely no doubts that it was Rook’s vocation. If not “Pimp,” the only possible thing he could have been was “Angel.”</p>

      <p>“Master, get ahold of yourself,” said Nemesis. “You’re acting as though you’re Charmed.”</p>

      <p>“W-Whoa,” I said, and snapped out of it.</p>

      <p>Of course, Rook wasn’t using his Charm skill on me. He couldn’t even if he wanted to, since it only worked on females. However, he was just so handsome that he made the mind drift away every now and then. Even the other adventurers in the guild were throwing glances at our table. Hell, some were downright staring.</p>

      <p>Rook wasn’t the only reason for that, though — both Nemesis and Babi were exceptionally beautiful, too. With three out of five of us here being so attractive, it was only natural to become the center of attention.</p>

      <p><em>...Five?</em> I thought.</p>

      <p>“Man, it’s been a while since I’ve visited the Adventurers’ Guild. There’s quite a large pile of quests today, huh?” Marie — the Journalist who sold us info about the PK incident — was sitting at our table.</p>

      <p><em>...Okay, just how long have you been here?</em> I thought. I could’ve sworn that we’d started with just me, Rook, Nemesis, and Babi. <em>Do you Journalists have some skill that allows you to sit at tables without getting noticed?</em></p>

      <p>“Oh? Why are you here, Miss Marie?” asked Rook.</p>

      <p>“I had business that involved going to Gideon, so I decided to pick up a quest I could do on the way and noticed you two talking about going to the duel city, too,” answered Marie. “I figured that I simply <em>had</em> to join. May I come with you?”</p>

      <p><em>Had to join, huh...?</em> I thought.</p>

      <p>“...Well, I don’t really mind,” I said. “What about you, Rook?”</p>

      <p>“Same here,” he answered. “In fact, having her join us would be reassuring.”</p>

      <p>“...That’s true,” I agreed.</p>

      <p>It was going to be the first time Rook and I ever traveled to another town. Marie, on the other hand, had been as far as Huang He, so there was no doubt that she was used to long-distance journeys. That alone was enough to make her presence reassuring.</p>

      <p>Marie joined us in looking through the quest catalog. “I found one that’s named ‘Elimination Request — Sauda Phantom Sheep,’” said Rook. “The reward is high, too.”</p>

      <p>“Oh, that one’s no good,” said Marie. “Though weak, Sauda Phantom Sheep are extremely hard to find. It would take you three days of searching.”</p>

      <p>“Elimination Request — Blue Lemmings. This one also has a nice reward,” I said. “We’d have to kill a whole fifty of them, though.”</p>

      <p>“They’re weak, mouse-like, easy-to-find monsters that come in flocks,” Marie explained. “It should be eas—”</p>

      <p>“No mice,” said Rook.</p>

      <p>“Rook?” I looked at him.</p>

      <p>“No mice,” he repeated himself.</p>

      <p>“O-Okay...”</p>

      <p>About ten minutes passed as we continued glaring at the catalog, when suddenly...</p>

      <p>“Oh! What would you say to this one?” Marie pointed at a certain page.<br/><br/></p>

      <p class="noindent">Difficulty Level Two, Delivery Request — The Guild in Gideon, City of Duels.</p>

      <p class="noindent">Reward: 30,000 lir.</p>

      <p class="noindent">Please complete a delivery from the capital’s Adventurers’ Guild to the Guild in Gideon.</p>

      <p class="noindent">There is much to be delivered, so it is recommended that only those with a storage bag accept this quest.</p>

      <p class="noindent">You have three days to complete it.</p>

      <p class="noindent">P.S. If you take the delivery and run, we will send an assassin after you.<br/><br/></p>

      <p>“This request is from the guild itself,” Marie explained. “We only have to take the delivery to the other guild, so it’s nothing complicated. The reward is good, too, so it’s a really nice deal overall.”</p>

      <p><em>...The P.S. is a bit questionable, but I guess there’s no need to worry about it if we play it fair,</em> I thought.</p>

      <p>“I’m up for this quest. What about you, Rook?” I asked.</p>

      <p>“Yes, it seems agreeable,” he answered.</p>

      <p>“Then it’s decided,” said Nemesis.</p>

      <p>“Already? I didn’t get to eat my pudding yet,” Babi complained.</p>

      <p>Everyone replied in their own way.</p>

      <p>Whatever the case, we had chosen the first quest we would do as a party.</p>

      <p>“With that settled, you go on and accept it, Ray.” said Marie.</p>

      <p>“Hm? But you’re the one found it, so shouldn’t you be the one to do it?” I asked.</p>

      <p>“When several people accept the same quest, the proper procedure is to create a party and have a representative go through the acceptance process,” she explained. “That involves the representative writing down his main job.”</p>

      <p>“Which means...?” I raised an eyebrow.</p>

      <p>“The guild’s receptionist wouldn’t be too keen on giving the quest to a Journalist or a Pimp, right?” Marie elaborated.</p>

      <p>She wasn’t wrong. The request had come directly from the guild, so there was a chance that they wouldn’t give it to anyone who was questionable in terms of ability. However, that would never apply to Paladins such as myself.</p>

      <p><em>...But wait, my level is the lowest out of us three. Won’t that be a problem?</em> I thought.</p>

      <p>“The first thing that comes up is your label, after all,” said Rook. “I also think that you should be the one to do this, Ray.”</p>

      <p>First Marie, now Rook. They were both fine with it, so there was no reason for me not to do it.</p>

      <p>I took the catalog to the guild’s receptionist and showed her the page of the request we’d decided upon.</p>

      <p>“Understood,” she said. “Please give us your card and fill in this form.”</p>

      <p>I gave her my freshly-made Adventurers’ Guild member card and filled in all the fields I had to.</p>

      <p>“We have processed your acceptance of this quest,” said the receptionist. “Please go to that counter and retrieve the items.”</p>

      <p>Doing as I was told, I went to take the delivery and placed it into my storage bag.</p>

      <p>With that, the preparations were done and we officially had a guild quest — a new step in our <em>Dendro</em> career.<br/><br/></p>

      <p>Difficulty Level Two, Delivery Request — The Guild in Gideon, City of Duels.</p>

      <p>Our destination was obvious.</p>

      <p>And so, we began the quest.</p>

      <p class="centerp section-marking">◆◆◆</p>

      <p>Kingdom of Altar, ???</p>

      <p>Cheering.</p>

      <p>Cheering as far as you could hear.</p>

      <p>It represented nothing but delight.</p>

      <p>Countless goblins were fiercely expressing their overwhelming joy.</p>

      <p>It was all because they had seen some creatures. Though four-limbed — just like the goblins — they were different from them... for they were human.</p>

      <p>The goblins hungered. These past few days, no humans had passed through their territory.</p>

      <p>Thus, the goblins — with their love for human flesh and the things they hauled — had become hungry beyond words.</p>

      <p>They survived by eating other monsters, but compared to the taste of humans and their food, those were simply unsatisfying.</p>

      <p>Thus, the goblins were overjoyed.</p>

      <p>The human traffic through this area used to be stopped by something at the mountain, and they couldn’t be more pleased that it was revived. For, once again, they had access to the food they loved.</p>

      <p>The strangely-dressed human that had recently gone through their territory was too scary for them, so they could have only waited for him to pass. However, the humans passing before them now weren’t scary at all.</p>

      <p>Thus, the humans themselves and the food they carried were nothing but a feast for them.</p>

      <p>“Ghgheeeee!”</p>

      <p>“Geghyaaaaahhh!”</p>

      <p>Letting out their war cries, the goblins began running towards the carriage before them.</p>

      <p>“Goblins?! Why are there so many...?!” shouted a human.</p>

      <p>“Sir, this is too much for us to handle! Make the horses go as fast as they can!” roared another.</p>

      <p>“A-All right!”</p>

      <p>“We have to run, too!”</p>

      <p>The merchant man increased the carriage’s speed as the tian adventurers responsible for guarding him and his goods ran after it, trying not to fall behind.</p>

      <p>They were fleet of foot, so it was obvious that the goblins wouldn’t catch up.</p>

      <p>Thus, the goblins roared. They roared out their cheer and delight.</p>

      <p>“What are they doing?! Are they trying to threaten us?!” asked a human.</p>

      <p>“Ignore them! Just keep on running away!” howled another.</p>

      <p>The goblins weren’t threatening them. They might’ve done that before an enemy, but when faced with food, such acts were meaningless. They were simply calling.</p>

      <p>“Ha ha, looks like we escaped... Huh?”</p>

      <p>A moment later, the merchant — along with his carriage — was crushed by <em>something</em> that fell from the sky.</p>

      <p>As the <em>something</em> trampled on the corpse — now reduced to fruit-like mush — it faced the nearby adventurers.</p>

      <p>“Wh-Wha?!”</p>

      <p>“I-Is this actually... the UBM... Gar—”</p>

      <p>They weren’t even given the time to say anything coherent.</p>

      <p>The <em>something</em> before them and the goblins that had caught up quickly overwhelmed them all.</p>

      <p>“GOOOAAAAAHHHHH!”</p>

      <p>And so, after a satiating feast, the <em>something</em> and the horde of goblins returned to their den.</p>

      <p>All of them were full of excitement for the next time they’d become hungry and have another feast pass their territory.</p>

      <p class="centerp section-marking">◆</p>

      <p>The area’s name was “Nex Plains.”</p>

      <p>It was south of Sauda Mountain Pass and north of Gideon, city of duels.</p>

      <p>...And anyone making their way to Gideon would simply <em>have</em> to pass through it.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter7">
    <div class="main">
      <h1>Chapter Seven: The Ordeal of Rookies</h1>

      <p><em>In Royal Capital Altea, in the front of the Adventurer’s guild — Paladin Ray Starling.</em></p>

      <p>After we had taken the quest at the adventurer’s guild and began getting ready to go to Gideon, Rook spoke up and raised his right hand.</p>

      <p>“You can leave the means of travel to me,” he said. There was a pale, gem-like object on his hand.</p>

      <p>“What’s that?” I asked.</p>

      <p>“It’s a ‘Jewel’ — an item where you keep your monsters,” he answered. “It’s the reward I got for my modeling.”</p>

      <p>Rook began explaining. In the process, he also answered a certain question I’d had while looking at his skills.</p>

      <p>Being a Pimp, he had a skill that strengthened his underlings, and seeing that had made me curious about what happened to them outside of battle.</p>

      <p>Since we were players, we would return to reality every now and then. Thus, I wondered what his little minions would do while we were away. I was saddened by the very idea of a player who stopped playing after having left some monsters or slaves in a cage or something.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert6">
    <img alt="insert6" class="insert" src="../Images/Insert6.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter71">
    <div class="main">
      <p>Such problems were solved by Jewels, such as the one Rook had.</p>

      <p>Jewels were basically the animal version of the item boxes we always used. It allowed the storage of any underlings you owned, and it was possible to set it so that time inside wouldn’t flow at all.</p>

      <p>The storage would work even while the player was logged out, and if they didn’t log in for two months of real time or half a year of game time, the Jewels would automatically release the creatures inside.</p>

      <p><em>I see,</em> I thought. <em>Having underlings in such a realistic world would be really difficult without these things.</em></p>

      <p>Well, there was a need to feed and have them rest outside the Jewel, but that was all part and parcel of being an underling owner.</p>

      <p>It was also possible to make the time inside the Jewel go on as normal. Logging out while the underlings were released was an option, too. However, while being outside, the underlings could always get into some sort of trouble, so whether it would be done or not depended entirely on the owner.</p>

      <p>“So, you already have a monster in there, huh?” I asked as I pointed at the Jewel.</p>

      <p>“Yes,” Rook answered. “Mr. Grantzian told me choose one reward out of a few, but since I had a skill that strengthened monsters, I chose this one.”</p>

      <p>Pimp was a job that had a low combat ability, but compensated for it with the use of monsters, so that had been the right choice to make.</p>

      <p>“Let me show you,” said Rook. “‘Call’ — Marilyn.”</p>

      <p>Following his words and the unique roar, the Jewel began to shine.</p>

      <p>“MMHOOOOOO!”</p>

      <p>And, sure enough, a monster named “Marilyn” appeared before us, but...</p>

      <p>“...Marilyn?” I raised an eyebrow.</p>

      <p>...it was arguable whether the name “Marilyn” was appropriate.</p>

      <p>A succinct description of Marilyn would go as such: a triceratops pulling a carriage. Its gigantic body was covered in a blue, solid shell, while its back and shoulders could easily be compared to heavy armor. The very real horns on its head were intimidating enough to make me feel as though they could topple the castle walls.</p>

      <p>It was far too obvious that the monster was stronger than us. The thing could even put up a fight against a Demi-Dragon Worm.</p>

      <p><em>Hell, I wouldn’t even be surprised if it came out on top,</em> I thought.</p>

      <p>“This is Marilyn — a Trihorn Demi-Dragon,” Rook introduced the monster. “The dragon carriage came as a bonus.”</p>

      <p><em>“Demi-Dragon?” Seriously?</em> I thought. <em>It actually is on the same tier as the worms, then. That name has some serious power behind it.</em></p>

      <p>I was momentarily taken aback by the fact that you could get such a thing as a reward, but since the difficulty of the quest had been higher than the one where I’d saved Milianne, it wasn’t <em>that</em> strange.</p>

      <p>“Why ‘Marilyn,’ though?” I asked.</p>

      <p>“It’s a girl, so I named her after a famous actress,” Rook answered.</p>

      <p><em>I see. It’s a girl, huh? I guess it’s all fine, then,</em> I thought. <em>...Marilyn Monroe might or might not be turning in her grave right now.</em></p>

      <p>“Wow, what a sight!” Marie commented. “Though, something this strong might exceed your Minion Capacity.”</p>

      <p>“Minion Capacity?” Rook and I asked simultaneously.</p>

      <p>“Oh, let me explain it, then.” Marie reached into her item box, took out a sketchbook-like item, and began her explanation while drawing something on it.</p>

      <p><em>A sketchbook?</em> I thought. <em>Why does she even have something like that? Is it because she’s a Journalist?</em></p>

      <p>“First of all, in <em>Infinite Dendrogram</em>, the maximum number of people you can fit in a party is six.” Marie finished drawing and showed us the result — little chibi versions of me, Rook and herself. All the detail on them made the drawings seem strangely high-quality.</p>

      <p>“In our case, three of those slots are already taken,” she said. “Now, the other three slots can be taken by tamed monsters or Guardian-type Embryos.” Marie added chibi versions of Babi and Marilyn.</p>

      <p>“You say they ‘can’ be taken... Does that mean it’s possible to make the monsters fight without doing that?” asked Rook.</p>

      <p>“Yes,” she answered. “It’s possible to not count them as party members and instead treat them as an extension of the owner’s power. That’s where Minion Capacity comes in.”</p>

      <p>Underneath Rook’s picture, Marie drew a small tree diagram that led to Babi and Marilyn.</p>

      <p>“With this method, they won’t use party slots, but there is a limit to it,” she said. “Minion Capacity is basically the name for that limit.”</p>

      <p>“I see,” I nodded.</p>

      <p>“Open your status screen and look at the additional entries.”</p>

      <p>I did as she’d said and took a look at the auxiliary screen. Sure enough, I saw an entry that said “Minion Capacity 0/50.”</p>

      <p>“Is this it?” I asked.</p>

      <p>“Yes, monsters that fit the Capacity can be used as part of your own power,” she explained. “The amount of the Capacity taken depends entirely on the individual monster. For example, one level 1 Little Goblin would take 1 point.” That meant that I could control a total of fifty level 1 Little Goblins. A nice number, but questionable overall. I could just picture them all getting blown away by a single area attack.</p>

      <p>“My Capacity is 500, so I can own five hundred of them,” said Rook.</p>

      <p><em>That’s ten times more than mine,</em> I thought.</p>

      <p>“Pimp is a job with a high Capacity,” Marie said. “Though, Ray, since your job is in the knight grouping, you will have to use mounts, so I think that your Capacity is above the high-rank class average.”</p>

      <p><em>Mounts, huh?</em> I thought. <em>I should get one of those someday.</em></p>

      <p>“Anyway, I see how it works now...” I said.</p>

      <p>If it was impossible to call your monsters without using party slots, jobs such as Tamer and Pimp — both of which had low base fighting ability — would have a hard time getting into parties. With the use of Capacity instead, they could count their monsters as part of their own power, making them no worse — if not better — than any other job.</p>

      <p>“What happens if you exceed the Capacity?” I asked.</p>

      <p>“You get a limit on your abilities and stop gaining XP,” she answered.</p>

      <p><em>That’s quite a huge demerit,</em> I thought.</p>

      <p>“Miss Marilyn here is too much for your Capacity, Rook,” said Marie. “Demi-Dragons are strong and have a cost that represents that.”</p>

      <p><em>If I had to choose between fighting 500 Little Goblins or one Demi-Dragon Worm, I’d pick the former without a moment’s hesitation,</em> I thought. <em>That’s just how much stronger the latter option is.</em></p>

      <p>“With that in mind, let’s place Marilyn in the party,” Marie suggested. “There aren’t many of us, so we have some free slots, after all.”</p>

      <p>“Hey, I have a question! What’s my cost?” asked Babi.</p>

      <p>“An Embryo’s cost is always 0,” she answered. “If it weren’t, then Masters who evolved Guardian-type Embryos wouldn’t be able to draw out their full potential.”</p>

      <p>That was true.</p>

      <p>“Well, that sure took a while to explain. Now, let’s return to the matter at hand,” Marie continued. “By riding Marilyn’s dragon carriage, we could reach Gideon in about one whole day.”</p>

      <p>“Then I guess we’ll have to give up on doing it now and depart tomorrow morning, instead,” I said. “Do you two have any plans?”</p>

      <p>I was referring to real-life stuff. Our journey to Gideon would take us a total of three days, which meant that we’d have to dedicate an entire real-life day to this.</p>

      <p>“Not really,” said Rook. “I’ll be free the whole time.”</p>

      <p>“Same here,” said Marie. “I’m jobless right now.”</p>

      <p><em>...I’m having trouble figuring out if I should laugh at that or not,</em> I thought.</p>

      <p class="centerp section-marking">◇</p>

      <p>The next day, we were riding Marilyn’s dragon carriage on the road to Gideon.</p>

      <p>The road was wide enough to let two Marilyns ride side-by-side without any problems. Her size had made me wonder if she would block the road, but my worries seemed to have been completely unfounded.</p>

      <p>Marilyn’s walking speed was greater than I’d expected, too. She could pull the dragon carriage uphill without even the slightest drop in speed, which reminded me of four-wheel drive off-road cars.</p>

      <p><em>Looks like our journey to Gideon will be smooth,</em> I thought.</p>

      <p>Although we had to take care of the occasional monster attack, so it wasn’t like we could get there without stopping. However, since we were going through a newbies’ hunting ground, the monsters never attacked us in large groups. The most we’d had to fend off at once was three.</p>

      <p>In fact, Rook, Babi, and I had just defeated such a group. Marie, meanwhile, stayed sitting in the dragon carriage and cheering for us while sipping on some tea. There were things to be said about this setup. Still, she wasn’t doing nothing without reason. Honestly, it was my own fault for not asking her about it beforehand.</p>

      <p>“Journalist” wasn’t a battle job in any sense of the term. However, Journalists had a characteristic skill called “The Pen is Mightier than the Sword,” which increased the XP gain of the entire party in exchange for rendering the Journalist unable to fight. The skill couldn’t be turned off, either. With that in mind, it was safe to conclude that Journalists were like a decoration that were of absolutely no use in battle.</p>

      <p>Sure, I appreciated the bonus XP. And yes, we were going through a newbies’ hunting ground, so the enemies weren’t something we couldn’t handle ourselves. She was also more knowledgeable than us. The advice she gave was useful, and her monster info was accurate.</p>

      <p><em>Still, I can’t help but feel that... well, whatever,</em> I thought.</p>

      <p>“The skill is called ‘The Pen is Mightier than the Sword,’ so I was expecting it to be an attack with a pen,” said Nemesis.</p>

      <p>“That saying’s meaning isn’t physical,” I said.</p>

      <p><em>Though I wouldn’t be surprised if this world had a pen that was stronger than a sword,</em> I thought.</p>

      <p>All the same, the journey was going smoothly. Due to the XP bonus, both Rook and I had already gotten some levels. I was now level 16, while Rook was level 27.</p>

      <p>The battles were coming and going in a satisfying manner, and it didn’t look like we’d have any trouble with the monsters of this level range.</p>

      <p>Speaking of “no trouble,” the mountain pass before us had once been blocked by a bear-like monster. Just from appearance alone, it had seemed like the boss monster of this area. However, before we could even begin our fight with it, Marilyn — seemingly angry at it for blocking her way — had defeated the bear as if it wasn’t a big deal at all.</p>

      <p>Rook had retrieved the drops, which had come in a “box,” so yes, it had been an actual boss monster. A boss’s loot was always a welcome thing. However, as a rule of thumb, boss monsters were always the most powerful creatures an area could offer.</p>

      <p><em>And it sure didn’t seem like that when Marilyn handled him,</em> I thought.</p>

      <p>Another thing to note was that most boss monsters were multiple-of-a-kind and took part in the ecosystem, but according to Marie, there were some monsters that were unlike any other. They were called UBMs — Unique Boss Monsters.</p>

      <p>All of them — without exception — were equipped with special abilities, and some were even powerful enough to eliminate high-rank parties without much difficulty. However, since they were one-of-a-kind, even encountering them was rare.</p>

      <p>Once out of the wavy Sauda Mountain Pass, we entered an area of nothing but wide plains. The area was named “Nex Fields,” and the road leading through it was supposed to take us to Gideon.</p>

      <p>As we all were thinking about just how smooth of a journey this was, something entered our vision.</p>

      <p>On the road ahead, there were several carriages which looked like they belonged to peddlers. They were all under attack by a throng of goblins that easily numbered more than a hundred.</p>

      <p class="centerp section-marking">◇</p>

      <p>The goblins in this horde had a significantly better physique than the Little Goblins Rook and I had fought back on Easter Plains.</p>

      <p>While the standard Little Goblin was about half my size, the ones here reached approximately 80%. Not only that, but they also wielded swords and bows, and were clad in proper armor. Some of them were even riding some small monsters resembling carnivorous dinosaurs. The names above them — Goblin Warrior, Goblin Archer, and Goblin Rider — made it all the more obvious that they were superior to the ones we were familiar with.</p>

      <p>And a proper throng of them was attacking the peddler carriages.</p>

      <p>I could see some tian-looking people try to fend them off, but alas, the numbers were against them.</p>

      <p>“...That sure is a lot of goblins. And it seems like every single one of them is stronger than the monsters in the Mountain Pass. What shall we do?” Marie evaluated the enemy, asking whether we should join the battle or not.</p>

      <p>I began to ponder. We were rookies, and calling us strong would be nothing but a mistake. Marie was a veteran, yes, but she couldn’t participate in any battles, not to mention the fact that the opposing force greatly would outnumber us even if she could.</p>

      <p>We clearly had a low chance of victory. The safest option would be to turn around, retreat to the Mountain Pass, wait for the goblin horde to go away, and return on the path to Gideon then.</p>

      <p>However, that would mean leaving the people there for dead. And that... would leave a bad taste in my mouth.</p>

      <p>“Rook, Marie,” I spoke up. “We might get the death penalty and fail the quest because of it, but...”</p>

      <p><em>...if you guys don’t mind that, then...</em></p>

      <p>“Let’s do it,” Rook said before I could finish. Then he freed Marilyn from the dragon carriage...</p>

      <p>“Run them over.”</p>

      <p>...and set her on the goblins.</p>

      <p>“MMHOOOOOOO!” she roared and burst into a dash.</p>

      <p>Keeping her three horns at the forefront, Marilyn charged into the goblin throng with all she had. Once they noticed the presence of something other than the carriages — their prey — it was already too late. Nearly fourteen goblins got pulverized by Marilyn’s horns.</p>

      <p>“Let’s go, Ray,” said Rook. “Marilyn might be strong, but that’s still too much for her alone.”</p>

      <p>“...Yeah!” I agreed.</p>

      <p>“I see.” Nemesis seemed to realize something. “Just like my unexpectedly fiery Master, this Rook fellow seems to have a dangerous side to him, too.”</p>

      <p>“Mrrgh!” grumbled Babi. “No fair, Marilyn! I was with him first, so I’m supposed to do the most!”</p>

      <p>Rook, Babi, and I all jumped through the space opened by Marilyn and began fighting the goblins around us.</p>

      <p>“Hghaah!” I tightened my grip on Nemesis — who was already in her greatsword form — and swung her at the Goblin Warrior before me with all I had. The blade sank into the top of the Warrior’s shoulder, but the armor he wore made it stop after going only about ten centimeters.</p>

      <p>“Ghghee!” The wound wasn’t fatal, so the Warrior still tried to swing his weapon at me.</p>

      <p>“Then how about... this?!” I raised my greatsword upwards — lifting the Warrior along with it — and quickly swung it down to the ground. The momentum added to my attack made the Warrior — and his armor — split in half.</p>

      <p>Thanks to the levels I’d gained recently, such feats weren’t particularly hard for me.</p>

      <p><em>But it takes a while to do it,</em> I thought. <em>So next time, I’ll be aiming straight for the neck.</em></p>

      <p>“Heh heh heh, what an aggressive battle,” chortled Nemesis. “It’s to my liking.”</p>

      <p><em>Well, someone seems to be having fun,</em> I thought. <em>I find it a bit strange that she can’t handle zombies, but she’s just fine with all this gore here.</em></p>

      <p>“Behind you!” she warned me.</p>

      <p>“...Whoa!” I turned around, swung my greatsword sideways and decapitated the Warrior that had tried to attack me from behind.</p>

      <p>Sadly for him, having Nemesis at my side basically let me see from every direction. Being surrounded wasn’t a big problem for me.</p>

      <p>“What are you people?!” one of the escorts fighting to protect the carriages exclaimed.</p>

      <p>I chose to make our explanation succinct.</p>

      <p>“We’re Masters heading to Gideon,” I said. “We’re here to help. That Demi-Dragon is with us, so don’t attack it.”</p>

      <p>“I see! We will make sure not to harm it, then! Thank you for your help!” Convinced, he began telling his comrades about us.</p>

      <p>With that, it was now established who was on whose side. Of course, since the only enemies were goblins and their mounts, simply telling them about Marilyn was more than enough. However, we were still seriously outnumbered.</p>

      <p>Surrounded by goblins, Marilyn couldn’t get enough speed to kill them as quickly as she had at the start. The carriage escorts were doing their best, but it still wasn’t enough to make up for the difference in numbers.</p>

      <p>Suddenly, I realized something. Rook and Babi weren’t with us.</p>

      <p>I looked around and found them both standing in one place.</p>

      <p>That was all they were doing. Despite all the chaos around them, they were just <em>standing</em> there, back-to-back.</p>

      <p>However, they soon began to move.</p>

      <p>“Male...”</p>

      <p>“Lilim...”</p>

      <p>Rook extended his right hand... while Babi — her left...</p>

      <p>“...Temptation!”</p>

      <p>...and — while simultaneously saying that word — they motioned their hands as if beckoning something.</p>

      <p>The next moment, a particularly fierce female Goblin Warrior decapitated the goblin next to her.</p>

      <p>Another one — a Goblin Archer who seemed to have a commanding role — suddenly crushed the head of the mount he was riding on.</p>

      <p>“Ghgheee?! Sis! W-What did you dooo?!”</p>

      <p>“Captaain?!”</p>

      <p>Screams, confusion, and — most important of all — chaos began to spread throughout the goblin army. The number of victims was increasing by the second. One after the other, goblins lost their minds and began attacking their own.</p>

      <p>The Charmed goblins were attacking those who weren’t, while those who weren’t Charmed were hesitant about fighting back and could only get Charmed themselves or simply die.</p>

      <p>The damage done to the horde increased exponentially, and when all the goblins were either dead or Charmed...</p>

      <p>“Lilim Draaain!”</p>

      <p>...Babi started draining the life out of every single Charmed goblin.</p>

      <p>The process made some of them come back to their senses, but just like before, they either got killed by the Charmed goblins or simply got Charmed again.</p>

      <p>“Thank you for the meeaal!”</p>

      <p>Considering just how hellish the situation was for the victims, the nonchalance in her voice was quite inappropriate. Nonetheless, those words were what marked the end of the battle.</p>

      <p>The throng of goblins had been completely annihilated. Excluding those that had been defeated by me or the carriage escorts, all the goblin corpses had been either killed by their own or sucked dry to the point of making them look like mummies.</p>

      <p>“In contrast to our counterattacks — which are effective against single bosses like those damn centipedes — their abilities are frighteningly good at exterminating large groups of vermin,” commented Nemesis.</p>

      <p>She was right. Our strengths and theirs were strikingly different in nature. By using Charm, Rook and Babi had created scattered allies within the enemy ranks. That had rendered the enemies unable to focus their attacks, and had destroyed any semblance of cooperation they had.</p>

      <p>As they had been trying to recover from that, the effects of Charm had spread and gotten even more of them on Rook’s side. Cue repeating downwards spiral. It was a nightmare scenario in any group-based battle.</p>

      <p>“I’m glad he is not our enemy,” said Nemesis.</p>

      <p>I couldn’t agree more.</p>

      <p>The tian escorts and even peddlers in the carriages were shocked stiff at what Rook and Babi had just done. That was only natural.</p>

      <p>We were fully aware that they weren’t bad guys, but there was no arguing that what they had just done had been downright villainous.</p>

      <p>Charm was scary — end of discussion. It reminded me of why I was afraid of Rocbouquet.</p>

      <p>“This was the first time I’ve used it in battle, and I’m very glad it was useful,” said Rook.</p>

      <p>“It wasn’t very tasty, but I’m sooo stuffed right now!” declared Babi.</p>

      <p><em>The fact that they are a Master with a low-rank job and his first form Embryo makes me dread imagining how they’ll be in the future,</em> I thought.</p>

      <p>“Ah! Rook, Rook! I have a new skill! I reached my second form!” Babi squealed.</p>

      <p>“Really?!” he exclaimed.</p>

      <p>And that was exactly when I heard them say that.</p>

      <p>Although her appearance didn’t change, this battle — or rather, “extermination”— had caused Babi to evolve. That wasn’t unexpected, considering just how many goblins there had been.</p>

      <p>I looked at Rook’s basic stats and saw that he, too, was quite a bit over level 30 now. I, however, was level 20.</p>

      <p>“Congratulations,” I said to Rook.</p>

      <p>“Thank you!” he replied. “So, Babi, what kind of skill did you get?”</p>

      <p>“Umm... It’s called ‘Drain Learning!’”</p>

      <p>Rook took a look at his Embryo window and examined the new skill. He let me have a gander, too, so I read its description.</p>

      <p>It said “Gives a low (1%) chance to learn a random skill from the monster being drained.”</p>

      <p>“...Learning, eh?” I said to myself. It was much like the blue magic from that famous RPG series. Basically, it allowed the user to learn and utilize the skills of enemy monsters.</p>

      <p>In Babi’s case, the chance of that happening was a mere 1%. However, if my calculations were correct, that meant that she had a greater than 60% chance to get a new skill after draining a hundred times. Since there was no limit to the amount of skills one could have, it had the potential to be an extremely useful ability.</p>

      <p><em>...I have a feeling she’s gonna be really formidable in the future,</em> I thought.</p>

      <p>Suddenly, Nemesis sounded a groan that seemed really troubled. “Mmrgh...”</p>

      <p>“What’s wrong, Nemesis?” I asked.</p>

      <p>“I feel like you and I didn’t do much compared to them, and I find that a bit troubling,” she answered.</p>

      <p>“...Come on, now. No one cares about that,” I said.</p>

      <p>Well, it was true that we hadn’t gotten to be particularly valuable players since we’d defeated that one Demi-Dragon Worm. We’d even died once. Then again, if all we ever faced were beasts such as the Superior Killer or Figaro, we would be dying all the time.</p>

      <p><em>That’s why it’s all too bad when we don’t get to show off,</em> I thought.</p>

      <p>And so, though it was likely unrelated to Nemesis’ worries and my sentiments...</p>

      <p>“GOOOAAAAAHHHHH!”</p>

      <p>...something screamed and landed on the goblin corpse-littered battlefield.</p>

      <p>No — the word “landed” wasn’t appropriate, for it made the action seem soft. Something large — a demon — <em>crashed down</em> on the battlefield.</p>

      <p>The demon’s feet cracked open the ground — making it tremble — and yet the monster itself was unharmed.</p>

      <p>In awe, I looked up at its daunting appearance.</p>

      <p>It was monstrous in every sense of the word. I lacked the words to describe it. Most of it was brown and black in color. The horn on its head — combined with a stature that surpassed five meters in height — made it appear exactly the way I expected a demon to look. However, it had a feature that was wholly unnatural and nothing short of discomforting.</p>

      <p>It had large mouths on its head and both of its shoulders. All of them were leaking a dark purple smoke, the very sight of which made a cold chill go down my spine.</p>

      <p>Last but not least, the words “Great Miasmic Demon, Gardranda” were hanging above it.</p>

      <p>The intimidating presence of this “Gardranda” was enough to affect our reaction speed. Before we could even realize, it raised its right leg, crushed one of the escorts... and followed it up with a punch from its huge fist — directed straight at me.</p>

      <p>“Counter... Absorption!”</p>

      <p>Nemesis spawned the barrier of light just in time to stop Gardranda’s fist from hitting me directly, which greatly lowered its damage.</p>

      <p>Since she’d had experience in suddenly activating that skill, Nemesis was quick to react. That was about the only good thing about the current situation.</p>

      <p>“This one has more power than those centipedes...!” she exclaimed.</p>

      <p>“So it’s actually above the Demi-Dragon Worms, huh?” I asked.</p>

      <p>“Great Miasmic Demon, Gardranda.” This monster had both a title and a name.</p>

      <p><em>I’ve never seen a monster with this kind of presentation before...</em> I thought. <em>Wait, wasn’t his name on the bounty list Nemesis was reading yesterday?</em></p>

      <p>“Ray! Rook! Be careful!” Marie — who was standing outside the battle — suddenly shouted to us. “That’s a Unique Boss Monster!”</p>

      <p>Her warning made me remember a certain bit of information I’d seen on the wiki.</p>

      <p>UBM.</p>

      <p>Just as it said in the name, it was a term that referred to boss monsters who were unique — unlike any other creatures in this world.</p>

      <p>Standard boss monsters, such as the Demi-Dragon Worms, often came in groups. But UBMs were different. There was only one of each UBM in the entire world. No current UBMs have ever existed before, and no past UBMs would ever come again. All of them — without exception — were really powerful and even came equipped with their own unique abilities. In a way, they were like the “Masters” of the monster faction.</p>

      <p>Thus, they were several tiers stronger than any bosses of the same level.</p>

      <p>“Why would such a monster appear here...?” I couldn’t help but ask. Considering the power of the goblins surrounding us, Gardranda was simply far too powerful to be here.</p>

      <p><em>Wait... the goblins?</em> I thought.</p>

      <p>“I see how it is...” said Nemesis. “This demon is like the ringleader of the goblins. It came out because its subordinates were annihilated.”</p>

      <p>In other words, it had come here because we’d enraged it. However, there was something else on my mind.</p>

      <p>I shifted my gaze and fell silent. My vision was fixed on a single corpse. It belonged to the carriage escort who’d been attacked at the same time I had. It was the same one I’d spoken to not too long ago.</p>

      <p>His corpse — the body flattened by the demon — seemed somewhat inauthentic.</p>

      <p>Obviously, I only felt that way because my experience with destroyed corpses didn’t go beyond fiction. However, the extent of this world’s realism was great enough to replicate the weight...</p>

      <p>...the <em>gravity</em> of a lost life.</p>

      <p>I had fought undead before and had caught glimpses of players vanishing into the dusk-veiled forestry as they were massacred by the Superior Killer. In fact, some of the escorts here had died at the hands of goblins before we’d joined the battle.</p>

      <p>However, the one that had gotten pulverized by Gardranda was the first person that had died right before my eyes.</p>

      <p>I was at a loss for words. I didn’t know his name, nor was I aware of what kind of person he had been. I even had trouble remembering his face.</p>

      <p>But... I’d been talking to him just a short while ago.</p>

      <p>He was beyond helping now. This world wouldn’t allow him to come back. He was simply <em>dead</em>.</p>

      <p>“This’ll leave a bad taste in my mouth...” I said with a palpable anger in my tone, and looked up at the demon’s sizable frame.</p>

      <p>I saw veins popping out and pulsating on its head. No — it wasn’t just the head. That was happening on the skin around its shoulder-mouths, as well.</p>

      <p>“It’s releasing some sort of breath!” shouted Marie. “Back away from it!” I couldn’t tell if her warning come too late or if <em>it</em> happened too fast.</p>

      <p>With great intensity, Gardranda’s three mouths simultaneously sprayed out a dark purple smoke.</p>

      <p>“...Huh?!” I exclaimed.</p>

      <p>It was somewhat reminiscent of insecticide. The sprays that instantly killed the irritating, buzzing pests we were all so familiar with. I had used such sprays myself, of course. However, I’d never once expected to have someone use something like that on <em>me</em>.</p>

      <p>The poisonous breath was launched in three directions — at me, at Rook and Babi, and at Marilyn and the escorts — and it quickly covered us all.</p>

      <p>The dark purple miasma didn’t do any damage at first. However, it soon made me go dizzy and forced me to drop to my knees.</p>

      <p>I looked at the status window, where I saw that I was under the effects of three debuffs — Poison, Intoxication, and Weakness.</p>

      <p>Poison made my health gradually decrease, Intoxication made it hard for me to even stand up, while Weakness cut my stats to less than half their original value, making it so that even my gear felt heavy to me.</p>

      <p>I shifted my gaze and saw that the escorts and peddlers were on the ground, as well.</p>

      <p>Rook, however, was above us. Babi had raised him up before the miasma could reach him.</p>

      <p>“Mh-mhoooooo...!”</p>

      <p>I heard the familiar roar, but it was far weaker than before. Its source was Marilyn. She, too, was under the effects of the miasma’s debuffs. And yet, she mustered all she had, pushed her feet on the ground, and charged towards Gardranda.</p>

      <p>It was the very same charge that could trample fourteen goblins at once and even instantly pulverize lower level bosses, and yet...</p>

      <p>“GOAAAAAHHHHHH!”</p>

      <p>...Gardranda stopped it.</p>

      <p>The demon extended its log-like arms and grabbed on to the outer two of Marilyn’s three horns. Though it was pushed a few meters back, Gardranda was able to stop Marilyn’s — a Demi-Dragon’s — charge.</p>

      <p>Then, the demon added a bit more power...</p>

      <p>“GeeeeYYAAAAHHHH!”</p>

      <p>...and threw Marilyn into the air.</p>

      <p>Drawing an arc through the air, the several-tons beast flew about ten meters before hitting the ground with an unpleasantly strong sound.</p>

      <p>“Marilyn!” Rook seemed slightly panicked.</p>

      <p>“Mh, mhoo, mo...” Marilyn released a weak sound.</p>

      <p>With the damage from the fall and all the debuffs weighing down on her, it was obvious that she was at her limit.</p>

      <p>“Recall!” Rook’s words made her return to the Jewel. Time stopped for the animals within it, so Marilyn was safe for now.</p>

      <p>“Mrrgh! It’s not workiiing!” Babi had been trying to use Temptation on Gardranda for a while now, but since the demon’s level, MP, and SP were so high, Charm simply had no effect.</p>

      <p>“Suitability, huh?” I whispered to myself. Rook and Babi weren’t cut out for boss battles.</p>

      <p>If there was anyone here who <em>was</em>, however...</p>

      <p>“Master!” In response to Nemesis’s shout, I shifted my attention back to Gardranda.</p>

      <p>As I knelt there — barely mobile due to all the debuffs — the demon swung its right hand at me as if crushing a fly.</p>

      <p>“Don’t underestimate me!” I forced my heavy body to move, swung Nemesis into Gardranda’s palm...</p>

      <p>“Vengeance is Mine!”</p>

      <p>...and activated the skill the very moment the sword landed.</p>

      <p>The damage from the nullified Gardranda’s punch mixed with the HP I’d lost to Poison, got doubled, and made the demon’s right hand burst.</p>

      <p>The attack tore the palm apart and made three of the fingers fly straight off.</p>

      <p>“GUUUOOOAAHHHHH?!” Gardranda screamed in agony.</p>

      <p>But the damage I’d done was low. Since the damage I’d accumulated from Gardranda at that point hadn’t been particularly great, Vengeance is Mine hadn’t done that much damage, either. Also, the attack on the palm had used up all the damage I’d accumulated by then. To use another Vengeance is Mine, I’d have to accumulate damage all over again.</p>

      <p>“Ghh!” Following the attack, I swung Nemesis once again and launched a standard attack. However, it was a few tiers weaker than it usually was, and had none of its usual brilliance.</p>

      <p>The reason for that was obvious. The debuffs were still affecting my body.</p>

      <p>The Great Miasmic Demon, Gardranda had both the physical power to let it throw something as heavy as Marilyn and the ability to weaken its opponents in three different ways.</p>

      <p>The gradual HP reduction from Poison wasn’t much of a problem as long as I made sure to observe the HP bar. However, Intoxication paralyzed the semicircular canals and thus negatively affected my ability to control my body, while Weakness cut my stats by more than 50% and turned the most basic fighting into a struggle.</p>

      <p>“This is bad...” I muttered. <em>Damn it, my chances were low even without these debuffs.</em></p>

      <p>Suddenly, Marie called to me from behind. “Ray!”</p>

      <p>I turned around, expecting her to warn me about something, and instead got a glass bottle to hit me right on the face and shatter.</p>

      <p>“Khah...!” I exclaimed.</p>

      <p>“Master?!” Nemesis was confused, as well. As the impact made me throw my head backwards, I got showered by the bottle’s shards and contents.</p>

      <p>My pain settings were set to “off,” so it didn’t hurt at all, but I couldn’t help but wonder what had brought this about.</p>

      <p>Marie had the stance of a pitcher who had just thrown a ball, so it was pretty obvious that she had been the one who’d thrown it.</p>

      <p>As I was about to yell at her for messing about during a battle, I noticed something.</p>

      <p>“...I’m healed, and the debuffs are gone,” I muttered. My HP was at 100%, and the three status effects were no longer on my status window.</p>

      <p><em>What is this?</em> I asked in my head.</p>

      <p>“It’s the Elixir I’d prepared just in case! With this, you should be immune to disease-based debuffs for the next 180 seconds! However, I don’t have a spare, so use it well!” Marie explained.</p>

      <p><em>Elixir? So that’s what was in the bottle. Apparently, it’s quite a powerful drug. However, with this...</em></p>

      <p>“Looks like we’re at our best again,” I said.</p>

      <p>“Indeed,” agreed Nemesis. “With no debuffs hindering us, this Gardranda is the equivalent of one of those damn centipedes — except with hair.”</p>

      <p>With my current HP and defense, I could bear the demon’s attacks, and if I could bear them — I had a chance of winning.</p>

      <p>“For the poison, for Marilyn, and for those who died... you’ll get what’s coming to you, you demon bastard!” I brandished Nemesis and charged towards Gardranda.</p>

      <p>The Elixir’s effects would last for another 154 seconds. That was the amount of time I had before I returned to being vulnerable to Gardranda’s miasma and got the three debuffs again. Thus, I had to settle it before that time expired.</p>

      <p>“Rrraaaghhh!” I held the greatsword aloft and swung it at Gardranda’s knees. It cut through his skin and spilt some blood, but the wound wasn’t deep in the slightest. Though it bit through the skin and sunk into the muscle, it wasn’t even close to reaching the bone.</p>

      <p>Even when I was at my best, my standard attacks weren’t good enough to do any proper damage to him.</p>

      <p>My STR wasn’t particularly great, and though Nemesis might’ve been a great weapon when I’d been level 1, she was among the weaker ones now that I was level 20. If I tried to beat it with just my standard attacks, not even 1,500 seconds would be enough, let alone 150.</p>

      <p>However...</p>

      <p>“GUUOOOAAAHHHHH!” Gardranda retaliated with a kick, and I chose to let it hit me.</p>

      <p>“Ghh...!” I got blasted away about seven meters, but was able to make a smooth landing.</p>

      <p>Though it sent me flying, the attack didn’t hurt me all that much.</p>

      <p>The damage it did was about 600. That was approximately a quarter of my total HP.</p>

      <p>I was level 20. With the bonus HP I’d gotten for leveling up while being a Paladin, the bonus from my Embryo, and the skill “HP Increase,” my total HP had reached 2500.</p>

      <p>One of my skills — Paladin’s Aegis — reduced all incoming damage, and my equipment was far better than it had been when I’d fought the Demi-Dragon Worm. Thus, a creature that hit a little bit harder than them could never kill me in one hit. And if I couldn’t die in one hit, I had the means to earn victory.</p>

      <p>“First Heal!” I ran while casting my healing spell on myself and complemented it with a use of one of my Heal Potions. With that, my HP was almost back to full.</p>

      <p>“Rrraaghh!”</p>

      <p>Then I simply repeated what I’d done before. <em>Attack. Get hit. Heal.</em></p>

      <p>I merely had to repeat this for those 150 seconds. That was my only chance at winning.</p>

      <p>One repetition took about twenty seconds and got me 600 damage, which became 660 when I considered the damage nullified by Paladin’s Aegis. I could do it a total of seven times and gather 4620 damage. Vengeance is Mine would double that amount and damage for 9240.</p>

      <p><em>Can you survive getting that hit on your head, you damn demon?</em> I thought.</p>

      <p>“That is our only optio— Master!”</p>

      <p>As I calculated the remaining time and the damage I could gather, Nemesis called out to me. Being familiar with her tones, I instantly knew that it was a warning.</p>

      <p>“Look above!” she shouted.</p>

      <p>I quickly did as she told me. In the sky, hazy with Gardranda’s miasma...</p>

      <p>“KIIIAAAAAAA!”</p>

      <p>...I saw a large, crimson bird of prey as it dove towards me at high speed and readied its talons.</p>

      <p>“Whoa!” I hastily jumped to the side, making the crimson gust go by me.</p>

      <p>Seemingly annoyed due to failing to grab me, the bird of prey flapped its wings once and suddenly rose back up into the sky.</p>

      <p>Before it completely got away, I caught a glimpse of the name displayed above it: “Crimson Roc Bird — Mount Owner: Great Miasmic Demon, Gardranda.”</p>

      <p>“A... a mount...?!” I stuttered.</p>

      <p>The description made me realize something. When Gardranda had come here, he’d simply fallen from the sky. However, the demon had no means of flying or jumping particularly high, and these flat plains didn’t have any places that would give it the necessary height to make such an entrance. Thus, there was only one reasonable explanation: Gardranda had been brought here by something that could fly. And that something had been hanging above us ever since we’d started this battle.</p>

      <p>“...This is bad,” I muttered. I was no longer able to focus on Gardranda.</p>

      <p>The bird’s speed and physique made it obvious that it was quite a powerful monster. If I had to guess, I’d assume that it was just as strong — if not stronger — than the Demi-Dragon Worms. It could even grab me with its talons and drop me from a great height, rendering me completely unable to fight back.</p>

      <p>This bird was a dangerous enemy, indeed.</p>

      <p>However, if I kept focusing on trying to avoid it, the Elixir’s effects would wear off, and I’d no longer have any means of achieving victory.</p>

      <p>“What do I do...?” I asked myself.</p>

      <p>“Ray!” Before I could figure out how to handle the new enemy...</p>

      <p>“We’ll take care of the Roc Bird!” Rook shouted.</p>

      <p>“I can fly, so leave it to me!” Babi called out to me.</p>

      <p>“You just focus on Gardranda, Ray!” added Rook.</p>

      <p>“But...!”</p>

      <p>Rook and Babi couldn’t do anything against a monster <em>that</em> powerful. It was probably immune to their Charm skills. Before I could tell that to them, Rook spoke up.</p>

      <p>“We’ll buy time until you defeat Gardranda!” he shouted.</p>

      <p>“Yeah! So don’t worry about us!” added Babi.</p>

      <p>Holding Rook, Babi rose up and flew towards the Roc Bird. I silently watched them.</p>

      <p>“Master,” Nemesis spoke to me. “You are not thinking of letting their conviction go to waste, are you?”</p>

      <p>“...Like hell,” I replied. I brandished Nemesis and once again ran towards Gardranda.</p>

      <p>The reason why I could continue fighting was because Marie had used her Elixir on me. The reason why I could focus on the fight was because Rook and Babi were holding back the Roc Bird. Nemesis and I weren’t alone in this battle.</p>

      <p>It wasn’t like the time we’d been killed by the Superior Killer. I... no, <em>we</em> were fighting as a party.</p>

      <p>“57 seconds left,” I said. “By lowering our focus on healing, we can do this three, preferably four times.”</p>

      <p>“Let it be done, then!” Nemesis expressed her enthusiasm.</p>

      <p>We ran, attacked Gardranda, got hit back, stood up, and ran again. It was to not waste the opportunity our comrades had given us... and to uplift our chances of victory. I didn’t care how tattered I would become doing this.</p>

      <p>Soon enough, we only had 10 seconds left.</p>

      <p>“Nemesiiiis!” I shouted.</p>

      <p>“Accumulated damage: 4973! We can do this!” she cried. “Master!”</p>

      <p>Everything slotted into place when Gardranda hit us for the final time. I had less than half of my total HP, but I could still move. All that was left was to hit the demon with Vengeance is Mine.</p>

      <p>I dashed towards Gardranda with the sole purpose of landing this lethal hit.</p>

      <p>7 seconds left.</p>

      <p>6 seconds. 5 seconds. 4 seconds.</p>

      <p>“Guuuhhh— GHHAAAAAAAAGHHHH!”</p>

      <p>We had only a few more steps to take until the demon was within our range.</p>

      <p>That was the moment when the mouth on the head opened wide and released a crimson-red flame.</p>

      <p>It wasn’t the miasma this time.</p>

      <p>This breath was meant purely to damage anyone it touched.</p>

      <p>All this time, Gardranda had been hiding this trump card from us, and there was no way I could survive a direct hit from those flames.</p>

      <p>However...</p>

      <p>“Take... it... <em>all</em>!” I shouted. “Counter Absorption!”</p>

      <p>The barrier of light summoned by Nemesis stopped the purgatorial fire and absorbed the damage it did.</p>

      <p>“Vengeance is... Mine!”</p>

      <p>The attack carrying the doubled weight of the damage from Gardranda’s hits <em>and</em> fire completely pulverized the demon’s head and ended its life...</p>

      <p>...or so it seemed.</p>

      <p>The loss of its head made Gardranda turn silent. However, its body continued moving around and attacking me as though it was only natural.</p>

      <p>“Huh?!” I exclaimed.</p>

      <p>Despite losing its head — and brain — Gardranda swung its left arm at me, making it obvious that it simply didn’t care for the damage I’d done. And I — fresh out of my means of defense and tired due to having just used my most intense attack yet — was unable to evade the demon’s arm.</p>

      <p>“...Gh!” It hit me head-on, sent me flying, and had me slipping on the ground for about ten meters after landing.</p>

      <p>However — likely because Gardranda had lost its head — the damage it’d done wasn’t as great as before, and it didn’t kill me.</p>

      <p>“First... Heal...” I stumbled to my feet while casting healing magic on myself.</p>

      <p>However, the time was up. 180 seconds had passed since I’d been put under the effects of Elixir, and the effects were now gone.</p>

      <p>The air around me was still thick with Gardranda’s miasma, so I was instantly put under the effects of all three debuffs.</p>

      <p>“Damn it...” I couldn’t even fight properly in this state, yet the demon was still perfectly fine.</p>

      <p><em>At least he can’t see without his hea—</em> my thought was cut short.</p>

      <p>“Just how much of a monster <em>are</em> you?” I yelled, not expecting an answer. On both of Gardranda’s shoulders — right above the mouths — appeared a gory orb — obviously an eye.</p>

      <p>It didn’t seem like the shoulder-eyes worked yet, but it was clear that they’d soon gain vision and let the demon see and kill me without much trouble.</p>

      <p>“Why is this happening?! We clearly destroyed it!” shouted Nemesis in confusion. Our Vengeance is Mine attack had created an explosion with Gardranda’s head at its center.</p>

      <p>Naturally, the head was gone without a trace, and even its chest had a hole carved out of it in a semicircular shape.</p>

      <p><em>It looks like we even got its heart, and yet...</em></p>

      <p>“...Heart?” I felt something off about my words, that word in particular.</p>

      <p>Suddenly, it came back to me.</p>

      <p>I controlled my hands — shaking due to Intoxication — went to my menu, and opened my memo window.</p>

      <p>There, I found the memo saying, “The demon’s heart lies in its stomach. — Cheshire”</p>

      <p>“...So that’s what that meant,” I muttered.</p>

      <p>“Master?” Nemesis sounded confused.</p>

      <p>Cheshire’s words fit the situation perfectly.</p>

      <p>The cat had probably known that I’d be facing Gardranda the moment I’d said that I was heading to Gideon. Cheshire had given me those words just in case I got into a situation such as this one.</p>

      <p>Gardranda’s heart — the core that governed all of its life functions — was in neither the head nor the chest, but the stomach. Thus, Gardranda wouldn’t die until said “heart” was crushed.</p>

      <p>To this demon, the head was nothing but another means of attacking. Even if I destroyed the remaining “faces” on the shoulders, Gardranda would continue to move as long as the core in its stomach was intact.</p>

      <p>My previous attack should’ve been aimed at the stomach instead of the head.</p>

      <p><em>But even if I figured that out, I’m all out of power to—</em></p>

      <p>“...Like hell,” I muttered.</p>

      <p><em>“Out of power?” Who gives a damn?</em> I thought fiercely.</p>

      <p>Rook and Babi were still holding back the Roc Bird. Therefore, I — who had been entrusted with the role of defeating Gardranda — had no business giving up while they continued to struggle.</p>

      <p>“Not yet...” I said, gritting my teeth.</p>

      <p>I couldn’t give up. Even if I couldn’t move or if my stats were brought down to the gutter, giving up simply wasn’t an option. I had to bear through it all for as long as I could and land another hit on Gardranda’s stomach.</p>

      <p>It wasn’t a matter of whether I “could” or “couldn’t.” My friends had given me this role. They’d entrusted it to me. Thus, I would to do it even if it meant breaking through my limits.</p>

      <p>I would grab hold of the chance of victory.</p>

      <p>“If I can’t do that much, I can’t even dream of getting my revenge against the Superior Killer!” I said fiercely. Despite being on the verge of defeat, I gathered my resolve.</p>

      <p>“Master!” Nemesis shouted.</p>

      <p>“Nemesis, the odds are against us, but it’s not over yet,” I said to her. “You don’t mind continuing this, right?”</p>

      <p>“That goes without saying,” she replied. “However, that’s not what I want to say.”</p>

      <p><em>What?</em></p>

      <p>“What do you make of this?” she asked.</p>

      <p>On the corner of the windows I had opened, there was an unfamiliar red window.</p>

      <p><b>[Master’s life endangerment: confirmed]</b></p>

      <p><b>[Master’s intent to live: confirmed]</b></p>

      <p><b>[Embryo Type: Maiden, “Maiden of Vengeance, Nemesis,” accumulated XP — green]</b></p>

      <p><b>[*** execution available]</b></p>

      <p><b>[Preparing *** activation]</b></p>

      <p><b>[If you wish to cancel, please do so within the next 20 seconds]</b></p>

      <p><b>[Do you wish to cancel? Y/N]</b></p>

      <p><em>What is this?</em> I thought dumbly.</p>

      <p>“Nemesis?” I addressed her, hoping for an explanation.</p>

      <p>“I know nothing of it, either,” she said.</p>

      <p>“What <em>is</em> this...?”</p>

      <p>The window was red, making it seem much like a warning.</p>

      <p>From the text, it was obvious that it was related to Nemesis. However, the most important part of it seemed to be corrupted — no, my head couldn’t even process it as proper language.</p>

      <p>What, exactly, did it mean?</p>

      <p>I silently watched as the countdown’s timer continued to go down. When it hit 10 seconds, I began to worry, and reached towards the window with the intention to stop it...</p>

      <p>“CUUAAAAGGHHHHHH!”</p>

      <p>...but before I could complete the motion, Gardranda’s shoulder-eyes became able to see, and the demon charged at me while roaring from its shoulder-mouths.</p>

      <p>“Why <em>now</em>, of all times...?!” I shouted.</p>

      <p>The timer on the red window before me was going down as Gardranda got closer to me by the second.</p>

      <p>I was left with no choice but to ignore the window and face the demon.</p>

      <p>However, with Weakness reducing my stats and Intoxication making it hard for me to move, brandishing Nemesis was about all I could do.</p>

      <p><em>I have to use my defense and healing to create another opportunity to use Vengeance is Mine, and...</em></p>

      <p><b>[Countdown Complete]</b></p>

      <p><b>[Acknowledged intent to initiate the emergency evolution process via *** protocol]</b></p>

      <p><b>[Examining the 172 patterns made available by the accumulated XP and calculating the optimal solution to the current situation]</b></p>

      <p><b>[Target Embryo: “Maiden of Vengeance, Nemesis.” Initiating emergency evolution via ***]</b></p>

      <p><b>[To reduce load, the interval until the next evolution will be extended]</b></p>

      <p>Right after I saw that message, Nemesis lost her physical integrity and was reduced to floating particles.</p>

      <p>“Eh...?” I gasped.</p>

      <p>That was the exact same phenomenon that had always happened whenever Nemesis transformed from her human form to her greatsword form. This time, however, she neither returned to her humanoid shape, nor did she become a sword again. Instead, the particles whirled around my surroundings.</p>

      <p>“CAAAAAAGGHHHHH!”</p>

      <p>As I became unable to process the situation, Gardranda only continued to get closer to me.</p>

      <p><b>[*** complete]</b></p>

      <p>Not giving me a moment to understand anything, the window output displayed a new line.</p>

      <p><b>[Form 2: “The Flag Halberd”]</b></p>

      <p>Nemesis’s particles whirled around me and began to gather in my hand.</p>

      <p>After having turned to floating grains of light, Nemesis returned to me in a completely different form than before.</p>

      <p>“Jump, Master!” It was her voice.</p>

      <p>I hastily listened to what she said, kicked my feet off the ground... and left Gardranda a long distance away from me.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert7">
    <img alt="insert7" class="insert" src="../Images/Insert7.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter72">
    <div class="main">
      <p>“Huh?!” a voice of surprise escaped my lips. Before I realized it, I had jumped a whole twenty meters.</p>

      <p>The surprise was aimed at both my unbelievable jumping power and the fact that...</p>

      <p>...Nemesis wasn’t human.</p>

      <p>Nor was she a greatsword.</p>

      <p>She was a spear.</p>

      <p>Though, since she had an axe popping out from one end of her grip, the word “halberd” was more apt.</p>

      <p>The part opposite of the axe blade was leaving a trail of black light, making the whole of her look somewhat like a battle flag.</p>

      <p>I looked at the equipment window and saw the name “The Flag Halberd.”</p>

      <p>“Nemesis... what happened to you?” I couldn’t help but ask.</p>

      <p>“I’m not sure I’m able to answer that question,” she replied. “I happened to become like this before I could even realize it.”</p>

      <p><em>I guess she was unconscious while she was turned into particles,</em> I thought.</p>

      <p>“However, there is one thing I’m certain of,” she continued.</p>

      <p>“And that is?” I asked.</p>

      <p>“I’ve evolved into my second form,” Nemesis revealed. “The power inside me is greater than ever.”</p>

      <p>Evolution.</p>

      <p>That was the primary feature of every Embryo — the function that gave them powers from infinite patterns.</p>

      <p>The red window had also said something about “emergency evolution.”</p>

      <p><em>Is that how it normally goes?</em> I asked myself. <em>It didn’t seem that way when Rook’s Babi evolved, though...</em></p>

      <p>“...Well, this ain’t the best time to think about this, anyway,” I muttered. I had to focus on only one thing right now.</p>

      <p>“COOAAAGHHH!”</p>

      <p>After having lost sight of me once, Gardranda noticed me again and roared with both of its shoulder-mouths.</p>

      <p>“By the way, Nemesis,” I said.</p>

      <p>“What is it, Master?” Nemesis replied.</p>

      <p>“You said that your power is ‘greater than ever’... to what extent, though?”</p>

      <p>I could almost see her put up an intrepid smile.</p>

      <p>“Enough to make it possible for us to defeat that damn demon,” she answered.</p>

      <p>“Perfect,” I smiled. The possibility was there.</p>

      <p>The fact that she’d only said that it was “possible” made me remember the first time we’d met. However, that was all I really needed. If the possibility of us winning was there...</p>

      <p>...then, for the sake of Rook, Babi, Marie, and the tians in danger of dying...</p>

      <p>...we only had to bet on that possibility and give it all we had.</p>

      <p>“Let’s do this, Gardranda,” I said.</p>

      <p>Since Gardranda’s appearance after we’d annihilated the goblins, the demon had possessed the upper hand, it had even been able to corner us after getting its head smashed. But now, we had a new way of achieving victory.</p>

      <p><em>I know how you work,</em> I thought. <em>I’ll end it soon.</em></p>

      <p>I brandished The Flag Halberd above my head and roared at the headless demon. “This... is the final round!”</p>

      <p>After spinning the halberd above my head, I charged at Gardranda.</p>

      <p>Though Weakness was supposed to have lowered my stats, I was running much faster than I could have run while in my normal state. And though Intoxication was supposed to be making my vision turn dim, I felt like I could perceive far more than I ever could.</p>

      <p>Gardranda attacked me with a swing from its right arm — the one with fewer fingers on the hand — but I was able to smoothly evade it and sink the halberd’s axe into the demon’s wrist as I did so.</p>

      <p>My attack bit through the skin, sunk into the meat, and cleared its bone. I cleanly cut the demon’s hand off, causing crimson blood to burst from the wound.</p>

      <p>“We’re doing well,” I said. It was obvious that her evolution had improved Nemesis’s stats and bonuses, but the difference between this and her previous form was just too great.</p>

      <p><em>Yeah, I think we can handle this... Oh, wait...</em> I thought, and remembered something.</p>

      <p>I was still under the effects of Poison.</p>

      <p><em>If I’m not careful, my HP might decrease a whole lot, and... Huh?</em></p>

      <p>“...we’re doing <em>way</em> too well,” I muttered.</p>

      <p>Though Poison was supposed to be gradually lowering my HP, it was actually going up instead.</p>

      <p>The increase in my physical ability, the clarity in my sensations, and the continuous HP regeneration. It was as though the debuffs had been reversed.</p>

      <p>“I see, so this is your...” I said slowly.</p>

      <p>“Indeed,” said Nemesis. “This is my new skill: ‘Like a Flag Flying the Reversal.’”</p>

      <p>Nemesis opened a window that showed the skill’s name and described what it did.</p>

      <p>Basically, it reversed the effects of debuffs received from an opponent.</p>

      <p>Instead of dealing continuous damage, Poison healed me.</p>

      <p>Instead of lowering my stats, Weakness increased them.</p>

      <p>Instead of paralyzing my senses, Intoxication made them clearer.</p>

      <p>“Like a Flag Flying the Reversal” was a buff skill that reversed all and any afflictions that affected me.</p>

      <p>“It’s quite ideal for this situation,” said Nemesis. “It honestly seems a bit overly-convenient.”</p>

      <p>“...You’re not wrong there,” I said. “However...”</p>

      <p>According to the message on that red window, out of the possibilities available to her, Nemesis had been equipped with the “optimal solution.” However, that message had merely described what happened.</p>

      <p>For some reason or another, I was convinced that <em>I</em> was the one who’d summoned this result. Regardless, this skill made it possible for me to find a way out of this situation... It was much like the first time Nemesis and I had met.</p>

      <p>Thus...</p>

      <p>“For now... I’m betting it all on this possibility!” I shouted.</p>

      <p>“Then we are of the same mind!” she called back.</p>

      <p>Nemesis and I released a battle cry as I made my way through Gardranda’s arm attacks and continued chopping away at the demon.</p>

      <p>The three debuffs it had given me had originally been simply the worst. However, now they were making me stronger and closing the power gap between me and Gardranda.</p>

      <p>I was effectively buffed with HP recovery, perception, and physical strengthening, while the demon had lost its head and practically had its miasma’s ability completely negated. Our power balance was now equal — no, in fact, it had been reversed.</p>

      <p>“CUUUOAAAGGGHHH!”</p>

      <p>Seemingly upset at this turn-around, Gardranda began randomly releasing miasma in every direction.</p>

      <p>However, to me and Nemesis, those fumes were nothing but a smokescreen.</p>

      <p>“Rraagh!”</p>

      <p>As Gardranda continued to release the miasma, I pierced into its stomach. The Flag Halberd dug through the demon’s meat and touched the weak spot — the core — within it.</p>

      <p>“CEEEAAAAGHH...!” Gardranda roared out in anguish. That was proof enough that the stomach was where I had to aim.</p>

      <p>However...</p>

      <p>“It’s regenerating!” Nemesis shouted.</p>

      <p>The wound I had just given it disappeared with a dark purple smoke.</p>

      <p>“Hah,” chuckled Nemesis. “It appears that only the weak spot is protected by regeneration.”</p>

      <p>“That means it’d take us forever to defeat it if we relied only on weak attacks,” I said.</p>

      <p>“It’s not like we can keep fighting for particularly long, anyway,” she said.</p>

      <p>I knew exactly what Nemesis meant by that. Due to the effects of Like a Flag Flying the Reversal, my HP was continuously regenerating. However, my SP only continued to decrease. That was the cost of keeping the skill active.</p>

      <p>Compared to my HP, my SP wasn’t particularly high. It wouldn’t last for long. Thus, I had to figure out what I had to do to win.</p>

      <p>Upon considering the regenerating core, the limited amount of time and our abilities...</p>

      <p>...there was only one answer.</p>

      <p>“I have to stop evading and simply let him hit me,” I said.</p>

      <p>“Nothing else would work,” agreed Nemesis.</p>

      <p>I would accumulate the damage the demon did to me and hit it with another Vengeance is Mine. This time, however, it would go straight to the weak spot in the stomach.</p>

      <p>“There is something to keep in mind, though,” said Nemesis.</p>

      <p>“What is it?” I asked.</p>

      <p>“This form doesn’t allow the use of Counter Absorption and Vengeance is Mine,” she answered.</p>

      <p>“We’re already out of Absorption uses, anyway,” I said.</p>

      <p>“No,” she said, refuting that statement. “My evolution increased its stock to three, so there’s one more use left. However, just as Reversal can only be used by The Flag Halberd, those two can only be used when I’m in my greatsword form.”</p>

      <p>Basically, to use Vengeance is Mine, I had to change The Flag Halberd into the greatsword. That meant losing the effects of Like a Flag Flying the Reversal.</p>

      <p><em>To be able to land a clean, lethal hit while under the effects of the debuffs... I have to kill its mobility!</em> I thought.</p>

      <p>“Nemesis, let’s go for the legs!” I shouted.</p>

      <p>“Understood!”</p>

      <p>I swung The Flag Halberd and repeatedly damaged Gardranda’s ankles.</p>

      <p>The demon retaliated with swings from its arms, but I simply let them hit me.</p>

      <p>Naturally, I got damaged, but the reversed Poison quickly healed me back to full health.</p>

      <p>Things were going much like they had when I’d been under the effects of the Elixir. Except — thanks to the continuous regeneration — I could attack, get hit, and heal much more smoothly than before.</p>

      <p>“...3250... 3784.”</p>

      <p>As I listened to Nemesis speak the amount of damage I had gathered, I looked at the edge of my status window and checked on my SP.</p>

      <p>53... 52... The amount of time I could keep the Reversal active was already below one minute.</p>

      <p>“...4265, Master!” she called.</p>

      <p><em>All right, I’m betting it all on this!</em></p>

      <p>“Hhaaaagh!”</p>

      <p>I dashed through the miasma — which was nothing but a smokescreen to me — dove right next to where Gardranda was standing, gathered my resolve, and horizontally swung The Flag Halberd at the demon’s legs.</p>

      <p>Both of its tendons had been severely damaged by my attacks up to that point, so with that deadly swing, the ax-head split both of them apart.</p>

      <p>“CUEEEEEEEGHHH!!” Gardranda screamed and fell to its knees, making the ground tremble.</p>

      <p>“Do it now, Nemesis!” I shouted.</p>

      <p>“Form Shift — Black Blade!” she called. Her command made The Flag Halberd lose its integrity and scatter into particles of light, which soon gathered once more to create the familiar black greatsword.</p>

      <p>At that very moment, I was put under the effects of the three debuffs. However, it didn’t matter anymore. I only had to land my final attack.</p>

      <p>As my legs were shaking due to Intoxication, I dashed towards the demon. Gardranda was still kneeling, and when I raised my sword and readied myself to strike...</p>

      <p>...I noticed something.</p>

      <p>The dark purple miasma smokescreen was hindering my vision. However, it did nothing to hide the fact that both of the demon’s shoulders were emitting a bright red light.</p>

      <p>“CHHHHGHAAAAHH!”</p>

      <p>Deadly flames.</p>

      <p>They weren’t limited to the head I’d destroyed — Gardranda could release them from its shoulder-mouths, too.</p>

      <p>However, I refused to stop.</p>

      <p>“Counter Absorption!” Nemesis spawned the third barrier of light — the one she’d gained from evolving. It stopped the flames and absorbed the damage they were meant to do.</p>

      <p>Though it was unnecessary, that made the damage I’d accumulated reach the greatest amount ever.</p>

      <p>I couldn’t be more certain that I had it in the bag.</p>

      <p>“Now, Master!” she called.</p>

      <p>Once I passed the flames, the barrier of light dispersed.</p>

      <p>Finally, I began to swing my sword at Gardranda’s stomach...</p>

      <p>“CHHHGHAAAAHH!”</p>

      <p>...and was suddenly faced with the demon’s left shoulder-mouth, ready to spit more fire.</p>

      <p>“What...?!” I gasped.</p>

      <p>“Huh...?!” Nemesis exclaimed, as we realized that Gardranda had actually learned something from the battle up till now. The demon had used the lethal flames from both its shoulder-mouths separately...</p>

      <p>...just for the sake of getting past Nemesis’s Counter Absorption.</p>

      <p>All the miasma it had previously released hadn’t been meaningless, either — it was a preparatory action meant to render us unable to see that the demon had separated the flame bursts.</p>

      <p>“Master!” shouted Nemesis.</p>

      <p>I was already swinging the sword.</p>

      <p>The blade was slicing through the air for the sole purpose of striking Gardranda’s stomach with Vengeance is Mine. Even with the debuffs, I could land the hit in a mere three seconds. However, the demonic flames would reach me faster.</p>

      <p>As if on the verge of death, I began seeing the world in slow-motion.</p>

      <p>The left shoulder-mouth opened wide and was about to bathe me in flame. “Gyaghghghghghgh!”</p>

      <p>But before it could do so, something resembling a bullet broke through the miasmic veil and hit Gardranda’s left shoulder.</p>

      <p>The familiar object exploded and the demon’s left shoulder — when caught in the burst — blew up before it could release its fires.</p>

      <p>The moment the heat waves caressed my cheeks...</p>

      <p>“Vengeance is Mine!”</p>

      <p>...Nemesis and I shouted the name of the skill, landed the hit on Gardranda’s stomach, and pulverized its core.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="epilogue">
    <div class="main">
      <h1>Epilogue</h1>

      <p>Gardranda’s body got split in half and fell to the ground with a loud thud before getting reduced to shining particles and vanishing like any other monster.</p>

      <p>With the demon’s disappearance, the lingering miasma began to fade, as well.</p>

      <p>The dense fog vanished into the sunlight as if it was only natural.</p>

      <p><b>[UBM, “Great Miasmic Demon, Gardranda,” was defeated]</b></p>

      <p><b>[Selecting MVP]</b></p>

      <p><b>[Ray Starling was selected as MVP]</b></p>

      <p><b>[Ray Starling is presented with an MVP special reward — “Miasmaflame Bracers, Gardranda”]</b></p>

      <p>The disappearance of the miasma and the system message made it clear that the battle was over.</p>

      <p>I read the message while lying on the ground.</p>

      <p>“It appears that... we’ve won,” said Nemesis.</p>

      <p>“Not yet!” I rejected that notion. Rook was still up high, fighting the Crimson Roc Bird.</p>

      <p>I had to go help him...</p>

      <p>“But Master! You still have the debuffs...”</p>

      <p>I looked at my status summary and, sure enough, the three status effects were there. Poison was draining my health, while my MP and SP were at a perfect 0. However, the battle wasn’t over yet.</p>

      <p>I didn’t mean just the Roc Bird, either. There was also the attack that had hit Gardranda before I’d destroyed it.</p>

      <p><em>That was obviously the...</em></p>

      <p>“Ray! Are you okay?!”</p>

      <p>I turned to the source of the voice and saw Marie — who I hadn’t seen since she gave me the Elixir — running up to me.</p>

      <p>She was probably approaching me because the miasma was no longer there.</p>

      <p>“Your status screen looks horrible,” she said. “Give me a second.”</p>

      <p>Saying that, Marie reached for her inventory and took out a few medicine bottles. Unlike my inventory — which was bag-shaped — or Cheshire’s — which was pocket-shaped — her inventory had the appearance of a wristband.</p>

      <p>Some of the bottles she took out were HP potions, just like the ones I’d used. There were also some that had the labels “MP” and “SP.”</p>

      <p>“Here’s some first aid for you,” said Marie. “It would be great if I could also remove your debuffs, but I don’t have anything that could treat Intoxication or Weakness... And I’ve already used up all the Antidotes I had...”</p>

      <p>With those words, Marie looked at the people at the carriages, who had also been affected by the miasma.</p>

      <p>Everyone — including the escorts — was down on the ground due to Intoxication and Weakness, but none of them had died of Poison.</p>

      <p>From her words, it was safe to assume that Marie was the one who’d helped them.</p>

      <p>“I had quite a lot of Antidotes, too,” she said. “But there’s a total of twelve people there, and treating them all required all I could give. Walking around and making people drink medicine made me feel like I’d switched my job to Pharmacist,” she laughed.</p>

      <p>Apparently, Marie had been doing her best to protect the people — the tians at the carriages — from dying.</p>

      <p>“Heh...” I smirked a little bit.</p>

      <p>“What? Why the smile?” she asked.</p>

      <p><em>Whoa, did I really make it that apparent?</em> I thought.</p>

      <p>“Well, it’s just that... you’re pretty kind, aren’t you?” I asked.</p>

      <p>“I don’t think that kindness has anything to do with that,” Marie responded. “I just... wouldn’t like it.”</p>

      <p>“Wouldn’t like what?” I asked.</p>

      <p>“When killed, we players only get the death penalty, so that’s all okay, but tians don’t come back to life, right?” she explained. “I simply don’t like the idea of them being lost forever.”</p>

      <p>“...I know what you mean,” I said. It was probably akin to the bad taste in my mouth I’d feel whenever tian deaths were involved.</p>

      <p><em>Though she basically just said that player killing is okay, and as someone who was killed recently, I... wait...</em></p>

      <p>“Marie, it just came back to me,” I spoke up. “When looking around this place... did you happen to see the Superior Killer?”</p>

      <p>“Oh! Yes yes! I almost forgot!” Realizing something, Marie put her hands together. “I saw him! The same man I saw in Noz Forest — the Superior Killer — fired at Gardranda’s left shoulder! ...He left right after that, though.”</p>

      <p>So that thing was actually the Superior Killer’s Embryo...</p>

      <p>But why had he only shot the left shoulder? If his goal had been to kill Gardranda — a UBM — he’d surely have fired the same way he did when he killed me. With the way he’d gone about it, I could even assume that he’d helped me.</p>

      <p>“One more thing about him...” Marie continued. “From the direction he disappeared into, I think it’s fair to say that he’s heading to Gideon.”</p>

      <p>“I see...” I said. If that was the case, I could expect to meet him again.</p>

      <p>“Oh, are you healed?” asked Marie.</p>

      <p>“Yeah,” I replied. My stats had replenished while we were talking. Though my HP was still going down due to the Poison, my MP and SP were at max.</p>

      <p>Nemesis changed into The Flag Halberd. However, unlike before, the skill Like a Flag Flying the Reversal didn’t activate. It was probably because I’d defeated Gardranda — the source of the debuffs.</p>

      <p>“Well, whatever,” I said. “I can do just fine without the Reversal.”</p>

      <p>“Indeed,” Nemesis agreed. “...By the way, Master.”</p>

      <p>“What?” I raised an eyebrow.</p>

      <p>Nemesis raised the halberd’s spearhead upwards...</p>

      <p>“How, exactly, are you planning on joining an aerial battle?”</p>

      <p>...and asked something that I’d completely failed to consider.</p>

      <p>“...”</p>

      <p>“...”</p>

      <p>“...”</p>

      <p>We all turned silent as I realized that there was nothing I could do.</p>

      <p><em>Clearly, I didn’t think this through,</em> I thought. There was literally no way for me to assist them.</p>

      <p>“Umm... how about hurling some rocks?” asked Marie.</p>

      <p>“There’s no way I can throw that high...” I said.</p>

      <p>They were so high up that even the Roc Bird — with all its great wingspan — looked like a small point in the sky.</p>

      <p><em>And Rook and Babi aren’t visible at all... Oh!</em> I thought and noticed something.</p>

      <p>“They’re coming down,” said Marie.</p>

      <p>The Roc Bird began to look bigger as it began losing altitude. However, something seemed wrong.</p>

      <p>Instead of diving down at high speed — as it had when it’d attacked me — it was descending in a strangely gentle manner.</p>

      <p>When the Roc Bird in my sight was large enough for me to make out its details, I finally realized what was up.</p>

      <p>Rook — who was supposed to be fighting it — was riding it, instead.</p>

      <p>The Roc Bird gently landed on the ground and let Rook dismount.</p>

      <p>“Ray! Marie! Are you all right?!” he ran up to us.</p>

      <p>“Yeah, we’re fine, but... how about you? And where’s Babi?” I asked.</p>

      <p>“The battle exhausted her, so I had her return to me,” Rook answered while showing the crest on his left hand.</p>

      <p>“I see.” I nodded and shifted my gaze to the bird. “And this is...?”</p>

      <p>“Audrey!” he replied with enthusiasm.</p>

      <p>“CAAAW!”</p>

      <p><em>Audrey?</em> I thought. <em>Oh, I think I know what that refers to.</em></p>

      <p>“So, does the fact that you’ve given it a name mean that...”</p>

      <p>“Yes!” Rook said before I could finish the question. “I Charmed and successfully tamed her!”</p>

      <p>Well, it was true that Rook’s Male Temptation skill had a low chance of taming female monsters.</p>

      <p><em>...So this thing’s a girl, too, huh?</em> I thought.</p>

      <p>“Hey, wait...” I said. “I’m quite sure this bird is Gardranda’s mount.”</p>

      <p>“The Charm skill didn’t have an effect on her at first, but it suddenly started to work when the miasma cleared,” he explained.</p>

      <p>That was basically the moment when I’d defeated Gardranda.</p>

      <p>So, with the demon’s death, Audrey had no longer been a mount, making the difficulty in Charming and taming her drop significantly.</p>

      <p>I looked and saw Audrey rubbing her wings on Rook’s back...</p>

      <p><em>Is that some sort of courtship behavior?</em> I thought. Whatever the case, she seemed to be quite attached to him.</p>

      <p>I also felt that the name “Audrey” fit her far better than “Marilyn” fit the Trihorn. <em>Though, for all I know, Audrey Hepburn might also be turning in her grave right now.</em></p>

      <p>“The miasma was too thick for me to see what was going on, so I was pretty worried about you guys,” said Rook.</p>

      <p>“Well, as you can see, we won,” I stated. “It’s all thanks to you guys.”</p>

      <p>“And me, of course!” Nemesis interjected.</p>

      <p>“I know that much,” I said. “Thank you, Nemesis.”</p>

      <p>“...Y-You’re welcome,” she muttered. “I-It’s fine as long as you’re aware.”</p>

      <p><em>Hm?</em> I thought. <em>What a strange response.</em></p>

      <p>“So everything’s taken care of now,” said Marie.</p>

      <p>“Seems like it,” I agreed.</p>

      <p>I still had the Superior Killer on my mind, but if he wasn’t here anymore, worrying about him was meaningless. Thus, I left that matter for later.</p>

      <p>Using my healing magic and Marie’s potions to restore my HP, we waited for the debuffs to go away. Because the cause of them — the miasma — was gone, the debuffs on me and the carriage people disappeared within ten minutes.</p>

      <p>Their leader — a merchant named Alejandro — was beside himself with gratitude. When the people got teary-eyed and thanked us with words like “Without you, my whole family would’ve died,” “You’re lifesavers,” or “We can’t thank you enough,” Rook and I both became a bit bashful.</p>

      <p>They, too, were heading towards Gideon, so we offered join them. Personally, since they’d lost a number of escorts in the previous battle and the ones that had survived were not in the best of shape, I was kinda worried about them.</p>

      <p>Alejandro instantly — and with great joy — agreed to have us tag along.</p>

      <p>After we’d raised up the overturned carriages, I saw the survivors take something out of the pockets of the deceased. Upon further inspection, I realized that they were box-shaped inventories.</p>

      <p>A moment later, the survivors stored the remains of the deceased into those boxes. Each and every dead person got stored into their own inventory.</p>

      <p>I asked Marie about it, and she said that it was how traveling tians treated their dead — by putting them into those “coffins.”</p>

      <p>With monsters terrorizing the roads, tians took the danger of death as a given. If some lost their lives while others survived, the dead would be put into those “coffins” so that they could be sent to their homes and families without decaying. That was why they all carried inventories where they could store themselves.</p>

      <p>It made me more aware of how tians — who were always in danger of dying — perceived life and death.</p>

      <p>“...Coffins, huh,” I whispered. I’d never cared much for any NPCs who’d died in other games, but it was different here.</p>

      <p>It gave me a lump in my throat.</p>

      <p>Even if I knew this was a game, I didn’t think I could ever get used to seeing people die here. That might’ve been because <em>Infinite Dendrogram</em> was simply far too realistic.</p>

      <p>Or perhaps...</p>

      <p>“I... I’ll just leave this for later.” I stopped that train of thought and returned to helping prepare the carriages.</p>

      <p class="centerp section-marking">◇</p>

      <p>Half a day had passed since we’d gotten back on the road again. Marilyn’s dragon carriage was gently shaking me when I suddenly began to feel extremely sleepy. It was probably caused by me pushing my limits during the battle against Gardranda.</p>

      <p>“Why not take a nap? I’ll wake you up if something happens,” offered Marie, and I gladly accepted. Logging out would’ve resulted in me being left behind, so I took a nap while logged in, just like I did at the inn.</p>

      <p>Sitting down, I placed my back against the carriage’s cargo and closed my eyes.</p>

      <p>Not even five minutes had passed before I felt someone sit next to and lie against me.</p>

      <p>Wondering who it was, I opened my eyes and saw Nemesis sleeping with her head placed against my upper arm. Apparently, I wasn’t the only one who was tired enough for a nap.</p>

      <p>“Man, you sure are quick to fall asleep... Nemesis,” I said. Then I tried to follow her example and closed my eyes again.</p>

      <p>However, probably due to having opened my eyes once, I couldn’t fall asleep, and instead began to think about things. Specifically, I remembered the many and various things that had happened since I’d started <em>Infinite Dendrogram</em>.</p>

      <p>Despite the fact that only three days had passed in real time, they’d felt extremely dense.</p>

      <p>The most vivid memory I’d had so far was the battle against Gardranda. In terms of danger, it might’ve even surpassed my encounter with the Superior Killer.</p>

      <p>Not only that, but — probably because Nemesis and I had told each other how we felt about it — the regret I had been haunted with after getting PK’d had faded, and it wasn’t nearly as strong as before.</p>

      <p>At the current moment, the dominant feeling in me was the vague pain I felt after seeing the bodies of the tians killed by Gardranda and the goblins.</p>

      <p>They were nothing but characters inside <em>Infinite Dendrogram</em> — a game. And yet, my heart was grieving for them as it would grieve for those who’d died in reality.</p>

      <p>A part of me felt that such sentiments were wrong. I didn’t know what to say to that idea. Before I realized it, I’d opened my eyes and looked at Nemesis.</p>

      <p>She was my Embryo, my partner... and an existence that was limited to the game known as <em>Infinite Dendrogram.</em> However, the longer I looked at her sleeping face, the more I felt like I was looking at a living, breathing girl.</p>

      <p><em>She’s alive,</em> I thought to myself. <em>I just can’t think otherwise.</em></p>

      <p>“‘AI with intelligence equal to that of a person,’ huh?” I murmured. My brother had said that tians — the inhabitants of this world — were recognized as such. “But...” The drowsiness that I’d thought was gone came over me again and slowly overwhelmed my brain.</p>

      <p>As my consciousness became more and more vague, I once again began to run my mind through the things I’d thought at the party on my first day.</p>

      <p>Liliana and Milianne — tians.</p>

      <p>Demi-Dragon Worms and Gardranda — monsters.</p>

      <p>And...</p>

      <p>“Nemesis...”</p>

      <p>...Embryos like her.</p>

      <p>They all felt... so <em>alive</em> to me.</p>

      <p>“Is this really...”</p>

      <p><em>...just a game?</em></p>

      <p>Before I could voice those words, my consciousness was finally lost to the realm of slumber.</p>

      <p class="centerp section-marking">◇◆◇</p>

      <p>Undisclosed Location</p>

      <p><b>[“Polaris Bear, Polar Star” was defeated]</b></p>

      <p><b>[Final level: 83]</b></p>

      <p><b>[MVP: “God Hunter” Carl Lourlou, level 263 (total level: 763)]</b></p>

      <p><b>[Embryo: “Indestructible and Everlasting, Nemean Lion”</b></p>

      <p><b>[MVP special reward: Ancient Legendary item, “Ultimate Suit Series, Polar Star”]</b></p>

      <p><b>[“Ore Dragon King, Dragnium” was defeated]</b></p>

      <p><b>[Final level: 64]</b></p>

      <p><b>[MVP: “Giga Professor” Mr. Franklin, level 198 (total level: 698)]</b></p>

      <p><b>[Embryo: “Magic Beast Factory, Pandemonium”]</b></p>

      <p><b>[MVP special reward: Ancient Legendary item, “Ore Dragon King’s Complete Remains, Dragnium”]</b></p>

      <p><b>[“Navalport Strikefish, Portorpedo” was defeated]</b></p>

      <p><b>[Final level: 42]</b></p>

      <p><b>[MVP: “Great Admiral” Koukin Shoyu, level 229 (total level: 729)]</b></p>

      <p><b>[Embryo: “Great Flame Brewer, Abura-sumashi”]</b></p>

      <p><b>[MVP special reward: Epic item, “Come-and-Go Torpedo, Portorpedo”]</b></p>

      <p><b>[“Fox-eyed Charcoal, Enryou” was defeated]</b></p>

      <p><b>[Final level: 56]</b></p>

      <p><b>[MVP: “The Glaive” Aono Hokugenin, level 335 (total level: 835)]</b></p>

      <p><b>[Embryo: N/A]</b></p>

      <p><b>[MVP special reward: Legendary item, “Incinerating Fox-eye, Enryou”]</b></p>

      <p><b>[“Great Miasmic Demon, Gardranda” was defeated]</b></p>

      <p><b>[Final level: 24]</b></p>

      <p><b>[MVP: “Paladin” Ray Starling, level 20 (total level: 20)]</b></p>

      <p><b>[Embryo: “Maiden of Vengeance, Nemesis”]</b></p>

      <p><b>[MVP special reward: Legendary item, “Miasmaflame Bracers, Gardranda”]</b></p>

      <p>“Hm?” Surrounded by darkness, still recording and doing its preset activities, <em>it</em> suddenly tilted its head.</p>

      <p>Considering that it always did nothing but work without as much as saying a single word, that was a rare occurrence.</p>

      <p>“How curious,” it said. “To defeat an UBM that’s above you in level... that is quite rare.”</p>

      <p>Its confusion was only natural. UBMs were exceptional creatures far beyond the norm. They all had multiple times the power of any boss monster at the same level. Even high-rank Masters had a hard time fighting them.</p>

      <p>Thus, it was extremely rare for a UBM to be defeated by someone of a lower level.</p>

      <p>Thinking that this defeat had been the result of a large number of low-level players and that the person had only been selected as an MVP by accident, it opened the battle log. However, the reality was far beyond its expectations.</p>

      <p>The person — Ray — had defeated the UBM all by himself.</p>

      <p>“Hoh?”</p>

      <p>That person was equipped with abilities that were optimal for giant-killing. The mid-battle evolution caused by *** had given him a new ability that was simply perfect for the situation. That person was equipped with an indomitable will.</p>

      <p>There were many reasons for his victory, but there was one that particularly stood out.</p>

      <p>“He realized it right after destroying the first head,” it said. “That is far too early.”</p>

      <p>The creature it acknowledged as an UBM — “Great Miasmic Demon, Gardranda” — was a gathering of traps.</p>

      <p>First, there was the head that flagrantly released miasma and flames.</p>

      <p>The player would think that to be its weak point and destroy it, but that would cause it to create two new faces on the shoulders.</p>

      <p>All of those visages were traps.</p>

      <p>Getting rid of them would not only fail to destroy Gardranda — it would cause it to be strengthened even further.</p>

      <p>Even if all its heads were destroyed, it would go through more transformations and become even more powerful than before.</p>

      <p>It was completely indestructible as long as the core within its stomach was intact.</p>

      <p>Due to that, <em>it</em> had expected Gardranda to grow into a particularly powerful UBM. In fact, it wouldn’t have been surprised if the demon had reached level 100 — the apex of UBMs and the greatest level available to monsters — and broken through it to join the ranks of the exceptions known as SUBMs — Superior Unique Boss Monsters.</p>

      <p>However, in reality, this low-rank Master had been able to miraculously defeat Gardranda and stop its growth process.</p>

      <p>“Well, there’s no use in overthinking it,” it said. “Such cases aren’t unheard of. I will keep this in mind in my future work.”</p>

      <p>It finished analyzing the battle and closed the battle log window.</p>

      <p>However, its thoughts suddenly escaped through its mouth as words.</p>

      <p>“Whatever the case, this is reason to be joyous. It’s all meaningless if only the current Superiors grow stronger. If no new powers emerge, we will never have a hundred Superiors... and never reach Infinity.”</p>

      <p>After nodding at its own words, it took another glance at Ray’s log and continued talking.</p>

      <p>“Now... I wonder if he will make good use of Gardranda.”</p>

      <p>Imagining the future, it formed a faint smile.</p>

      <p>“Whether you do or not... just grow stronger while having fun. To you people, this world — from start to finish — is nothing but a game.”</p>

      <p>And so, control AI No. 4, Jabberwock — the one tasked with handling UBMs — returned to its busy, busy job.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="afterword">
    <div class="main">
      <h1>Afterword</h1>

      <p class="afterwordimages"><img src="../Images/Bear.jpg"/> <img src="../Images/Cat.jpg"/></p>

      <p><b>Bear:</b> “Time for the afterword!”</p>

      <p><b>Cat:</b> “Thank you very much for buying the first voluume!”</p>

      <p><b>Bear:</b> “As you all can surely tell by the words next to our speech, this afterword will be presented by yours truly — his bearliness Shu Starling...”</p>

      <p><b>Cat:</b> “...and the only <em>Dendro</em> cat so far, Control AI no. 13 — Cheshiire! Just so you all know, at first, the author was thinking of acting proper and greeting his dear readers directlyy...”</p>

      <p><b>Bear:</b> “...but changed his mind and figured that <em>Dendro</em> is best represented by its mascot duo!”</p>

      <p><b>Bear:</b> “Now, bear with us as we tell you how it got published.”</p>

      <p><b>Cat:</b> “Good ideaa. It happened about 11 months ago. The author looked into his inbox on <em>Shōsetsuka ni Narō</em> and found a message from a sender whose name was in red... The red name caused him to quake with fear, but he somehow got himself to read the subject line. It said <b>‘Publishing Offer.’</b> It was actually an offer from Hobby Japan’s editor, K!”</p>

      <p><b>Bear:</b> “Naturally, the author was surprised, fur he never expected to get contacted by a publisher whose releases he’d read in his school years.”</p>

      <p><b>Cat:</b> “The author replied with a cautiously optimistic message, soon after which he had to go to a preparatory meeting...”</p>

      <p><b>Bear:</b> “...where he received an explanation and quickly sealed the publication deal with a contract.”</p>

      <p><b>Cat:</b> “However, there was a problem after that... Well, ‘problem’ might not be the right word.”</p>

      <p><b>Bear:</b> “Basically, Editor K raised his expectations and standards so high that the author’s heart couldn’t bear it.”</p>

      <p><b>Cat:</b></p>

      <p>“‘The illustrations will be done by Taiki,’ said the editor.</p>

      <p>‘The one who does <em>those</em> designs? I’m so happy!’ replied the author.</p>

      <p>‘A month before it releases, we’re putting <em>Dendro</em> leaflets in <em>HJ Bunko,</em>’ said the editor.</p>

      <p>‘Wow! That’s so much advertising!’ replied the author.</p>

      <p>‘It’s also getting a dedicated site and a preview video,’ said the editor.</p>

      <p>‘Y-You’re going <em>that</em> far?!’ replied the author.</p>

      <p>‘I’ll also get fifty artists to draw something in support of <em>Dendro,</em>’ said the editor, and at this point, the author could only shake uncontrollably.”</p>

      <p><b>Bear:</b> “All of this is completely true.”</p>

      <p><b>Cat:</b> “The author will be at ease if the work sells well enough to meet Editor K’s expectations. I earnestly hope that this afterword is read by many people, and that means the book is selliing.”</p>

      <p><b>Bear:</b> “Last, but not least, put your paws together for the author’s words of gratitude!”<br/><br/></p>

      <p>Hello there.</p>

      <p>I would like to give my thanks to everyone who bought <em>Infinite Dendrogram</em> Volume 1, everyone who supported my work on <em>Shōsetsuka ni Narō,</em> my sister — who checked on every part before I uploaded it — and, of course, Hobby Japan and their editor, K, for picking my work for publication.</p>

      <p>I will keep on writing <em>Infinite Dendrogram</em> and do my best to live up to your expectations, so I would be thankful if you continued to support me.</p>

      <p>Regards, Sakon Kaidou.<br/><br/></p>

      <p><b>Cat:</b> “Now that that’s over, let us meet again in volume twoo!”</p>

      <p><b>Bear:</b> “This afterword was brought to you by Brother Bear...”</p>

      <p><b>Cat:</b> “...and Cheshiire!”</p>

      <p><b>Bear:</b> “The second volume is planned to be released in the coming months, so grin and bear it until then!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="bonus1">
    <div class="main">
      <h1>Bonus Short Stories</h1>

      <h2>Brother Bear’s Cooking</h2>

      <p><em>Ray Starling</em></p>

      <p>After finishing Liliana’s quest, my brother prepared a welcoming party for me and Nemesis.</p>

      <p>The round table was covered in many foods, and all of them were absolutely exquisite. It made me remember the time I had been brought to a high class restaurant in real life, but a part of me felt like what I had before me was actually better than anything there.</p>

      <p>However...</p>

      <p>“You didn’t make anything today, bro?” I asked.</p>

      <p>All the cooking before me had been made by the head chef of this place.</p>

      <p>“Oh, you noticed?” he asked.</p>

      <p>“Well, yeah, of course I did,” I answered.</p>

      <p>I would recognize my brother’s food with just a single bite. That’s how much of an <em>impact</em> it had.</p>

      <p>“Hm?” Nemesis chewed and swallowed her food. “You are capable of cooking, Brother Bear?”</p>

      <p>She then continued eating and waited for an answer.</p>

      <p>“‘Capable’ isn’t the right word here,” I said. “His food is <em>really</em> good.”</p>

      <p>My words made Nemesis’s eyes light up.</p>

      <p>“Hoh? Care to describe?” she asked.</p>

      <p>“The cooking he put his heart and soul into... actually killed people,” I answered.</p>

      <p>“Killed?!” she exclaimed in surprise.</p>

      <p>“That’s a bear-faced lie,” said my brother. “They all recovered.”</p>

      <p>Eight years ago, when my brother had still been a college student, he’d tried his hand at cooking. It had soon became obvious that he had a talent for it, and as he’d quickly learned how to do it well, he’d begun getting lots of praise from teachers and students alike. The people who ate his food encouraged him to participate in the college festival’s cooking contest, which was exactly what he did.</p>

      <p>And — since it happened to be a contest — he went all out, doing all sorts of ingredient and method-related research and arranging everything in the best way to create the ultimate culinary masterpiece. On the day of the contest, my brother presented the five judges with the very same work of art.</p>

      <p>Three of them lost their consciousness with the first bite.</p>

      <p>The other two released strange screams, which was a peculiar way to express just how delicious it was. Indeed, my brother’s cooking was <em>way too good</em>. So good, in fact, that all the information that it forced on the taste buds overwhelmed people’s consciousnesses and made them faint.</p>

      <p>The only two judges who hadn’t fainted had been trained people from a sports university. The taste was so good that no one without such training could bear it, and since my brother was quite well-built, he hadn’t realized it back when trying his food himself. Out of the three who fainted, the oldest professor received such a shock that his heart stopped. The scene became chaotic, but since my brother knew how to revive people in such a state, he quickly did so and prevented it from becoming a big problem. I recalled him saying that people thought he’d added poison to his food, which was obviously quite troublesome.</p>

      <p>“And so, my brother sealed this ultimate culinary masterpiece forever,” I spoke the closing words.</p>

      <p>“...Is it just me, or is that an event straight out of a different genre?” asked Nemesis.</p>

      <p><em>It actually happened to him, so take it as you will,</em> I thought.</p>

      <p>“But man, even if it wasn’t as good as the masterpiece, I was kinda looking forward to your food, bro,” I said.</p>

      <p>“Well, you’ll have to bear this forever, then,” he said.</p>

      <p>“Huh?” I was confused.</p>

      <p><em>Forever? Why?</em></p>

      <p>“You know how the food here is almost unbearably good, right?” he asked.</p>

      <p>“Well, yeah.”</p>

      <p>“It’s not just due to the skill of the chef, but due to the ingredients, as well. Monsters that are fit for eating and vegetables grown by magic or skills are <em>really</em> tasty. Real life food can’t compete, honestly.”</p>

      <p>“...And by that, you mean...?”</p>

      <p>“Just about anything I make with these ingredients would be as good as the ultimate culinary masterpiece.”</p>

      <p>I was silent.</p>

      <p><em>Apparently, my brother’s cooking is as destructive here as it is in real life,</em> I thought.</p>

      <p>I decided to simply enjoy the food before me. But I was pretty disappointed that I’d never be able to have anything my brother made.</p>

      <h2>Marie’s Cooking</h2>

      <p><em>Paladin Ray Starling</em></p>

      <p>It was the night after we’d left the capital and started making our way towards Gideon. We’d set up camp to rest, and I was watching as Rook opened the drops he’d gotten from the bear-like monster that Marilyn had killed. He got two items: a standard thing that was meant to be converted to money and... something really odd.</p>

      <p>“‘Honey Bear Claw’?” Rook read the item name.</p>

      <p>It was exactly what it sounded like. Though separate from the rest of the body, it didn’t reek of blood. In fact, it had a mild, sweet, honey-like scent.</p>

      <p>“Is it like the skins that drop from Teal Wolves?” I asked.</p>

      <p>“No. The skins are a material for armor crafting, while this item is for cooking,” said Marie, who was lying down in the dragon carriage.</p>

      <p>“Oh, right,” I said. “I’ve heard that bear claws are a gourmet cooking ingredient in Chinese cuisine.”</p>

      <p>“Yes,” she said. “They’re a cooking material here in <em>Dendro,</em> too.”</p>

      <p>I nodded.</p>

      <p>“Ooh!” Sitting beside me, Nemesis got all excited. “That can be our midnight snack!”</p>

      <p><em>...As gluttonous as ever,</em> I thought. <em>What kind of midnight snack is a bear claw, anyway?</em></p>

      <p>“Nemesis, that’s Rook’s, you know?” I pointed out the obvious.</p>

      <p>“Oh, I don’t mind,” he said. “Let’s all have a nice meal together.”</p>

      <p>“Yes!” exclaimed Nemesis with even more excitement than before.</p>

      <p>Rook — gentle as he was — adopted a smile that was downright angelic.</p>

      <p><em>Divine as he seems, however, actually worshipping him is a bit overdoing it, Nemesis,</em> I thought.</p>

      <p>“But wait, none of us here have the Cooking skill, right?” I asked.</p>

      <p>“Oh, but Ray,” he said, “cooking is a sense skill, right? As in, a skill that carries over to the game if you know how to do it in reality. We should be able to cook it regardless.” Rook’s words reminded me that my brother had in fact done some cooking here in <em>Dendro.</em> His food was extremely good in real life, so he could surely do it here without any problems.</p>

      <p>“Well, if we don’t need the skill, then let’s get to...” I cut my words short.</p>

      <p>“What’s wrong, Ray?” asked Rook.</p>

      <p>“Hey,” I spoke up. “How do you even cook a bear claw?”</p>

      <p>“...I’m sorry,” said Rook. “I know a thing or two about survival, but none of it covers bear cooking.”</p>

      <p><em>Well, yeah,</em> I thought. <em>Hunting and cooking bears seems like something beyond simple survival.</em></p>

      <p>“Oh,” Marie joined the conversation. “I know how to cook bears.”</p>

      <p>“Seriously?!” I asked in surprise.</p>

      <p><em>How did she come to know that?</em> I wondered.</p>

      <p>“After I lost my job, I did a lot of research, and it happened to cover how to cook a bear,” she explained.</p>

      <p><em>...Who the hell starts researching bear cooking after becoming unemployed?</em></p>

      <p>“So,” she said, “you can leave it to me! It’ll come out well... I think!”</p>

      <p>“Then I will look forward to this bear cooking of yours,” said Nemesis. Never having eaten bear before, I found her excitement relatable. Though, a part of me felt like the food would make me picture my brother.</p>

      <p>An hour had passed since those naïve thoughts of mine. Myself, Nemesis and Rook were all lying on the ground — face first — with our complexions completely pallid.</p>

      <p>The cause had been Marie’s cooked bear. The moment it’d entered our mouths, we’d all convulsed in agony and fallen down. It was easy to say that it was “bad,” but reaching that conclusion required going through a complicated, overwhelming stream of sensations. Strange, considering how normal the food had looked.</p>

      <p>“Oh dear,” said Marie. “Not even bear food came out well, huh?”</p>

      <p>The culprit herself was eating her cooking without showing any adverse reactions.</p>

      <p><em>...Looks like she has the stereotypical taste-deafness and is tragically bad at making food,</em> I thought. <em>Not only that — she’s aware of it, as well. You could’ve warned us, damn it!</em></p>

      <p>As we groaned in agony, Babi covered her portion of the bear claw in Tabasco and chowed down as if it was nothing.</p>

      <h2>Lei-Lei’s Cooking</h2>

      <p><em>Royal Capital Altea — Orion’s Belt Restaurant.</em></p>

      <p>“Hmm... hmm...”</p>

      <p>At the corner of a bustling restaurant, a woman was shaking a cocktail mixer. A party was ongoing. She hummed the tune to a famous rock song and put a significant amount of joy into her movement. None of that was strange for someone taking part in a party. However, her appearance was downright curious.</p>

      <p>She was clad in a Chinese dress, but her facial characteristics were those of a northern European. Though she was merely humming at the moment, she also had quite a unique intonation when speaking. The mixer in her hands was strange, as well. That was because, rather than being made of silver, it was forged from a brilliant red, Mythical metal — Hihiirokane.</p>

      <p>It clearly wasn’t a material meant for something as mundane as a mixer, but it happened to be the only one she’d ever use. There’d been a time when the concoction she was making had made a silver mixer melt without leaving a trace, so she wouldn’t feel safe unless she was using something as tough as the one in her hands.</p>

      <p>Of course, no normal cocktail could ever do something so ridiculously strange. However, the liquid in the shaker wasn’t a normal cocktail, but a Divine Oni Poison Sake (light). It was like the opposite of the sake used to defeat the Shuten Douji, famous in Japanese legend. She mixed a fruit drink with a poison that had a delayed Hangover effect. The poison had a two stages, and the first one was a light Intoxication that turned the drinker tipsy and made them experience heavenly bliss.</p>

      <p>However, a few hours later, the hell would open up. As vile as it might’ve seemed, her Superior Embryo’s skill nullified the drinker’s resistance to debuffs, so anyone who downed the drink couldn’t avoid the effects no matter how hard they tried. Also, since she didn’t add any alcohol to it, it didn’t trigger the age restrictions and could be consumed by underage people.</p>

      <p>Her intention was to give this special poison to the people in Shu’s party. However, neither he nor any other veteran who knew her tricks did anything to stop her. In fact, many of them were looking forward to having the newbie get a taste of what they’d once experienced. Shu also believed that it would be a good lesson for his brother.</p>

      <p>The level of freedom in <em>Infinite Dendrogram</em> was great, and it was extremely hard to tell what kind of trap you were falling into before it actually happened. Without great care and perception, getting the death penalty would be very easy. Since the Hangover debuff only gave a headache and nausea, having Ray get fooled and drinking the spiked cocktail so that he’d become aware of such dangers was a good idea. That was half of the reason why Lei-Lei made this drink.</p>

      <p>The other half, on the other hand...</p>

      <p>“Today’s poison sure is greaat,” she said.</p>

      <p>...was the fact that, to her tastes, <em>drinks were better when they had poison in them</em>.</p>

      <p>Given that her drinks received great feedback, that wasn’t exactly wrong.</p>

      <p>“It’s done!” she cried.</p>

      <p>And so, she poured the drink into glasses and brought them over to today’s guests of honor — Ray and Nemesis.</p>

      <p>“This isn’t alcohol, okaaay?” she said. “It’s just juice, okaaay? Drink it and you’ll just feel as light as air, okaaay?”</p>

      <h2>Cheshire’s Cooking</h2>

      <p><em>???</em></p>

      <p>A strange animal was moving around in a certain space. It had two arms and two legs, but its entire body was covered in a costume that seemed much like a space suit. The space didn’t have an up, down, left or right, making it appear like the creature was doing something in the vacuum outside a space station. Contrary to the appearances, however, it wasn’t doing anything related to space repairs or experiments. It was actually mixing flour with eggs to make dough, which it then kneaded, cut, and began baking in the oven.</p>

      <p>To be blunt, it was baking cookies. The “it” that did that while wearing a space suit for some reason was actually… Control AI No. 13, Cheshire.</p>

      <p>“Meow meow meow meow...” it sang.</p>

      <p>The day before, when Ray and Nemesis had accidentally paid a visit to his workplace, he had offered them his tea and cookies. However, Nemesis had eaten far more than he could ever have expected, completely emptying all the cookies he had stored in his time-stopping inventory. Due to that, he was now baking new cookies, which was something he hadn’t done in a long time. Also, the space suit he wore was nothing but a means to protect the cookies from being covered in his hair.</p>

      <p>A bandana might’ve been enough for humans, but Cheshire — a cat — had to go the extra mile. This problem wasn’t exclusive to Cheshire, either. Most long-haired tians and Guardians had to be considerate about it, too. He probably could’ve made the cookies after creating a more appropriate avatar for himself. However, since Cheshire has been making cookies with this body for a long time, he believed that changing his avatar would affect the quality of the end result. He was particularly picky about the circumstances of his cookie making. Even his space suit was made specifically for this purpose.</p>

      <p>Also, though this particular space had only one Cheshire, there were many more of them doing the exact same thing in other similar spaces. As a result, the amount of cookies he was making was far too great for him alone, but since it was all going to the time-stopping inventory, there was no problem, no matter how much of them he made. In fact, he even believed that it was best to make a great amount at once. However, he still felt like he’d made a bit too much. Since he’d had processing power to spare, he had dedicated 1,000 of his copies to this task. Due to that, the number cookies he’d made was so great that one large warehouse wouldn’t be enough for them. Even Cheshire’s inventory had its limit, so he had to find a way to take care of them that didn’t involve eating them.</p>

      <p>“But what is there for me to doo...? Oh.”</p>

      <p>At that moment, he remembered the exchange he’d had with Ray and Nemesis. Nemesis had suggested that Cheshire should sell his cookies in the marketplace. Cheshire had said that he’d think about it, and now that he had such an abundance of cookies, it seemed like a particularly good idea.</p>

      <p>“The market, eh...? Good idea.”</p>

      <p>And so, he quickly began doing what he had to.</p>

      <p class="centerp section-marking">◇</p>

      <p>A few days later, a bipedal cat appeared in the capital and began selling cookies, which both looked and tasted delicious. After selling all the cookies it had, the “cookie-selling cat” disappeared somewhere, becoming an urban legend in both the capital and online discussion boards.</p>

      <h2>Figaro and Cooking</h2>

      <p><em>Tomb Labyrinth</em></p>

      <p>It might be hard for those living in developed countries to understand, but there were times when people couldn’t get food even if they wanted it.</p>

      <p>An <em>Infinite Dendrogram</em> player going by the name of “Figaro,” for instance, didn’t know what it was like to go hungry in real life. However, he was now starting to understand it. That was because he’d lost all his food while exploring the Tomb Labyrinth.</p>

      <p>“How unlucky,” he sighed. “I had no idea that such a monster existed.” Though he’d visited the dungeon many times before, the monster he’d encountered had been completely new to him. It had dropped a box, so it had clearly been a boss monster. However, he hadn’t gotten a special reward from beating it, so it hadn’t been a UBM. Thus, Figaro could only assume that it had been merely a rare encounter.</p>

      <p>During the battle, the monster had released a vaporous, colored breath which didn’t seem to do any damage. Figaro hadn’t had much trouble beating it, but it’d left behind a problem which he’d only noticed after taking the drops.</p>

      <p>Once Figaro had opened his inventory to store the items, a disgusting smell came from the inside and assaulted his nostrils. He’d looked inside and noticed that the food he had was extremely discolored. Organic drops such as skins and meat were affected, too. By using Identification, he’d found that all and any items that could be used as food had become poisonous.</p>

      <p>Not only would they give him debuffs — they would sure taste awful, as well. Clearly, the monster’s skill was nothing short of annoying.</p>

      <p>“...Man, I’m hungry,” he complained.</p>

      <p>Which was only natural, given that he’d been exploring the dungeon for almost ten hours nonstop. Though he could easily log out and eat some real food, his avatar’s hunger was separate. If he continued on without eating anything, he would soon be tortured by a burdening emptiness in his stomach. Normally one would leave, restock on food, and try raiding the dungeon all over again.</p>

      <p>Keyword: “Normally.”</p>

      <p>“Okay, the accessories that nullify Poison, Weakness, and Food Poisoning are...”</p>

      <p>However, the man in question was Over Gladiator Figaro.</p>

      <p>He was the long-standing king of duels and the one they described as “the biggest meathead among all four of the kingdom’s Superiors.” Though his looks — which would’ve fit a noble youth — made it hard to imagine, his solutions to any problems he was faced with were extremely simplistic. This problem was no exception.</p>

      <p>“This should do.”</p>

      <p>He said that as he finished replacing the rings on his fingers with new ones he’d taken out of his inventory, all of which gave him a resistance to disease-based debuffs. He then reached into his inventory once again and took out the poisoned food.</p>

      <p>“Time to eat, then.”</p>

      <p>And that he did, seemingly not caring about the food’s state. As the debuffs were forcefully nullified by his accessories, he continued eating the disgusting food while ignoring the stomach-turning taste of the poison. He didn’t even scowl or flinch.</p>

      <p>Figaro continued swallowing the food that bordered on biological weaponry as if to exemplify the “anything goes as long as you get the nutrients and leave with a full stomach” mentality.</p>

      <p>“This should let me last a while longer,” he said, sighing.</p>

      <p>The meathead who was ready for any and all debuffs finished eating the rotten food without any trouble whatsoever and made his way towards the lower levels of the Tomb Labyrinth.</p>

      <p>But his perseverance in the face of foul food was only natural, because this meathead was English.</p>

      <h2>Reiji’s Cooking</h2>

      <p><em>Reiji Mukudori</em></p>

      <p>After the mysterious player killer in Noz Forest gave me the death penalty, I spent the day doing things such as taking care of my baggage and filling out my college documents, all of which was done by the time it was evening. My death penalty was going to last until tomorrow morning, so — since I didn’t have much to do — I’d decided to make myself a slightly more complex dinner than usual. Sure, I converged on a simple chicken stew, but I made sure to be careful and meticulous in my cooking.</p>

      <p>“I think I’m doing this right,” I said...</p>

      <p>After I left my nearly-completed stew to boil under a weak flame, I had the time to pick up my portable terminal and take a look at <em>MMO Journal Planter.</em> That was the name of a news site focused on MMOs, and — naturally — it covered a lot of <em>Dendro</em>-related news.</p>

      <p>“...Hm?” One of the headlines there caught my attention. It said “<em>Today’s Dendro:</em> The <em>Dendro</em> Diet — Super Popular Among Young Girls!” Curious about what that referred to, I opened the article, which went as such:</p>

      <p>“<em>Today’s Dendro</em> is brought to you by the <em>Dendro</em> reporting writer, A! This one is for the girls who have yet to start <em>Dendro!</em> Yes, you ladies looking at your screens!</p>

      <p>“‘I want to become thinner, but I can’t contain my appetite!’</p>

      <p>“‘I want to eat more tasty things while not minding the calories!’</p>

      <p>“Do those words seem relatable to you? Then I highly recommend taking up the super popular <em>Dendro</em> Diet! Inside <em>Infinite Dendrogram</em> — a VRMMO — you won’t get fat, no matter how much you eat! The food is delicious and — with rewards from quests and the like — you will never have to worry about not having the money for it! You can choose to eat lots of tasty things in <em>Dendro</em> while being modest with your real food! With that, you will soon have a well-proportioned, thin body!</p>

      <p>“This hit VRMMO — <em>Infinite Dendrogram</em> — is being sold in every game shop in the country!”</p>

      <p>“Hm...” I murmured.</p>

      <p>The article sounded like an ad for a supplement with dubious effects. It <em>was</em> true that <em>Dendro</em>’s food was great, though. Also, the dinner I’d made yesterday was simple, so it kinda applied to me, as well.</p>

      <p>“But I still think that a person’s real diet should also be tasty and nutritious and... oh.”</p>

      <p>My stew was done boiling, so I began eating it alongside some bread and salad. <em>Well, this came out rather well,</em> I thought.</p>

      <p>“Not as good as my brother’s, but yeah.”</p>

      <p><em>Again, though, it’s not good to limit all your good food eating to </em>Dendro<em> and neglecting to do so in reality,</em> I thought while remembering the article I’d just read.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Later on...</em></p>

      <p>“Hey, Jabberwock.”</p>

      <p>“What is it, No. 13?”</p>

      <p>“There’s a publicity article that treats <em>Infinite Dendrogram</em> like a dubious supplement... and it says that it was written by the <em>Dendro</em> reporting writer, A,” said No. 13.</p>

      <p>“That’s No. 1.”</p>

      <p>“...She <em>is</em> doing her job, right?”</p>

      <p>“Yes. In fact, she is busier than all of us. However, since No. 1 excels in processing power, doing something extra isn’t difficult,” explained Jabberwock.</p>

      <p>“That seems fine, but... won’t this article cause misunderstandings?”</p>

      <p>“It’s not lying, so it should all be fine.”</p>

      <p>“...If you say sooo.”</p>

      <p>The number of female users slightly increased, but it was unknown whether it was related to the article.</p>
    </div>
  </section>
</body>
</html>