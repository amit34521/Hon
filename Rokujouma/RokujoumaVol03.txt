<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="default-style"/>
  <title>Invaders of the Rokujouma!? Volume 3</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css"/>
  <meta content="urn:uuid:470dd738-5f1b-4904-b95a-8930ccba8c1b" name="Adept.expected.resource"/>
</head>

<body>
  <section epub:type="bodymatter chapter" id="chapter1">
    <div class="main">
      <h1>Games and the Lottery</h1>

      <h2>Friday, July 10th</h2>

      <p>Entering July, summer slowly began to find its way into room 106 where Koutarou and the others lived. The crying cicadas could be heard coming from the trees planted along the road, and the strong sunlight came beaming through the window, raising the temperature. The temperature, however, was even higher inside with seven people crowding into the small six tatami mat room.</p>

      <p>“Waaaaah! Blue Knight dieeeeed!”</p>

      <p>“Well, if you recklessly keep pushing deep into the dungeon, it was bound to happen eventually.”</p>

      <p>“Tell me, pleb! How do I save Blue Knight?!”</p>

      <p>“Form a rescue party and get to where Blue Knight and the others died.”</p>

      <p>“All right, I’ll give it a try! You stay here and give me advice when appropriate, pleb!”</p>

      <p>“I got it, so just calm down a little. It’s just a game.”</p>

      <p>“How could I calm down?! My Blue Knight just died, you know! Ahh, getting lazy and calling all the magicians Yurika backfired!”</p>

      <p>“That’s a false accusation!”</p>

      <p>Raising the temperature in the room even more was the worn-out console hooked up to the TV. Koutarou had gotten his parents to buy it for him when he was young, and even though it was now outdated, he had gotten so attached to it that he brought it with him to room 106. Ruth had found it while cleaning the wardrobe the other day, which is how it ended up where it currently was.</p>

      <p>“You’ll need party members that’ll be useful right away for a rescue mission, so don’t bring advanced classes with you. You won’t need a thief either.”</p>

      <p>“And what about the equipment?”</p>

      <p>“It’s common for the rescue party to get stranded as well, so use the best equipment that you have available.”</p>

      <p>“I see. Then let’s go!”</p>

      <p>The one showing interest in the console was Theia, having come from a different planet. Initially she was timid about it, but as she picked up a controller she behaved just like a kid playing a game for the first time. And ever since, she had Koutarou accompany her as she went on adventures.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert1">
    <img alt="insert1" class="insert" src="../Images/Insert1.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter11">
    <div class="main">
      <p>“But to think Theia would be interested in a game this old...”</p>

      <p>Sanae was amazed by Theia’s behavior. Sanae gave her a dirty look as she watched her sit there, gripping the controller in excitement.</p>

      <p>“Heehee. Her Highness does love competition, so she likes most games, but this one is special.”</p>

      <p>“What do you mean?”</p>

      <p>On the other hand, Ruth and Kiriha were warmly watching over her. The two of them were sitting down at the table drinking tea while observing Koutarou and Theia playing games.</p>

      <p>“Actually, back when Her Highness was in school, her research theme was computer history. That’s why she has a special interest in early computers like this one.”</p>

      <p>“A research theme... at that age?”</p>

      <p>Shizuka looked surprised. Having nothing to do, she had come to room 106 and joined Ruth and Kiriha for some tea.</p>

      <p>“The royalty of Forthorthe has always been encouraged to study liberal and military arts, so it’s tradition to finish their university research projects before starting their trial.”</p>

      <p>“So you mean that’s a custom in Forthorthe...? I guess societal expectations are high, no matter where you go.”</p>

      <p>Kiriha brought her teacup to her lips as she smiled wryly. She had her own opinions on the matter of customs, but chose to stay silent. Ruth didn’t seem notice the slight change in her expression.</p>

      <p>“Hmm, being a princess sounds really rough...”</p>

      <p>Shizuka also sipped on her tea as she admired Theia. In the warm room, the cold tea was especially refreshing.</p>

      <p>“Out of the vast history of computers, Her Highness chose to focus on the history of games.”</p>

      <p>What did it mean to use computers to play? That had been the starting point for Theia’s study, but her historical research gave her an insight into modern technology and allowed her to predict future developments. What had started with a commentary of a single game resulted in a thorough discussion of media theory. Her comprehensive research received high acclaim in the university.</p>

      <p>“Forthorthe is rich with over two millennia of history, so even the oldest game still in existence is far more advanced than what you can find on this planet. That’s why these primitive Earth games are almost like a legendary treasure for Her Highness.”</p>

      <p>“I see. So Theia-dono doesn’t just love games as a hobby; it’s also an academic interest.”</p>

      <p>“Exactly.”</p>

      <p>“Hahh... I’m glad I wasn’t born a princess.”</p>

      <p>As Kiriha, Ruth, and Shizuka were chatting, Theia and Koutarou’s adventures continued onscreen.</p>

      <p>“Hey, Tulip. Yurika B is about to die.”</p>

      <p>“I don’t care. Just give up on her. I don’t have the potions to spare.”</p>

      <p>“I guess that’s fine.”</p>

      <p>“It’s not fine at all! Please heal her!”</p>

      <p>“I refuse.”</p>

      <p>“Whyyyyy?!”</p>

      <p>Before anyone knew it, Yurika was tagging along with Theia and Koutarou on their adventure. The three of them were glued to the TV, fussing over what to do.</p>

      <p>“And you too, Koutarou. You’re already a high school student. What are you doing...?”</p>

      <p>Sanae acted amazed by the three of them, but she was really just unhappy that she was being left out. She wasn’t mature enough to speak up and join the group.</p>

      <p>“I quite enjoy Her Highness and Satomi-sama getting along like this.”</p>

      <p>“They’re both just kids, ugh...”</p>

      <p>She wanted to join in, but she couldn’t quite bring herself to do it. Instead, she had been begrudgingly glaring at Koutarou’s back for quite a while with her cheeks puffed up. Despite what she was saying, Sanae was the most childish of them all.</p>

      <p>“A magician without mana is useless, just like you.”</p>

      <p>“She’ll be useful! Just stay at an inn and recover her mana, please! And I’m not useless either! I really am a magical girl!”</p>

      <p>“A magical girl, right...”</p>

      <p>As Yurika desperately tried to plead her case, Koutarou gave her an icy cold stare.</p>

      <p>“Wh-What?”</p>

      <p>“Why don’t you get a grip on reality already?”</p>

      <p>Koutarou looked away from the TV and turned his attention to Yurika. Although she flinched at his cold look, she still desperately objected.</p>

      <p>“That is the reality! I really am a magical girl!”</p>

      <p>“It’s already July, but those ‘enemies’ you mentioned are nowhere to be seen.”</p>

      <p>“They’ll come! They’ll definitely show up!”</p>

      <p>Sensing something earnest in her frantic appeal, something crossed Koutarou’s mind.</p>

      <p>“...Does this have anything to do with next month’s Comiha?”</p>

      <p>He meant the Comic Heart Network, or Comiha for short. It was a manga expo that would be held next month, and it was the largest event in the world for cosplayers. Koutarou figured Yurika was getting so desperate because she and her cosplay friends would be having a showdown at the event.</p>

      <p>“It has nothing to do with that! How does this always come back to cosplay?!”</p>

      <p>“That’s because it’s cosplay no matter how you look at it,” Sanae butted in, but with a gentle look of sympathy this time.</p>

      <p>“D-Don’t look at me with pity, please!”</p>

      <p>“But I <em>do</em> pity you.”</p>

      <p>“Well, just hold on, Sanae.”</p>

      <p>“Koutarou?”</p>

      <p>“Yurika, I understand why you can’t accept things like this, so let me make it perfectly clear.”</p>

      <p>As he said that, Koutarou started shoving his hand into his clothes like he was searching for something.</p>

      <p>“What? What are you doing?”</p>

      <p>Interested, Theia tossed aside her controller and crawled over to the tea table.</p>

      <p>“Ah, found them...”</p>

      <p>Koutarou pulled two photos out from one of his pockets and put them on top of the table. The other six—Yurika, Sanae, Ruth, Theia, Shizuka, and Kiriha—all peeked at the photographs.</p>

      <p>“Ah, it’s a picture of me!”</p>

      <p>“And that girl. What was her name again?”</p>

      <p>“That’s Sakuraba-sama, the girl who won at the sports festival.”</p>

      <p>“The sports festival... All that comes to mind is the disgrace I suffered...”</p>

      <p>“This photograph is well shot.”</p>

      <p>“So what about these two photos, Koutarou?”</p>

      <p>Koutarou pointed to the pictures of Yurika and Harumi and said, “Let’s just say that one of these two girls is a magical girl.”</p>

      <p>“All right, and then?”</p>

      <p>“I’m not pretending! I really am a magical girl!”</p>

      <p>“Calm down. Just bear with me.”</p>

      <p>“Uh, I can’t agree, but...”</p>

      <p>Yurika couldn’t accept what Koutarou was saying, but she reluctantly withdrew. With her backing down, Koutarou continued.</p>

      <p>“Let’s say one of them is a magical girl and the other one is a normal girl. With that in mind, I have a question for you all: Who do you think is the magical girl?”</p>

      <p>Everyone but Yurika pointed at the same picture.</p>

      <p>“This is the one you’d expect.”</p>

      <p>“From personal data, I can tell she is mentally strong.”</p>

      <p>“It feels like I’m admitting defeat, which is incredibly displeasing, but out of the two, it would have to be her.”</p>

      <p>“I feel like this person has a mysterious aura about her.”</p>

      <p>“I’m sorry, Nijino-san...”</p>

      <p>The other five girls all pointed to Harumi’s photo without any hint of hesitation.</p>

      <p>“Ugh...”</p>

      <p>Instead, Yurika was the one hesitating.</p>

      <p>“Th-This is unfair.”</p>

      <p>If it was anyone else, Yurika would have picked herself immediately. But this was Harumi, someone she admired. Yurika couldn’t choose.</p>

      <p>“I-I’d think sh-she would be the magical girl t-too...”</p>

      <p>Yurika’s trembling finger slowly pointed at Harumi’s photograph. Like her hand, her voice was trembling. Her expression was unpleasantly distorted. Yurika had to admit it too. Even though she might not be able to use magic, Harumi was far more like a magical girl than she was. It broke her heart to do it, but Yurika pointed at Harumi’s picture instead of her own.</p>

      <p>“Do you understand now, Yurika? Whether you have magic powers or not has nothing to do with it.”</p>

      <p>“I know... Even I know that I’m not suited for this job...”</p>

      <p>Yurika weakly stood herself up.</p>

      <p>“If only the enemy would show up... If only you could see me fight... Then you’d believe me... Hurry up and attack, Darkness Rainbow... Hurry up and disturb the peace and save me... Waaah haa haa...”</p>

      <p>Tears streamed down Yurika’s cheeks.</p>

      <p>“I believe in love and courage...! What’s important are the bonds you make...”</p>

      <p>Yurika started mumbling a song and disappeared into the wardrobe.</p>

      <p>“I know this is a strange thing to say, but... Satomi-kun, couldn’t you just believe her?”</p>

      <p>Hearing the sobbing from the wardrobe, Shizuka couldn’t help feeling a little sorry for her.</p>

      <p>“You want me to believe her when she’s asking for the enemy to show up and cause trouble?”</p>

      <p>In contrast to Shizuka, Sanae’s impression was deadpan.</p>

      <p>“She does call herself a magical girl of love and courage, after all...”</p>

      <p>If it were Harumi, she would never wish for enemies to appear. In the end, the real problem was Yurika’s personality. She just wasn’t acting like a heroine of justice.</p>

      <p>“By the way, Koutarou...”</p>

      <p>“Hmm?”</p>

      <p>As Sanae called out to him, Koutarou looked up from the photographs on the tea table.</p>

      <p>“Where’d you get those pictures?”</p>

      <p>“Wh-What does it matter?!”</p>

      <p>Koutarou hurriedly shoved the two photos back in his pocket.</p>

      <p>“It does matter! You showed Yurika’s picture to the cosclub, but where’d you get Harumi’s photograph from? You pervert!”</p>

      <p>“I-It’s nothing like that!”</p>

      <p>“Then spit it out! When did you take that picture? You’ve never taken my picture before!”</p>

      <p>Agitated, Sanae started choking Koutarou as per her usual.</p>

      <p>“E-Even if I take a picture of you, it’ll just turn into a ghost photo!”</p>

      <p>“I don’t care! This is humiliating!”</p>

      <p>“S-Stop it, Sanae!”</p>

      <p>“Take a picture of meeeee, damn iiiiit! In fact, just go on and say, ‘you’re so cute, Sanae! Let’s try a more daring pose!’ You know you want to!”</p>

      <p>“D-Don’t get so full of yourself!”</p>

      <p>In order to combat Sanae, Koutarou brought his right fist towards her face. Clenched inside of it was the usual “evil spirits begone” charm.</p>

      <p>“Hah! Like I’ll fall for the same trick over and over again!”</p>

      <p>However, Sanae bobbed her head back and forth like a boxer, dodging Koutarou’s fist.</p>

      <p>“C-Curse youuu!”</p>

      <p>Because he was being choked, Koutarou was moving much slower than normal. And since he’d used the charm to blow Sanae away several times before, she had finally learned her lesson.</p>

      <p>“Oh my. You always get along so well, Satomi-kun, Sanae-chan.”</p>

      <p>“You look just like siblings to me. As an only child, I’m quite envious.”</p>

      <p>Shizuka and Ruth watched over the bickering two with smiles on their faces. Though Shizuka was strict about fighting in the room, she left them be. To her, this didn’t really count as fighting.</p>

      <p>“Hmph, they’re both just the same mental age. They’re children,” Theia spat irritatedly.</p>

      <p>She was unhappy too now. She picked up the controller again, but no longer had the same delighted expression as before.</p>

      <p>“...I see. Things are getting quite complicated.”</p>

      <p>Kiriha smiled as she shifted her gaze between Theia and Sanae. When it came to Koutarou, both girls would get really stubborn. Kiriha could clearly feel it.</p>

      <p>“Nyahahaha! How dare you hurt a maiden’s feelings?! As punishment for your sin, I’ll choke you out!”</p>

      <p>“A-As if I’d let you...!”</p>

      <p>Bam!</p>

      <p>“Ack!”</p>

      <p>But in the end, Koutarou held the advantage. He wasn’t holding a charm in just his right hand—his left was armed as well. While distracted by his right fist, Sanae was easily blown away by his left—the one holding the charm with “family safety” embroidered on it with golden thread.</p>

      <p>“Hah! Don’t expect me to always use the same trick, you fool.”</p>

      <p>“D-Damn it... Using two is unfair... Ugh...”</p>

      <p>Sanae collapsed onto the tatami mat with smoke rising from her head.</p>

      <p>“Thank you, grandma!”</p>

      <p>Koutarou paid her no mind. He was too busy celebrating his victory, shouting thanks to his grandmother who lived in the countryside.</p>

      <p>“Well then, it’s about time to go shopping.”</p>

      <p>As Shizuka watched Koutarou and Sanae finish playing, she drank the last of her tea and stood up. Since this was an everyday occurrence, she wasn’t worried about Sanae at all.</p>

      <p>“Ah, I will go too! Let’s go together.”</p>

      <p>Ruth also stood up, quickly grabbing Koutarou’s wallet next to the phone. Koutarou trusted her completely, so she was in charge of the budget for room 106.</p>

      <p>“Are you going shopping, Landlord-san, Ruth-san?”</p>

      <p>“Yes, the limited time sale at the supermarket by the station is about to begin.”</p>

      <p>“I’ll do my best not to lose out to the neighborhood wives.”</p>

      <p>Seeing Shizuka and Ruth smiling, Koutarou also got up.</p>

      <p>“I’ll come and carry the bags. I’ve got nothing better to do.”</p>

      <p>“W-Wait just a second, pleb! You’re choosing shopping over an adventure with your master?!”</p>

      <p>Flustered, Theia shook her controller as she tried to stop Koutarou. However, he simply shook his head.</p>

      <p>“Sorry, Tulip. We’ll continue when I get back. You can’t get by in life just on playing games.”</p>

      <p>“Hmph...”</p>

      <p>Theia looked up at Koutarou, dissatisfied. But it wasn’t her normal piercing stare. There was a different nuance to it.</p>

      <p>“Are you sure, Satomi-sama? I could go on my own...”</p>

      <p>Ruth was observant of her master’s behavior and tried to persuade Koutarou to stay behind.</p>

      <p>“No can do. If my old man finds out I’m leaving all the housework to girls, I’ll get an earful.”</p>

      <p>Koutarou trusted Ruth with the housekeeping, but he wasn’t going to let her do it all by herself.</p>

      <p>“...”</p>

      <p>Realizing that Koutarou wasn’t going to change his mind, Theia turned her back on him.</p>

      <p>“That’s not what I meant...”</p>

      <p>“Koutarou, are you going shopping?”</p>

      <p>“Yeah.”</p>

      <p>“I’ll go too! I want to eat takoyaki!”</p>

      <p>Ruth continued trying to persuade Koutarou, but things got more complicated after Sanae joined the conversation.</p>

      <p>“Well, then, let’s go.”</p>

      <p>“...Okay.”</p>

      <p>“Takoyaki! Takoyaki!”</p>

      <p>“Is food all you ever think about, Sanae?”</p>

      <p>“It’s fine! I’m still a growing girl!”</p>

      <p>“No, you’re already dead.”</p>

      <p>With Shizuka in the lead, Koutarou and Sanae left room 106. Watching them go, Ruth called out to Theia, who was playing games by herself.</p>

      <p>“I’ll be taking my leave for now, Your Highness.”</p>

      <p>“...Yeah...”</p>

      <p>Theia’s short answer made Ruth wonder what expression she was making right now, but it was impossible to tell with her back turned towards her.</p>

      <p><em>Your Highness...</em></p>

      <p>Ruth backed away and left room 106 with the others. That left only two girls in the six mat room now: Theia who was playing a game, and Kiriha who was pouring more cold tea into her cup.</p>

      <p>For a while, only the sounds of Theia’s game could be heard in the room. But roughly ten minutes after Koutarou and the others had left, Kiriha opened her mouth.</p>

      <p>“Are you fine with not going with them, Theia-dono?”</p>

      <p>After hearing Kiriha’s question, Theia’s hands stopped moving.</p>

      <p>“H-Hmph! Why should I have to do something like that? I’m busy playing games!”</p>

      <p>“I see. Well, that’s fine...”</p>

      <p>“It’s none of your business!”</p>

      <p>Theia shouted at Kiriha to hide how shaken she was inside, and quickly returned to playing the game. Just like she said, she was doing her best to keep herself busy with the game. Her hands moved furiously on the controller.</p>

      <p><em>However...</em></p>

      <p>However, it didn’t look like Theia was enjoying her game to Kiriha.<br/><br/></p>

      <p>“But to think Tulip loves games that much...”</p>

      <p>“She’s just a kid.”</p>

      <p>“There, there, Sanae-chan.”</p>

      <p>Koutarou and the others were walking through the mall while talking about Theia. They had already finished shopping, and Koutarou was carrying most of their bags. They were now on their way to the edge of the mall in order to use the lottery ticket they had gotten at the supermarket checkout.</p>

      <p>Until the merging of Kisshou City and Harukaze City, the local mall was practically a ghost town. But thanks to the newly constructed city hall and highway, it had regained much of its past liveliness. In order to entice new customers, the mall was in the middle of a lottery campaign.</p>

      <p>“Her Highness’s love for games is largely due to her mother’s influence.”</p>

      <p>“Theia’s... mother?”</p>

      <p>“Yes. When Her Highness’s mother—the current empress, Her Majesty Elfaria—was still a student, her research theme was archeology. It was because of that that Her Highness took an interest in computers of the past and began her own studies.”</p>

      <p>Inspired by her mother’s work at an early age, Theia spent a lot of time when she was young playing with computers. The history of computers and their technology was something that came up frequently in her mother’s writing, and Theia had a natural talent for using them. Her own research organically stemmed from there.</p>

      <p>“But choosing games as her theme was just because of Theia-chan’s hobby, right?”</p>

      <p>“Yes, that’s right.”</p>

      <p>“Well, she does loves competition...”</p>

      <p>Out of the vast history of computers, Theia had taken a special interest in game software. Being as hot-blooded as she was, it was a natural choice for her. Koutarou was the same in that regard, so he understood her passion.</p>

      <p>“But that is also the reason for her uneasiness. Her Highness is truly a shy and gentle person.”</p>

      <p>“...Huh?”</p>

      <p>What Ruth said left Koutarou quite perplexed.</p>

      <p><em>Shy and gentle? Theia?</em></p>

      <p>To Koutarou, Theia seemed like an arrogant and selfish girl. But Ruth was claiming the opposite.</p>

      <p>“With Forthorthe’s system for selecting successors being what it is, there’s been a power struggle within the royal families since ancient times. Even the legend of the Blue Knight was born of that power struggle.”</p>

      <p>Ruth continued with a serious, almost grave expression on her face. Looking into her eyes, Koutarou believed she was telling the truth.</p>

      <p>“Her Highness is the current empress’s only child. But as the seventh princess, she has many rivals.”</p>

      <p>Being the empress’s child didn’t mean Theia was guaranteed to inherit throne. Where she was from, anyone born to any of the royal families was given an equal chance of becoming the heir. They just had to complete their trial before anyone else. Because of that, the royal families held a strong sense of rivalry with each other.</p>

      <p>“On top of that, being a conservative and unable to compromise with the military, there are always suspicious rumors regarding Her Majesty Elfaria.”</p>

      <p>“Her mother...”</p>

      <p>“That is why Her Highness has always had to flaunt herself and her abilities since she was a child. It is to protect herself and her mother. She cannot afford to lose, whether it is in a game or in a fight.”</p>

      <p>Since Ruth was the only one who had watched over Theia as she fought daily, her words carried great weight now.</p>

      <p><em>If that’s true, she’s been defending everything she had using force...</em></p>

      <p>Koutarou felt like he understood Theia a little better after listening to Ruth’s explanation.</p>

      <p>“Her Highness probably named her personal warship the Blue Knight for the same reason. She probably wants to defend her mother, just like the Blue Knight of legend.”</p>

      <p>“The Blue Knight, huh?”</p>

      <p>That was the name Theia always called out to summon her weapons. Apparently that was the reason why.</p>

      <p><em>I wonder if it would have been better to just stay at home and play games with her instead of going shopping...</em></p>

      <p>That sudden thought entered Koutarou’s mind. He remembered that Theia had named the game’s hero Blue Knight too. However, the very next moment, he shook his head.</p>

      <p><em>No, no! What am I thinking, being compassionate?! I need to chase her out! I can’t bother with her feelings! What am I doing getting along with her?!</em></p>

      <p>As Koutarou puzzled over his own feelings, Ruth smiled at him. The evening sun lit up her face, giving her smile a warm and gentle impression.</p>

      <p>“But Her Highness has changed a bit since she came to this planet. And from time to time, she behaves like a girl of her age should. This is all thanks to Satomi-sama.”</p>

      <p>“M-Me?”</p>

      <p>“Yes.”</p>

      <p>Koutarou stared at her in wonder as Ruth smiled and nodded.</p>

      <p>“You have no relationship with Forthorthe. Because of that, you have no reason to fight with her. There is no worry of an assassination attempt. Satomi-sama, you are the first person Her Highness has met that she can trust in that way.”</p>

      <p>“Well, I don’t care about her status or position. But when it comes to room 106, there’s a conflict of interest.”</p>

      <p>“Koutarou... Theia probably wants an opponent she can fight with.”</p>

      <p>Sanae, who had been quiet up until now, finally spoke up. But for some reason, she was in a bad mood. After saying her piece, she sulkily looked away.</p>

      <p>“I think it’s just as Sanae-sama said. Her Highness has never had an equal she could quarrel with before.”</p>

      <p>“Someone she can fight with, huh? Well, in that case, I can kind of understand.”</p>

      <p>In Koutarou’s case, it would be the difference between having Kenji in his life or not. Having an equal he could lock horns with helped him keep his zest for life.</p>

      <p>“That’s why I want Satomi-sama to continue defending room 106.”</p>

      <p>“Huh?”</p>

      <p>“What?!”</p>

      <p>The words out of Ruth’s mouth were beyond unexpected. Koutarou had been surprised by what she said before, but this completely flummoxed him. It didn’t even sound like something someone who was supposed to be Theia’s ally should be saying. But it wasn’t just Koutarou and Sanae—even Shizuka was surprised.</p>

      <p>“Why is that, Ruth-san?”</p>

      <p>Koutarou and Sanae’s jaws were on the floor, so instead Shizuka asked Ruth what was on everyone’s mind.</p>

      <p>Ruth smiled a little and calmly explained herself, “Her Highness gaining control of room 106 would mean returning to Forthorthe. It would also mean returning to a life where she can never let her guard down. Before that, I want Her Highness to be able to live like a normal girl for a while.”</p>

      <p>Those were not the words of Theia’s vassal, but of her childhood friend. It was what Ruth wished for from the bottom of her heart. Ruth wanted Theia to be happy more than she wanted her to become empress.</p>

      <p>“Hmm, that’s quite the responsibility, Satomi-kun.” Shizuka smiled and patted Koutarou’s back. “If you lose, Theia will go home, so hang in there!”</p>

      <p>“I had no intention of losing whatsoever. That room is mine.”</p>

      <p>After learning Theia’s situation, the thought of giving in did cross Koutarou’s mind, but after hearing Ruth out, he felt the exact opposite.</p>

      <p><em>It’s fine the way it is now! That room is mine!</em></p>

      <p>As Ruth said, Koutarou holding out was best for Theia, so he had no reason to hesitate. Things were fine the way they were, and the end results would be better for everyone.</p>

      <p>“Well said, Satomi-kun! As expected from a real man! I’ll support you from the shadows!”</p>

      <p>“Heh heh heh! Bwahahaha! That’s right! What was I thinking? Even considering losing isn’t very manly of me!”</p>

      <p>Koutarou was never good with complicated matters, but setting his heart on something gave him the motivation he needed.</p>

      <p>“Please continue taking care of Her Highness, Satomi-sama.”</p>

      <p>Ruth bowed deeply towards Koutarou. And when she raised her head again, there were traces of tears in her eyes. Her dewy eyes gleamed orange in the evening sun, leaving a profound impression on Koutarou. They were a symbol of her gratitude to Koutarou and her relief that her childhood friend would be able to spend some more time in peace.</p>

      <p>“I-I’ll beat her to a pulp though.”</p>

      <p>“Yes. Please do.”</p>

      <p><em>She really is beautiful...</em></p>

      <p>Koutarou unintentionally admired Ruth’s expression, her eyes, and her tears. Just the fact that she could smile like that now made Koutarou feel like he had made the right choice. It was a smile from the bottom of her heart.</p>

      <p>“Koutarou... you...”</p>

      <p>Sanae was the only one with a clouded expression among the group. That was because she could sense the change occurring in Koutarou.</p>

      <p>Sanae had thought it was strange for a while now. Koutarou and Theia never played games together when they first met. But after the end of the sports festival where they’d had to flee Shizuka and Kenji together, they somehow ended up closer. Watching them on a daily basis, Sanae couldn’t help but feel uneasy.</p>

      <p>“Why am I... this...”</p>

      <p>Sanae’s heart throbbed in pain. At first it was barely noticeable, but once she recognized it as pain, it had grown stronger each day. And now as she sensed Koutarou coming around, it felt like being stabbed in the heart with a knife.</p>

      <p>From the day she first felt this pain, Sanae hated getting blown away by Koutarou’s charms. She felt she was being rejected every time he used them against her. It was like Koutarou only thought of her as an evil spirit in his room... even though she knew that was the fact of the matter.</p>

      <p>“What does it matter if Koutarou thinks I’m just an evil spirit? I’ve chased out everyone else who thought like that up until now just the same!” Sanae mumbled to herself.</p>

      <p>But no matter how many times she repeated the same thing, she didn’t feel any better.<br/><br/></p>

      <p>“There it is over there. This way, Ruth-san.”</p>

      <p>“Okay, Satomi-sama.”</p>

      <p>When Koutarou and the others arrived at the lottery tent, it looked like there was no one other than the clerk in charge there. Thanks to that, there was no line.</p>

      <p>“Hmm, it’s not the scratch kind, but the spinning kind.”</p>

      <p>“Looks like there are prizes from first to fifth place.”</p>

      <p>At the lottery tent was a wheel you would spin using a handle to get a marble to fall out. There were five colors of marble—gold, silver, copper, white, and red—each corresponding to a prize. Gold was first prize: tickets to a hot spring. Silver was second prize: an LCD TV. Copper was third prize: a bike. White was fourth prize: a set of canned fruits. And red was the consolation prize: pocket tissues.</p>

      <p>“These prizes sure are luxurious for a lottery in a mall...”</p>

      <p>“Welcome. Would you like to take it for a spin?”</p>

      <p id="note1">The clerk in charge of the lottery was a laid-back man. In the flashy red happi<sup><a href="../Text/chapter1.xhtml#note1">1</a></sup> he was wearing, it was a bit hard to take him seriously.</p>

      <p>“Yeah, we would. But not me. This girl here... Go on, Ruth-san.”</p>

      <p>“Eeek!”</p>

      <p>Koutarou grabbed Ruth’s hand as she was curiously looking at the lottery prizes and pulled her in front of the lottery wheel.</p>

      <p>“S-Satomi-sama?”</p>

      <p>“Since we’re already here, why don’t you give a shot, Ruth-san? Unlike the rest of us, you don’t have a lot of chances at stuff like this.”</p>

      <p>“U-Um...”</p>

      <p>Getting volunteered and dragged over to the lottery like that startled Ruth. But what startled her even more was Koutarou grabbing her hand. Considering she’d just cried in front of him, Ruth was extra conscious of Koutarou, and she couldn’t stop herself from blushing.</p>

      <p>“Is this young lady your girlfriend? I’m envious that you got yourself such a cute girl.”</p>

      <p>“I know, right? I wouldn’t have any complaints if she were my girlfriend either.”</p>

      <p>“I guess it’s not always so easy, huh?”</p>

      <p>“Wahahaha, exactly!”</p>

      <p>“Reality is harsh, isn’t it? Bwahahaha!”</p>

      <p>Koutarou and the clerk were having a good laugh, but Ruth was in no position to do so. Being born in a noble family and growing up spending most of her time in a female exclusive officer’s school, Ruth was unused to men. This was the first time a man had grabbed her hand like that. Moreover, it was Koutarou who had done it, not someone she disliked.</p>

      <p>“I... I...”</p>

      <p>Ruth’s face turned red and she stiffened up just looking at him.</p>

      <p>“Ruth-san? Is something wrong?”</p>

      <p>Koutarou took a peek at Ruth’s face. Staring at each other while standing so close together flustered Ruth even more.</p>

      <p><em>If I leaned forward... we’re close enough... to... k-kiss...</em></p>

      <p>Ruth’s imagination ran wild. Just as she was seconds away from a meltdown, Shizuka freed her from Koutarou’s hand.</p>

      <p>“Satomi-kun, can’t you tell Ruth-san is distressed?”</p>

      <p><em>Ah...</em></p>

      <p>Thanks to that, Ruth’s thoughts began to cool down.</p>

      <p>“You can’t just casually grab a girl’s hand like that!”</p>

      <p>“Ah, s-sorry... I’m just used to being like that with Mackenzie.”</p>

      <p>“Th-The lottery... That’s right, I still have to spin the wheel!”</p>

      <p>As Ruth cooled down, she realized how embarrassing the things she had been thinking were. Thinking about it all over again, she started to heat right back up.</p>

      <p>“Lady, you’ve got enough tickets to spin three times.”</p>

      <p>“O-Okay!”</p>

      <p>Unable to think properly, Ruth spun the lottery wheel with all of her might. The spinning wheel was very similar to how she was feeling on the inside.</p>

      <p>Normally, only one marble would come out at a time, but because it was moving so fast, three marbles dropped out all at once—gold, silver, and copper.</p>

      <p>“Congratulaaatiooons! First prize, second prize, and third prize! It’s a hat trick!”</p>

      <p>The clerk’s voice and the bell he was holding in his hand rang out across the mall. Perhaps as a reward for her usual good behavior, all three marbles were worth good prizes.</p>

      <p>“U-Unbelievable! Is this what you call beginner’s luck?”</p>

      <p>“A complete sweep of first through third prize?!”</p>

      <p>“Ruth, you’re amazing!”</p>

      <p>Koutarou, Shizuka, and Sanae all showered Ruth with compliments and applause for the remarkable feat.</p>

      <p>“A-Again! I-I’m spinning three times!”</p>

      <p>However, Ruth’s mind was still spinning, oblivious to the fact that the lottery was over.<br/><br/></p>

      <p>After the commotion at the lottery died down and Koutarou and the gang had left the mall, the cashier from the supermarket hustled over to the lottery stand.</p>

      <p>“Aniki, how’d it go?”</p>

      <p>The cashier who had come running over was covered in sweat. He was plump and stout, and he was out of breath after having run just the short distance from the supermarket.</p>

      <p>“Hey, Hachi! Rejoice! Everything went just according to plan!”</p>

      <p>The clerk welcomed the cashier with a smile. The lottery clerk was the thinner of the two, but standing next to the fat cashier made him look even slimmer.</p>

      <p>“So the tickets made their ways into their hands?”</p>

      <p>“That’s right. Now all we have to do is wait for them to walk right into our trap!”</p>

      <p>“That’s Aniki for you!”</p>

      <p>The cashier and clerk seemed to know each other. They were apparently pleased at their succeess with something.</p>

      <p>“Although, them taking the LCD TV and bike too was a miscalculation...”</p>

      <p>“Whaaat?! They took those too?!”</p>

      <p>“It was a miscalculation. The girl who was spinning had extraordinary luck.”</p>

      <p>“I can’t believe it... That TV and bike were supposed to be ours after we were done with this fake lottery. Since it’s a fake lottery anyway, it would have been fine to just fill it with red marbles after you put the gold one in...”</p>

      <p>“It’s all about believability! If there weren’t prizes lined up at a lottery, nobody would take it seriously!”</p>

      <p>“I can’t watch TV with believability! And I can’t ride a bike with it either!”</p>

      <p>“But who would’ve guessed they’d get the second and third prize too out of a hundred marbles...”</p>

      <p>“I guess god really does smile on certain people...”</p>

      <p>They looked at each other, lowering their heads and drooping their shoulders. However, the clerk quickly shook his head and pulled himself together, patting the cashier on the shoulder.</p>

      <p>“Don’t lose heart, Hachi! This is nothing!”</p>

      <p>“But Aniki! The TV! The bike!”</p>

      <p>“Did you forget? Once ‘Operation: It’s the Beach, Yahoo! Snatch That Ghost!’ succeeds, we’ll be able to buy as many TVs and bikes as we want.”</p>

      <p>“Th-That’s right! That’s why we did this fake lottery in the first place!”</p>

      <p>“Just think of them as sacrifices for the greater good, Hachi! The die has already been cast!”</p>

      <p>“You’re right! There’s no time to be depressed!”</p>

      <p>It turns out the lottery was a setup created to hand over the hot spring tickets to Koutarou and the girls.</p>

      <p>Having observed Koutarou and the others, the two men took up part-time jobs at the mall. Then they waited for them to come shopping and handed them the fake lottery tickets at the cash register. Finally, the lottery wheel had been rigged to give them first prize. It was all according to their plan to get them to go on a hot spring vacation without being suspicious.</p>

      <p>“Keh heh heh... If she’s bound to the house, she’ll be left there all alone. And even if she can travel, we’ll have plenty of traps at the inn.”</p>

      <p>“You’re such an evildoer, Aniki!”</p>

      <p>Their goal was to capture Sanae. If she followed the others to the hot spring, they’d set out traps to catch her. And if she didn’t, they’d just capture her when nobody else was home. Either way, they’d be able to set the date and place, giving them a much better chance than just trying to capture her without a plan.</p>

      <p>“Once we capture that stupidly stable and high density ghost, we can say good riddance to our life of poverty!”</p>

      <p>“We’ll be able to graduate from exterminating small fry ghosts and join the big leagues!”</p>

      <p>After they captured Sanae, they were going to sell her for a considerable sum.</p>

      <p>“Hip hip hooray!”</p>

      <p>They were ghost hunters, and professionals when it came to ghost extermination.<br/><br/></p>

      <p>“Sorry for disturbing you when you’re celebrating, but I have some truly regrettable information to share.”</p>

      <p>As Koutarou and the others were celebrating their lottery winnings upon returning home, Kiriha greeted them with a serious face.</p>

      <p>“Kiriha-san?”</p>

      <p>“Yurika collapsed.”</p>

      <p>Entering room 106, they could indeed see Yurika collapsed in the middle of the room.</p>

      <p>“Waaaaah, Y-Yurikaaaaa!”</p>

      <p>Seeing Yurika on the floor with her eyes rolled back, Koutarou rushed into the inner room.</p>

      <p>“She went into the wardrobe in this kind of heat, and it seems it was too much for her.”</p>

      <p>Yurika had passed out because she’d shut herself in the wardrobe in the summer heat. Even though it was just the beginning of July, the constant strong sunlight shining into the room had turned it into a sauna.</p>

      <p>“Is she an idiot? Anyone with half a brain would know that’s what would happen.”</p>

      <p>“I wonder why Nijino-san didn’t come out despite the heat...”</p>

      <p>Sanae was dumbfounded and Shizuka tilted her head in confusion. They had both completely forgotten that Yurika had shut herself into the wardrobe because she had gotten depressed.</p>

      <p>“Hey, pull yourself together, Yurika!”</p>

      <p>“S-Shatomi-shan...?”</p>

      <p>As Koutarou shook her shoulders, Yurika opened her eyes. She was covered in sweat and her bangs were matted to her face, obscuring her vision. Koutarou reached out and brushed them aside.</p>

      <p>“I-I’m shorry...”</p>

      <p>“Why are you always this hopeless?”</p>

      <p>“I-I’m fhine. Jusht leave me be. I’ll recover afhter a while.”</p>

      <p>“As if I could do that!”</p>

      <p>Koutarou laid Yurika back down and began preparations to nurse her back to health. He pulled out several towels from the wardrobe, put water and ice in a washing bowl, and grabbed a bottle of drinking water from the fridge. Yurika followed him with her eyes.</p>

      <p>“Yurika, do you have a headache or anything like that?”</p>

      <p>As Koutarou was washing Yurika’s face off with the cold, wet towel, he worriedly stared into her eyes.</p>

      <p>“N-No, I’m fhine.”</p>

      <p>“How about some water? Are you thirsty?”</p>

      <p>“I’ll drink shome afhter a while...”</p>

      <p>“I see... Then just rest for now, Yurika.”</p>

      <p>“Yesh...”</p>

      <p>Yurika couldn’t move her tongue properly, but her answer was clear. With that, Koutarou let out a sigh of relief.</p>

      <p><em>For shome reashon, Shatomi-shan ish being nice...</em></p>

      <p>Yurika wondered why as she smiled at Koutarou.</p>

      <p><em>I can’t get him to believe in magic like alwaysh, but it fheelsh like he’sh treating me better than befhore... Ish it jusht me?</em></p>

      <p>In reality, it wasn’t just Yurika’s imagination. It was the truth. Koutarou was certainly treating her better.</p>

      <p>“Don’t do something stupid that would make Sakuraba-senpai worry.”</p>

      <p>“Yesh... I undershtand...”</p>

      <p>Koutarou had been treating Yurika differently ever since the sports festival. That was because she had unexpectedly made friends with Harumi.</p>

      <p>If she had just been some noisy cosplayer, he would have left her be. But as Harumi’s friend, he couldn’t do that. That was because if something happened to Yurika, it would surely worry Harumi. So Koutarou put the magical girl business aside and treated Yurika as Harumi’s friend. Now he would take care of her when she collapsed or feed her if she got hungry. It wasn’t purely for Yurika’s sake, but as a result, he was treating her better.</p>

      <p>“You really are...”</p>

      <p>Koutarou picked up a nearby fan and tried to cool off Yurika.</p>

      <p>“I’m shorry fhor making you washte your time on me...”</p>

      <p>Yurika gave a weak smile as the cool breeze washed over her. Seeing that, Koutarou figured that she was okay. That was when Ruth approached.</p>

      <p>“Is Yurika-sama all right?”</p>

      <p>As proper as she was, Ruth worried over people like Yurika who practically seemed to self-destruct. She furrowed her brow and peered over at Yurika.</p>

      <p>“I think she’s fine. She’s usually pretty tough.”</p>

      <p>“Shorry fhor making you hworry...”</p>

      <p>“No, I’m just glad you’re okay. We’d be unable to celebrate winning the lottery if you fell ill.”</p>

      <p>Ruth smiled as she pulled out the tickets from her pocket.</p>

      <p>“What’s that?”</p>

      <p>As Ruth returned to the room, Theia put down her controller and came over to Yurika as well.</p>

      <p>“Your Highness, when we went shopping, we got to play a lottery and we won tickets to a hot spring.”</p>

      <p>“Lottery?”</p>

      <p>Princess Theia had no idea what a lottery was and looked at Koutarou accordingly.</p>

      <p>“It’s a campaign to increase sales at the supermarket. Customers have a chance of winning prizes.”</p>

      <p>“Oh, I see...”</p>

      <p>Ruth handed the tickets over to Theia, who examined them thoroughly.</p>

      <p>“That’s right. Why don’t we all go to the hot spring together?” Ruth asked.</p>

      <p>“Are you okay with us tagging along with you, Ruth-san?” Shizuka asked in return.</p>

      <p>Ruth gave her a big nod.</p>

      <p>“There are tickets for six, and Her Highness and myself only make two. Besides, vacations are more fun with more people, and we’re still not used to living on Earth.”</p>

      <p>“You’re going to bring them with us?!”</p>

      <p>Theia tore herself away from the tickets and stared at Ruth wide-eyed.</p>

      <p>“Yes. I think it would be a great idea to leave our daily fights behind us and refresh for a while,” Ruth answered with a smile.</p>

      <p>Theia stared at her for a while before looking at the rest of the people in the room. Ruth, Sanae, Shizuka, Yurika, Kiriha... And when she looked at Koutarou’s face, she slightly blushed and turned away.</p>

      <p>“...Th-They’re your tickets. Do with them as you wish.”</p>

      <p>“Thank you, Your Highness,” said Ruth. She then turned to Koutarou and the others. “So how about it, everyone? Would you like to come with us to the hot spring?”</p>

      <p>“In that case, I’ll gladly tag along!”</p>

      <p>“Me too, me too! I want to jump into the hot spring!”</p>

      <p>“I have no objections either. It’s been a while since I took a break.”</p>

      <p>Shizuka, Sanae, and Kiriha all agreed right away.</p>

      <p>“Ish it okay ifh I come too...?”</p>

      <p>Still lying down, Yurika tentatively raised her hand. As she was shunned daily, she reflexively had to ask.</p>

      <p>“It’s impossible, isn’t it? There are only six tickets,” Sanae said as she looked around the room and counted.</p>

      <p>Sanae, Koutarou, Ruth, Theia, Shizuka, and Kiriha added up to six. There was no room for Yurika.</p>

      <p>“No whaaay...”</p>

      <p>Sanae’s answer brought tears to Yurika’s eyes.</p>

      <p>“Sho you’re shaying magical girlsh can’t go to the hot springsh! Waaah...”</p>

      <p>“In that case, I’ll stay behind. It can be a girls’ vacation.”</p>

      <p>“S-Shatomi-shan, are you shure?!”</p>

      <p>Surprised by Koutarou’s kind offer, Yurika sprang to her feet.</p>

      <p>“I’ve alwaysh known you were a nice person shince we fhirsht met!”</p>

      <p>Yurika’s eyes sparkled as she grabbed Koutarou’s hand and shook it.</p>

      <p>“You sure are selfish...”</p>

      <p>“Eeeehh?! Why can’t we just leave Yurika behind?”</p>

      <p>“We can’t have that. Look carefully. It says there’s only one room. I can’t sleep in the same room as five girls.”</p>

      <p>“He’s right. Satomi-kun. you sure are perceptive...”</p>

      <p>On the ticket there was small writing stating that the six people would share one room.</p>

      <p>“Hmm... May I say something?” Kiriha, who had been thinking the whole time, finally spoke up. “I see no problems going with the seven of us”</p>

      <p>“But Kiriha-san, there are seven of us and only six tickets.”</p>

      <p>“I know. Which is why only six of us will be customers: me, Koutarou, Theia-dono, Ruth, Shizuka, and Yurika. That adds up to six. No problems.”</p>

      <p>“W-Wait a minute! What about me?”</p>

      <p>“...I don’t think the inn can charge for a ghost.”</p>

      <p>There were seven of them in the room, but only six of them needed tickets.</p>

      <p>“Ahahahaha, th-that’s right! I’m a ghost. I completely forgot.”</p>

      <p>“Isn’t that great, Satomi-sama? Now all of us can go.”</p>

      <p>Ruth smiled at Koutarou, but he shook his head.</p>

      <p>“Ruth-san, I really can’t go. You’re all young girls.”</p>

      <p>“What does it matter? It won’t be much different from how we always are.”</p>

      <p>“Yes, it will.”</p>

      <p>Normally only Koutarou and Yurika slept in room 106. And since Yurika slept in the wardrobe, they practically weren’t in the same room.</p>

      <p>“It’ll be fine, Satomi-kun. We’re just sharing a room.”</p>

      <p>“Landlord-san, not you too!”</p>

      <p>As the only two people with common sense were trying to convince Koutarou, he began to panic.</p>

      <p>“Or do you think you’ll be able to do something indecent to any of us and survive, Satomi-kun?”</p>

      <p>“Ugh...”</p>

      <p>If Koutarou tried to pull something with Kiriha, Theia, Ruth, or Shizuka, he probably wouldn’t live to tell the tale. The ghost, Sanae, was out of the question. That left only the cosplayer, Yurika, but Koutarou didn’t want to do anything to her for several reasons. And even if he did, the other five would still beat him to a pulp.</p>

      <p>“Th-That’s true, but...”</p>

      <p>“See? Then it’s settled!”</p>

      <p>Koutarou found himself unable to argue against Shizuka as she forcibly brought the discussion to a close.</p>

      <p>“Ah, Landlord-san, wait!”</p>

      <p>“Let’s enjoy our summer vacation at the beach and hot spring! I’m so glad I bought a new swimsuit the other day!”</p>

      <p>Shizuka’s eyes sparkled. In her mind, she was already enjoying her summer vacation at the hot spring.</p>

      <p>“Swimsuit? What do you mean?”</p>

      <p>Ruth tilted her head in confusion. Kiriha began explaining while Shizuka was still in the middle of daydreaming.</p>

      <p>“The inn is next to the beach. It’s barely a three minute walk from where we’ll be staying. It’s one of their selling points.”</p>

      <p>“Swimming in the sea...”</p>

      <p>Suddenly Ruth’s expression clouded over.</p>

      <p>“What’s wrong, Ruth-san?”</p>

      <p>“Satomi-sama... Ah, no, it’s nothing important. I just don’t have a swimsuit.”</p>

      <p>“No problem! I have several swimsuits I’ve bought and never worn. I’ll give you those!” Shizuka piped up.</p>

      <p>“I guess it won’t be an issue then.”</p>

      <p>“Thank you very much, Shizuka-sama.”</p>

      <p>With the problem solved, Ruth bowed to Shizuka. But for some reason, Ruth still looked disconcerted. Koutarou normally never picked up on such things, but this time it hit him.</p>

      <p><em>I guess Ruth-san wanted her own swimsuit. She is a girl, after all...</em></p>

      <p>And as an even rarer occurrence, Koutarou wanted to do something about it. He wanted to show his gratitude to Ruth, who helped him out daily. His understanding of the Forthorthe family situation also played a big part in that desire.</p>

      <p>“Ruth-san, I’ll buy you a new swimsuit.”</p>

      <p>With the low rent of 5,000 yen, Koutarou had some room for luxury. Buying Ruth a swimsuit wouldn’t be that big of a hit to his budget.</p>

      <p>“Eh...”</p>

      <p>Ruth stared at Koutarou, trying to decipher the meaning behind his words.</p>

      <p>“I want to ogle over Ruth-san in a risqué swimsuit.”</p>

      <p>“O-Ogle...?”</p>

      <p>Ruth’s cheeks turned red instantly. Memories of fantasizing about kissing Koutarou at the mall came flooding back to her, and her embarrassment increased exponentially.</p>

      <p>“What are you talking about?! Do you think you can just get away with saying something like that?”</p>

      <p>“Of course! In fact, it’s my duty as a teenage boy!”</p>

      <p>However, that was when Ruth noticed there was no desire in Koutarou’s eyes.</p>

      <p><em>Satomi-sama... Are you saying these things on purpose, for my sake...?</em></p>

      <p>As Ruth realized what was going on, her embarrassment vanished and was replaced by a feeling of happiness.</p>

      <p>“I feel like you’ll all steal my points if I stare at you in swimsuits, but Ruth is different! I can stare at her all I want, like any normal teenage boy would!”</p>

      <p>“U-Um... If you’re fine with my humble body...”</p>

      <p>A little touched at the gesture, Ruth smiled. It was somewhat unusual for her, but she wanted to rely on Koutarou’s good will.</p>

      <p>“Um... Please buy me a swimsuit...”</p>

      <p>“Wait, whaaaaat?!”</p>

      <p>Now Koutarou was the one who started to panic. What he’d been saying was practically sexual harassment in order to get Ruth to accept without feeling bad, but she showed no sign of disgust and simply accepted his offer.</p>

      <p>“Heh, you have a surprisingly good side to you, Koutarou.”</p>

      <p>“As expected from Satomi-kun, a true gentleman!”</p>

      <p>Kiriha and Shizuka had both seen right through Koutarou. Kiriha was keenly perceptive, and Shizuka happened to remember the discussion before the lottery.</p>

      <p>“I-I just—”</p>

      <p>“It’s fine. We know you’re embarrassed! Ruth-san, let’s go shopping first thing tomorrow!”</p>

      <p>“Oh, okay.”</p>

      <p><em>Jeez... I’ll try to be more subtle next time...</em></p>

      <p>Getting called out by Kiriha and Shizuka, Koutarou sighed internally. It was more embarrassing having been seen through.</p>

      <p>“Ah, um...”</p>

      <p>Then Koutarou noticed that Theia was fiddling with her fingers and staring at him.</p>

      <p>“What is it, Tulip?”</p>

      <p>Theia’s cheeks turned red and she barely managed to whisper, “U-Um... I don’t have... a s-swimsuit either...”</p>

      <p><em>Ah, that’s right...</em></p>

      <p>If Ruth didn’t have a swimsuit, of course Theia wouldn’t have one either.</p>

      <p>“I see. That’s too bad.”</p>

      <p>Just a few hours ago, that’s what Koutarou <em>would</em> have said. But now he held back.</p>

      <p>Theia was looking at Koutarou bashfully. Noticing Theia’s behavior, Ruth looked at Koutarou expectantly too. But the killing blow was looking at the TV screen behind Theia. It was the character status menu in the game she was playing. One of the characters, “Yurika B,” had a single figure health bar and was out of mana. It was the same screen as before Koutarou and the others had gone shopping.</p>

      <p><em>So Tulip hasn’t played since then...</em></p>

      <p>Realizing that, Koutarou just couldn’t scorn her.</p>

      <p>“I-In that case, if you can save Blue Knight by tomorrow, I’ll buy you one too.”</p>

      <p><em>“Like a normal girl...”</em> Ruth’s words from earlier echoed in Koutarou’s head.</p>

      <p>“Wh-Why are you only discriminating against me?! You didn’t give Ruth a condition like that!”</p>

      <p>“That’s because you’re always getting your way! Or are you not confident you can save Blue Knight? Hmm?”</p>

      <p>But even so, bullying her was his way of hiding his embarrassment.</p>

      <p>“Now you’ve done it! I’ll save Blue Knight right away and make you regret ever challenging me!”</p>

      <p>But Theia might have been the same way. She excitedly turned back towards the TV and picked up the controller again.</p>

      <p><em>Weird... Something’s wrong with me. Why did I say I’d buy Tulip a swimsuit...?</em></p>

      <p>Staring at Theia’s diminutive back, Koutarou was puzzled by what just happened, but knew he needed to go through with it. That was because this was the first time Koutarou had truly seen Theia as a girl... even though he didn’t realize that.</p>

      <p>“Satomi-sama... Your Highness...”</p>

      <p>Watching over them, Ruth was moved to tears. If only these two really did become master and servant... Having always supported Theia, Ruth couldn’t help but hope.</p>

      <p>“Wh-What a misshtake... Ifh I’d known it would come to thish, I woulda bought a shwimsuit.”</p>

      <p>“...I won’t buy one for you, no matter what.”</p>

      <p>“Auuuuugh, th-that’sh just unfair...”</p>

      <p>“Pleb! Hurry up and get over here! Come and witness your master’s courage for yourself!”</p>

      <p>“Just be honest and ask for help, jeez...”</p>

      <p>Unaware of how Ruth felt, Koutarou and Theia sat themselves down in front of the TV, arguing as they continued playing the game.</p>

      <p>“Oh, Goddess of Dawn, foundation of Forthorthe, please watch over Her Highness’s future...”</p>

      <p>Watching over the two of them herself, Ruth was so overcome with emotion that it was all she could do for a while.</p>

      <p>“...”</p>

      <p>But she wasn’t the only one overwhelmed by her emotions. Sanae was equally disarmed, but for a very different reason.</p>

      <p><em>Koutarou really is...</em></p>

      <p>Sanae felt a great unease as she watched Koutarou, Theia, and Ruth. She felt like she had to do something, but she wasn’t sure what.</p>

      <p><em>What is happening to me...?</em></p>

      <p>So just like Ruth, she sat in silence as she watched over the others.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter2">
    <div class="main">
      <h1>The Bathing Conspiracy</h1>

      <h2>Monday, August 11th</h2>

      <p>Theia and Ruth had come to Earth on the large battleship they called the Blue Knight. This Blue Knight was built over the course of a few years as Theia’s personal ship in order to assist her in her trial. After reaching Earth, it had been in orbit ever since.</p>

      <p>The ship was about a kilometer long, but it had one very obvious, distinct feature. The sky blue ship had the shape of a person. With that coloring and design, the name Blue Knight was truly fitting.</p>

      <p>“H-Huge! It’s so big! You could fit a ton of room 106s in here! Tulip, how many tatami mats could fit in here?!”</p>

      <p>“Pleb, is that the only thing you have to say? How about, ‘So this is the Blue Knight that Her Highness is always talking about!’ Or, ‘As expected from Her Highness, commanding such a fine ship!’”</p>

      <p>Koutarou and the others were now on the bridge of that Blue Knight. They were wearing summer clothes and carrying travel bags. They were on their way to the hot spring inn.</p>

      <p>“Satomi-sama, this bridge could fit about five hundred tatami mats!”</p>

      <p>The bridge was positioned in the Blue Knight’s head. But since it was the head of a kilometer tall giant, it was surprisingly large.</p>

      <p>“Ruth, there’s no need to tell them that! More importantly, why do you look so happy?”</p>

      <p>“Five hundred?! Tulip, if you live in a place this big, why would you want room 106? That’s ridiculous!”</p>

      <p>“I keep telling you it’s for the trial!”</p>

      <p>Koutarou and Theia’s voices echoed in the large room. The bridge was about thirty meters in all directions and was made from a beautiful, white ceramic-like material. Inside of that large space was a seat for the operator, the navigator, and various other positions. It looked similar to the type of military command center that often appeared in movies.</p>

      <p>“Damn it, if you’re a princess, then just settle for this huge house!”</p>

      <p>“If you understand that I’m a princess, then watch your tongue and attitude!”</p>

      <p>“No! I refuse!”</p>

      <p>“Then I refuse too! I’ll stay in that room out of spite if I have too!”</p>

      <p>Koutarou and Theia butted heads hard enough for it to make a noise as their foreheads collided. The situation seemed serious, but this was normal for Koutarou and Theia, so nobody really minded.</p>

      <p>“Hmm, so this is what it’s like on the other side of that suspicious glowing wall.”</p>

      <p>“I knew it was a transfer gate, but to think it’s in orbit...”</p>

      <p>Koutarou and the others had come aboard the Blue Knight to go to the beach. Using the glowing blue wall that Theia and Ruth used to travel between room 106 and Blue Knight, they would get to the inn faster than any train or bus.</p>

      <p>“Whaaat?! This is in space?!”</p>

      <p>“If that’s true, then why aren’t we floating or swimming in the air?”</p>

      <p>“That’s thanks to the artificial gravity. We’re using Blue Knight’s power to simulate directional gravity. We could disable it if you like.”</p>

      <p>“We can do that some other time. I feel like my hair or clothes would just get messy.”</p>

      <p>“I see. In that case, please make yourselves comfortable for a while. In the meantime, we’ll reset the gate,” said Ruth while working at the panel at the operator’s station.</p>

      <p>The technology Theia and Ruth used to travel through the gate and to summon weapons were one and the same. Setting a gate and calling forth a weapon would theoretically take the same amount of time, but the safety protocols were much stricter for human transportation. A weapon could be recreated, but the same could not be said for a person.</p>

      <p>Because of that, it took some time to open a new gate. But once it had been opened, it could be freely traveled through. That was how the gate technology worked.</p>

      <p>“In just a little while, we’ll open a gate close to the inn.”</p>

      <p>“Yes, good job.”</p>

      <p>Theia thanked Ruth as she finished her preparations. Ruth smiled and sat down next to Theia.</p>

      <p>Koutarou and the others were sitting at the seats intended for strategy meetings. It was normally where the commander, captain, and staff officers discussed tactics as they read star maps and enemy data, but now it just was a place for the girls to chat. It was all perfectly casual. Snacks covered the flat monitors that would have been displaying strategic data, and Kiriha’s haniwas were handing out the tea they had made. If the Forthorthe military elite had seen this sight, they might have cried.</p>

      <p>“By the way, Theia-dono, I have a question,” Kiriha asked as she put down her manjū.</p>

      <p>“What?”</p>

      <p>“Is it really okay for a battleship—or, rather, this large structure made for combat—to be shaped like a person?”</p>

      <p>Kiriha’s question was simple. The more complex of a shape such a huge machine had, the lower its structural integrity would be. Normally, the larger something was, the simpler its design would have to be. Nevertheless, Blue Knight was unmistakably modeled after a human figure. It seemed like a rather obvious weakness.</p>

      <p>“Good question. And you’re absolutely correct. This shape is nothing but a weakness.”</p>

      <p>“Then why?”</p>

      <p>“Ruth.”</p>

      <p>“Yes, Your Highness.”</p>

      <p>Ruth took over for a more detailed explanation. Despite her appearance, Ruth was a military officer and knew more about the ship than Theia.</p>

      <p>“The design is considered impractical. It barely has enough structural integrity to support the joints, and it is next to impossible to move during combat.”</p>

      <p>“This ship is lacking in calcium!” Sanae slammed her hand on the table and shouted.</p>

      <p>“Sanae-chan, I don’t think that’s the problem here...”</p>

      <p>“However, our civilization succeeded in controlling gravity about 150 years ago. Thanks to that, the strength of the ship isn’t as important as the output of the generator.”</p>

      <p>“I see. Using energy barriers and controlling the ship’s inertial mass, the shape of the ship doesn’t come into play too much. It’s not like the physical structure of the ship can block this level of weaponry anyways.”</p>

      <p>Forthorthe’s scientific advances had reached the level of controlling the weight of objects. So when taking hits, the ship would get heavier, and when moving, it would get lighter. So as long as it had energy, the shape wasn’t much of a problem.</p>

      <p>On top of that, Forthorthe’s weapons were so powerful, no normal armor could withstand them. No matter how strong the alloy, there was no way it would be able to block a high-powered beam cannon. Because of that, something other than the hull was required for defense.</p>

      <p>So what was important wasn’t the configuration of the ship, but the amount of energy available. The generator output was the deciding factor in battle.</p>

      <p>“So you make up for the calcium shortage with guts.”</p>

      <p>“Yeah, I don’t think that’s quite right either...”</p>

      <p>“That said, since this ship is human-shaped, the generator is slightly smaller. And the surface area is larger, making the force fields less effective. In that sense, compared to the other princesses, this ship could be called inferior.”</p>

      <p>Since generator output mattered the most, bigger was better. But Blue Knight’s shape meant it had a smaller generator compared to other ships of the same size.</p>

      <p>“That said, I can’t just go for efficiency and fly a perfectly spherical ship.”</p>

      <p>Theia looked displeased. She was slightly irritated that her ideal shape didn’t produce her ideal strength.</p>

      <p>Trying to optimize the shape of the ship to fit as large of a generator as possible, the ship would naturally become spherical. That would also minimize its surface area, making it more suited for defense as well.</p>

      <p>But Theia didn’t want to fly in something like that.</p>

      <p>“So this is an issue of aesthetics.”</p>

      <p>“That’s right. But it leaves quite an impression when appealing to the citizens at ceremonies.”</p>

      <p>“Really? I think a round spaceship would be cute.”</p>

      <p>Yurika spun a fruit-flavored piece of candy as she added her two cents. But hearing that, Theia raised her eyebrows.</p>

      <p>“Yurika, don’t lump me in with some hobbyist like you! I don’t want an unsightly battleship like that! All the other princesses would laugh at me!”</p>

      <p>“B-But, but... Wouldn’t a round spaceship be better than losing?”</p>

      <p>“Don’t compare me to a loser like yourself! Besides, the Blue Knight is protecting this ship. I won’t lose no matter who I fight!”</p>

      <p>“...L-Loser? Aww...”</p>

      <p>Shocked by the weight behind that word, Yurika lost her strength and collapsed onto the table.</p>

      <p>“I already know that. I already...”</p>

      <p>Yurika herself vaguely understood that she emitted a loser vibe. But life after fully admitting that would just be too much for her to handle. Her tears overflowed without stopping.</p>

      <p>“I’m no Yurika, but I think a round spaceship would suit you too, Tulip.”</p>

      <p>Koutarou left Yurika to her crying, and nodded repeatedly as he folded his arms emphatically.</p>

      <p>“Shut it, pleb! Do you want to be thrown out of the airlock?”</p>

      <p>“I think it would take the edge off though...”</p>

      <p>“Are you trying to be clever and pick a fight with me?!”</p>

      <p>“Your Highness, please calm down!”</p>

      <p>Ruth desperately held back Theia, who looked like she was about to jump on Koutarou and bite him. But his next words made Theia lose it.</p>

      <p>“Besides, they say it’s best not to give children pointy toys. It’s dangerous if they swallow them.”</p>

      <p>“I’ll kill you! Sit down right there, pleb! I’ll beat you to death!”</p>

      <p>“Waaah! She’s coming!”</p>

      <p>Koutarou had assumed it would be safe since Ruth was restraining her, but unexpectedly, Theia came flying towards him. Theia jumped up on the desk and swooped down on Koutarou like a bird of prey.</p>

      <p>“Dieeeee!”</p>

      <p>“Your Highness, calm down!”</p>

      <p>“Koutarou, no! Don’t come over here! If you’re fighting, do it over there!”</p>

      <p>“I don’t have any choice! Special Attack: Yurika Shield!”</p>

      <p>“Kyaaaaah!”</p>

      <p>Wham!</p>

      <p>“Ah, sorry...”</p>

      <p>“Y-You’re terrible... Ugh...”</p>

      <p>“Nijino-san! Nijino-san, are you okay?!”</p>

      <p>“I-I’m not...”</p>

      <p>“I won’t forget your sacrifice, Yurika.”</p>

      <p>“...Hey, Koutarou, you do some really awful things from time to time. Well, I guess it was okay since it was just Yurika.”</p>

      <p>“You think so?”</p>

      <p>“Mmm, this dorayaki is delicious. Yurika, would you like a bite?”</p>

      <p>“I think anything I eat right now would only taste like blood.”</p>

      <p>The bridge was in chaos. It would take a while longer before they realized the gate was ready for use.<br/><br/></p>

      <p>The inn Koutarou and the others were staying at was an old establishment, built a long time ago. But ever since the bubble economy, their customers had been stolen by a nearby resort hotel and the inn was in a state of stagnation. The two ghost hunters were taking advantage of that. They promised the inn a large reward in exchange for cooperating with them.</p>

      <p>Today they were dressed as employees and stood by the entrance in lieu of real employees. They welcomed Koutarou and the others with oddly happy smiles and fiddling fingers when they arrived.</p>

      <p>“Greetings. You’ve must’ve had quite a trip.”</p>

      <p>“Welcome.”</p>

      <p>The tall, thin man and the short, fat man were both quite shady, but an outing like this was so unusual for Koutarou and the others that they didn’t seem to notice at all.</p>

      <p>“We have reservations under the name Satomi.”</p>

      <p>“We’ll be in your care for a while.”</p>

      <p>As Koutarou and Shizuka went up to the receptionist’s desk and greeted them, the ghost hunters got to work.</p>

      <p>“Very good. Now then, would the representative please fill in this hotel register...”</p>

      <p>“Okay.”</p>

      <p>“The remaining guests please follow me. I’ll show you to your room.”</p>

      <p>“Okaaay.”</p>

      <p>It almost seemed like they had ardently studied the employee manual. While they were working, there was nothing unnatural about them. Koutarou and the others were shown to their room in short order.</p>

      <p>“They’re falling for it! They’re falling for it!”</p>

      <p>“Just as we planned. Let’s do this, Hachi!”</p>

      <p>“Yes!”</p>

      <p>After leading the guests to their room, the two ghost hunters grinned at each other. Up until now, everything had gone according to plan. And if everything continued going this well, they would soon find themselves with a large fortune.</p>

      <p>“That 300 million yen will be ours. Let’s do this, Hachi!”</p>

      <p>“Yeah!”</p>

      <p>Their eyes were sparkling with greed and hope for the future.<br/><br/></p>

      <p>Unaware of their plans, Koutarou and the others were confounded by their room.</p>

      <p>“S-Small...”</p>

      <p>“Koutarou, are we really staying here?”</p>

      <p>“That was the idea, but...”</p>

      <p>“I think my room is larger than this...”</p>

      <p>“Shizuka, it only looks small because of the furniture.”</p>

      <p>“I’ve finished measuring, ho! Its size is no different from room 106! Ho!”</p>

      <p>“No, it’s smaller.”</p>

      <p>“Your Highness?”</p>

      <p>“Yurika’s not in her wardrobe now.”</p>

      <p>“Subtracting that, this room is five and a half tatami mats large, ho!”</p>

      <p>“I don’t want to stay in the wardrobe after coming all this way!”</p>

      <p>Koutarou and the others were puzzled by the room’s small size. When measured, it was exactly the same size as the inner room of room 106. But with seven people, their luggage, and two haniwas, it felt extremely small. Having just come from Blue Knight’s spacious bridge didn’t help either.</p>

      <p>“Isn’t this a bit cut-rate for a grand prize?”</p>

      <p>“The second prize LCD TV was probably worth more than this.”</p>

      <p>“They did say the inn was ‘rustic.’”</p>

      <p>“I’m starting to understand why this inn is so close to shutting down.”</p>

      <p>“I’m not even sure why we’re here anymore.”</p>

      <p>Everyone’s dissatisfaction began showing. They had all thought they’d have more space to stretch out, but instead they were forced into a room that was even smaller than what they were used to. It was only natural for them to feel that way.</p>

      <p>“I’m truly sorry, everyone. This is all because I invited you... If I had known it was this small, I would have just come with Her Highness...”</p>

      <p>Ruth felt responsible for the disappointment. She was the one who had won the lottery and invited them here. Her shoulders slumped and she lowered her head with a contrite look on her face.</p>

      <p>“I-It’s not your fault, Ruth-san! If we hadn’t come, the room would still be just as small, and we wouldn’t be able to play at the beach. So we’re really happy. Right, Tulip?!”</p>

      <p>“Th-That’s right, Ruth! It’s not like it’s any more inconvenient, and being close to the beach, this place is great!”</p>

      <p>Koutarou and Theia, who normally just fought, came together to cheer up Ruth.</p>

      <p>“...Is that true?”</p>

      <p>“O-Of course! Right, Tulip? I can’t wait to hit the water!”</p>

      <p>“Y-Yeah! I’ll even teach you how to swim elegantly!”</p>

      <p>“Then all is well.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert2">
    <img alt="insert2" class="insert" src="../Images/Insert2.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter21">
    <div class="main">
      <p>Ruth’s expression brightened up. Seeing that, Koutarou and Theia were about to breathe a sigh of relief when Sanae interrupted them by saying something strange.</p>

      <p>“But Koutarou, this room already has a guest.”</p>

      <p>“A guest?”</p>

      <p>Koutarou cocked his head to the side. It didn’t look like the inn had made a mistake and double-booked the room to him. But if that was the case, they would need to change rooms. He pressed Sanae for more details.</p>

      <p>“What do you mean?”</p>

      <p>“Hmm, the spiritual energy is too weak for even me to tell clearly, but I can see traces of a wrung neck, so it’s probably the ghost of someone who was murdered or killed themselves.”</p>

      <p>Sanae furrowed her brow as she stared up into the ceiling, sort of like a shortsighted person trying to read something far away.</p>

      <p>“Gh-Gh-Ghost?!”</p>

      <p>Sanae’s explanation had a profound effect on Yurika. Gripped by fear, she dropped her luggage and ran towards the wardrobe.</p>

      <p>“Noooooooo! Not ghosts!”</p>

      <p>Yurika tossed the futons out of the wardrobe and jumped inside. She then slammed the sliding door shut with all of her might.</p>

      <p>“Jeez, Yurika, calm down! It’s presence is so weak that it can’t even make a sound.”</p>

      <p>“Nooooo! I hate just knowing that there’s a ghost here!”</p>

      <p>“But I’m always around.”</p>

      <p>“That’s just because I forgot you’re a ghost! Noooooooo!”</p>

      <p>Sanae’s coaxing failed. Yurika was still trembling with fear inside the wardrobe.</p>

      <p>“It’s no use. She must be really scared.”</p>

      <p>As Shizuka tried to slide open the door, Yurika used all of her strength to hold it back. Shizuka was stronger than Yurika so she knew she could force the door open, but that would probably break it.</p>

      <p>“Yurika-sama...”</p>

      <p>Feeling responsible now too, Ruth looked gloomy all over again. Noticing that, Koutarou hurriedly took her hand.</p>

      <p>“Well then, let’s go swimming!”</p>

      <p>“S-Satomi-sama?!”</p>

      <p>“He’s right, he’s right! That’s why we came here to begin with!”</p>

      <p>Theia took Ruth’s other hand.</p>

      <p>“Satomi-sama, Your Highness... What’s going on all of a sudden?”</p>

      <p>“I just felt like seeing you in your swimsuit! I bet you’ll look cute!”</p>

      <p>“She’s not on my level, but Ruth is quite cute! Standing next to each other, we become even more picturesque!”</p>

      <p>Koutarou and Theia tried to forcibly drag Ruth to the beach before she let herself get waylaid with anything else.</p>

      <p>“I’m fine with not seeing Tulip’s swimsuit.”</p>

      <p>“I’ll kill you, pleb. Now is not the time, but I’ll be sure to kill you later! Don’t forget!”</p>

      <p>“I already did!”</p>

      <p>“Hey!”</p>

      <p>“Y-Your Highness? Satomi-sama?”</p>

      <p>Their bizarre argument continued as they worked together to carry away poor, puzzled Ruth.</p>

      <p>“Ah, wait up, Koutarou! I’m coming too!”</p>

      <p>“Uh, hey, guys... What about Nijino-san?”</p>

      <p>Sanae quickly followed after Koutarou, but Shizuka still didn’t know what to do about Yurika in the wardrobe.</p>

      <p>“It’s fine. She’ll come out once she calms down. She’s not a child.”</p>

      <p>“But...”</p>

      <p>“Don’t worry. I’ll leave Karama and Korama here.”</p>

      <p>“In that case, I’ll leave her to you, Karama-chan, Korama-chan.”</p>

      <p>“Ho!”</p>

      <p>“Leave it to us, ho!”</p>

      <p>Kiriha alleviated Shizuka’s concern. She was also a healthy girl in her teens, and she wanted to play on the beach as well. With Karama and Korama keeping watch, they wouldn’t irresponsibly leave Yurika on her own.</p>

      <p>“Well then, Nijino-san we’re heading to—”</p>

      <p>“D-D-Don’t leave me aloneeeee! I don’t want to be all alone in a room with a ghost!”</p>

      <p>But the moment Shizuka made up her mind to head to the beach, Yurika jumped out of the wardrobe. She looked around the room, still shaking with fear.</p>

      <p>“Satomi-san, wait! Satomi-san!”</p>

      <p>She grabbed her beach things and hurriedly chased after Koutarou and the others.</p>

      <p>“Um... Well...”</p>

      <p>Suddenly finding herself left behind, Shizuka scratched her cheek. Even she couldn’t help being amazed at Yurika’s hopelessness.</p>

      <p>“Shizuka, let’s go too.”</p>

      <p>“Yeah.”</p>

      <p>Shizuka smiled at Kiriha, who was just as amazed, and the two girls followed after the others.<br/><br/></p>

      <p>The first thing Koutarou did when he reached the beach was wipe the sweat off his forehead. It was now officially summer vacation, and the season was in full swing. The scorching summer sun was sweltering and the hot sand burned Koutarou’s feet.</p>

      <p>“Hot, hot, hot...”</p>

      <p>Koutarou was preparing for their beach day by himself. He spread out a sheet and set up an umbrella while tiptoeing on the searing sand. Unlike the girls, Koutarou was done changing in a flash, so he had come out before them to get things ready.</p>

      <p>“All right, this should be good.”</p>

      <p>“Oh, if it isn’t Satomi-kun!”</p>

      <p>Once Koutarou had finished setting up, he heard voices calling for him.</p>

      <p>“Huh? Where? Ah, you’re right!”</p>

      <p>“Hello, Koutarou-kun!”</p>

      <p>“What a coincidence, Satomi-kun! You came here to play too?”</p>

      <p>Immediately after that, a group of girls in swimsuits ran up to him. There were six of them in total. It was the cosplay society.</p>

      <p>“Hi, everyone. That’s right. My friend actually won a stay at a nearby inn, so we came here to play.”</p>

      <p>“Ooohh... It’s like we are bound by the red string of fate, isn’t it, Satomi-kun?”</p>

      <p>“Ahahaha, that’d be nice.”</p>

      <p>“I wouldn’t mind you as my boyfriend, Koutarou-kun.”</p>

      <p>“Me too, me too!”</p>

      <p>“I’m a bit worried that having a cosplayer for a girlfriend would get expensive.”</p>

      <p>“Ugh, as expected from Koutarou-kun! You’re right on point.”</p>

      <p>“Satomi-kun lives on his own, after all.”</p>

      <p>“Once I get richer, if you still feel that way, then please ask again.”</p>

      <p>“A boy who keeps you waiting won’t be very popular, you know...”</p>

      <p>“Yes, I know.”</p>

      <p>Koutarou and the cosclub members laughed.</p>

      <p>“By the way, why is the cosplay society here? Did you also come here to play?”</p>

      <p>After joking around for a while, Koutarou asked what was on his mind.</p>

      <p>The president answered as their representative, “Half of it’s a club activity and the other half is play. Actually, Comiha is just three days from now.”</p>

      <p>“Ah, now that you mention it, you did say something about that last month.”</p>

      <p>The cosclub members were already working on their costumes for the event last month. At some point, they’d called Koutarou in to give his opinions on their outfits. That was why even Koutarou—whose head was only full of baseball—knew about it.</p>

      <p>“We’re staying at a hotel that’s close to the event area, and enjoying ourselves at the beach while we’re here.”</p>

      <p>“I see. That’s a good plan.”</p>

      <p>“Right? Besides, we can meet Sakuraba-san here.”</p>

      <p>“Sakuraba-senpai, you say?”</p>

      <p>It was an unexpected development in the conversation. Sakuraba Harumi was the president of the knitting society that Koutarou had joined at the beginning of the school year. He tilted his head with a confused look on his face as the cosclub’s president continued to explain.</p>

      <p>“Actually, Sakuraba-san’s family has a villa nearby. I was chatting with her last month about summer vacation. She said she’d be spending it here, so we thought we might do the same.”</p>

      <p>“I see. Thank you for always keeping an eye out for Sakuraba-senpai.”</p>

      <p>Koutarou politely bowed to the cosclub members.</p>

      <p>“How nice... I want to be treated that preciously by an underclassman too.”</p>

      <p>“Let’s put our hopes on Yurika-chan.”</p>

      <p>“There’s not much hope there...”</p>

      <p>Ever since Harumi and Yurika won the sports festival, the cosclub members had been seeing Harumi regularly. It was mostly because she was friends with Koutarou and Yurika, but the cosclub had also noticed that she was usually alone. Because of that, they would often strike up conversations with Harumi when they found her by herself.</p>

      <p>“When I met her earlier, she said she’d come around later.”</p>

      <p>“Thank you for taking care of both Yurika and Senpai.”</p>

      <p>“You bet. Sakuraba-san is cute. Hopefully we can get her to join the cosclub!”</p>

      <p>“Ahahaha, you’ve got it all planned out.”</p>

      <p>“The cosclub and knitting society are both small, right? We need to take the opportunities we’re given.”</p>

      <p>“So when that time comes, does that mean you’ll join us too?”</p>

      <p>“Sounds like you have it all planned out too, Satomi-kun.”</p>

      <p>Koutarou continued joking around with the cosclub girls.</p>

      <p>“By the way, president, should we move over here? If we’re playing, then the more, the merrier.”</p>

      <p>“That’s true. Good idea, vice president.”</p>

      <p>“You’re too kind”</p>

      <p>The president nodded at the vice president, and then turned back to Koutarou.</p>

      <p>“Well then, Satomi-kun, we’ll be taking our leave for a while. We need to go get our things.”</p>

      <p>“Okay, I’ll be waiting.”</p>

      <p>“All right, everyone, let’s go!”</p>

      <p>“Okaaay!”</p>

      <p>Like that, the cosclub members left just as energetically as they had arrived.<br/><br/></p>

      <p>A few minutes after Koutarou and the cosclub parted ways, the girls from Corona House arrived at the beach.</p>

      <p>“Wow... What’s with these girls?”</p>

      <p>“Models or something?”</p>

      <p>“Maybe there’s some kind of event or a photo shoot.”</p>

      <p>“Whoa, that girl’s breasts are huge.”</p>

      <p>“That short girl is really pretty...”</p>

      <p>All of the men on the beach were staring, and most of the women were glaring.</p>

      <p>“Hey, Koutarou, sorry for the wait!”</p>

      <p>“Satomi-kun, you’ve already finished setting up? Thank you!”</p>

      <p>“Mhm, well done for a pleb.”</p>

      <p>“S-Sorry for keeping you waiting, S-Satomi-sama...”</p>

      <p>“Calm down, will you, Ruth?”</p>

      <p>“Satomi-san, you wouldn’t happen to know where my underwear went, would you?!”</p>

      <p>When it came to looks, they were all beautiful, so it was only natural that they attracted so much attention. But apart from Ruth, nobody paid any mind to it. None of the other girls were the type to by bothered by that sort of thing. Ruth was the only one who worried about the looks she was getting as she nervously walked across the beach.</p>

      <p>“What do you think, Koutarou? Have you fallen for Sanae-chan’s overwhelming cuteness?”</p>

      <p>“Anyways, Kurano-san, your breasts are so big... They look like they’re about to burst out of your swimsuit. I’m so jealous...”</p>

      <p>“Shizuka, having large breasts isn’t that great. Finding clothes that fit can be difficult, and I get a lot of unwanted attention.”</p>

      <p>“Now that you mention it, everyone is looking this way.”</p>

      <p>“That’s because they’re attracted to our grace. Quite excellent.”</p>

      <p>“S-Satomi-sama, help me! A-All the people are looking over here!”</p>

      <p>As Ruth tried to run away from everyone’s stares, the remaining five girls approached Koutarou to show off their swimsuits. Ruth aside, the girls all had various reasons for wanting Koutarou to be impressed.</p>

      <p>“How about it? Aren’t you happy, Satomi-kun? You’re the envy of the entire beach, and you have six cute girls all for yourself! ...Wait, huh?”</p>

      <p>But their hopes were so easily foiled. While all of the men around were staring at them, Koutarou was looking elsewhere.</p>

      <p>“I see. If your family has such a large villa, you must be an upper class lady, Senpai.”</p>

      <p>“A lady? S-Satomi-kun, that’s...”</p>

      <p>“If you have a villa larger than the house I used to live in, you’d normally be called a lady. Besides, you’re dressed for the part.”</p>

      <p>“Th-That’s b-because...!”</p>

      <p>Koutarou was looking at Sakuraba Harumi, who was wearing a summer dress and carrying a parasol. She really did look like high society. And despite the heat, she he had a cool presence about her.</p>

      <p>“You look great. It’s very ladylike, hahaha!”</p>

      <p>“Goodness... Satomi-kun, you tease...”</p>

      <p>Despite her cool aura, her cheeks were heating up.</p>

      <p>“C-Curse you, Koutarou. You’re completely ignoring us?!”</p>

      <p>“Sakuraba-senpai! What are you doing here?”</p>

      <p>“Not you again, Sakuraba Harumi!”</p>

      <p>“If I recall, that girl is Satomi-kun’s club—”</p>

      <p>“Sakuraba Harumi. She’s in class 2-A and she’s the president of the knitting society. Aside from his childhood friend, Matsudaira Kenji, she is the closest person to Koutarou.”</p>

      <p>This unexpected development left the five girls extremely unhappy with Koutarou. While it was completely unjust resentment considering the situation, they didn’t care.</p>

      <p>“Satomi-sama, please don’t look away! Save me!”</p>

      <p>But poor Ruth was still just trying to escape being stared at.</p>

      <p>“Stupid Koutarou! You blockhead! Give us back all the time we spent in a tizzy over this!”</p>

      <p>“Uwah! Wh-What?!”</p>

      <p>“Satomi-kun?!”</p>

      <p>Sanae rushed Koutarou and knocked him down into the sand. And before Koutarou could even feel the scorching hot sand burning him, Sanae and Theia pounced.</p>

      <p>“Bury him! Bury him up to his head! This disloyal swine should just drown in the tide!”</p>

      <p>“I won’t ask you to get excited anymore! Just freaking look at me! At least give us the standard fanfare! Just smile and say something like ‘your new swimsuit is really cute’!”</p>

      <p>“Ahhh! Wh-Whyyy?!”</p>

      <p>Taken by surprise, Koutarou was pinned down by Theia as Sanae began piling sand on him.</p>

      <p>“A-As if Tulip alone could hold me down!”</p>

      <p>“Ah, ah... Wah!”</p>

      <p>Since Theia was small, Koutarou just tried to forcibly stand up while she was still on top of him.</p>

      <p>“I won’t let you do that, Satomi-kun!”</p>

      <p>“Landlord-san?!”</p>

      <p>“Sanae-chan, I’ll help out too!”</p>

      <p>“Yurika, you go dig the hole! You’re good at that kind of thing, right?”</p>

      <p>“Waaaah, I really don’t want to!”</p>

      <p>“I will help too. Karama, Korama, begin digging.”</p>

      <p>“Understood, ho!”</p>

      <p>“Leave it to us, ho! Digging is our specialty!”</p>

      <p>But as the other girls joined in, Koutarou found himself at a disadvantage.</p>

      <p>“You’ll learn what happens when you hurt a maiden’s pride!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert3">
    <img alt="insert3" class="insert" src="../Images/Insert3.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter22">
    <div class="main">
      <p>“Ouch! Owowowow! L-Landlord-san, don’t look so happy while you’re putting me in a joint lock!”</p>

      <p>While humming, Shizuka grabbed Koutarou’s legs and held him in place using several grappling techniques.</p>

      <p>“Well done, Shizuka! You have my praise!”</p>

      <p>“Maybe I’ll get a bit more into it. Hup!”</p>

      <p>The truth was that Shizuka wasn’t actually that angry at Koutarou. She mostly joined in because it looked like fun. Since they came here to play, she wanted to enjoy herself to her fullest before going home.</p>

      <p>“Owowowow, too much! That’s going too far!”</p>

      <p>Koutarou desperately struggled as he tried to escape, but he didn’t stand a chance against Shizuka. And while Theia and Shizuka held him down, the other girls dug a large hole.</p>

      <p>“S-Satomi-kun is being buried... Wh-What should I do?”</p>

      <p>“Excuse me, Your Highness, it might be best not to get too rough...”</p>

      <p>Harumi and Ruth tried to stop the others, but Harumi was largely in shock at the sudden commotion. In reality, Ruth was the only one doing anything to help Koutarou.</p>

      <p>“Ruth-san! S-Save me, Ruth-san!”</p>

      <p>Right now, she was his only hope. He urgently called to her for help.</p>

      <p>“Satomi-sama, just hold on a little longer! I’ll be right—”</p>

      <p>“Ruth! What did you come here for?!”</p>

      <p>But as Theia scolded her, she froze and stopped moving. Theia was going on the offensive and seized the initiative against faint-hearted Ruth.</p>

      <p>“W-Well...”</p>

      <p>“Remember what you’re wearing! What were you thinking when you picked that out? And what did you feel when you put it on today? And despite all that, you still want to forgive this stupid vassal?!”</p>

      <p>“What I’m wearing...”</p>

      <p>Hearing Theia’s words, Ruth gulped. She looked at Theia’s swimsuit and then her own. Although they weren’t very expensive ones, they were cute swimsuits that fit them well. They were the swimsuits that Koutarou had bought for them.</p>

      <p>“He didn’t need to praise me! All he had to do was take a peek! But no! What did this stupid vassal do?!”</p>

      <p>What Ruth had felt when she bought the swimsuit and all the days she’d spent waiting to wear it came rushing back. Strongest of all, she recalled the feeling of putting it on today.</p>

      <p>“I won’t forgive him! My pride as a woman won’t forgive him! What about you, Ruth?!”</p>

      <p>“I...”</p>

      <p>And remembering all those feelings, she then remembered that Koutarou hadn’t looked at her or Theia. He was talking to another woman without even glancing at them. Since Koutarou had bought the swimsuits, he could have at least showed some interest.</p>

      <p><em>I...!</em></p>

      <p>Suddenly, something inside of Ruth snapped.</p>

      <p>“...Let’s bury him, Your Highness. Thoroughly. No, just burying him would be too lax. To make sure he never crawls out, let’s bind his arms and legs!”</p>

      <p>Ruth was looking at Koutarou with a fire in her eyes. It was almost as if Theia’s anger had been transferred to her.</p>

      <p>“Well said, Ruth! I’ll leave it to you!”</p>

      <p>“As you wish, my princess!”</p>

      <p>Ruth joyfully joined in on burying Koutarou. She quickly bound his limbs with rope and robbed him of his freedom. She showed no hesitation or mercy.</p>

      <p>“Waaaaah! Even you too, Ruth-san?! Did I do something to offend you?!”</p>

      <p>“Sometimes not doing anything is a crime in and of itself! There’s a limit to how nice you can be!”</p>

      <p>“Wh-Whyyyyy?!”</p>

      <p>Koutarou did his best to break free, but he was no match against the united front of all six girls. Thusly, Koutarou soon found himself buried on the beach.<br/><br/></p>

      <p>The waves that came all the way up to Koutarou’s head eventually slid back out to sea. Because the tide was coming in, the waves got closer to him every time they rolled up.</p>

      <p>With his body under the sand, the only thing Koutarou could move was his head. All he could do was crane his neck away from the approaching waves.</p>

      <p>“...How did it turn out like this?”</p>

      <p>Koutarou couldn’t figure out why he had been buried no matter how many times he went over what had happened in his head. To him, he had just gone to talk to Harumi like normal after he had finished setting things up on the beach.</p>

      <p>“Or did I do something before that...?”</p>

      <p>Koutarou was at a loss. Unused to women, he couldn’t understand their feelings. Even though they weren’t in love, their maiden hearts wanted Koutarou to show some interest.</p>

      <p>“...I don’t get it...”</p>

      <p>As Koutarou furrowed his brow for the umpteenth time, a shadow was cast on him.</p>

      <p>“Satomi-kun.”</p>

      <p>“Sakuraba-senpai!”</p>

      <p>The shadow was thanks to Harumi’s parasol. She had approached Koutarou without him noticing to shield him from the sunlight.</p>

      <p>“Good timing, Senpai! Please help me!”</p>

      <p>“Hmm... What should I do?”</p>

      <p>Harumi squatted down next to Koutarou and smiled.</p>

      <p>“Don’t tease me! Please help me instead!”</p>

      <p>“But if I help you out, you’ll just run off somewhere... If you’d talk with me for a while longer, I wouldn’t mind freeing you.”</p>

      <p>“Senpai, you’re a bigger tease than normal.”</p>

      <p>“Heehee, maybe it’s because we’re at a seaside resort, but I’m in high spirits.”</p>

      <p>“Well, that much is obvious.”</p>

      <p>Perhaps it was the summer sun, but Harumi’s smile looked brighter than ever.</p>

      <p><em>Her friendship with Yurika might have been a good thing after all.</em></p>

      <p>Koutarou thought Harumi’s current behavior was a good thing, but there were those who took their friendly chatting as a bad sign.</p>

      <p>“C-Curse you, Sakuraba Harumi! Just how much of a heroine are you? And what is Koutarou thinking, falling for that woman’s obvious tricks?!”</p>

      <p>“Your Highness, what should we do?”</p>

      <p>“Just burying him was too naive! The pleb needs a harsher punishment!”</p>

      <p>Theia, Ruth, and Sanae were clearly enraged.</p>

      <p>“Then what do we do next?”</p>

      <p>Shizuka, on the other hand, was just enjoying herself. She was feeling a sense of freedom after coming to the beach.</p>

      <p>“...Let’s split a watermelon,” said Kiriha.</p>

      <p>Not being able to tell if she was kidding or not was simply part of Kiriha’s personality. She was just being her usual self, and showed the girls a large watermelon she was carrying.</p>

      <p>“Ah, that sounds like fun!”</p>

      <p>“I wonder what will split first: the melon or Koutarou’s head?” Kiriha said, smiling and pulling out a wooden sword.</p>

      <p>“Let’s do it!”</p>

      <p>“I don’t know what we’re doing, but let’s go for it!”</p>

      <p>“L-Let’s not. I feel sorry for Sakuraba-senpai...”</p>

      <p>Yurika tried to stop the others. After Koutarou had been buried and Harumi had walked over, Yurika had kept quiet so as not to bother them.</p>

      <p>“Nobody asked for your opinion!”</p>

      <p>“Eeeeek! Run away! Sakuraba-senpai, run away!”</p>

      <p>But in the end, it was Yurika who ran. She succumbed to Theia’s menacing and withdrew. Not taking a stand was just like our Magical Girl Rainbow Yurika. Meanwhile, Koutarou and Harumi were still happily chatting, completely unaware of the plot unfolding against Koutarou.</p>

      <p>“Satomi-kun, you’re covered in sweat. It really must be hot in the sand, right?”</p>

      <p>“Ah, it’s fine. Don’t dirty your handkerchief on me.”</p>

      <p>Harumi pulled a handkerchief out of her pocket and gently wiped the sweat from Koutarou’s forehead.</p>

      <p>“There we go. You’re all clean now.”</p>

      <p>“Senpai...”</p>

      <p>“Heehee, it’s almost like I’ve become your mom, Satomi-kun.”</p>

      <p>Koutarou was bothered by the fact that her sweet-smelling handkerchief was now covered in his sweat, but Harumi didn’t mind at all.</p>

      <p>“Sakuraba-senpai, let’s all split a watermelon together! We’ll make a game out of it!”</p>

      <p>Theia approached, holding a melon almost half as big as she was.</p>

      <p>“Y-You want to split a watermelon?”</p>

      <p>Surprised by the sudden voice calling out to her, Harumi stumbled for words. She was normally bad with strangers, and she had completely dropped her guard while she was alone with Koutarou. That left her a little more staggered than usual.</p>

      <p>“Yes, Sakuraba-senpai! Let’s make some wonderful summer memories together!”</p>

      <p>“S-Sure.”</p>

      <p>Harumi instinctively nodded.</p>

      <p>“Who’s there? Is it Tulip?”</p>

      <p>Unable to turn his body, Koutarou couldn’t see Theia. He had no choice but to guess based on the voice, and because Theia wasn’t speaking in her usual manner, he wasn’t sure.</p>

      <p>“...That’s right. It’s me, pleb.”</p>

      <p>Theia plonked the watermelon down right next to his head. When she did, Koutarou got a good feel for the size and weight of it based on the thud it made. The watermelon was at least three times the size of Koutarou’s head. Theia’s face poked out from behind it.</p>

      <p>She brought her mouth close to Koutarou’s ear and whispered, “Heh heh, I’ll have you make some memories with us too.”</p>

      <p>“What are you trying to pull, Tulip?!”</p>

      <p>“Oh, nothing. We’re just going to split a watermelon wide open. Chop, chop! Heh heh heh...”</p>

      <p>Making sure Harumi wasn’t looking, Theia snickered as she taunted Koutarou. Her smile was darker than ever before.<br/><br/></p>

      <p>As Koutarou was getting dragged into the girls’ scheme, a little ways away, another scheme was unfolding.</p>

      <p>“Aniki, it seems like they’re gonna crack a watermelon.”</p>

      <p>“Good. Right now all of their attention will be focused on that. Now’s our chance to capture the target.”</p>

      <p>“Are we doing it?”</p>

      <p>“Of course we are. If we don’t, we’ll be homeless.”</p>

      <p>“We did use the last of our money after all.”</p>

      <p>The schemers were none other than the two ghost hunters. They were stalking Koutarou and the others through their binoculars from some nearby rocks.</p>

      <p>“If we manage to sell off that ghost, we’ll be rich.”</p>

      <p>“We’ll be able to buy a TV and bike.”</p>

      <p>“That’s right. Follow me, Hachi.”</p>

      <p>“What are we doing?”</p>

      <p>“It’ll be a detour, but we’ll approach them from the water. That way they won’t see us coming. And even if they do, we can just hide our equipment under the surface of the water and they won’t suspect a thing.”</p>

      <p>“That’s Aniki for you! Even though ghost hunters do righteous work, you always make it seem like we’re doing something really bad!”</p>

      <p>“Shut it, Hachi! I’m still a hero of justice! I’m not in the wrong! This is just what poverty does to people!”</p>

      <p>They gathered up their suspicious tools and machines, and jumped into the sea. Their goal was to capture Sanae, who was currently distracted by the watermelon.<br/><br/></p>

      <p>“Hyah!”</p>

      <p>Swinging down the wooden sword with all of her might, Harumi felt like she hit something different this time. Her first three strikes had all bounced off of something hard, but this time she hit something soft and the tip of the sword felt like it sank in. Moreover, she couldn’t hear Koutarou screaming anymore.</p>

      <p>“You did it, Sakuraba-senpai!”</p>

      <p>Instead, Yurika was shouting. Hearing that, Harumi quickly took off her blindfold.</p>

      <p>“Satomi-kun! Satomi-kun! Are you okay?!”</p>

      <p>Harumi had hit Koutarou’s head three times before she managed to split the watermelon. Koutarou said not to mind him, but there was no way she could do that. As soon as Harumi took off her blindfold, she began looking for Koutarou.</p>

      <p>“Oh, this is delicious.”</p>

      <p>But as if to brush off her fears, Koutarou was busy eating the watermelon now split in half in front of him. He was so absorbed in eating the watermelon that he didn’t even notice how worried Harumi was.</p>

      <p>“Th-Thank god...”</p>

      <p>Theia or Sanae probably would have been angry, but not Harumi. Seeing him happily eating the watermelon, she let out a sigh of relief and sat down on the spot.</p>

      <p>“Do you wa... om nom... some... nom nom... too, Senpai?”</p>

      <p>“I-I’ll have some after I’ve calmed down.”</p>

      <p>Harumi was genuine relieved, but she wasn’t sure she could eat right away.</p>

      <p>“Tch, she already did it...”</p>

      <p>“Nyahaha, Harumi was too weak to split Koutarou’s head in two.”</p>

      <p>Theia and Sanae were displeased. Having finished eating part of the watermelon, Koutarou started complaining to them.</p>

      <p>“It’s over, so let me out of here already.”</p>

      <p>But they both shook their heads at Koutarou’s request.</p>

      <p>“I refuse.”</p>

      <p>“Now it’s Shizuka’s turn.”</p>

      <p>“Wh-What?!”</p>

      <p>Koutarou’s eyes shot wide open when he heard her name. If Shizuka, who was well known for her combat abilities, swung that wooden sword, Koutarou wasn’t sure what would happen to his head.</p>

      <p id="note2">“Chessttooo!<sup><a href="../Text/chapter1.xhtml#note2">2</a></sup>”</p>

      <p>To make matters worse was, Shizuka was all fired up. She was repeatedly swinging the wooden sword towards the sea. Her strength and speed were abnormal. It was plain to see that Koutarou was in danger.</p>

      <p>“S-Satomi-kun, I’ll save you right now!”</p>

      <p>Even Harumi could tell. She began digging to save Koutarou, but she didn’t get very far before someone stopped her.</p>

      <p>“Sakuraba-senpai, this way please! You’ll get in the way for the next watermelon splitting.”</p>

      <p>“Kyaah?! But Satomi-kun is still...!”</p>

      <p>“It’s fine, Sakuraba-senpai. Please just leave Satomi-san to us.”</p>

      <p>“Even you too, Nijino-san?!”</p>

      <p>Theia and Yurika dragged Harumi away with sweet talk. Yurika wasn’t cooperating just because she was scared of Theia. She also wanted to let Harumi get away.</p>

      <p>But as if to replace Theia and Yurika, Kiriha came to recover the split watermelon while Ruth placed a new one.</p>

      <p>“This is bad! I need to do something!”</p>

      <p>Panicking, Koutarou tried to get himself out of the sand. Thankfully, Harumi had dug out enough for him to get his arm free.</p>

      <p>“All right!”</p>

      <p>“Too bad!”</p>

      <p>“Please just wait there, Satomi-sama.”</p>

      <p>“Waaaaah!”</p>

      <p>But Sanae and Ruth just buried him again.</p>

      <p>“Stop it already, Sanae!”</p>

      <p>“No way, no how!”</p>

      <p>“And why are you so angry, Ruth-san?!”</p>

      <p>“Are you telling me I have to spell it out for you? Don’t make me laugh! That sort of betrayal is punishable by death!”</p>

      <p>“Just give up, Koutarou.”</p>

      <p>“Betrayal? What betrayal?!”</p>

      <p>Sanae and Ruth reburied Koutarou, Theia and Yurika dragged Harumi away, Shizuka was enjoying her practice swings, and Kiriha watched on with a smile as she took a bite of watermelon. Everybody was so focused on what they were doing that they were all oblivious to their surroundings. They were enjoying themselves to their fullest at the beach.</p>

      <p>“Now, Hachi!”</p>

      <p>“All right!”</p>

      <p>And that was when the ghost hunters put their plan into action.<br/><br/></p>

      <p>Rising up from the sea, they approached Koutarou and the rest. They both had a big bug net in each hand. They were actually tools used for capturing ghosts, but they looked and worked like any old net. With four nets between them, they dashed towards Sanae.</p>

      <p>“Hmm?”</p>

      <p>Koutarou, freshly buried in the sand again, was the first to notice them. But he never would have imagined that they were planning on capturing Sanae with their bug nets, so at first he just stared at them thinking that there sure were some real weirdos in the world.</p>

      <p>“Just wait! We’ll catch you right now, our cute little kitten!”</p>

      <p>“Money! We’ll make a video and rake in the cash! Money, money, money! We’ll sell her off and rake in even more!”</p>

      <p>But as they got closer and Koutarou heard the strange things they were saying, he starting getting worried. His worries only increased as he noticed their excitement, bloodshot eyes, and heavy breathing.</p>

      <p>“Hey, everyone, someone’s coming from behind you. Calm down a little.”</p>

      <p>Nobody except Koutarou had noticed them. He attempted to alert everyone else, but the only one who believed him was Harumi. She looked behind her at his behest.</p>

      <p>“Ah...”</p>

      <p>As she did, she too saw the suspicious looking pair. When she did, Harumi stiffened up. They looked like perverts—just the kind of people Harumi was terrible at dealing with.</p>

      <p>“I won’t fall for that trick!”</p>

      <p>“You’re too simple, pleb! If you’re going to lie, at least make up something more believable!”</p>

      <p>“We should punish him.”</p>

      <p>But Sanae, Theia, and Ruth assumed Koutarou was just trying to escape and didn’t believe him at all. The only one among them to turn around was Yurika. She had noticed how Harumi reacted.</p>

      <p>“I wonder who they could be...”</p>

      <p>But the simple-minded Yurika didn’t think the approaching ghost hunters were any danger.</p>

      <p>“Watch out, Koutarou!”</p>

      <p>“Everyone! Someone’s coming your way!”</p>

      <p>Kiriha and Shizuka, who were a little ways off, realized the two men were closing in on Koutarou and the others. But since they were completely caught off guard, the best they could do was shout out to the others.</p>

      <p>“What?”</p>

      <p>“Someone? Who?”</p>

      <p>“Did something happen?”</p>

      <p>With that, Theia, Sanae, and Ruth finally turned around.</p>

      <p>“I’ve got youuuuu!”</p>

      <p>“Come on, my angel!”</p>

      <p>But by then, the ghost hunters were wildly swinging their bug nets with all of their might.</p>

      <p>“Kyaaaaah!”</p>

      <p>Noticing the net coming straight down on top of her, Sanae swiftly vanished into the sand below. Thanks to her regular fights with Koutarou, she was used to surprise attacks.</p>

      <p>“Kyaah!”</p>

      <p>“Wh-What is this?!”</p>

      <p>Since Sanae avoided the net, Harumi and Ruth were hit instead. Unable to dodge the attack, the nets covered their heads.</p>

      <p>“I felt that one hit! I did it, Hachi! Catching one girl is nothing to me!”</p>

      <p>“I caught her too! Now we can do whatever we want!”</p>

      <p>The ghost hunters were rejoicing. The only thing on their minds now was the luxurious life ahead of them after selling Sanae. They would get so much of the sake they loved that they could fill a bathtub with it. They’d get a new TV and a bike, too. Their future was bright... or so they thought.</p>

      <p>“Hey, Hachi, what do you mean you got her too?”</p>

      <p>“Aniki, I’m the one who caught her.”</p>

      <p>That was when they both realized they had caught one ghost(?) each, even though there had only been a single ghost.</p>

      <p>“Hmm? What does this mean?”</p>

      <p>“Aniki, this ghost looks like a human to me.”</p>

      <p>“Same here. Hachi, we missed the target!”</p>

      <p>“Oh no! We caught the wrong ones!”</p>

      <p>By the time they realized their mistake, it was already too late. Sanae was long gone.</p>

      <p>“N-Nooooo! Please save me, Satomi-kuuun!”</p>

      <p>“P-Perverts!”</p>

      <p>And worst of all, the girls they had caught began screaming. The suspicious duo who had come out of the sea had caught two girls sitting on the sand with nets. Their eyes were bloodshot, they were breathing heavily, and they were soaking wet. They were the very definition of perverts.</p>

      <p>“What the hell are you doing?!”</p>

      <p>Hearing Ruth and Harumi screaming, Koutarou forced his way up out of the sand. Koutarou’s limbs had been bound with rope, but he was able to tear it right off in the heat of the moment. It was the kind of superhuman strength that occurred in life and death situations.</p>

      <p>“Senpai and Ruth-san are in trouble!”</p>

      <p>Breaking free from the sand, Koutarou glared at the ghost hunters with eyes radiating rage. The two immediately let go of their nets and began making excuses.</p>

      <p>“W-Wait up, young man! We’re not after these girls!”</p>

      <p>“Th-That’s right! We’re after a different one! That small one over there!”</p>

      <p>“He’s right, young man! We’re only trying to capture that small girl over there so we can do whatever we please with her before selling her off!”</p>

      <p>“Please believe us! We have no interest in normal girls!”</p>

      <p>But their excuses only fueled Koutarou’s anger.</p>

      <p>“S-So you’re not just perverts, but you also only target little girls like Theia?!”</p>

      <p>Koutarou didn’t realize they were talking about Sanae. He had no reason to think they could even see her. And it wasn’t just Koutarou. It didn’t occur to anyone else either.</p>

      <p>“So they’re targeting m-me? As I thought, even blending in with the common rabble, my noble aura still makes me stand out!”</p>

      <p>They were all sure that this was about Theia. Surely these two unforgivable perverts were planning on kidnapping a young girl and doing terrible things to her.</p>

      <p>“Curse you, you perverts! I don’t give a damn who you’re targeting! We have our hands filled with Yurika as the resident pervert already!”</p>

      <p>“S-Satomi-san, at least call me a cosplayer! Calling me a pervert is just too cruel!”</p>

      <p>Koutarou blurting out his true feelings put streams of tears in Yurika’s eyes.</p>

      <p>“I see... So to Satomi-san, I’m just a pervert...”</p>

      <p>Taking an unexpected critical hit, Yurika collapsed and cried.</p>

      <p>“I’m starting to hate everything... Maybe I should visit home for once...”</p>

      <p>“Calm down, young man! It’s for the good of society! It’s how we make a living!”</p>

      <p>“He’s right! We have no ulterior motives!”</p>

      <p>“You make a living on it?! You’re hardened criminals! On top of that, you dare make Sakuraba-senpai and Ruth-san cry?! I’ll turn you into chum and throw you back in the sea!”</p>

      <p>Enraged, Koutarou closed the distance to the ghost hunters. At the same time, the ghost hunters started backing off. But before long they were unable to back up any further.</p>

      <p>“Where do you two think you’re going?!”</p>

      <p>“Ack! F-From behind as well?!”</p>

      <p>Shizuka was flanking them with the wooden sword in hand. There was a vein practically popping out of her forehead, and her eyes were black with hatred.</p>

      <p>“Not good! We’re making a break for it, Hachi!”</p>

      <p>“W-We can’t! Aniki, we’re completely surrounded!”</p>

      <p>Apart from Yurika, who had broken down crying, and the defenseless Harumi and Ruth, the remaining members of the group had circled the ghost hunters. Koutarou clenched his fists, Shizuka tightened her grip on the wooden sword, Theia summoned a beam cannon from Blue Knight, and Kiriha ordered her two haniwas to attack. Lastly, Sanae appeared from under the sand, levitating and taking aim with a nearby rock and watermelon.</p>

      <p>“What’s wrong, Satomi-kun? What happened?”</p>

      <p>That was when more of Koutarou’s allies appeared. It was the six members of the cosplay society. Planning to meet up with Koutarou and the others, they came carrying their luggage.</p>

      <p>“Actually, some perverts showed up! It’s dangerous, so keep your distance!”</p>

      <p>“Perverts?!”</p>

      <p>“They do make an appearance from time to time”</p>

      <p>“Unforgivable!”</p>

      <p>“Every woman’s nightmare!”</p>

      <p>Upon hearing the situation, the girls helped surround the ghost hunters. They were all armed with full water bottles, and they were each prepared to throw them if it came down to that.</p>

      <p>“They’re perverts.”</p>

      <p>“Seriously?”</p>

      <p>“Well, those girls are cute...”</p>

      <p>“I seriously can’t believe it...”</p>

      <p>By now other people on the beach had noticed and were coming over to help too. It was no longer possible for the ghost hunters to get away.</p>

      <p>“I-It’s no use...”</p>

      <p>“It’s all over...”</p>

      <p>With how things were going, the two gave up on trying to talk themselves out of it or resist. And just like Yurika, they began crying.</p>

      <p>“By the way, we were just splitting watermelons. Would you like to join in?”</p>

      <p>Shizuka’s chilling smile became an unforgettable summer memory for the two ghost hunters.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter3">
    <div class="main">
      <h1>Rare Cards and Beetles</h1>

      <h2>Monday, August 11th</h2>

      <p>After enjoying the watermelon splitting to their fullest, Koutarou, the invaders, Harumi, Shizuka, and the cosclub members played until sunset. They were exhausted by the time they got back to the inn. Because of that, they all decided to take a trip to the hot spring to recuperate.</p>

      <p>“Ahhhh... I feel alive again!”</p>

      <p>As Koutarou dipped into the outdoor spring, he felt as if his exhaustion simply melted away. His tanned skin stung a little as he entered the water, but it wasn’t a sharp pain. It was simply the healing starting to take place in his tired body.</p>

      <p>“The room is small, but this hot spring is so big...”</p>

      <p>The hot spring here was separated for men and women, so Koutarou and the girls split up. And as there were no other guests around, Koutarou had the men’s spring to himself. It was almost like being in a large bathtub. Because his surroundings were always so noisy, this large and quiet hot spring was just what he needed.</p>

      <p>“Today was fun... the perverts aside. We sure did play a lot...”</p>

      <p>Koutarou recalled the events for the day. After chasing off the perverts(?), Koutarou and the others—a total of fourteen people with the cosclub—all played together. And they didn’t just go swimming. They also played beach volleyball and had a barbecue.</p>

      <p>“And Senpai got along with everyone. It’s all good.”</p>

      <p>Though Harumi didn’t swim because of her weak constitution, Koutarou had seen her, Yurika, Ruth, and some members from the cosclub playing on the beach. She even joined Koutarou for a little while to play beach volleyball.</p>

      <p><em>Having fun really is the most important thing...</em></p>

      <p>Harumi, who tended to be a loner, had been able to hang out with a bunch of other people. That was what Koutarou was the most happy about. Because of that, even after Harumi had returned to her villa, he was still in a good mood.</p>

      <p>“...!”</p>

      <p>“...?!”</p>

      <p>Koutarou heard the voices of the Corona House girls coming from the women’s bath. Though it was through a wall and he couldn’t clearly hear them, it sounded like they were all discussing something together.</p>

      <p>“Heh, are they at it again...?”</p>

      <p>Normally Koutarou would get angry and shout at them to not cause trouble for the other customers, but not this time. He could hear that they were all talking calmly. The girls had played all day long and were exhausted too.</p>

      <p>“You guys, don’t get too carried away...”</p>

      <p>As Koutarou soaked in the water, he began to doze off.<br/><br/></p>

      <p>Around the time that Koutarou was falling asleep in the men’s bath, the girls were discussing a special topic in the women’s bath. Without Koutarou around like he ordinarily was and enjoying their privacy as the only guests in the bath, the girls’ conversation naturally drifted towards things that didn’t often come up between them.</p>

      <p>First, it was complaining about Koutarou. Normally he was straight on, but from time to time he would do something incredibly stupid. Dissatisfied by that, the girls were enjoying swapping stories about him.</p>

      <p>“...That’s why, to tell you the truth, I’m not that attached to the throne. As long as I can protect my mother, I don’t need to become empress.”</p>

      <p>Their next topic branched off from that. Due to Koutarou’s unexpected resistance on all fronts, the girls’ invasions weren’t going as planned. It had already been four months since they came to room 106, and each of them were starting to panic in their own way. But nobody was giving up, and that was because they all had different reasons not to back down. It came up organically as they continued to talk.</p>

      <p>“However, to protect my mother who is the current empress, just being a princess is not enough. I need to show that I am also worthy of being empress, or the citizens will not approve of my actions. From there, I would just get absorbed into the military.”</p>

      <p>“So you don’t want room 106 to become empress, but because you want to protect your mom?”</p>

      <p>Oddly enough, Sanae had listened to Theia without making fun of her and was now looking at her with a serious expression.</p>

      <p>“That’s right. So I definitely won’t back down.”</p>

      <p>“Hmm, so you’re kind of like me.”</p>

      <p>“Like you?”</p>

      <p>And Theia was just as serious. She didn’t feel like making fun of her intentions. As her small body was soaking in the water, she cocked her head at Sanae.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert4">
    <img alt="insert4" class="insert" src="../Images/Insert4.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter31">
    <div class="main">
      <p>“Yeah. I need to wait for papa and mama in room 106.”</p>

      <p>Sanae sat down on the edge of the hot spring and began talking while lightly kicking her feet. However, since she was a ghost, she couldn’t stir up the water and her legs moved just like there was no water there.</p>

      <p>“When papa and mama come back, they would be troubled if I wasn’t there, right? That’s why I definitely won’t lose either. That place is my home after all.”</p>

      <p>“I see, so you’re doing it for your parents’ sake too... In that case you can’t back down either.”</p>

      <p>Theia looked at Sanae sympathetically. Her normal aggression was nowhere to be seen. The fact that she was exhausted might have had something to do with it. Thanks to that, Sanae forgot the antipathy she had begun feeling.</p>

      <p>“I-In that case, I can’t back down either!” Yurika piped up.</p>

      <p>“You?” Theia asked skeptically.</p>

      <p>“You’re just lying.” Sanae just shut her down.</p>

      <p>“I’m not lying! I have a proper reason too!”</p>

      <p>Yurika would usually back down at that point, but the serious atmosphere made her bolder than normal. Slightly excited, she clutched the towel she was playing with in the water.</p>

      <p>“I’m interested. Tell me more, Yurika.”</p>

      <p>Kiriha smiled next to her. Having entered the hot spring, her buoyant breasts looked even bigger than normal. And while Kiriha had her chest covered with a towel, she had gentle smile on her face.</p>

      <p>“Y-Yes.”</p>

      <p>Yurika was a bit at a loss at the unexpected support. However, she quickly pulled herself together and began explaining her situation.</p>

      <p>“Actually, I’m a magical girl to fill in for the person who I owe my life to.”</p>

      <p>“Owe your life?”</p>

      <p>Shizuka, who was in front of Yurika, looked confused. With her hair down, it was hard to recognize her at first glance. Her long hair fluttered as she tilted her head. Shizuka had vague doubts about what it meant to owe your life to someone as a cosplayer.</p>

      <p>“Yes. When I was in danger, she saved me. But in return, she suffered a serious injury...”</p>

      <p>Yurika cast her eyes down sadly. It was clear she felt responsible for what happened.</p>

      <p>“So you became a magical girl on her behalf?”</p>

      <p>“That’s right.” Yurika nodded. “That’s why I’ll protect the peace of this world. I miss not being able to see my family, but this is something I have to do.”</p>

      <p>“What do you mean about not seeing your family?”</p>

      <p>“If a magical girl stays at home, she’ll just cause trouble for her family. That’s why I left before I put them in any danger. My predecessor also fought alone.”</p>

      <p>“Oh... That’s an inspiring resolution.”</p>

      <p><em>So she’s becoming independent before she ends up causing trouble at home as a cosplayer... And she started cosplaying to repay the kindness that was shown to her. I thought she was completely hopeless, but it seems she at least has some guts...</em></p>

      <p>Even Sanae, who was always pretty harsh on Yurika, started to think better of her.</p>

      <p>“I see. So you do have a proper reason of your own,” said Theia.</p>

      <p>Theia felt similarly to Sanae, and she respectfully accepted Yurika’s story. And after lightly nodding at Yurika, Theia turned her attention to Kiriha.</p>

      <p>“So what brought you to the surface, Kiriha?”</p>

      <p>“I believe I’ve told you before. I’m here to reclaim what was stolen. That is all.”</p>

      <p>Theia was unsatisfied with Kiriha’s answer.</p>

      <p>“After spending several hundred years underground, there has to be a reason for suddenly planning to invade the surface, right? Why now?”</p>

      <p>“How pushy...” With Theia staring at her, Kiriha smiled wryly and gave up on trying to hide her reasons. “With the advancements on the surface, we, the People of the Earth, have begun drastically dropping in population.”</p>

      <p>“Your population?”</p>

      <p>“As people have grown enamored with the modernized surface, our population is emigrating more and more. And at the same time, the resources underground are starting to dry up. Taking into consideration the decline in population and the diminishment of our resources, living underground will be infeasible within a few generations.”</p>

      <p>Kiriha’s clan laid claim to scientific advances far superior to that of modern society. In the past, her people’s pride in that alone kept most of them from leaving for the surface.</p>

      <p>But with the surface modernizing on a large scale, the underground began losing its appeal to them. Many of the underground dwellers sought culture, starting with art and music that had begun to greatly develop too. More and more headed for the surface and didn’t return. And as resources became scarcer underground, the emigration only accelerated.</p>

      <p>“However, we can’t just wait for our extinction. That’s why we decided to come up to the surface. It’s the only choice we have to make a base and prosper again.”</p>

      <p>“But the surface governments won’t allow that...”</p>

      <p>“That’s right. But having been forced underground by the surface dwellers, that seems like a petty reason not to proceed.”</p>

      <p>“I don’t really get it, but if you don’t invade, everyone will lose their homes, right?”</p>

      <p>“Hah, bluntly put, but that is correct.”</p>

      <p>In contrast to the seriousness of the situation, Kiriha was smiling, which only served to confuse the others.</p>

      <p>“But you seem to be enjoying yourself, Kiriha-san.”</p>

      <p>“Even though our clan will go extinct at this rate, it’s not something my generation alone can fix. We can’t back down no matter what, but on the other hand, we can’t force our way and cause irreparable damage. Because of our small numbers, we only have one chance.”</p>

      <p>“I see. So you need a slow, careful, certain invasion over a long period of time. I assume you’re currently laying the foundation for that, correct?”</p>

      <p>“Spot on, Theia-dono.”</p>

      <p>Kiriha’s clan was a minority, so their biggest fear was being branded as terrorists by the surface dwellers. If that were to happen, they would meet the same fate several other minorities around the world had. But in a few generations, if they didn’t succeed in making a base on the surface, that would be the end for them. So to Kiriha who was leading the invasion, the most important thing was taking the slow and steady route to invasion. If they relied on force, it might mean an even sooner extinction.</p>

      <p>In a way, her situation very similar to Theia’s. If the invasion wasn’t supported by the citizenry, victory would elude them.</p>

      <p>“That said, it is true that I have been enjoying myself since I came to the surface.”</p>

      <p>“Is there something you want to do while you’re here?”</p>

      <p>Kiriha nodded at Shizuka’s question.</p>

      <p>“I’ve been wanting to ride on a roller coaster for a long time.”</p>

      <p>“A roller coaster?!”</p>

      <p>Everyone was caught off guard, not just Shizuka.</p>

      <p>“Actually, I once came up to the surface as a child. But back then, I was unable to ride one because I was too short,” Kiriha said nostalgically.</p>

      <p>“So that’s why you want to ride one? That’s in surprisingly good taste for someone who’s lived underground.”</p>

      <p>“If you told my father, he would scold me though,” Kiriha said as she shrugged her shoulders.</p>

      <p>Infatuation with the surface was one of the reasons for the decline of Kiriha’s clans. The idea that the chieftain’s daughter wanted to ride a roller coaster was somewhat scandalous.</p>

      <p>“As a generalization, it seems like everyone related to room 106 has complicated relationships with their families.”</p>

      <p>That was the conclusion Ruth had reached upon listening to everyone, and Shizuka quickly agreed.</p>

      <p>“Now that you mention it, that’s true. I want to take care of Corona House because my parents are gone. And Satomi-kun is living in room 106 because he didn’t want to cause any problems for his father. So we’re just like everyone else in that regard.”</p>

      <p>By some mysterious coincidence, they were in similarly difficult situations. They were able to understand each other a little better, but that included why each of them couldn’t back down. Their fight over room 106 was far from over.</p>

      <p>“Things sure have gotten problematic.”</p>

      <p>“There is no problem. I’m going to win.”</p>

      <p>“I-I won’t lose either!”</p>

      <p>“I don’t understand why Yurika hasn’t lost yet. No matter how I look at it, she’s just so incapable...”</p>

      <p>“That’s a horrible thing to say!”</p>

      <p>“L-Look Nijino-san, they say luck is a skill...”</p>

      <p>“Please don’t make it sound like this all comes down to luck!”</p>

      <p>Cheerful voices filled the women’s bath. They were all enemies, and they would continue to fight, but oddly enough they were all smiling now. That was because they knew that deep down, they were both enemies and friends.</p>

      <p>“Let’s go, Hachi.”</p>

      <p>“Got it, Aniki.”</p>

      <p>And it was at that peaceful moment that the ghost hunters attempted their plan B.<br/><br/></p>

      <p>“Hm...? H-Huh? What?”</p>

      <p>Koutarou woke up from his nap to a commotion from the women’s bath.</p>

      <p>“Nooooooooooo, p-perverts! Peepers!”</p>

      <p>“You bastards! You boldly come here to sully my noble body?!”</p>

      <p>“Th-They tried to touch me! Those men tried to touch my breasts!”</p>

      <p>“Karama, Korama, protect Ruth! Ruth, this way!”</p>

      <p>“Would you guys give it a break?! Are you stalkers?!”</p>

      <p>“Ahhh, I’ve had it! Just as we were really getting into the girl talk!”</p>

      <p>He could clearly hear all six girls, but they all seemed to be enraged now for some reason.</p>

      <p>“What’s going on over there?”</p>

      <p>Having just woken up, Koutarou had no idea what was happening.</p>

      <p>“Th-This is just a misunderstanding! We’re not into peeping! We have no interest in your normal bodies!”</p>

      <p>“That’s right! We only want to catch and lock up that small girl over there so we can have a good time!”</p>

      <p>He could also hear the familiar voices of two men. However, with his mind still foggy, Koutarou couldn’t quite place where he’d heard those voices before.</p>

      <p>“Arghhh! Sh-Shizuka, c-can I blow these guys away?! I can’t forgive them for saying something like that to me!”</p>

      <p>“That’s fine! This time’s special! Setting these no-good criminals free the first time was a mistake!”</p>

      <p>“Blue Knight! Bring out the high convergence Anti-Personnel Beam Cannon!”</p>

      <p>“Karama, Korama, set up an energy amplification field!”</p>

      <p>“Understood, ho! Let’s go, Korama!”</p>

      <p>“Now’s the time for our ultimate formation! Ho!”</p>

      <p>“Waaaaaaaah, it’s all over!”</p>

      <p>“Aniki! Anikiiiii!”</p>

      <p>“Dieeeee! Perverts!”</p>

      <p>A flash of light could be seen from the women’s bath.</p>

      <p>“Whoa!”</p>

      <p>Right afterwards, two men—charred black—came flying out of the women’s bath and landed right in front of Koutarou.</p>

      <p>“You’re those guys from the beach...”</p>

      <p>As he wiped away the water that splashed on his face, Koutarou finally remembered where they’d met before. The men now floating in the hot spring were the perverts that had tried to kidnap Theia at the beach.</p>

      <p>“You guys are pretty gutsy to show up again after the beating you took this afternoon. I’ll give you that much...”</p>

      <p>Their nefarious intentions aside, Koutarou had to give them some credit for their determination.</p>

      <p>“Y-Young man, what’s up with th-those girls you’re with...?”</p>

      <p>“I’m having trouble with them myself.”</p>

      <p>“I-I see...”</p>

      <p>But that was about as far as their perseverance got them. After being beaten to a pulp by the girls again, they were unable to do much else.</p>

      <p>“Blub blub blub...”</p>

      <p>“Please pass on...”</p>

      <p>Koutarou watched on as the two men slowly sank to the bottom of the hot spring.<br/><br/></p>

      <p>“Jeez, it’s gotten really late.”</p>

      <p>Koutarou didn’t leave the bath until some time after the girls did. Since he was the only one in the men’s bath, it took a lot of work to drag the ghost hunters out of it.</p>

      <p>“I’m back.”</p>

      <p>Because of that, the girls should have gotten back to the room long before he did. But as Koutarou reached the room, he couldn’t hear any cheerful voices. It was oddly quiet.</p>

      <p>“...That’s strange. They should have gotten back by now.”</p>

      <p>Koutarou tilted his head, took off his slippers, and entered the room.</p>

      <p>“Welcome back, Koutarou.”</p>

      <p>The only one in the room was Kiriha. The lights were off and the room was dark, but the faint light coming through the window illuminated her silhouette as she sat on the sill. Her yukata and beautiful black hair fluttered in the breeze coming in from outside. She was looking out over the night sea. But even in the dead of night, the sea wasn’t pitch black. The same moon and starlight that was shining down on Kiriha was lighting up the sea as well.</p>

      <p><em>Oh, so that’s why the lights are off...</em></p>

      <p>With the lights in the room on, Kiriha wouldn’t have been able to see the soft light reflecting off the water’s surface. Kiriha’s profile as she stared out of the window was strangely serene, but she looked even mellower as she gazed down at what she was holding. In her hand was a small card from an old card game. Though the card originally had a metallic quality, time had taken its toll and it now had lost most of its sheen. The card’s surface also had something scribbled on it. As Kiriha traced the handwriting with her finger, her bright smile made up for the lost luster of the card.</p>

      <p><em>That card must be something really precious to her...</em></p>

      <p>Kiriha’s expression, the gentle movements of her fingertips, and her solemn stare led Koutarou to believe she was reminiscing over something that involved that card. He also had possessions he associated with precious memories, so he thought he understood how Kiriha might be feeling.</p>

      <p><em>But what is this? I feel calm just watching her...</em></p>

      <p>Koutarou saw Kiriha’s smile every day. She was very deliberate about that. But the smile he saw now was different from any smile she had shown him so far. That struck a chord deep inside of Koutarou. It made him lower his guard.</p>

      <p>“What’s wrong, Koutarou? Why are standing over there?”</p>

      <p>Kiriha broke the silence. She looked at Koutarou and smiled—a smile very similar to when she was looking at the card.</p>

      <p>“Ah, u-um...”</p>

      <p>Koutarou couldn’t say that he was staring at her in admiration, so he stammered for an excuse. Fortunately, Kiriha was holding the perfect excuse in her hand.</p>

      <p>“That card looks like it’s something very dear to you, so I was just wondering what it is.”</p>

      <p>“It doesn’t seem like me, does it? I’m well aware of that, but I just can’t part ways with it,” Kiriha said as she gazed down on the card again with a bittersweet smile.</p>

      <p>But Koutarou shook his head.</p>

      <p>“You don’t have to part ways with it. It’s a treasure to you, right?”</p>

      <p>“Koutarou...”</p>

      <p>Kiriha looked at Koutarou suspiciously. She was puzzled by his words.</p>

      <p>“What’s the matter, Kiriha-san?”</p>

      <p>“I thought you would laugh at me when you saw me carrying around something like this, so I was just a little surprised.”</p>

      <p>“It doesn’t matter who you are, Kiriha-san. I couldn’t laugh at someone else’s precious memories. Besides, I have stuff like that hidden away too,” Koutarou said lightheartedly.</p>

      <p>As he spoke, Kiriha’s mysterious smile from before crept back to her lips. It stirred something deep inside of Koutarou.</p>

      <p>“...Thank you, Koutarou.”</p>

      <p>“You won’t get anything for thanking me, you know.”</p>

      <p>Koutarou tried to cover up his embarrassment, but Kiriha shook her head.</p>

      <p>“That’s fine. I’ve already received enough from you.”</p>

      <p>“H-Hey...”</p>

      <p>Koutarou couldn’t hide his confusion anymore. This wasn’t the normal Kiriha he was used to dealing with. There was something honest and transparent about her now. The atmosphere around her was completely different. It was pleasing to Koutarou, even though he knew he couldn’t let his guard down around her.</p>

      <p>“I got this card a long time ago from someone I loved. But I haven’t seen him ever since...”</p>

      <p>“Do you want to see him again?”</p>

      <p>“Yeah, I do... But I don’t know what I would do if we met.”</p>

      <p>Kiriha was normally scheming, but the thought of using her own memories like that didn’t cross her mind. That meant this was the first time she had shown Koutarou a bit of her true self. It was a subconscious sign of gratitude to Koutarou for not laughing at her.</p>

      <p><em>Is she trying to trick me again? She doesn’t seem to be, but... No, no, this is Kiriha-san we’re talking about. I have to stay on my toes. But are these really the eyes of a liar...?</em></p>

      <p>But Koutarou had no way of knowing that. He was confused by her revealing herself in such a way.</p>

      <p>“Ah, here they are! Koutarou and Kiriha, you two come too!”</p>

      <p>“Wuh?!”</p>

      <p>Sanae’s sudden appearance startled Koutarou so badly that he thought his heart might stop. For better or for worse, Kiriha had been the only thing on his mind at the moment.</p>

      <p>“O-Oh, it’s just Sanae...”</p>

      <p>“What’s wrong, Koutarou? You’re making a weird face. It’s gross.”</p>

      <p>“L-Leave me alone.”</p>

      <p><em>She’s right, this isn’t like me. I’m just feeling a bit generous after coming to the beach...</em></p>

      <p>Though he had been incredibly surprised by Sanae’s appearance, it snapped him back to reality.</p>

      <p>“Well, there’s a ping pong table over there, so you two come play too! We’re having a tournament!”</p>

      <p>“Oh, that sounds interesting.”</p>

      <p>Sanae and the others hadn’t come back yet because they had found a ping pong table on their way back. Kiriha, deep in thought, had returned to the room alone.</p>

      <p>“Let’s go, Sanae!”</p>

      <p>“Aye aye, sir!”</p>

      <p>Hearing about the ping pong table, the sports-loving Koutarou dragged Sanae with him and dashed out of the room. With that, Kiriha was once again the only one left in the room.</p>

      <p>“...How odd. Why did I tell Koutarou all that?”</p>

      <p>Kiriha herself was surprised at opening up to Koutarou. Although she was happy that he hadn’t laughed about her card, when she thought about the fight for room 106, revealing herself would only serve as handicap. But even then, she couldn’t keep herself from talking. Part of her felt like she wanted to let him know.</p>

      <p>“How careless. It’s like our positions have been reversed...”</p>

      <p>Kiriha was trying to seize room 106 by finding her way into Koutarou’s heart. Yet instead, Koutarou was the one making his way into hers.</p>

      <p>“I guess this is what you call a tactician outsmarting themself. Heeheehee...”</p>

      <p>But despite what she said, Kiriha didn’t regret a thing.<br/><br/></p>

      <p>Koutarou and the others went to bed after midnight. Normally they would stay up a while longer, but everyone was exhausted after playing all day. On top of that, they still had two more days to play on the beach ahead of them. So instead of forcing themselves, they all decided to get some rest.</p>

      <p>But seven people sleeping in such a small room was no easy task. And it wasn’t just the lack of space. The heat wasn’t helping at all either. After a long discussion of how to fit everyone in, it was decided that Sanae would sleep in the ceiling, and Yurika, who had lost in rock-paper-scissors, would sleep in a sleeping bag. They had solved the problem of how to fit everyone in the room, but that didn’t do anything about the temperature. Fortunately, being so close to the beach, it had cooled off enough to sleep by 1 o’clock or so. And by 2 o’clock, everyone had fallen into a deep slumber. Little did they know that the night’s troubles were just about to begin.</p>

      <p>“...Hmm... H-Huh...?”</p>

      <p>Ruth was the first to notice the strange occurrence. When she tried to roll over or sit up, she was unable to move. It felt like something warm was covering her entire body.</p>

      <p>“Fuh... Fuh...”</p>

      <p>She could feel someone’s breath repeatedly stroking her cheek. The smell of unfamiliar body soap tickled her nose.</p>

      <p><em>What is this, I wonder...?</em></p>

      <p>She had no idea what was on top of her, but as the hot breath caressed her cheek, Ruth let herself go a little and felt a strange sense of freedom. She wanted to give herself over to that powerful warmth.</p>

      <p>“This is mine...” a man’s voice whispered into her ear.</p>

      <p>When the mysterious warmth on top of Ruth wrapped itself around her, she felt an even deeper sense of security.</p>

      <p><em>A man’s voice...</em></p>

      <p>However, that realization snapped Ruth wide awake.</p>

      <p>“Wh-What is—?!”</p>

      <p>When she opened her eyes, the first thing Ruth saw was the figure of a man on top of her. The perverts from the beach and hot spring came to mind and Ruth tensed up.</p>

      <p><em>I-I’m being, a-attacked again?!</em></p>

      <p>Ruth was practically paralyzed by fear and surprise. Unable to scream, she couldn’t do anything but stare up at the man over her. That was when a faint light came through the window and lit up the man’s face. Thanks to that, Ruth was able to identify him.</p>

      <p>“...Huh? S-Satomi-sama?!”</p>

      <p>That face belonged to Koutarou. Once she recognized him, Ruth’s tension vanished immediately.</p>

      <p>“Oh, it was just you, Satomi-sama... Please don’t surprise me like that... Goodness...”</p>

      <p>Ruth let out a sigh of relief and brought her cheek closer to Koutarou’s again. For a moment, the warm sense of security she had felt before returned. She enjoyed the sensation of his breath on her cheek until it dawned on her.</p>

      <p>“...Wait! Satomi-sama?!”</p>

      <p>Ruth tensed up once more. Fully realizing the situation, her mind went blank and she lost her ability to reason.</p>

      <p>“S-Satomi-sama desires me... desires... Ahhh!”</p>

      <p>Ruth wasn’t afraid like she was before when she thought she was being accosted by some pervert. This time, she was filled with a strong sense of surprise and embarrassment... possibly with a tinge of joy.</p>

      <p>“Wh-Wh-Wh-What should I do?! I-I’m not prepared! Satomi-sama, this is too sudden!”</p>

      <p>“I won’t hand it over to anyone...”</p>

      <p>As those words leaked out of Koutarou’s mouth, he tightened his grip around Ruth even more.</p>

      <p>“F-Fuaaaaah...” At that moment, all power left her body. “I-If you say something like that, I’ll go crazy!”</p>

      <p>Coming from a noble family and being raised only around other girls, this situation was far too stimulating for Ruth. If it had been someone she hated, it would have been rather cut and dry, but she was dealing with Koutarou, someone she rather liked.</p>

      <p>And then Koutarou brought his face closer to hers. Ruth’s intuition told her that he was going to kiss her, and she couldn’t help remembering when she had imagined kissing Koutarou back at the lottery tent.</p>

      <p>“Th-This... At this rate I’ll... I’ll...!”</p>

      <p><em>I-It’s fine, right?! A man who desires me has embraced so I can’t escape. This isn’t just some selfish delusion, right?!</em></p>

      <p>Prompted by her throbbing heart, Ruth finally gave in. She raised her chin and closed her eyes in answer to Koutarou.</p>

      <p><em>I’m glad... It was just a misunderstanding on my part...I thought he didn’t care about how I looked in my swimsuit... But he really does see me as a woman...</em></p>

      <p>“I found this tree, Mackenzie. If you want a beetle, go find your own tree...”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert5">
    <img alt="insert5" class="insert" src="../Images/Insert5.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter32">
    <div class="main">
      <p>Unfortunately, Koutarou didn’t see Ruth as a woman, but rather as a large tree with several beetles on it.</p>

      <p>“Huh...?”</p>

      <p>At that moment, Ruth’s mind went blank once more.</p>

      <p>“Heh heh heh, I won’t hand over a single one to you...”</p>

      <p>“H-He’s just dreaming...?”</p>

      <p>Everything finally became apparent to Ruth.</p>

      <p>Koutarou had unbelievably poor sleeping habits. He would always roll around when he slept, as evidenced by her stepping on him every morning. This time, Ruth just happened to be in his way. He was only clinging on to Ruth because he thought she was a tree.</p>

      <p>“I win this year, Mackenzie... Bwahahaha...”</p>

      <p>“He’s not after me, but... beetles?”</p>

      <p>Ruth’s throbbing heart, the conflicted feelings of being desired, and the anticipation of being kissed... It <em>was</em> all just a misunderstanding on her part. That reality was just far too cruel for Ruth.</p>

      <p>“N-Nooooo! This can’t beeeee!”</p>

      <p>Ruth began struggling to escape—from the truth and from Koutarou. She desperately tried to push Koutarou away and started screaming out loud.</p>

      <p>“A-An earthquake, huh...? That was close...”</p>

      <p>“Nooooooooooo!”</p>

      <p>Koutarou mistook Ruth struggling beneath him for an earthquake and held on to her even tighter in response. But that didn’t stop Ruth. Although try as she might, Koutarou just let her push him around in his sleep as he clung to her.</p>

      <p>“Kyaaaaah!”</p>

      <p>“Ugh!”</p>

      <p>“Kyaaah! Wh-Who just touched my breasts?!”</p>

      <p>“Wh-What?! What’s going on?”</p>

      <p>Koutarou and Ruth were tumbling around the room now. They knocked over Yurika, touched Shizuka’s breasts, and rolled over Theia’s face. The only ones who were safe were Kiriha, who had noticed the commotion, and Sanae, who was sleeping in the ceiling.</p>

      <p>“All right, let’s go, Hachi!”</p>

      <p>“Got it, Aniki!”</p>

      <p>But some people always have terrible timing. The two bumbling ghost hunters were a shining example.</p>

      <p>“Satomi-kun, you pervert!!”</p>

      <p>“Dieeeee! Pay for this with your lifeeeee!”</p>

      <p>“Stupid Satomi-sama!”</p>

      <p>The ghost hunters were planning on sneaking into the room after everyone had fallen asleep. But just as they tried to enter through the window, they were blown away by a stray bullet.</p>

      <p>“H-Hachi... Wh-What exactly just...?”</p>

      <p>“Wh-Who knows? But we found out something, Aniki.”</p>

      <p>“What?”</p>

      <p>“We should wait until that ghost is alone...”</p>

      <p>“Th-That’s exactly I was thinking... This mission’ll kill us at this rate...”</p>

      <p>The two had been kicked to the base of the inn and fainted on the spot. Just like that, their third attempt ended in a failure.<br/><br/></p>

      <p>“What are you doing, Satomi-kun? Keep it together. What time do you think it is? Jeez...”</p>

      <p>“I am really sorry. I have no excuse. I completely forgot about my own poor sleeping habits...”</p>

      <p>It was now 2:30 AM. With the lights on now, Koutarou was repeatedly apologizing to the girls.</p>

      <p>“What kind of dream makes you roll all around the room anyways?”</p>

      <p>“Well, me and Mackenzie were hunting for beetles, but there was an earthquake all of a sudden. I held on to the tree with all my might, but apparently that’s when I started rolling around.”</p>

      <p>“The shaking was only because you were rolling around. You really are an idiot... Besides, why would you be hunting beetles at your age?”</p>

      <p>“But there was a big one over eight centimeters long. As a man I couldn’t just not—”</p>

      <p>“Satomi-sama, that’s enough with the beetles! It’s really unpleasant!”</p>

      <p>“S-Sorry.”</p>

      <p>The girls were angry, but Ruth, who’d rolled around with Koutarou, was especially angry. She was so angry that her usual docile attitude seemed like an illusion. The only ones that weren’t angry were Kiriha, who hadn’t been involved at all, and Yurika, who was out cold.</p>

      <p>“Hey, pleb.” Theia whispered as she tugged on Koutarou’s sleeve.</p>

      <p>“What?”</p>

      <p>“What did you do to Ruth? It’s abnormal for her to be so angry. Are you sure all you did was hold on to her and roll around with her?”</p>

      <p>“Yeah, that should be all I did...”</p>

      <p>Of course, Koutarou had no clue about why Ruth was so angry. All he was doing was hunting for beetles.</p>

      <p>“Hmm, how unusual... This is the first time Ruth has gotten that angry at someone other than me.”</p>

      <p>“This is bad...”</p>

      <p>“When she’s like this, it’s best to leave her alone for a while. It takes about a week for her to cool down.”</p>

      <p>“Your Highness! Satomi-sama! What are you whispering for?!”</p>

      <p>Ruth’s eyes were burning with rage.</p>

      <p>“N-Nothing.”</p>

      <p>“I-It’s nothing. Nothing at all.”</p>

      <p>Both of them caved before Ruth.</p>

      <p>“...Don’t take me down with you.”</p>

      <p>“Don’t be so selfish. You’re the one who started talking to me.”</p>

      <p>“Are you listening to me, you two?!”</p>

      <p>Sanae had the best grasp of what was going on.</p>

      <p>“...”</p>

      <p>That was both because she was the closest to Koutarou, and because she was a ghost. With a little bit of an outsider’s perspective, she had a pretty good handle on how they all felt about each other.</p>

      <p><em>Theia and Ruth are interested in Koutarou... I need to do something fast or Koutarou will end up getting along better with them than with me.</em></p>

      <p>“What’s wrong, Sanae? You’re making a funny face.”</p>

      <p>“K-Koutarou?!”</p>

      <p>But it was none other than Koutarou that managed to bring a halt to Sanae’s train of thought.</p>

      <p>“I’m sorry. You’re angry too, right?” he asked as he apologized.</p>

      <p>“I-I’m not really angry. I’m not one of the victims.”</p>

      <p>“Really? Then why are you making that kind of face?”</p>

      <p>“Why do you care about me?! In the end, we’re just enemies!”</p>

      <p><em>In the end, we’re just enemies...</em></p>

      <p>Sanae was shocked by her own words.</p>

      <p>Koutarou and Sanae were enemies. Eventually, one of them had to go. That inevitable reality put a damper on Sanae’s feelings.</p>

      <p>Compared to the two of them, Koutarou and Theia weren’t strictly enemies. Theia was after room 106, but she was ultimately trying to make Koutarou an ally. She had no need to chase Koutarou away.</p>

      <p>Everyone had known that from the very beginning, but it was too much for Sanae right now.</p>

      <p>“Yeah, you’re right. We really are enemies. It’s just as you say.” Koutarou shrugged and said no more.</p>

      <p><em>“You’re right. We really are enemies...”</em></p>

      <p>Koutarou’s words pierced Sanae, even though she knew that’s how Koutarou would respond. It still hurt.</p>

      <p><em>I... I can’t take it... I’m... going crazy...</em></p>

      <p>Tormented by the truth she couldn’t deny and the unease growing in her heart day after day, Sanae’s innocent smile disappeared.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter4">
    <div class="main">
      <h1>Sanae’s Crisis</h1>

      <h2>Tuesday, August 12th</h2>

      <p>The next day, the weather was clear and Koutarou and the others went out to spend their second day at the beach.</p>

      <p>“Yurika, what are you up to?”</p>

      <p>“Shhh, shhh!”</p>

      <p>Koutarou was on his way back to their umbrella after buying some yakisoba when he saw Yurika nervously observing her surroundings and hiding as she darted about. She normally looked suspicious, but this was even worse than usual.</p>

      <p>“Are you pretending the enemy magical girls have come to attack?”</p>

      <p>“That’s not it! I just don’t want the cosclub members to find me!”</p>

      <p>Koutarou assumed this was all just a part of cosplaying, but Yurika only wanted to escape from the cosplay society. Her suspicious behavior was specifically to avoid them.</p>

      <p>“Why?”</p>

      <p>“The cosclub is trying to catch me so they can drag me to that Comiha event the day after tomorrow!”</p>

      <p>“Why don’t you just go then?”</p>

      <p>That way, room 106 would be more peaceful.</p>

      <p>“I don’t want to.”</p>

      <p>“But your friends will be there, right?”</p>

      <p>“Nooo! Why do you keep teasing me like this, Satomi-san?!”</p>

      <p>“Idiot, they’ll find you if you keep shouting.”</p>

      <p>“R-Right...”</p>

      <p>Yurika crept behind some rocks in order to keep hiding. Her plan was to stay hidden until the cosplay society gave up.</p>

      <p>“Talk about being in denial...”</p>

      <p>Watching Yurika leave, Koutarou opened the box of yakisoba he just bought. The fragrant smell of the fried noodles wafted up out of the thin plastic container.</p>

      <p>“That’s more like it. I can’t go to the beach without getting some of this!”</p>

      <p>Koutarou quickly took a bite of yakisoba, and the thick taste of the sauce spread throughout his mouth. The food from the beach houses was all seasoned rather strongly, assuming that most people would be numb to the taste of salt after swimming in the ocean.</p>

      <p>“Do you want a taste too, Sanae?”</p>

      <p>After tasting it, Koutarou stopped eating for a moment to tap his shoulder as an invitation for Sanae.</p>

      <p>“...Don’t want any,” Sanae mumbled, staring at the sand. She didn’t even try to look at Koutarou.</p>

      <p><em>So it didn’t work...</em></p>

      <p>Koutarou was a little disappointed at her answer. In actuality, he had bought the yakisoba because he wanted to talk to Sanae.</p>

      <p>Sanae had been acting strangely since the morning. She wasn’t doing much of anything other than moping about something with a gloomy look on her face. From time to time, she’d stare at Koutarou. When he noticed, she’d just look elsewhere.</p>

      <p>Sanae was almost always energetic and smiling, so to have her depressed like this made the atmosphere around Koutarou and the others a little awkward. It was only thanks to the cosplay society, who didn’t know about Sanae, that the mood hadn’t gone totally sour.</p>

      <p>“Just what exactly is wrong? You’ve been like this since this morning.”</p>

      <p>“Just leave me alone... Why do you care about me? We’re enemies!” Sanae fussed as she sulkily looked away.</p>

      <p>“Even if you say we’re enemies, when you’re acting like this—”</p>

      <p>“I told you to leave me alone! Don’t bother with me! It was strange for us to get along in the first place since we’re enemies!” Sanae yelled at Koutarou with tears forming in her eyes.</p>

      <p><em>Sanae, you...?</em></p>

      <p>Koutarou was more shocked by her tears than her words. She was sad and angry, but her eyes were desperately pleading for something. Sadly, Koutarou couldn’t tell what that something was. He couldn’t imagine what was going inside of her head.</p>

      <p>While Koutarou was unable to say anything, Sanae stood up and turned her back to him. Seeing that, Koutarou was finally able to squeeze out some words.</p>

      <p>“W-Wait, Sanae, this conversation is not—”</p>

      <p>“It’s over! If you won’t leave me alone, I’ll just go somewhere else!”</p>

      <p>But in the end, Sanae wouldn’t listen to Koutarou and left. Being able to pass through people, Sanae quickly put a good distance between her and Koutarou.</p>

      <p>“Just what is up with Sanae?”</p>

      <p>With yakisoba still in hand, Koutarou let out a sigh. He couldn’t figure out what had gotten her so down. The only thing he could think of was their discussion last night. But even then, all they’d said was that they were enemies. The two of them having a truce didn’t exactly change that. They were both aware that they needed to chase out one another in the end, so he couldn’t imagine that that was what hurt her feelings.</p>

      <p>“You didn’t make up, Satomi-kun?”</p>

      <p>“Yeah, I failed, Landlord-san,” Koutarou said, looking up and nodding at Shizuka.</p>

      <p>She was walking over with Theia and the others behind her. They were also worried about Sanae.</p>

      <p>“What is Sanae so angry about?” Theia looked in the direction Sanae had gone and let out a small sigh.</p>

      <p>“Sanae-sama looked less like she was angry and more like she was crying to me.”</p>

      <p>“I thought so too. It would be best to do something fast, Koutarou.”</p>

      <p>“That’s right. With Sanae like this, we can’t work anything out about room 106.”</p>

      <p>“Yeah, I know, but I don’t know what to do...”</p>

      <p>Like the girls, Koutarou was also staring in the direction Sanae had stormed off. He’d felt a little on edge ever since Sanae’s smile disappeared. He just wanted to do something about the situation, but not being able to come up with anything was frustrating him.</p>

      <p>“Argh, I give up! Just thinking about it won’t get us anywhere!”</p>

      <p>Koutarou, who wasn’t really one for thinking in the first place, simply gave up on it.</p>

      <p>“Landlord-san, I’m going to go look for Sanae. I’ll see you later.”</p>

      <p>Act before thinking—that was Koutarou’s motto.</p>

      <p>“Okay, good luck, Satomi-kun.”</p>

      <p>Koutarou left his things with the girls and went looking for Sanae.<br/><br/></p>

      <p>Alone, Koutarou started by heading in the direction Sanae had gone. She’d left going down the coastline, so Koutarou made his way through the beach full of people. After walking for a while, the crowd of beachgoers gradually thinned. He’d reached a rocky part of the shore, which was a no swimming zone.</p>

      <p>“Sheesh...”</p>

      <p>Koutarou took a breath of fresh air after getting away from the crowd. The footing on the rocky beach was worse, but the lack of people alone made it easier to walk.</p>

      <p>“Satomi-kun!” someone called out to him.</p>

      <p>As he looked towards the direction of the voice, he saw a familiar parasol up on a breakwater. Harumi was waving to him.</p>

      <p>“Sakuraba-senpai!”</p>

      <p>Koutarou waved back to Harumi and climbed up to her.</p>

      <p>“Hello, Satomi-kun.”</p>

      <p>Harumi greeted Koutarou with a smile, seeing how out of breath he was after scaling the breakwater. She was wearing a light blue summer dress different from the one she had on yesterday. The only part of her outfit that was the same was her parasol.</p>

      <p>“H-Hello, Sakuraba-senpai. I know this a bit sudden, but Sa—”</p>

      <p>“I know this is a bit sudden, but Sanae is missing. Have you seen her?” is what Koutarou was about to say, but he stopped himself short. Harumi couldn’t see Sanae, so asking would only confuse her. For some reason, only people who were connected to room 106 could see Sanae.</p>

      <p>“Satomi-kun?”</p>

      <p>“Oh, nothing. I was just wondering what you’re doing in such a lonely place, Sakuraba-senpai.”</p>

      <p>“Actually, my family villa is nearby.”</p>

      <p>Harumi didn’t seem to think anything of Koutarou changing his question partway through. She just smiled and pointed towards the mountain road behind her lined with several large houses, one of which belonged to her family.</p>

      <p>“I see.”</p>

      <p>“And what about you, Satomi-kun? Why are you in such a lonely place?”</p>

      <p>“Well, that’s...”</p>

      <p>Koutarou hesitated whether or not he should tell her, but he soon decided to come clean. Excluding the part about Sanae being a ghost, there wasn’t any reason not to tell her.</p>

      <p>“Actually, I had a fight with one of my friends I came to the beach with.”</p>

      <p>“Oh dear...” Harumi’s eyes opened wide in surprise and she immediately looked concerned.</p>

      <p>“That friend ran off somewhere, so I’m currently looking for her.”</p>

      <p>“I see...” Harumi cast a sad look downward. Sensing Koutarou’s feelings, she was worried even for a perfect stranger. “Satomi-kun, if you don’t mind, could you tell me why you got into a fight? I might be able to help out somehow.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert6">
    <img alt="insert6" class="insert" src="../Images/Insert6.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter41">
    <div class="main">
      <p>“Sakuraba-senpai...”</p>

      <p>Koutarou welcomed Harumi’s offer. He felt like she would have an answer for his conundrum.</p>

      <p>“Well, I actually don’t know,” he admitted.</p>

      <p>“You don’t know?”</p>

      <p>“I have an idea, but I have no way of knowing if it’s really the reason...”</p>

      <p>“And what’s that?”</p>

      <p>“When I told the truth and acknowledged that we don’t get along, it seemed to hurt her.”</p>

      <p>Koutarou said “we don’t get along” instead of “we’re enemies” to make it easier for Harumi to follow.</p>

      <p>“The truth...”</p>

      <p>“But that’s just what our relationship is like. We’ve even argued about it before, so I don’t really think that’s why she’s upset now.”</p>

      <p>From day one, Koutarou and Sanae had butted heads as enemies. While they may have entered a truce along the way, the circumstances ultimately hadn’t changed. They still insulted each other and threatened to throw each other out. Koutarou didn’t see why that would suddenly hurt Sanae’s feelings.</p>

      <p>“I see... But she might still be hurt.”</p>

      <p>Harumi didn’t see it his way. She came to a different conclusion after hearing Koutarou’s explanation.</p>

      <p>“You think so?”</p>

      <p>“Yes. Probably...” Harumi flashed a faint smile and began explaining like a mother admonishing her child. “We’re club mates, right?”</p>

      <p>“Yes, you’re always helping me out a lot.”</p>

      <p>“But I could also say it like this...” Harumi paused and looked directly into Koutarou’s eyes. “We’re complete strangers that just happen to be in the same club.”</p>

      <p>Her words sounded terribly cold to Koutarou. He hated hearing her say that.</p>

      <p>“That’s...”</p>

      <p>“The truth, in a way.”</p>

      <p>Harumi tilted her head and smiled again as the warmth returned to her voice.</p>

      <p>“If you had said that when we first met, I wouldn’t have thought much of it.”</p>

      <p>Still smiling, she put her hands over her chest, almost like she was checking her own heartbeat.</p>

      <p>“But right now, I would be very sad if you said something like that. It would make me sad, even though it might be the truth.”</p>

      <p>“...”</p>

      <p><em>Even if it might be true...</em></p>

      <p>Those words really sunk in for Koutarou.</p>

      <p>“What about you, Satomi-kun?”</p>

      <p>“...Yeah. I was a little shocked when you said it just now.”</p>

      <p>Koutarou nodded at Harumi’s words. He knew she was right.</p>

      <p>“Then I think it’s the same for your friend too.”</p>

      <p>Harumi looked out over the sea. Her eyes were gentle, but sad. It was like she was trying to ease the pains of someone who was hurting even now.</p>

      <p>“‘I know it’s the truth. At first I really felt that way, but as time passed, those feelings changed. I just hate thinking about it that way. There must be another way. I want there to be.’ Don’t you think that’s what she might be feeling?”</p>

      <p>“She’s...”</p>

      <p>It was something Koutarou hadn’t even considered. He had no reason to think something was changing with Sanae.</p>

      <p>“But if you were brutally honest, Satomi-kun, that’s like calling us complete strangers.”</p>

      <p>“Ah...”</p>

      <p>Koutarou suddenly remembered what Sanae had said.</p>

      <p><em>“I told you to leave me alone! Don’t bother with me! It was strange for us to get along in the first place since we’re enemies!”</em></p>

      <p><em>Did Sanae not want us to be enemies? And I still said we were? Is that why she got upset and left?</em></p>

      <p>“I’m sure it was hard to hear. I also want Satomi-kun to think of me as a friend. I don’t want to hear you say we’re just complete strangers...”</p>

      <p>“So that’s why...!”</p>

      <p>It sounded like Harumi was describing Sanae perfectly. Koutarou knew she had to be right.</p>

      <p>“Then what should I do, Senpai?! What do I have to say to get her to forgive me?!”</p>

      <p>There was no longer any room for doubt. He was convinced that was why Sanae was so crestfallen, so he sought an answer from Harumi. He believed she would point him the right direction.</p>

      <p>“...I’m sure you already know the answer, Satomi-kun.”</p>

      <p>Harumi smiled again. It was a warm smile that made Koutarou feel compassionate.</p>

      <p>“Satomi-kun, you don’t feel the same as you did before either, right?”</p>

      <p>“Me...?”</p>

      <p>When they first met, Koutarou only thought of Sanae as an enemy. She was an evil spirit in his room. But over the months, those feelings had gradually subsided.</p>

      <p><em>The truth hasn’t changed. We are still enemies, but that’s not all. If it was, we wouldn’t have a truce. She wouldn’t possess me either. And because I didn’t understand that, she...</em></p>

      <p>“I got it! Thank you very much, Sakuraba-senpai! I’m going now!”</p>

      <p>“All right. I’ll be praying for you two to make up.”</p>

      <p>Having found his answer, Koutarou took off running. He didn’t even look back at Harumi who was watching over him. Having decided on his next goal, he ran straight for it. That kind of straightforward determination was one of Koutarou’s good parts.</p>

      <p>“Satomi-kun...”</p>

      <p>But there was a sad look in Harumi’s eyes as she watched him go. They were not the eyes of someone watching their underclassman running off to make up with a friend. When she could no longer see Koutarou, she let out a sigh.</p>

      <p>“Think of me as a friend, huh...?”</p>

      <p>Harumi did want Koutarou to think of her as a friend. That was undeniable. She had felt that way for a while now.</p>

      <p>“But...”</p>

      <p>But right now, that wasn’t all. There was something else... At least, she wanted there to be. Before she knew it, that was the truth of how she felt.</p>

      <p>“I’m... a coward... and a liar...”</p>

      <p>She was unable to be honest like she had told Koutarou to be. And that fact was sad and painful for her.<br/><br/></p>

      <p>As Koutarou left Harumi, Sanae was sitting alone. She was at a small cliff a bit further into the rocky area where Koutarou was. Even though it wasn’t a tall cliff, it offered a great view of the ocean.</p>

      <p>“Stupid Koutarou... You don’t even know how I feel...”</p>

      <p>But Sanae, who was sitting alone and holding her knees, wasn’t looking at that beautiful sight. And neither the seagulls’ cries nor the waves crashing into the cliff reached her ears.</p>

      <p>“But, why do I feel so lonely and sad...?”</p>

      <p>Sanae was too preoccupied thinking about her relationship with Koutarou. They were enemies. She had reaffirmed that after her argument with Koutarou, but for some reason, she felt a deep sadness over it.</p>

      <p>“Even though I wanted to chase him out when we first met...”</p>

      <p>Even though they were supposed to be enemies, before she knew it, thinking that way was painful. She couldn’t believe that she was starting to feel that way.</p>

      <p>The obvious fact that they were enemies didn’t feel so obvious to her anymore. She was confused by her change of heart. And in the midst of being overwhelmed by her emotions, she had taken it out on Koutarou and run away from him. She knew he hadn’t done anything wrong. It was natural for Koutarou to think of her as an annoyance and an evil spirit. She had brought that on herself. But even though she understood that, she couldn’t hold back her feelings.</p>

      <p>“I should just return to the way I was before I met Koutarou. He’s... an enemy after all...”</p>

      <p>Crushed under the weight of her loneliness, Sanae looked incredibly small as she sat there holding her knees. She let out another heavy sigh. She had lost count of how many times she had sighed since she came here, but no matter how many times she did, she couldn’t sigh away these feelings.<br/><br/></p>

      <p>But Sanae wasn’t the only one sighing. So was Nijino Yurika, who had been hiding for a while not too far away from where Sanae was.</p>

      <p>“My pursuers are... gone? Thank god, I finally got away!”</p>

      <p>Unlike Sanae’s, Yurika’s sigh was one of relief. Yurika had come this way in order to escape the cosplay society. If they caught her, she would be forced to go to the event on the day after tomorrow. She felt truly relieved at her apparent stroke of luck.</p>

      <p>“I definitely don’t want to take part in that event. If I do something like that, Satomi-san will— Huh? Isn’t that Sanae-chan?”</p>

      <p>That was when Yurika spotted Sanae sitting at the cliff.</p>

      <p>“What is she doing in a place like this?”</p>

      <p>Having desperately been running around since this morning, Yurika was oblivious to Koutarou and Sanae’s delicate situation. Seeing Sanae all alone confused her. In her head, it was only normal for Sanae to be with Koutarou.</p>

      <p>“All right, let’s investigate.”</p>

      <p>Yurika didn’t really have anything else to do, and she didn’t want to go back and be caught by the cosplay society. And although she was bad with ghosts, she had recently gotten used to Sanae. She didn’t have much of a reason to avoid her anymore. And so Yurika stepped onto the rocks and approached Sanae.</p>

      <p>“Huh?”</p>

      <p>But as she walked over, Yurika noticed somebody else closing in on Sanae.</p>

      <p>“N-Not good! It might be my pursuers!”</p>

      <p>Yurika’s first reaction was fear that the cosplay society members had tracked her down, so she turned and jumped behind a nearby rock.</p>

      <p>“Aniki, this is the perfect opportunity! W-We’re so close to being rich!”</p>

      <p>“Calm down, Hachi. Great opportunity requires great care.”</p>

      <p>“That’s Aniki for you! I can always count on you!”</p>

      <p>“I just might be a little too cool.”</p>

      <p>But Yurika had no need to worry. The people approaching Sanae were the two ghost hunters. After failing three times, they had waited for Sanae to be alone. Now they were finally making their move.</p>

      <p>“Our target is alone, and we’re well prepared. If we fail now, we’ll be a laughingstock. I’m counting on you, Hachi!”</p>

      <p>“Got it!”</p>

      <p>While they waited for Sanae to be alone, they had fully prepared themselves. Their equipment and plans were flawless this time. They were sure things would go their way.</p>

      <p>“Get in position, Hachi!”</p>

      <p>“Roger!”</p>

      <p>They pounced on Sanae.<br/><br/></p>

      <p>Sanae only realized the trouble she was in when something white obscured her vision.</p>

      <p>“Wh-What is this?!”</p>

      <p>White smoke surrounded Sanae.</p>

      <p>It was from a smoke bomb the ghost hunters had made. They had used branches stolen off of sacred trees to make a smoke bomb capable of creating a smokescreen that could blind ghosts.</p>

      <p>“Wh-What is going on?!” Sanae screamed between coughs.</p>

      <p>Thanks to the sea breeze, the smokescreen didn’t last long. But by the time Sanae could see again, the ghost hunters were already in the middle of their next attack.</p>

      <p>“Even after death, I can’t escape the shackles of the free economy...”</p>

      <p>“What are you gonna do? Money with the lingering aura of people’s obsessions is just too good to give up.”</p>

      <p>“Aww yeah. I’m gonna give it my all. I want to fill my belly with something good.”</p>

      <p>“I ate a dollar bill the other day and it was incredibly delicious. I wonder if I can get my salary in dollar bills.”</p>

      <p>While Sanae was blinded by the smokescreen, she had been swarmed by ghosts.</p>

      <p>“Wh-Who are these guys?!”</p>

      <p>More than twenty ghosts had her completely surrounded. They appeared to be of all different ages and walks of life. It was as if a random crowd of people had turned into ghosts.</p>

      <p>“Go, evil spirits! Earn your salary!”</p>

      <p>They were actually low paid evil spirits the ghost hunters had called in to help capture Sanae. The ghosts were their last trump card.</p>

      <p>“No, the truest delicacies are bills from a hyperinflated currency. They’re worth next to nothing, but the energy residue left on them is incredible.”</p>

      <p>“Whoa, just hearing that makes me drool...”</p>

      <p>“Once you’ve tasted those, you’ll never want to touch the bills of an economically stable country again.”</p>

      <p>“Really? I think there are unique lingering obsessions in a stable country, like failing at the stock market or supporting a women. That’s the way I like it.”</p>

      <p>“Such developed tastes... Hearing you describe them makes want some too...”</p>

      <p>“Quit talking and go!”</p>

      <p>“Okaaay!”</p>

      <p>While Sanae was still bewildered over the situation she was in, the ghosts attacked from all sides.</p>

      <p>“Kyaaah! Nooooo! Idiots! Perverts! Creeps! Where do you think you’re touching?!”</p>

      <p>“...I feel like I’m doing something really bad.”</p>

      <p>“Aren’t we actually doing something bad?”</p>

      <p>“Well, she is just a little girl.”</p>

      <p>“There’s no need to worry. We’re evil spirits after all.”</p>

      <p>“Yeah.”</p>

      <p>Completely surrounded with nowhere to run, Sanae was easily caught by the evil spirits. They grabbed her hands and legs and kept her from moving. And with Sanae immobilized, the ghost hunters approached with their bug nets.</p>

      <p>“Looks like it went well, Aniki!”</p>

      <p>“When we get serious, something like this is no match for us!”</p>

      <p>Their fourth attempt was going all according to plan.<br/><br/></p>

      <p>But there was someone who had witnessed Sanae’s ordeal. That was Yurika, who had mistaken the ghost hunters for her own pursuers.</p>

      <p>“S-Sanae-chan is...?!”</p>

      <p>After hearing the commotion and deciding it couldn’t be the cosclub, Yurika peeked out from the rock she was hiding behind. She could hardly believe what she saw on top of the cliff.</p>

      <p>“L-Let me go! I said let me go!”</p>

      <p>A swarm of ghosts surrounded Sanae and held her against her will. She desperately struggled to break free, but the ghosts were too strong and she had no chance.</p>

      <p>“It’s over! You’re gonna get caught by us and then sold off!”</p>

      <p>“What do you mean sold off?!”</p>

      <p>“I’ve never seen a stable ghost with this much spiritual energy. Someone like you’s gonna fetch a high price from a connoisseur!”</p>

      <p>“Aren’t you two just perverts?!”</p>

      <p>“What are you saying after all this?!”</p>

      <p>“We’re ghost hunters! Bounty hunters that specialize in capturing ghosts!”</p>

      <p><em>Ghost hunters?! No way! That sounds like something right out of an anime. There’s no way that—</em></p>

      <p>At first, Yurika couldn’t believe what she’d heard, but a sudden realization stopped her in her tracks.</p>

      <p><em>It wouldn’t be that strange for them to exist. Besides, magical girls exist, so it’s really not that weird. And besides, unlike Satomi-kun, I believe people!</em></p>

      <p>Yurika changed her mind mostly out of spite for Koutarou.</p>

      <p>“B-B-But what should I do?! I need to save Sanae-chan! But there are so many ghosts! I-I-I-I don’t know what to do!”</p>

      <p>While she believed them, Yurika had no idea how to handle the situation. She wanted to save Sanae, but she was petrified of ghosts. Just looking at them, she began trembling and her feet refused to move.</p>

      <p>“B-But if I just leave them, Sanae-chan will...!”</p>

      <p>“Kyaaaaah!”</p>

      <p>As Yurika was thinking of her next move, Sanae was captured in one of their bug nets.</p>

      <p>“Nooooo! Save me! Somebody!”</p>

      <p>“It’s no use. Nobody is coming to save you.”</p>

      <p>“Your friends are off playing around. And there’s no way someone who could actually hear your voice would be nearby. Just give up.”</p>

      <p>“No way! I don’t want to be sold off!”</p>

      <p>However, Sanae’s cries for help finally made Yurika make her decision.</p>

      <p>“I-I’ll go save her! I’m afraid of ghosts, but being scared won’t help! Sakuraba-senpai would definitely go save her!”</p>

      <p>Yurika mustered all of her courage. It was meeting Harumi that gave her strength in times like this. Even now, what she said during the obstacle marathon stuck with her.</p>

      <p><em>I can’t lose to myself! I want to be stronger, like Sakuraba-senpai!</em></p>

      <p>Responding to the courage that Yurika summoned, her body began to move again. She forced her stiff body forward using pure willpower.</p>

      <p>“All right, I can do this!”</p>

      <p>Eventually the trembling stopped and she could move freely.</p>

      <p><em>I’ll call for Angel Halo and transform and save Yurika-chan!</em></p>

      <p>Yurika imagined what would happen next as she reached out with her right hand to summon her staff.</p>

      <p>“Come! Angel—”</p>

      <p>“Found you, Yurika-chan!”</p>

      <p>“President, we found her! Yurika-chan is over here!”</p>

      <p>However, an unexpected obstruction appeared. The cosplay society that had been chasing her had finally tracked her down.</p>

      <p>“Capture her!”</p>

      <p>As the cosclub president gave the orders, the five other members jumped at Yurika all at once.</p>

      <p>“O-Oh no! N-Not at an important time like this!”</p>

      <p>Yurika tried to brace herself, but it was already too late. She was deprived of her freedom just like Sanae had been.</p>

      <p>“All right, let’s bring her back to the hotel. We’re going to match our outfits!”</p>

      <p>“Bringing a spare outfit turned out to be the right call, president!”</p>

      <p>“There’s no harm in being prepared!”</p>

      <p>“Wait, wait, Sanae-chan is... Sanae-chan is getting abducted!”</p>

      <p>“Sanae-chan?”</p>

      <p>Yurika’s desperate pleading didn’t fall on deaf ears. The cosclub looked around for the girl Yurika had called “Sanae-chan,” but all they could see were two suspicious men holding bug nets by a cliff. They couldn’t see the evil spirits next to them, or Sanae who was caught in the net.</p>

      <p>“There’s nobody here.”</p>

      <p>“There is! Can’t you see the men have captured a girl on the edge of the cliff?!”</p>

      <p>“Huh? There’s only two men over there. Are you sure you weren’t just seeing things?”</p>

      <p>“Wait a second! Everybody, look! Those are the perverts from yesterday!”</p>

      <p>“Eww, creeps. Let’s go, everyone. We don’t want anything to do with them. And make sure you bring Yurika with us!”</p>

      <p>“Okaaay!”</p>

      <p>Following the president’s orders, the cosclub members swiftly bound Yurika with a rope.</p>

      <p>“Please wait. If we don’t save Sanae-chan, something horrible will happen!”</p>

      <p>“But Sanae-chan’s not here.”</p>

      <p>Despite Yurika’s desperate pleas this time, the cosclub members weren’t listening. And when they finished tying her up, they put a gag on her.</p>

      <p>“Hmm, mmmh! Hmmh!”</p>

      <p>At that point, there was no longer anything Yurika could do. She was hung from a long stick and carried away looking like an animal being carried off by cavemen.</p>

      <p>“Hmmhhmm!”</p>

      <p>“Just hang in there, Yurika-chan. We’ll undo the rope and get you into your outfit soon.”</p>

      <p>“Hmmmmm! Mmmhmm!”</p>

      <p>And with Yurika dragged away, Sanae was left all alone.</p>

      <p>“Let me out of here!”</p>

      <p>Sanae had been moved from the net into a mysterious, transparent container. It was cylindrical, about fifty centimeters in diameter and two meters tall, and made from something like glass. However, the container was sturdy and didn’t budge despite Sanae beating on it. On top of that, she couldn’t pass through it. It was actually a tool that came together with the bug net. It was specifically a container used to transport captured ghosts.</p>

      <p>“Just give it up already. You’ve been caught.”</p>

      <p>“You’re on your way to be sold off.”</p>

      <p>“I don’t want that! I don’t want to go anywhere! Koutarou! Koutarou!”</p>

      <p>Just when things seemed at their worst, it was Koutarou’s name that left Sanae’s mouth. Sanae kept beating the container from the inside, calling out for Koutarou.</p>

      <p>“Save me, Koutarou!”</p>

      <p>But he never heard her anguished cries.<br/><br/></p>

      <p>As Sanae was being carried away, Koutarou was just closing in on the site. If he had only been a bit faster, he would have heard Sanae’s screams as she was being taken away. Alas, they missed each other by a narrow margin. But that didn’t mean all hope was lost.</p>

      <p>“Oh, if it isn’t Satomi-kun! What a strange place to meet.”</p>

      <p>“If it isn’t the cosclub! Why are you all the way out here?”</p>

      <p>As Koutarou was headed towards the direction where Sanae had been kidnapped, he crossed paths with the cosplay society who were on their way back.</p>

      <p>“Look, look, Koutarou-kun! We caught our prey!”</p>

      <p>“Hm! Mhhm, hmmmhh!”</p>

      <p>“Y-Yurika?!”</p>

      <p>Their “prey” was none other than Yurika. She was being carried along a long stick, like she was about to be roasted. Koutarou was at a loss for words for a moment because it just seemed so... Yurika.</p>

      <p><em>I see, Yurika was caught at last... Rest in peace...</em></p>

      <p>Remembering that she was being chased by the cosplay society, he put his hands together for her mentally.</p>

      <p>“Hmm, mhhm! Hm, mhmmm!”</p>

      <p>But Yurika suddenly started struggling. She was screaming something as she violently wiggled.</p>

      <p>“Kyaah, Yurika-chan! It’s dangerous if you struggle like that!”</p>

      <p>“Stay still, Yurika-chan!”</p>

      <p>Yurika’s writhing staggered the cosclub members carrying the stick. She kept wriggling, despite them telling her not to struggle. If anything, she only wriggled even more.</p>

      <p>“Mhh, hmmmm, mhhh!”</p>

      <p>Yurika implored Koutarou as best she could with her eyes as it looked like she was going to bite her gag in half.</p>

      <p>“Mhm, mhmmmm! Hmmmm!”</p>

      <p>“Yurika?”</p>

      <p><em>Is she trying to say something?</em></p>

      <p>Sensing something was odd, Koutarou looked into her eyes. They weren’t the eyes of somebody holding a grudge, and they weren’t the eyes of somebody calling for help. It was like she was trying to beg him to do something.</p>

      <p><em>What’s up with Yurika? She’s not acting like herself...</em></p>

      <p>Since Yurika was behaving so strangely, Koutarou wanted to talk to her. There was also something he wanted to ask her.</p>

      <p>“Excuse me, but could I talk to Yurika alone for a minute?”</p>

      <p>“Hmmm!”</p>

      <p>Yurika’s eyes sparkled at Koutarou’s words. She emphatically nodded her head towards Koutarou.</p>

      <p><em>As I thought, something happened...</em></p>

      <p>Seeing her act like that, Koutarou had a bad feeling.</p>

      <p>“Just the two of you? Is it complicated?”</p>

      <p>“Well, yes. It’s a very private conversation about a friend.”</p>

      <p>Koutarou didn’t just want to hear her story, but he also wanted to ask her about Sanae’s whereabouts. But having the cosplay society around for that would complicate things, so he decided not to tell them the entire truth.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert7">
    <img alt="insert7" class="insert" src="../Images/Insert7.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter42">
    <div class="main">
      <p>“Hmm! Mhh!”</p>

      <p>Sensing Koutarou’s intentions, Yurika nodded and played along. Seeing that, the president accepted Koutarou’s request.</p>

      <p>“I understand. But you can’t let her run, okay? We finally caught her after all this.”</p>

      <p>“I understand.”</p>

      <p>“Everyone, put down Yurika for a minute.”</p>

      <p>“Okaaay!”</p>

      <p>The cosclub members lowered Yurika to the ground, leaving her alone with Koutarou. Once the other girls were far enough away, Koutarou squatted down next to Yurika and put his hand on the gag.</p>

      <p>“I’m taking it off, okay?”</p>

      <p>“Hm!”</p>

      <p>Koutarou untangled the knots, and Yurika opened her mouth wide as if she was going to bite down on his hands after he undid the gag.</p>

      <p>“S-S-Satomi-san! Kidnapped Satomi-san and the evil spirit Sanae-chans were a lot of perverts!”</p>

      <p>...But what came out of her mouth was a mess, and Koutarou had no idea what she was trying to say.</p>

      <p>“Calm down. Talk like a normal person.”</p>

      <p>“There’s no time to calm down!”</p>

      <p>“Just take a deep breath.”</p>

      <p>“O-Okaaay!”</p>

      <p>Listening to Koutarou, Yurika took a deep breath and calmed down a little.</p>

      <p>“So what happened?”</p>

      <p>“Satomi-san, the perverts from yesterday took Sanae-chan!”</p>

      <p>“Wh-What?! Seriously?!”</p>

      <p>“Yes! It seems like their real goal was Sanae-chan!”</p>

      <p>“But she was captured even though she can pass through walls?! She’s a ghost, and how?! Kidnapped?! How did Sanae?!”</p>

      <p>This time it was Koutarou’s turn to make no sense. Right after setting out to look for Sanae out of guilt for hurting her, he learned that she had been taken away by perverts. He was now as dumbstruck as Yurika had been.</p>

      <p>“Please calm down, Satomi-san! I can’t understand you!”</p>

      <p>“S-Sorry...”</p>

      <p>Koutarou took several deep breaths and tried again.</p>

      <p>“But Sanae is a ghost! How was she captured?! She can pass through walls, remember?! How could they kidnap her?!”</p>

      <p>“A lot of strange ghosts ganged up on her, and then they caught her in a bug net! I’m sure it was no normal net!”</p>

      <p>“But why target Sanae? Who are those guys?!”</p>

      <p>“They said they were ghost hunters! They said they were going to sell Sanae-chan!”</p>

      <p>“Sell Sanae-chan?!”</p>

      <p>At that moment, Koutarou remembered their two previous surprise attacks.</p>

      <p><em>“He’s right, young man! We’re only trying to capture that small girl over there so we can do whatever we please with her before selling her off!”</em></p>

      <p><em>“Please believe us! We have no interest in normal girls!”</em></p>

      <p><em>“Th-This is just a misunderstanding! We’re not into peeping! We have no interest in your normal bodies!”</em></p>

      <p><em>“That’s right!! We only want to catch and lock up that small girl over there so we can have a good time!”</em></p>

      <p>The two of them had repeatedly tried explaining themselves like that, but Koutarou and the others had misinterpreted their excuses and treated them like perverts. In reality, that wasn’t quite the case.</p>

      <p>“Damn it! So that’s what they meant!”</p>

      <p>But it certainly wasn’t Koutarou and the others’ fault. Who would even believe there were people making a living off of selling ghosts? That was almost as ridiculous as the things Yurika said.</p>

      <p>“You’re not lying are you, Yurika?”</p>

      <p>Even only partially believing her now, he had to make sure. Koutarou wasn’t so gullible that he’d believe in ghost hunters just because someone said they exist. The fact that he’d been living with a ghost for a while now didn’t change that.</p>

      <p>“Of course! You already don’t believe that I’m a magical girl! There’s no way I’d ruin my credibility even more by lying!”</p>

      <p>But hearing Yurika’s answer, Koutarou readily agreed. “There’s no way I’d ruin my credibility even more by lying!” Those words were surprisingly persuasive.</p>

      <p>“You’re right. Sorry for doubting you, Yurika.”</p>

      <p>Koutarou bowed his head to Yurika in a sincere apology. It was the first time Yurika had ever seen Koutarou so serious.</p>

      <p>“That’s fine, but for some reason I’m getting really irritated!”</p>

      <p>That was because Koutarou could accept that ghost hunters were real, but not magical girls. It was like the more seriously he apologized now, the less it meant he actually believed in magical girls.</p>

      <p>“I can understand why Sanae-chan is always so angry! Ahhhhh, jeez!” Yurika grumbled out of sheer fury. Koutarou’s reaction irritated her to no end.</p>

      <p>“So Yurika, do you have any clue where they headed?”</p>

      <p>“Huh? ...N-No, I don’t. I only know that she was carried away by the crowd of ghosts. After that, I was tied up and carried away too.”</p>

      <p>Yurika was still bound and rolling around on the ground.</p>

      <p>“A crowd of ghosts...? That’s it! Yurika, you’re certain that they were with a lot of ghosts, right?”</p>

      <p>“Yes! Do you have any good ideas?”</p>

      <p>“Probably! I’ll be going now, Yurika! Thanks for telling me!” Koutarou said as he stood up.</p>

      <p>“Ah, wait, Satomi-san!”</p>

      <p>“See you later! I’m going to go save Sanae!”</p>

      <p>Koutarou started running. His goal was of course saving the kidnapped Sanae. If he didn’t save her, he wouldn’t be able to apologize.</p>

      <p><em>Just hang in there, Sanae! I’m coming to save you!</em></p>

      <p>When Sanae was being kidnapped, her words hadn’t reached Koutarou. But now thanks to Yurika, he knew just the same.</p>

      <p>“Wait! Don’t just save Sanae-chan! Save me too! Please save me! I’ll definitely be useful!”</p>

      <p>“Don’t force yourself. You hate ghosts, right? It’s the thought that counts. Your information was helpful too. Really, thank you, Yurika! I’ll definitely repay the favor later!”</p>

      <p>Despite what Yurika said, Koutarou just smiled at her and ran off. He was truly grateful for her courageous offer to help, despite being just a cosplayer. That was why he didn’t want to get her involved.</p>

      <p>“You’ve got the wrong idea! That’s not what I meant! Repay the favor now! Please don’t leave me, Satomi-saaan!”</p>

      <p>Yurika’s forlorn cry echoed in the deserted rocky area.</p>

      <p>“Yuuurika-chaaan! Are you done talking to Satomi-kun now?”</p>

      <p>“Nooooooooooo!”</p>

      <p>This time, it was Yurika’s voice that would never reach Koutarou.<br/><br/></p>

      <p>Dashing into the room at the inn, Koutarou began rummaging through his bag. Since it was evening now, Theia, Kiriha, Shizuka, and Ruth had already returned to the room. But Koutarou didn’t even look at them.</p>

      <p>“I know I packed it just in case! It should be...”</p>

      <p>Finding Koutaoru’s behavior strange, the girls looked at each other.</p>

      <p>“Satomi-kun, what’s wrong? Did you get to talk to Sanae-chan?” Shizuka asked on everyone’s behalf.</p>

      <p>“Listen, Landlord-san, Sanae-chan was taken away by those perverts!” Koutarou answered while still searching through his bag.</p>

      <p>“Huh?!”</p>

      <p>“What?!”</p>

      <p>“Those guys?!”</p>

      <p>“Is that true, Koutarou?!”</p>

      <p>The girls were all shocked. They hurriedly surrounded Koutarou and demanded an explanation.</p>

      <p>“Yeah, there’s no doubt about it! Yurika saw them kidnap Sanae! Said they were ghost hunters or something! Those perverts were after Sanae from the start!”</p>

      <p>“Yurika did? Are you sure she’s not playing around again?”</p>

      <p>Learning that the information came from Yurika, Kiriha voiced her concerns. Yurika had no credibility.</p>

      <p>“It didn’t seem like it. And there’s no reason for her to lie when she already has next to no credibility, right? If she wanted to fool us, she would have made up something better.”</p>

      <p>“You’re absolutely right. No matter how much of an idiot she is, she wouldn’t do something that would hurt her standing even more.”</p>

      <p>“Your Highness, that’s saying a little too much...”</p>

      <p>It was because she had zero credibility that they all believed her now. Even Ruth, who had tried standing up for Yurika, felt something similar.</p>

      <p>“Found it! As long as I have this...!”</p>

      <p>That was when Koutarou found what he was looking for in his bag. It was a paper bag from a famous department store. He grabbed the bag and stood up quickly. As he did, the girls, who were all leaned in looking at what he was doing, jumped back a little. And before they knew what was happening, Koutarou was darting for the door.</p>

      <p>“I’m going to take back Sanae!”</p>

      <p>Without giving them even a moment to reply, he was gone.</p>

      <p>“Ah, wait up, Satomi-kun!”</p>

      <p>“Ruth, we’re going too.”</p>

      <p>“As you wish, my princess.”</p>

      <p>“Karama, Korama, follow me.”</p>

      <p>“We’ve been waiting for this! Ho!”</p>

      <p>“Let’s go save Sanae-chan! Ho!”</p>

      <p>Shortly after Koutarou, the girls ran out of the room as well.<br/><br/></p>

      <p>Inside the paper bag that Koutarou had taken with him were some of the exorcism tools Shizuka had given him during the first week of school. Koutarou had brought the charms and things with him in the case of an emergency.</p>

      <p><em>This is probably part of why Sanae was so hurt...</em></p>

      <p>Koutarou thought about the bag he was holding as he stuck his hand in it. Deep down inside, he believed that Sanae wasn’t dangerous enough to justify bringing exorcism tools with him. If he thought that, he wouldn’t let her possess him daily. Even so, he still brought the tools with him... just because she was an enemy. But after everything Harumi said, Koutarou understood that Sanae must have hated seeing that bag.</p>

      <p>“But now I’m glad I brought this with me!”</p>

      <p>Koutarou pulled one of the exorcism tools out from the bag. It looked like an old-fashioned radio wrapped in cheap plastic. Written on the plastic wrapping were the words “Ghost detection kit—For those looking, 2006.”</p>

      <p>“I’ll be able to find Sanae with this!”</p>

      <p>This “For those looking, 2006” was a ghost detection kit manufactured three years ago. Although it was an old model near its expiration date that Shizuka had gotten from a friend, it was still something the occult industry put a lot of stock in. In fact, it was manufactured by the same company that made the nets the two ghost hunters were using.</p>

      <p>Koutarou was planning on using “For those looking, 2006” to find Sanae. The tool couldn’t distinguish between ghosts, but thanks to Yurika’s information, Koutarou knew that the two men had a crowd of ghosts with them. He was going to use this to track down a large group of ghosts, and in the process find Sanae.</p>

      <p>“Let’s see... ‘Please light the attached incense and place it in the upper center of the machine. This incense serves as an antenna. Please make sure that you use the attached incense.’”</p>

      <p>Koutarou read the instruction manual for the device and prepared it for use. As expected from a popular product among fans, even a beginner like Koutarou had an easy time setting it up. All that was left was to press the start button.</p>

      <p>“All right...”</p>

      <p>Koutarou gulped. If this failed, he would lose his only lead. He began getting more and more nervous as he carefully moved his finger closer to the start button.</p>

      <p>“Please work...”</p>

      <p>Koutarou braced himself and pushed the button while practically praying. The button easily went down, and then the machine made a loud noise.</p>

      <p>“Wha?!”</p>

      <p>“For those looking, 2006” created a small explosion in Koutarou’s hands that blasted his entire upper body.</p>

      <p>“Hackk, hackk... I-It exploded?! Hackk, hackk...”</p>

      <p>Inhaling the smoke sent Koutarou into a coughing fit. Fortunately, the explosion wasn’t particularly big and Koutarou wasn’t injured. However, “For those looking, 2006” was charred and partially destroyed.</p>

      <p>“B-But why did it explode?!”</p>

      <p>Koutarou took several deep breaths and voiced his frustration. Of course, he wasn’t expecting a real answer, but as it happened, that’s exactly what he got.</p>

      <p>“It seems the spiritual energy oscillator malfunctioned, ho!”</p>

      <p>“The delicate oscillator couldn’t handle the spiritual energy after all this time, ho!”</p>

      <p>“It’s because you tried to use it despite its age, Koutarou.”</p>

      <p>“Kiriha-san...”</p>

      <p>The answers came from Kiriha and her two haniwas. She picked up the “For those looking, 2006” device and approached him with a smile.</p>

      <p>“I’m sorry, Satomi-kun. This is all because I gave you old tools closing in on their expiration date...”</p>

      <p>Behind Kiriha was Shizuka. She glanced back and forth between “For those looking, 2006” and Koutarou, looking quite apologetic.</p>

      <p>“You too, Landlord-san?”</p>

      <p><em>Why are the two of them here?</em></p>

      <p>Koutarou didn’t understand the reason why Kiriha and Shizuka had come, and just stared at them blankly.</p>

      <p>“So what are you going to do now, Koutarou? Weren’t you going to use that to look for Sanae?”</p>

      <p>“Finding ghosts with our technology is impossible. We need to find a different method.”</p>

      <p>“Even Tulip and Ruth-san?” Koutarou’s eyes opened wide in surprise.</p>

      <p>“Don’t worry. Just leave it to me.”</p>

      <p>“Kurano-san, do you have an idea?”</p>

      <p>“W-Wait, are all of you here to help?”</p>

      <p>Koutarou was confused. He was surprised that even Theia and Ruth had appeared, but even more so that they were going to help find Sanae.</p>

      <p>“That’s right, Satomi-kun. Sanae-chan is almost like your little sister, so of course we need to save her.”</p>

      <p>“Heh heh. Since you’ve lost your only lead, it’s a good chance to earn a favor or two. Why wouldn’t I exploit this chance?”</p>

      <p>“You will eventually become my vassal. I can’t let you simply jump into danger. Letting you die would squander my reputation.”</p>

      <p>“I just... If you’d like, I’ll help as much as you want, Satomi-sama... Th-That’s right! I have to repay you for the swimsuit! It’s for the swimsuit!”</p>

      <p>The four girls each had their reasons, but they were all planning on saving Sanae.</p>

      <p>“Thanks. Please help me, everyone!”</p>

      <p>Normally, Koutarou might have refused, but now he was glad to accept their aid. In this situation, he had no other choice.</p>

      <p>“Leave it to me, Satomi-kun! I won’t forgive those ghost-stalking perverts!”</p>

      <p>Shizuka gestured rolling up her sleeves. She looked like she was raring to go.</p>

      <p>“Promise me this, Koutarou—that once we get back, you’ll buy me a swimsuit too.”</p>

      <p>Kiriha smiled mischievously. Even so, Koutarou saw the gentle look in her eyes.</p>

      <p>“Heh heh heh, just you watch, pleb. They’ll regret making an enemy of me! Behold my greatness!”</p>

      <p>Theia flashed a ferocious smile befitting a carnivorous beast. Koutarou knew that Theia wasn’t as much of a tyrant as she made herself out to be, but at the very least, she was worried about Sanae.</p>

      <p>“Please leave it to me, Satomi-sama! I’ll help you as much as I can!”</p>

      <p>Koutarou didn’t find it strange that earnest Ruth wanted to help, but in reality, she had a different reason for helping. Koutarou not realizing that was both a stroke of luck and misfortune.</p>

      <p>“Well, Kiriha-san, you sounded like you had an idea...” Koutarou said, moving on quickly. He didn’t have time to thank them.</p>

      <p>“Indeed. Karama, Korama, I’ll leave it to you.”</p>

      <p>As Kiriha nodded, the two haniwas came up to Koutarou.</p>

      <p>“Koutarou, we’ll scan that broken down machine and mimic it! Ho!”</p>

      <p>“You can do that?!”</p>

      <p>“Leave it to us, ho! Compared to us, that machine is quite simple! Mimicking its spiritual energy circuits is easy! Ho!”</p>

      <p>“Then please do!”</p>

      <p>“Roger, ho!”</p>

      <p>“Beginning scan, ho!”</p>

      <p>Obliging Koutarou’s request, the two haniwas stared down “For those looking, 2006” in Kiriha’s hands. Their normally hollow eyes shot out red lights. They were guide lights for scanning. The haniwas were a combination of modern science and spiritual energy. Koutarou had always felt they were suspicious, but this time he was really counting on them.</p>

      <p>“Scan completed! Ho!”</p>

      <p>“Preparations complete! Ho!”</p>

      <p>It wasn’t long before they turned back towards Koutarou. The red light coming out of their eyes had vanished and were back to their normal selves. But having analyzed the machine, they were even a little more advanced now.</p>

      <p>“Koutarou, ho! Should we amplify the function? Ho!”</p>

      <p>“Amplify?”</p>

      <p>“It’s easy to mimic, ho! We can use our reserve strength to power it up, ho! We’re that good, ho!”</p>

      <p>“It’s estimated that we can amplify the function by 168 percent! Ho!”</p>

      <p>“Then please do it! I want to find Sanae as quickly as possible!”</p>

      <p>“Then let’s begin, ho! I’ll be the detector, ho!”</p>

      <p>“Then I’ll do the amplifying, ho! Using synchronous mode to system link! Ho!”</p>

      <p>Living up to the name of synchronous mode, the two haniwas moved as one. Working together like that, they could function as a single machine.</p>

      <p>“Setting the amplification rate to 168 percent, ho!”</p>

      <p>“Beginning emulation, ho! Activating normal operation of detector circuits! Ho!”</p>

      <p>The two haniwas began replicating the function of “For those looking, 2006.” And so the explosion was amplified by 168 percent as well. It was a splendid reproduction.</p>

      <p>“Are you complete idiots?! You don’t need to replicate that much!”</p>

      <p>Getting caught up in an explosion again, Koutarou was scorched and charred in various places. However, Koutarou’s anger burned more intensely than the fires of the explosion.</p>

      <p>“Sorry! Ho! We forgot to mend the malfunctioning parts, ho!”</p>

      <p>“We didn’t mean any harm! Ho! We’ll redo it! Ho!”</p>

      <p>And thus, although slightly delayed, Koutarou and the others set off to save Sanae.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter5">
    <div class="main">
      <h1>The Labor Union’s Rebellion</h1>

      <h2>Tuesday, August 12th</h2>

      <p>The door let out a loud screech as Koutarou pulled it open. The smell of dust in the mansion assaulted him too.</p>

      <p>“All right, haniwas, are you sure this is it?”</p>

      <p>“There’s no mistaking it, ho! We’re detecting a whole swarm of ghosts, ho!”</p>

      <p>“And we can smell Sanae-chan’s spiritual energy, ho! She’s nearby, ho!”</p>

      <p>Koutarou and the others had arrived at an old Western style mansion at the end of the row of villas. As the other villas were all high quality and in excellent condition, this one stood out like a sore thumb. The outer walls were cracked and starting to collapse, the windows were broken, and the garden was overgrown with weeds. Its old-fashioned design alone made it stand out already, but it was so dilapidated that it cast a shadow on the whole neighborhood. And as the sun set and it was starting to get dark, it looked like something right out of a horror movie.</p>

      <p>“Aside from the ghosts, I can sense the presence of people inside.”</p>

      <p>Shizuka peeked in through the open door and looked around.</p>

      <p>“You can? I can’t sense things like that.”</p>

      <p>Koutarou looked around as well, but he didn’t really get what Shizuka meant by “presence.”</p>

      <p>“Then look over there, Satomi-kun. Fresh footprints.”</p>

      <p>“Ah, you’re right...”</p>

      <p>The mansion was covered in dust, so the footprints down the hallway were quite visible. Koutarou hadn’t understand what she meant before, but he could see that the footprints were fresh. Old ones would have at least a fine coat of dust over them, dimming the outline.</p>

      <p>“An abandoned mansion other people won’t go near, swarms of ghosts, signs of Sanae, and signs of people entering recently... There’s no mistaking it. This is the place.”</p>

      <p>Going through all of the information, Kiriha came to what seemed like a logical conclusion. Koutarou agreed with her.</p>

      <p>“The question is if the perverts inside have noticed us or not. And if there are any traps lying in wait.”</p>

      <p>“You’re worrying too much, Ruth. If there are any traps, we’ll just blow them away.”</p>

      <p>Theia grinned as she pushed past Koutarou and Shizuka and entered the mansion. She boldly walked forward, unafraid of any traps.</p>

      <p>“That’s dangerous, Tulip. We don’t know what they might do.”</p>

      <p>“That goes both ways. Besides, staying on the defensive doesn’t suit me. Suppress and advance is my motto.”</p>

      <p>“Still, you’re being too reckless.”</p>

      <p>“If that’s what you think, then cover my back. That’s your duty as a vassal.”</p>

      <p>“Fine, I get it.”</p>

      <p>Normally Koutarou would yell at her, but this time he obeyed.</p>

      <p>“Heh heh, it seems you’re finally realizing your place.”</p>

      <p>“I’ll let it slide this time, and this time only.”</p>

      <p>As Theia looked back happily, Koutarou pulled something he could use as a weapon out from the paper bag filled with exorcism tools. He chose a stick with a tag on it that read “Limited edition sacred tree branch: Cypress stick.” Koutarou held it with both hands like a bat and gave it a few practice swings.</p>

      <p>“Yet another weapon fit for a barbarian...”</p>

      <p>“At least I don’t use a space battleship every time.”</p>

      <p>The black holes were already above Theia’s shoulders, fitted with heavy-duty firearms. All of the weapons she used were built in to her space battleship, the Blue Knight.</p>

      <p>“I hope it doesn’t turn into a fight...”</p>

      <p>Circumstances being what they were, Ruth was outfitted for combat like Theia. But instead of firearms, she was armed with a large sword and shield. Since she was from a house of knights, she was better with those. That said, even swords and shields from their home planet were technologically advanced things.</p>

      <p>“Karama, Korama, exit synchronous mode and prepare to fight.”</p>

      <p>“Understood, ho!”</p>

      <p>“Starting to charge the spiritual energy weapons! Ho!”</p>

      <p>Kiriha ordered her haniwas to get ready for combat. She herself wasn’t armed, but thanks to the battle capabilities of her haniwas, she didn’t have to be. That said, she just looked too defenseless emptyhanded, so Koutarou gave her the paper bag.</p>

      <p>“Kiriha-san, please use one of these.”</p>

      <p>“Thank you, Koutarou. Then I’ll take this.”</p>

      <p>Kiriha smiled and pulled out a tamagushi. With the way she dressed, she looked like a shrine maiden as she stood their holding it. But strangely enough, it didn’t feel like cosplay, like in Yurika’s case. That was probably because of how composed she was.</p>

      <h4>[Note 2: Tamagushi - An special offering made from a tree branch decorated with strips of paper, used in Shinto ceremonies]</h4>

      <p>“Once you’ve finished preparing, follow me, men! The battle is about to start!”</p>

      <p>“Tulip, there might not even be a fight.”</p>

      <p>“You’re too naive, pleb! Those perverts are going to get annihilated.”</p>

      <p>“Hmm... Well, whatever.”</p>

      <p>When they were ready, Koutarou and the others followed Theia deeper into the mansion. Although they would usually do things their own ways, this time they were all united for a single objective. When they first met, that probably wouldn’t have ever happened, but now they didn’t think anything of it.<br/><br/></p>

      <p>The weapons above Theia’s shoulders fired in succession. She had summoned high-caliber, rapid-fire guns from the Blue Knight and countless bullets were currently headed towards their targets. Said targets were the suits of armor and stuffed animals that had been inside of the residence. They were pulverized by the hail of bullets.</p>

      <p>“Hmph, far too easy. I was expecting more from moving suits of armor and stuffed animals.”</p>

      <p>“Don’t be ridiculous, Tulip. Your weapons are just too strong!”</p>

      <p>Theia hadn’t shot them for fun or anything like that. As Koutarou and the others were exploring the mansion, the armor and stuffed animals had suddenly come to life and attacked them. But before they could even approach, they were pulverized by Theia’s overwhelming firepower.</p>

      <p>“Ah jeez... What were you going to do if there were people inside?”</p>

      <p>After seeing the destroyed decorative knight armor and stuffed bears, Koutarou couldn’t help but shudder at the thought of what would have happened to a person inside.</p>

      <p>“That would have been an unfortunate accident.”</p>

      <p>However, Theia showed no sign of reflecting on her actions, leaving Koutarou amazed.</p>

      <p>“Come on now!”</p>

      <p>“There’s no need to get so excited, pleb. Are you not thrilled to witness my splendor?”</p>

      <p>“Not even close!”</p>

      <p>“It’s all right, Satomi-sama. I’m on the lookout for any signs of life.”</p>

      <p>“Huh? Really?”</p>

      <p>Koutarou stopped in his tracks.</p>

      <p>“My firearms are being controlled by the data Ruth is sending as the vanguard. It’s designed not to target humans.”</p>

      <p>“You’re kidding?!”</p>

      <p>“As if I would kid about this! Just what do you take me for?!”</p>

      <p>“Oh, I don’t know! Someone who tries to kill me from time to time!”</p>

      <p>“By the way, Kiriha, where is Sanae? Since they’re attacking now, shouldn’t that mean we’re getting close?”</p>

      <p>As the argument began to lean in Koutarou’s favor, Theia quickly changed the topic.</p>

      <p>“And she’s not even listening...”</p>

      <p>“Satomi-sama,” Ruth whispered to Koutarou as he was getting fed up with Theia. “Please trust Her Highness today. Although it might be hard to understand, she is worried about Sanae-sama too.”</p>

      <p>“...Okay.”</p>

      <p>As a special request from Ruth, Koutarou backed down. He had more or less understood how Theia really felt. If she didn’t care, she wouldn’t have helped otherwise.</p>

      <p>“Karama, Korama, how about it?”</p>

      <p>“Ho! She’s probably underground, ho! I can sense a large cavity below, ho!”</p>

      <p>“There’s a staircase leading down just up ahead, ho!”</p>

      <p>“Underground, huh? A fitting place for a small-time villain to be lurking.”</p>

      <p>“Ouch, that hits close to home.”</p>

      <p>Kiriha smiled wryly at Theia’s words. Since she had come from underground too, what Theia said also applied to her.</p>

      <p>“I-It’s just a figure of speech! I had no intention of insulting your home!”</p>

      <p><em>Heh heh, Tulip really is on edge.</em></p>

      <p>Seeing Theia desperately make excuses cheered Koutarou up a little.<br/><br/></p>

      <p>Koutarou and the other four were being watched as they proceeded by the ghost hunters hiding underground.</p>

      <p>In fact, only the above-ground part of the mansion was in a state of neglect and disrepair. The basement had been cleaned up and maintained. Using the ruined mansion exterior as a facade, they had made the basement into their base.</p>

      <p>Each side of the underground base stretched at least twenty-five meters long. And with five meters to the ceiling, the base was very spacious. It was so large because the basement was originally designed as a rec room. Things like a billiard table and a roulette board were still left in the room.</p>

      <p>The ghost hunters had set up their belongings where the billiard table and things were originally. They had the ghost catching tools they needed for their work, and things they needed to survive such as beds. They even had monitors set up showing footage captured by hidden cameras inside the mansion.</p>

      <p>There were three monitors in total, but by switching between feeds, they could survey the whole deserted mansion. Koutarou and the others were currently being shown on one of the screens, destroying the interior as they advanced further in.</p>

      <p>“Aniki, this is bad! It looks like the intruders have found the entrance to our underground base!”</p>

      <p>“What?!”</p>

      <p>The ghost hunter who had been watching their progress on the monitor screamed, which caused the second ghost hunter who was relaxing on the sofa to rush over.</p>

      <p>“What happened to the guys defending the mansion?!”</p>

      <p>“They got obliterated by the smallest girl! Armor and stuffed animals don’t stand a chance!”</p>

      <p>Their evil spirits had possessed the suits of armors and stuffed animals. It was similar to how Sanae’s Poltergeist powers worked. They could move and attack with the armor, just like how Sanae could throw encyclopedias at Koutarou.</p>

      <p>However, the weaponized armor and stuffed animals were all rent asunder by Theia. In the end, the lower class evil spirits were practically powerless.</p>

      <p>“Oh yeah, unlike us, they’re good with physical attacks...”</p>

      <p>“This is bad! At this rate, they’ll be here any moment! What do we do, Aniki?!”</p>

      <p>“Calm down, Hachi!”</p>

      <p>The leader hit Hachi on the head as he was running around in panic.</p>

      <p>“Th-Then what do we do?”</p>

      <p>Hachi stopped moving and stared at the leader.</p>

      <p>“There’s no need to fight them on their terms. That’s why we’ve been preparing for this kind of scenario. There were some evil spirits that could mess with people directly, right? We’ll have them mobilize as well and send these intruders packing.”</p>

      <p>“Ah, do you mean the ones with a higher salary?”</p>

      <p>“Why do you think we hired them?”</p>

      <p>“That’s Aniki for you! I didn’t realize!”</p>

      <p>“And then there’s the weapons we made yesterday, right? Prepare those as well.”</p>

      <p>“I got it! I’ll get right to it!”</p>

      <p>Hachi ran towards the next room right away. The next room was the hangout for the hired evil spirits.</p>

      <p>But other than the ghost hunters, there was someone else watching the monitor.</p>

      <p>“Koutarou... You came to save me...”</p>

      <p>It was the captured Sanae, still trapped inside of the transparent container. The hunters had brought the container with Sanae in it down to their base where they were waiting for their trade partner to arrive. The container Sanae was in had been placed in the corner of the room, and she was able to peek at the monitor from her position. Helpless, Sanae had been staring at the screen for quite a while now.</p>

      <p>“Koutarou... It’s really Koutarou...”</p>

      <p>When Koutarou appeared on the monitor, Sanae thought her heart might stop... even though she didn’t have one, being a ghost and all. That was just how surprised she’d been. But at the same time, she felt a strong sense of relief. Having been so anxious all this time, that sense of relief made Sanae go weak in the knees.</p>

      <p>“S-Stupid me! I decided not to get along with Koutarou! What am I getting relieved for?”</p>

      <p>Sanae shook her head in an attempt to snap herself out of what she was feeling, but it wasn’t so easy to get rid of feelings that had taken root in the heart.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert8">
    <img alt="insert8" class="insert" src="../Images/Insert8.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter51">
    <div class="main">
      <p>Sanae had decided to treat Koutarou like the enemy he was. Her resolution had only gotten stronger, fed by a sense of helplessness over being captured by the ghost hunters. However, her resolve buckled the moment she saw Koutarou. She was just hoping maybe, just maybe...</p>

      <p>But she also told herself that getting her hopes up would only get her hurt even more.</p>

      <p>“What’s the meaning of this, Koutarou?! If you consider me an enemy, then just leave me be! What did you come here for?!”</p>

      <p>Sanae’s worries ran deep, and because of that, she couldn’t take her eyes off of Koutarou, even on screen.<br/><br/></p>

      <p>“This is it—the basement!”</p>

      <p>Koutarou kicked open the door to the basement. With the momentum he had from running down the stairs, it flung open and smashed into the wall. Once the door was open, Koutarou and the others rushed in.</p>

      <p>“There she is! It’s Sanae!”</p>

      <p>The moment they entered the basement, Koutarou spotted Sanae. She was in the furthest corner, trapped inside of a cylindrical container.</p>

      <p>“Sanae! Are you okay?!”</p>

      <p>Koutarou shouted to her, but Sanae roared back at him.</p>

      <p>“Why are you here?! I never asked you to come save me! I know you only think of me as some troublemaker!”</p>

      <p>“Now is not the time for this!”</p>

      <p>Koutarou was amazed at Sanae, who was practically ignoring the situation. But he was also relieved to hear her energetic voice. Koutarou and the others still thought of the ghost hunters as perverts, so they were worried they might have done something horrible to her.</p>

      <p>“Sorry for getting in the way of your touching reunion, intruders!”</p>

      <p>Koutarou and Sanae’s discussion was interrupted when the ghost hunters got between them.</p>

      <p>“This ghost is ours! So go home before you get hurt!”</p>

      <p>“That’s right! Just go home! It’s time for kids to go to bed!”</p>

      <p>Their confident stances didn’t waver before Koutarou and the others. They had their hands on their hips and their chests pushed out, boldly facing the group.</p>

      <p>“Impudent small-time villains! That’s an awfully brave thing to say to me! If you’re going to go that far, I hope you’re prepared for the consequences!”</p>

      <p>“Give us back Sanae-chan, you perverts!”</p>

      <p>Theia and Shizuka glared at them. However, the two ghost hunters continued to grin, their confidence still going strong.</p>

      <p>“Small-time villains? Perverts? Just who are you talking about? Wouldn’t that be you guys?”</p>

      <p>“That’s right! We haven’t done anything wrong!”</p>

      <p>Those words enraged Koutarou and he yelled back at them, “What?! You dare say that after kidnapping Sanae?!”</p>

      <p>“Just what have we done wrong?!”</p>

      <p>The duo had committed several perverted acts in the process of going after Sanae, not to mention kidnapping and confining her. Despite that, they accused Koutarou and the others of being the real villains. That didn’t just anger Koutarou. Ruth was mad now too. But the hunters didn’t know any better. They just kept going mockingly.</p>

      <p>“In the end, we’re not breaking the law. There’s no law against capturing ghosts, right?”</p>

      <p>“And this is our base! We bought it! But you just barged in here!”</p>

      <p>“Moreover, is that ghost asking for your help? She’s not, now is she? You guys just waltzed in here uninvited. That’s trespassing!”</p>

      <p>“Help us! Policeee!”</p>

      <p>“Heh heh, the law is on our side! In fact, we’re allies of justice!”</p>

      <p>“Ugh...”</p>

      <p>It was true that there was no law against capturing a ghost. It was also true that Sanae wasn’t asking for help and that they were trespassing. The ghost hunters had made a solid case. Neither Koutarou nor Ruth could argue with them. The same was true for Theia and Shizuka. And as if to provoke Koutarou and the others, the ghost hunters grinned and laughed.</p>

      <p>“I see. In that case, your only mistake was messing with us.”</p>

      <p>The only one who reacted differently was Kiriha.</p>

      <p>“What? What’s that supposed to mean?”</p>

      <p>“Let me tell you.”</p>

      <p>Kiriha’s normal smile vanished and a deep wrinkle formed on her forehead. Her eyes narrowed into a piercing stare at the two men.</p>

      <p>And then in an icy cold voice, she spat, “We are invaders. We’ve never obeyed the law from the very beginning. Villains? That suits us just fine! We do as we please. As if we’d give a damn about your circumstances! We’ll be taking back Sanae, allies of justice or whatever!”</p>

      <p>Kiriha was angry. It was almost as if she was burning with rage. The fire in her eyes looked like it would scorch her enemies.</p>

      <p>“...Kiriha-san...”</p>

      <p>It had already been four months since she had come to room 106, but this was the first time Koutarou had ever seen her truly angry.</p>

      <p>“Sanae-chan is our friend! Ho!”</p>

      <p>“Even if she might not like it, we’ll take her home! Ho!”</p>

      <p>The haniwas stepped out in front of Kiriha as if to protect her. Unlike their normally hard to read expressions, they now seemed to be angry too.</p>

      <p>“That’s right. I had forgotten. I never cared for this planet’s laws to begin with!”</p>

      <p>Theia regained her bravado, readied her weapons, and flashed a ferocious smile like a predator enjoying chasing down its prey.</p>

      <p>“I’ll make you regret talking down to me! My name is Theiamillis Gre Forthorthe! Don’t you dare forget it, even in the afterlife!”</p>

      <p>Four months ago, that hostility was all directed at Koutarou.</p>

      <p>“Your Highness, let’s go!”</p>

      <p>“Yeah!”</p>

      <p>And four months ago, Ruth would have tried to stop Theia. But now she armed herself and stepped forward to protect her.</p>

      <p>“Your luck ran out when you laid hands on my tenant! A landlord and tenant are like family, ghost or not!”</p>

      <p>Four months ago, Shizuka had forbidden Koutarou and the others from fighting. But now she was ready to throw down. She clenched her fists and took a stance while stomping her foot to get a good feeling for the floor in the basement.</p>

      <p>“Sanae!”</p>

      <p>Lastly was Koutarou.</p>

      <p>“Wh-What?! It’s not like I asked for your help!”</p>

      <p>“I understand! That’s why I won’t forcibly take you back home!”</p>

      <p>“Huh?!”</p>

      <p>“But in return, after I’ve beaten up these guys, I want to talk with you! Just listen at the very least! After that, you can do whatever you want!”</p>

      <p>“...”</p>

      <p>Sanae didn’t answer—at least not verbally. She just nodded her head ever so slightly. That was enough for Koutarou.</p>

      <p>“All right, then let’s get this started!”</p>

      <p>Koutarou was normally pretty quick to get into a fight, and as long as he’d made up his mind, he didn’t really care who he was fighting or if he was in the wrong. He readied his branch like he was preparing to play baseball.</p>

      <p><em>I see. It’s just as Senpai said...</em></p>

      <p>Using his branch as a bat, Koutarou started thinking. He was unusually pumped up. This wasn’t just about taking down an enemy.</p>

      <p>“Good news, you guys. You get to go on a trip!”</p>

      <p>“What? What do you mean?”</p>

      <p>“I’m in top form today! I’m gonna knock you straight to the moon!”</p>

      <p>Koutarou felt like Babe Ruth hitting a home run with the bases loaded.<br/><br/></p>

      <p>As expected, Theia and her short fuse actually started the fight.</p>

      <p>“Victory to the attacker! Blue Knight, use short-range anti-personnel missiles! Don’t hit Sa—”</p>

      <p>“Wahaha, have you forgotten where you are?!”</p>

      <p>But just before Theia launched her missiles, a hole opened up below her feet. It was a pitfall the hunters had prepared beforehand. Theia was unable to avoid the sudden trap and fell straight into the hole.</p>

      <p>“Waaaaaaaaah!”</p>

      <p>“Idiot! Did you think we were completely unprepared?!”</p>

      <p>“Idiot! Idiot!”</p>

      <p>“Qu-Quit messing around!”</p>

      <p>“Your Highness!”</p>

      <p>“Tulip, are you okay?!”</p>

      <p>Ruth rushed to Theia, and Koutarou peeked into the hole from the side. Kiriha and Shizuka were still facing the enemies, but they’d been thrown off a little.</p>

      <p>“All right men, get them!”</p>

      <p>“I’m kinda getting hungry.”</p>

      <p>“We better be getting paid for this...”</p>

      <p>“It’s a common trap to promise something to get free labor.”</p>

      <p>“You’re getting hungry because you keep thinking like that. Our obsessions are leaking out.”</p>

      <p>“Quit your yammering and go!”</p>

      <p>“Okaaay!”</p>

      <p>The hunters didn’t miss their chance to go on the offensive. Their attack came in the form of the crowd of evil spirits that had captured Sanae. But this time, their numbers were more than doubled. Several dozen evil spirits of various sizes flooded out from the next room over, headed towards Koutarou and the others.</p>

      <p>“They’re coming! Hurry up and get out of there, Tulip!”</p>

      <p>“Your Highness, your hand!”</p>

      <p>“S-Sorry!”</p>

      <p>Theia grabbed Koutarou and Ruth’s hands to crawl out of the pitfall. But as that was going on, the three of them were defenseless. Seizing the opportunity, the evil spirits lunged at them.</p>

      <p>“All right you guys, I’ll attack them! Lend me your power!”</p>

      <p>“That guy’s getting full of himself just because he can attack humans directly.”</p>

      <p>“I heard his salary’s pretty high too. He must be pretty conceited.”</p>

      <p>“Shush, he’ll hear you.”</p>

      <p>Koutarou and Ruth had their backs turned to the evil spirits and Theia was hanging on to them. They were pretty much inviting an attack.</p>

      <p>“Your Highness, please hurry!”</p>

      <p>“I’m going as fast as I can”</p>

      <p>“Waaaaah, we’re done for!”</p>

      <p>Koutarou and Ruth knew the evil spirits were coming for them, but they couldn’t just drop Theia back into the pitfall. If they did, she would be a sitting duck. Instead, all the three of them were now in a major pinch.</p>

      <p>“Don’t forget about us!”</p>

      <p>“Leave it to us, Satomi-kun!”</p>

      <p>It was Kiriha and Shizuka that stepped in to save them. Kiriha used her haniwas to defend while Shizuka beat down the evil spirits one at a time. The two of them were proficient at fighting ghosts so they were holding their ground, but being vastly outnumbered made it a struggle. Had the room been smaller, Shizuka’s attacks would have taken down the evil spirits much more efficiently. The large room and high ceiling gave the flying ghosts an advantage over Shizuka who was just fighting with her fists.</p>

      <p>“Tulip, now’s our chance!”</p>

      <p>“Yeah!”</p>

      <p>As Kiriha and Shizuka were buying time, Theia crawled out of the pitfall.</p>

      <p>“Ah!”</p>

      <p>That was when Ruth, who was keeping a watchful eye on her surroundings, noticed the ghost hunters approaching.</p>

      <p>“Got you!”</p>

      <p>“Take this!”</p>

      <p>While Koutarou and the others were distracted by the evil spirits, they had snuck up and thrown what looked like small balls.</p>

      <p>“Your Highness! Satomi-sama!”</p>

      <p>If Ruth hadn’t noticed, the three of them would’ve been hit.</p>

      <p>“Whoa!”</p>

      <p>“What?!”</p>

      <p>But since Ruth pushed the two of them away, she was the only one hit. The balls hit her head and shoulder with a small sound.</p>

      <p>“Ruth-san!”</p>

      <p>“Are you okay?! Ruth!”</p>

      <p>Koutarou and Theia went pale when they realized what was happening.</p>

      <p>“...Huh?”</p>

      <p>But Ruth simply tilted her head in confusion. For some reason the balls hadn’t hurt her. She was rather puzzled since she was certain they were dangerous.</p>

      <p>“I-It looks like I’m fine.”</p>

      <p>“Thank god!”</p>

      <p>After confirming that Ruth was okay, Koutarou and Theia let out a sigh of relief before getting confused.</p>

      <p>“But what happened? I thought that was an attack!”</p>

      <p>“What did they do?”</p>

      <p>“Too bad we only hit one.”</p>

      <p>“But one is good enough! Wahahaha!”</p>

      <p>“Wahahahahaha!”</p>

      <p>The ghost hunters boasted triumphantly, and seeing that confused Koutarou and the others even more. However, the reason for their behavior soon became obvious.</p>

      <p>“H-Huh?! S-Satomi-sama, look out!”</p>

      <p>“Huh?”</p>

      <p>Heeding Ruth’s warning, Koutarou moved. A short moment later, a large sword swung down where he had been standing. The solid metal blade easily dug in to the concrete floor. If that had hit Koutarou it would have been, needless to say, quite bad.</p>

      <p>“W-Whoa! That could’ve killed me!”</p>

      <p>The attack took Koutarou by surprise, but his jaw dropped when he saw his attacker.</p>

      <p>“Please run away, Your Highness, Satomi-sama!”</p>

      <p>“Ruth-san?! Why?!”</p>

      <p>“Have you gone insane, Ruth?!”</p>

      <p>The person who swung at Koutarou was none other than Ruth. Even now, she was preparing for another attack as she pulled her blade out of the floor and bravely took a stance. In stark contrast to her fearless posture, she looked like she was about to cry.</p>

      <p>“M-My body is moving on its own! I don’t want to attack you!”</p>

      <p>“On its own?”</p>

      <p>“C-Could it be because of those weird balls?”</p>

      <p>It was the only explanation Koutarou could think of.</p>

      <p>“That’s correct!”</p>

      <p>“Very observant, young man! An evil spirit was packed into each of these balls! And if they hit someone, they possess them and make them do whatever they want!”</p>

      <p>“Damn it, you do some horrible things in very plain ways!”</p>

      <p>Ruth must have been possessed by an evil spirit that was making her attack Koutarou and Theia against her will.</p>

      <p>“Even worse, you hit Ruth! Why didn’t you aim for Tulip, you idiots?!”</p>

      <p>“You’re getting angry over the wrong thing, pleb!”</p>

      <p>“But I can’t just punch Ruth-san!”</p>

      <p>“What?! So you’re fine with punching me?!”</p>

      <p>“Yeah.”</p>

      <p>“Heeeeey!”</p>

      <p>“Go on! If you don’t run, that girl will cut you down!”</p>

      <p>As Koutarou and Theia were arguing, Ruth swung her large sword in another attempt to demolish them.</p>

      <p>“Kyaaaaah! My finger switched on the blade’s energy coating on its own!”</p>

      <p>A faint green light began emitting from the blade, increasing its destructive power dramatically.</p>

      <p>“That’s bad, pleb! Be my shield!”</p>

      <p>“I flat out refuse! As if I could block that!”</p>

      <p>“Well, they say that citizens are a country’s shield!”</p>

      <p>“They don’t mean it that way!”</p>

      <p>“Ruuuuun!”</p>

      <p>Ruth swung her sword down as she cried. Koutarou and Theia managed to dodge at the last second thanks to Ruth desperately trying to shift the sword’s path. However, the light around the blade grazed Koutarou’s stick. That alone was enough to blow the upper half clean off.</p>

      <p>After destroying Koutarou’s stick, Ruth’s sword buried itself in the floor once more, digging much deeper than before. The destructive power of the blade covered in a green light was incomparable to just a little while ago.</p>

      <p>“That’s some amazing power.”</p>

      <p>Koutarou broke into cold sweat as he tossed aside the remaining half of his stick.</p>

      <p>“R-Ruth isn’t going easy on us...”</p>

      <p>Having thrown herself to the ground to avoid the attack, Theia hurriedly stood back up.</p>

      <p>“Are you sure she’s not holding a grudge because you’re always so unreasonable?”</p>

      <p>“Of course she’s not!”</p>

      <p>“More importantly, can’t we do something, Tulip? At this rate, we’re going to get killed!”</p>

      <p>All Koutarou and Theia could do was run. They couldn’t risk counterattacking and hurting Ruth. So in order to evade her sword, they ran circles around the pitfall.</p>

      <p>“I’m sorry! I’m really sorry!”</p>

      <p>Ruth was right on their tail, still in tears as she chased them around the pitfall. It may have looked like a comedy sketch to an onlooker, but for the people involved it was dead serious.</p>

      <p>“I might be able to knock her out with non-lethal weapons, but as with the armor and stuffed animals before, the ghost will probably keep attacking with her body! We’re better off with her still conscious!”</p>

      <p>“Th-Then what about her weapon? It’s powered from your ship, right?”</p>

      <p>“If I turn off Blue Knight’s transfer function, she won’t be able to use her weapon, but I’d lose mine too! Then we’d really be helpless!”</p>

      <p>“Do it right away! It’s better than not doing anything at all!”</p>

      <p>“I got it!”</p>

      <p>In the end, Theia listened to Koutarou. She was also desperate to do something about their current situation.</p>

      <p>“Blue Knight, activate the emergency shutdown for the remote weapon transfer system!”</p>

      <p>“As you wish, my princess.”</p>

      <p>As the bracelet responded to her command, both Theia and Ruth’s weapons vanished as if they were erased. It made no difference to Theia who was prepared for it, but Ruth lost her balance when her large sword and shield suddenly vanished.</p>

      <p>“I’ll leave the enemies to you, pleb! I’m going to catch Ruth!”</p>

      <p>Theia turned around and rushed towards Ruth, who was giving her a big opening.</p>

      <p>“Understood!”</p>

      <p>Koutarou obeyed Theia’s command and ran towards the hunters.</p>

      <p>“Aniki, he’s coming this way! This is bad!”</p>

      <p>“Calm down! It’s just one guy! We won’t lose if it’s two on one!”</p>

      <p>Thus a fierce fight erupted: Theia versus Ruth and Koutarou versus the ghost hunters.<br/><br/></p>

      <p>As Koutarou and Theia began their fights against their opponents, an odd commotion was happening over where Shizuka and Kiriha were fighting the crowd of evil spirits.</p>

      <p>“What’s with this girl?! She can hit us barehanded?!”</p>

      <p>“And what’s with those haniwas? We can’t even get close because of that yellow light they’re making!”</p>

      <p>“Nobody told us the enemies were this strong!”</p>

      <p>“Yeah! If we have to fight someone this strong, I want a higher salary!”</p>

      <p>“Quit your complaining and fight them!”</p>

      <p>“I’m sure you’re fine. You already have a high salary.”</p>

      <p>“What?! Why don’t you try saying that to my face?!”</p>

      <p>The evil spirits were fighting with each other. Because of Shizuka and Kiriha’s overwhelming strength, the majority of them had begun hesitating. The lower paid evil spirits had no reason to bet their lives(?) on this fight.</p>

      <p>“What’s going on...?”</p>

      <p>“It seems like the middle management is arguing with the regular employees.”</p>

      <p>Shizuka and Kiriha were dumbfounded that the evil spirits had suddenly stopped their attacks to start arguing. It gave them a great opening, but the situation was just far too absurd. Neither of them had the urge to attack.</p>

      <p>“The enemies only seem powerful because you’re not taking this seriously!”</p>

      <p>“Are you stupid? You can tell just by looking that they’re ridiculously strong! Those girls won’t get any weaker just because you’re spouting some psychology!”</p>

      <p>“Yeah, you’re just the hunters’ dog! You’ve been tamed by a high salary!”</p>

      <p>“What?! Don’t just ignore your own procrastination! Just how much do you think I’ve covered for you?!”</p>

      <p>“Get lost! We won’t get anywhere by talking to you! We’ll negotiate with the hunters directly!”</p>

      <p>“Yeah! Our struggle won’t end until we get a 50 percent raise!”</p>

      <p>As absurd as it was, the situation was developing in a strange direction. Before too long, the evil spirits were targeting the ghost hunters.</p>

      <p>“Leave the negotiation to me. I used to be an employee of a labor union.”</p>

      <p>“Are you serious? That’s actually really encouraging.”</p>

      <p>“But I got fired after some illegal transactions got exposed. And my life went downhill from there...”</p>

      <p>“Seriously?! That’s really encouraging in a different way!”</p>

      <p>“H-Hey, stop! You’re going to turn on your employers?!”</p>

      <p>“That kind of outdated ideology won’t work on us. We’ll use whatever we can. That’s how it works in our generation.”</p>

      <p>“...Now that I think about it, I don’t have any obligations to those hunters either.”</p>

      <p>“Why don’t you aim for a raise as well?”</p>

      <p>“I guess I will. Nothing will come from a pointless fight.”</p>

      <p>And so the spirits united under the front of getting a raise and approached the hunters who were still fighting with Koutarou.</p>

      <p>“Sorry kid, just wait until we finish talking.”</p>

      <p>“Wha?!”</p>

      <p>The evil spirits pushed Koutarou aside and faced the hunters. Having been suddenly thrust aside, he lost his balance and rolled all the way over to Theia and Ruth who were in the middle of a grappling match.</p>

      <p>“What’s going on?”</p>

      <p>“W-Who knows...?”</p>

      <p>Koutarou shook his head while upside down.</p>

      <p>“How is it going for you two?”</p>

      <p>“It’s just as you can see.”</p>

      <p>Theia had succeeded in restraining Ruth. She easily surpassed Ruth when it came to fitness, and once it became a close-quarters fight, there was no fear of her losing.</p>

      <p>“I’m truly sorry, Your Highness.”</p>

      <p>Ruth apologized to Theia while still trying to escape her restraints.</p>

      <p>“It’s fine. Besides, it’s not your fault.”</p>

      <p>“So the only problem’s over there...”</p>

      <p>With Theia and Ruth’s problem temporarily handled, Koutarou looked back towards the evil spirits.</p>

      <p>“We firmly object to these unjust working conditions!”</p>

      <p>“Raise our salary!”</p>

      <p>“Raise it!”</p>

      <p>“They want better working conditions?! It seems they’ve picked up some unnecessary bits of knowledge! We gathered too many evil spirits!”</p>

      <p>“Aniki! The evil spirits are making scary faces!”</p>

      <p>The evil spirits began voicing their protests. Being suddenly surrounded by their supposed allies, the ghost hunters were flustered.</p>

      <p>“Satomi-kun!”</p>

      <p>“Koutarou!”</p>

      <p>That was when Shizuka and Kiriha came over to Koutarou and the others to report what had happened.</p>

      <p>“Landlord-san, what’s going on over there?”</p>

      <p>“They’re fighting amongst themselves.”</p>

      <p>“Really?”</p>

      <p>“It seems that way. There was something about the risk being too high for the reward, and how their share was too small.”</p>

      <p>“It looks like the labor union is finally taking a stand to improve the work environment.”</p>

      <p>“The labor union?!”</p>

      <p>As Koutarou was filled in on the situation, the negotiation between the evil spirits and the ghost hunters was about to reach its climax.</p>

      <p>“You’re probably thinking you can get cheap labor from us ghosts just because we’re in a recession, don’t you? That won’t fly!”</p>

      <p>“Wait, that wasn’t our intention at all!”</p>

      <p>“Then why didn’t you tell us our enemies were that strong? We don’t get paid enough to fight opponents like that!”</p>

      <p>“Th-That’s... Th-They just happened to be strong!”</p>

      <p>The evil spirits held the upper hand in the negotiations. Without their help, the ghost hunters wouldn’t stand a chance against Koutarou and the others. The ghost hunters never had much to stand on to begin with.</p>

      <p>“And we’ve heard that you can sell that girl for 300 million yen!”</p>

      <p>“How about you give some of that to us?”</p>

      <p>“Yeah! I’m hungry!”</p>

      <p>“I understand where you’re coming from! But I can’t give you any money right away! I can’t raise your salary unless we beat those guys over there and sell off the girl!”</p>

      <p>“That’s far too irresponsible! Quit messing around! Do you really think that’s acceptable for an employer?!”</p>

      <p>“Just wait please! Once we sell that girl, we’ll give you your money!”</p>

      <p>“Who would listen to that kind of deal? Will you give us our share now or not?”</p>

      <p>“Th-That’s...”</p>

      <p>It wasn’t a matter of whether they were holding out or not. The ghost hunters had already used all of their money. They had nothing to give to the evil spirits.</p>

      <p>“...Hey, fellow evil spirits, I’ve been thinking.”</p>

      <p>That was when one of the evil spirits stopped her colleagues who were getting heated up. The female spirit had long hair and was wearing a hostess dress.</p>

      <p>“What is it now? This is important!”</p>

      <p>“I know that. That’s why I stopped you. Are you okay with being blinded by just the money in front of you?”</p>

      <p>“Just the money in front of us?”</p>

      <p>“That’s right.”</p>

      <p>She looked over her colleagues and pointed at Sanae with the feathered fan she was holding.</p>

      <p>“Think about which would be better—waiting for that girl to be sold off and get paid, or eating her right now?”</p>

      <p>“Um...”</p>

      <p>The evil spirits all focused on Sanae, floating in her container.</p>

      <p>“M-Me?!”</p>

      <p>As the discussion turned to her, Sanae pointed at herself in surprise.</p>

      <p>“Just look at that stupidly dense spiritual energy and that stability. It’s like she could materialize at any moment. I’d rather eat that girl than get paid.”</p>

      <p>“Th-That’s certainly...”</p>

      <p>“You know, you’re pretty smart!”</p>

      <p>“Yeah, I agree with her!”</p>

      <p>“I’m on board with that idea too!”</p>

      <p>“H-Hey, you guys, what are you doing?!”</p>

      <p>“You can’t eat her!”</p>

      <p>Ignoring the panicking ghost hunters, the evil spirits all licked their lips. They stared at Sanae with desire in their eyes.</p>

      <p>“Eeeeek!”</p>

      <p>Sanae shuddered as they looked at her intently. She understood they were seriously planning on eating her.</p>

      <p>“This is turning out really bad!”</p>

      <p>Koutarou also noticed the change in situation and shoved his hand into the paper bag to find a useable weapon.</p>

      <p><em>They’re planning on eating Sanae?! As if I’d let that happen!</em></p>

      <p>Just like the hunters, Koutarou started panicking.</p>

      <p>“W-Wait, you guys! Don’t touch her! If you do, you’re not getting paid!”</p>

      <p>“We don’t care about that anymore! We want to eat her and obtain greater powers!”</p>

      <p>The female evil spirit’s body began swelling up as her fellow evil spirits started combining with her. After absorbing all of the other evil spirits, the now giant female evil spirit sneered as she looked down on the hunters.</p>

      <p>“Stop! That treasure is worth 300 million yen!”</p>

      <p>“Just 300 million yen? You’ve got your digits wrong! That’s pocket money compared to that girl’s spiritual energy!”</p>

      <p>“Stop! If you touch her, we’ll exterminate you!”</p>

      <p>“Yeah! We’ll exterminate you!”</p>

      <p>“Hahaha, just try it, you amateur ghost hunters! Without our power you couldn’t even fight, and you think you can beat us?!”</p>

      <p>The evil spirits had combined because they all equally wanted to eat Sanae, but that had given them considerable power. A single swing from that giant arm was enough to send the hunters flying.</p>

      <p>“Augh... A-Aniki...”</p>

      <p>“U-Ugh... T-To think it would come to this... We relied too much on evil spirits, despite being ghost hunters...”</p>

      <p>Blinded by their desires, the ghost hunters hadn’t even seen what was happening. It wasn’t until now that they had finally realized the reason for their failure, but it was already too late. They were thrown into the basement wall and lost consciousness.</p>

      <p>“Now, you’re next, little kitten.”</p>

      <p>“N-No, don’t come any closer!”</p>

      <p>The evil spirit’s next target was Sanae. Frightened, Sanae started backing up, but her back quickly pressed up against the container wall. Unable to retreat any further, she began shaking her head.</p>

      <p>“There’s no need to be scared. Become one with me. It’s not like you have anywhere to go either, right? With me, you won’t feel lonely anymore.”</p>

      <p>“Nowhere to go...?”</p>

      <p>Those words wormed their way into Sanae’s heart. No matter how long she waited for her parents, they weren’t showing up. And even Koutarou, who she had almost trusted, was her enemy.</p>

      <p><em>If I go with these people, I won’t feel lonely anymore...?</em></p>

      <p>Sanae was lonely all by herself. Even now, she was scared of being left alone again. The temptation shook Sanae.</p>

      <p>“That’s right. Open your mind and accept us. If you do, you’ll no longer have anything to fear.”</p>

      <p>The evil spirit continued temping Sanae with sweet words. When absorbing other ghosts, exploiting their weaknesses was most efficient. If they resisted, a lot of spiritual energy would go to waste.</p>

      <p>“My mind...”</p>

      <p>The evil spirit’s giant fingers wrapped around the container in order to absorb Sanae. The container easily cracked, and as the evil spirit gradually squeezed, the cracks grew larger. The evil spirit was careful not to crush the container right away because she was worried Sanae might put her guard up and she would lose their chance to absorb her. However, that slight delay greatly changed Sanae’s fate.</p>

      <p>“Sanaeeeee!”</p>

      <p>The moment Sanae heard that voice, she came back to life, pulling back from the brink of giving up.</p>

      <p>“Koutarou?!”</p>

      <p>It was true. The voice she heard was Koutarou’s. He had pulled out a short sword from the paper bag and was coming towards the evil spirit and Sanae.</p>

      <p>“Tch! You’re going to get in my way, kid?”</p>

      <p>With the appearance of Koutarou, the seed of doubt that had been planted in Sanae’s heart faded. Because of that, the evil spirit was unable to efficiently absorb her. Angered, the evil spirit bared her teeth, threatening Koutarou. Seeing that scared Sanae even more, and she completely rejected the evil spirit.</p>

      <p>“Kyaaaaah! Noooooooo!”</p>

      <p>Sanae no longer wanted to be absorbed by the evil spirit. Those feelings came out of her mouth in the form of a scream.</p>

      <p>“Just wait, Sanae! I’m coming to save you right now!”</p>

      <p>Koutarou charged at the evil spirit with his sword. Hearing Sanae’s scream stoked his fighting spirit and he gripped the sword even tighter.</p>

      <p>“What can you do with a single sword?”</p>

      <p>“We’ll see! The effect doesn’t last long, but it’s supposedly very dangerous for you!”</p>

      <p>Koutarou was holding a demon slaying sword—“30 second instant holy sword: Something-calibur.”</p>

      <p>Despite the fact that it was a mass-produced weapon with a short lifespan, it held enough power to rival an actual demon slaying sword. It was a revolutionary product.</p>

      <p>“Damn, that’s the sword exorcists use!”</p>

      <p>Sensing the danger from the short sword, the evil spirit let go of the container Sanae was in and attacked Koutarou.</p>

      <p>“Whoa!”</p>

      <p>“Quit moving around!”</p>

      <p>But no matter how many times the evil spirit swung her arms, she was unable to hit Koutarou. His quick movements allowed him to dodge her massive arms.</p>

      <p>“Combining seems to have made you even slower!”</p>

      <p>“Quit your yapping!”</p>

      <p>Just as Koutarou said, growing larger had stymied the evil spirit’s mobility. She seemed unused to her newly combined body. Although she had been able to take out the hunters with a surprise attack, that wouldn’t work on Koutarou.</p>

      <p>“I win, giant!”</p>

      <p>“S-Stop it! Anything but that sword!”</p>

      <p>“Take this!”</p>

      <p>After dodging the evil spirit’s attacks yet another time, Koutarou lowered his posture and thrust his entire body weight behind the sword.</p>

      <p>“Gyaaaaaaaah!”</p>

      <p>“How about that?!”</p>

      <p>Without any real resistance, the short sword pierced through the evil spirit’s body. Her face warped as she screamed in agony.</p>

      <p>“Aaaaaaaah... Wait, huh?”</p>

      <p>But it was only for a moment. Then the evil spirit’s anguished expression turned to confusion. On top of that, she felt no pain.</p>

      <p>The puzzled spirit put the fight aside to ask Koutarou, “What is this? This doesn’t hurt at all, kid. What’s going on?”</p>

      <p>“What?!”</p>

      <p>Seeing what happened, Koutarou also forgot the fight and looked down at his short sword.</p>

      <p>“Hmm?”</p>

      <p>There was a message on a label hanging off the handle of the sword: “Returned due to malfunction.”</p>

      <p>“It’s defective? You’re kidding me!”</p>

      <p>“That’s my line! I thought I was going to die!”</p>

      <p>“No, you’re already dead.”</p>

      <p>“Shut up, kid! ...Wait!”</p>

      <p>The evil spirit was the first to regain her senses, and suddenly swung their giant arm at Koutarou who was still standing still.</p>

      <p>“Whoa!”</p>

      <p>Koutarou desperately tried to dodge, but he couldn’t fully get out of the way in time. Though he managed to avoid a direct hit from the arm, the fan she was holding still hit him. Being hit head-on like that, Koutarou fell down onto the floor.</p>

      <p>“Koutarou!”</p>

      <p>“Satomi-kun!”</p>

      <p>“Karama, Korama, deploy the spiritual energy field around Koutarou!”</p>

      <p>“Understood, ho!”</p>

      <p>“Koutarou, we’re on our way, ho!”</p>

      <p>Shizuka and Kiriha came running over to Koutarou. To protect the three, the haniwas stood up against the evil spirit.</p>

      <p>“Satomi-kun, are you okay?!”</p>

      <p>“O-Ouch...”</p>

      <p>Koutarou barely managed to stay conscious. Seeing Shizuka and Kiriha worried, he attempted to stand up. But the two of them quickly held him down.</p>

      <p>“Don’t force yourself, Koutarou! Just stay down!”</p>

      <p>“But...”</p>

      <p>Koutarou still tried to get up, but the two just pushed him down on the floor and shook their heads.</p>

      <p>“Just leave this to us!”</p>

      <p>“Yeah! Kurano-san and I will beat that ghost!”</p>

      <p>“O-Okay...”</p>

      <p>Hearing that, Koutarou relaxed his body. He knew both of them were stronger than he was. They would be able to fend off the evil spirit. He listened to them because he had faith in that.</p>

      <p>“Are you sure you should have said that?” The evil spirit laughed at Koutarou and the others. “Don’t think I’m the same as before.”</p>

      <p>“What?”</p>

      <p>Koutarou and the others looked at the evil spirit.</p>

      <p>“Koutarou, Koutarou!”</p>

      <p>When they did, they saw Sanae sinking into the evil spirit’s body. While Shizuka and Kiriha were occupied with Koutarou, the evil spirit had broken Sanae’s container.</p>

      <p>“S-Sanae!”</p>

      <p>“Sanae-chan!”</p>

      <p>“Aaaah, stooop! S-Save—”</p>

      <p>Before long, Sanae fully sunk into the evil spirit’s body with a plop.</p>

      <p>“Ahahahaha! I can feel it! I can feel it! Such ridiculously strong power is flowing into me! Just how much power did this girl have?! I shouldn’t have wasted our time trying to convince her! I should have just done this from the start!”</p>

      <p>The evil spirit was mad with joy after swallowing Sanae. Sanae was resisting, but even then the spiritual energy the evil spirit absorbed from her was considerable. She grew even more powerful because of it. The translucent evil spirit gradually became more opaque, almost as if her body was turning solid. And her body grew even larger, almost enough for her to bump her head into the five meter high ceiling.</p>

      <p>“Aaaaaaaah! Kyaaaaaaaaaaah!”</p>

      <p>And as the evil spirit got bigger and stronger, Sanae’s screams of agony got louder and echoed throughout the basement.</p>

      <p>“Stop! Just— Aaaaahhh! Stop this!”</p>

      <p>“More! Give me more power! You’ll become a part of me and we’ll live together forever!”</p>

      <p>But unlike the evil spirit, Sanae was becoming translucent. Her body was normally opaque enough to look real, but now it was wavering. Anyone who saw her now could clearly tell she was a ghost.</p>

      <p>“This is bad! At this rate, Sanae won’t last!”</p>

      <p>“Let’s go, Kurano-san! We need to save Sanae-chan!”</p>

      <p>“Yeah!”</p>

      <p>Sensing that Sanae was in danger, Kiriha and Shizuka rushed the evil spirit. Watching them go, Koutarou desperately tried to stand up.</p>

      <p><em>I... I don’t have time to be lying down. I need to... do something... or Sanae will...</em></p>

      <p>However, his injured body wouldn’t listen to him. Just getting on his knees was dizzying enough to make him feel like he was going to faint.</p>

      <p>“Nooooooooooo! Koutarou, Koutarou!”</p>

      <p>“Sanae!”</p>

      <p>But Sanae’s screams seemed to give Koutarou superhuman strength.</p>

      <p>“Aaaaaaaahhh!”</p>

      <p>Pumping himself up with a primal scream, Koutarou stood up. He didn’t care if his body was screaming in pain or if he couldn’t see straight. He shook his head repeatedly to clear his mind.</p>

      <p>“Good job on getting up... is what I’d like to say, but...”</p>

      <p>Looking at Koutarou, the evil spirit flashed a sinister grin. It looked similar to how Sanae and Theia would smirk, but Koutarou felt that this was fundamentally different to theirs.</p>

      <p>“You were a bit too slow.”</p>

      <p>The evil spirit threw something towards Koutarou.</p>

      <p>“Landlord-san?! Kiriha-san?!”</p>

      <p>That “something” was Shizuka and Kiriha, who were both hurt and unconscious now. In the short time it had taken for Koutarou to stand up, the evil spirit had defeated them. That was just how powerful she had gotten after absorbing Sanae’s spiritual energy.</p>

      <p>“So what are you going to do on your own, kid? Hmm? You don’t even have a weapon.”</p>

      <p>Shizuka and Kiriha were out cold, the haniwas weren’t moving, Theia still had her hands full with Ruth, and Koutarou had dropped the bag with the exorcism tools somewhere. All Koutarou had left were the charms he was in the habit of carrying.</p>

      <p>“Nothing much. I’ll do the same as before. I’ll just... knock you out!”</p>

      <p>Still staggered, Koutarou placed a charm in each hand and took a fighting stance.</p>

      <p>“You think you can beat me in that state? Wahahaha, you’re pretty funny, kid!”</p>

      <p>“Run away, pleb! You’re going to get killed!”</p>

      <p>“Satomi-sama, you can’t!”</p>

      <p>Theia and Ruth called out to him, but their voices didn’t reach Koutarou.</p>

      <p>“On principle, I make sure to finish the fights I start.”</p>

      <p><em>Just wait, Sanae. I’ll get you out of there...</em></p>

      <p>Despite overwhelming odds against him and despite his physical condition, the fire burning in Koutarou’s eyes was stronger than ever. Despite being driven into a corner with two strikes, Koutarou still felt like Babe Ruth today.</p>

      <p>“Is that so? Then die! In honor of your courage, you’ll get to be the first victim of my reborn powers!”</p>

      <p>The evil spirit began laughing hysterically and rushed at Koutarou. She was planning on tearing his head clean off.</p>

      <p>“I-I’ll absolutely knock you out...”</p>

      <p>Koutarou strongly grasped the charms and swung his fists. He knew he would never reach the evil spirit, but he couldn’t stop himself.</p>

      <p>“No, don’t die, Koutarou! Koutarouuuuu!”</p>

      <p>That was because Sanae was crying, even now. She had been crying ever since they had gotten into their fight. That’s why even though he knew, he couldn’t stop. Even if it was impossible to win, he couldn’t turn his back on Sanae. To him, the evil spirit came second to Sanae.</p>

      <p>“Ahyahyahyah! Gyahahaha! Dieeeee!”</p>

      <p>The evil spirit approached Koutarou, thrusting out both of her arms to finish him off. Koutarou wouldn’t be able dodge now that he was slowed. Had the evil spirit been just a second faster, Koutarou probably would have lost his head.</p>

      <p>“Gwuh?! Wh-What is...?”</p>

      <p>But the evil spirit’s arms never reached Koutarou.<br/><br/></p>

      <p>Yurika first reached the old mansion several minutes after Koutarou and the others had entered the basement. She’d made a daring escape from the cosclub and used tracking magic to chase after Koutarou and the others.</p>

      <p>“Wh-What do I do...?”</p>

      <p>However, she was now frozen in place. The eerie sight of the mansion at night frightened her. It was practically in ruins and she knew there were lots of ghosts inside. She could even hear screams coming from within. The cowardly Yurika didn’t have the courage to enter the house.</p>

      <p>“M-Maybe I should go home... Satomi-san did say I shouldn’t force myself...”</p>

      <p>After standing in front of mansion for a while, Yurika eventually turned her back to the entrance.</p>

      <p>“Yes, that’s a good idea! Nothing good will come from forcing myself!”</p>

      <p>As she told herself that, she headed for the gate to the street. She would rather go home, tuck herself in to her futon, and go to sleep.</p>

      <p>“...But...”</p>

      <p>However, she stopped moving as she reached the gate. She couldn’t bring herself to leave.</p>

      <p>“...”</p>

      <p>She silently turned her head and looked back. The mansion in the middle of night really was frightening. Yurika sincerely wanted to flee, but something inside of her screamed at her, asking if she was really okay with that.</p>

      <p>“Can I really rest easy if I go back alone...?”</p>

      <p>Yurika remembered what Harumi had told her during the sports festival.</p>

      <p><em>Even if nobody else is there for me, I’m still there for myself. If I give up now, I’ll lose to myself in the future too. And if I lose to myself, Senpai would be sad.</em></p>

      <p>“I... I feel like going back like this would be a bad idea...”</p>

      <p>Having prepared herself, Yurika turned back around. Clutching her large staff, she took several deep breaths to calm down.</p>

      <p>“Besides, I feel like somebody is calling for help...”</p>

      <p>At that moment, Sanae was indeed shouting for help. There was no way Yurika could hear it from the outside, but even though she couldn’t hear it, she was somehow able to feel it.</p>

      <p>“That’s right!”</p>

      <p>Immediately after she had prepared herself, Yurika came up with a brilliant idea.</p>

      <p>“I’m scared of facing ghosts, so what if I use wide area magic from here?!”</p>

      <p>She was scared of entering the mansion, but she couldn’t just abandon them. In that case, she decided she would help from outside. That was Yurika’s compromise between her cowardly nature and her duties as a magical girl.</p>

      <p>“Here we go! Angel Halo!”</p>

      <p>Having decided what to do, she brandished her staff.</p>

      <p>“Bind Undead! Modifier: Huge Area Effect! End: Casting Time, Four Times!”</p>

      <p>Yurika cast a spell that restrained ghosts. Since Sanae was with them, she couldn’t use anything more harmful than that. And in order to keep down the magic consumption and increase the area of effect, she increased the time it would take for the spell to activate. Because of that, it didn’t take effect right away after she had finished her incantation, but the spell was fully cast a dozen or so seconds later.</p>

      <p>A purple light came out from her staff and gave the night sky a peculiar color. The light extended throughout the mansion. Because of the time it took for the spell to activate, the purple light covered an unbelievably wide area. The light enveloped the entire mansion, and even covered the basement that Yurika couldn’t see from the outside. An area several dozen meters wide with the mansion at its center was placed under the effect of Yurika’s spell.</p>

      <p>“All right! My plan worked! Yurika, fight!”</p>

      <p>Yurika cheered as she looked over the light enveloping the mansion. She had helped out quite a bit, but sadly there was nobody there to praise her.</p>

      <p>“Ah, there she is! President, I found her! Yurika-chan’s secretly cosplaying in this kind of place!”</p>

      <p>“Yurika-chan, even though you said you hated it so much, you must be really pumped up about going to Comiha...”</p>

      <p>“Huh...?”</p>

      <p>Instead, the only ones around were her natural predators, the cosplay society members.<br/><br/></p>

      <p>At first, the light that filled the basement was purple. But as the light got stronger, it turned pure white. If Yurika had been here, she might have said it was the same light that saved Harumi during the sports festival. However, she was nowhere to be seen and nobody there understood the meaning behind the light.</p>

      <p>“Gwaaaaaaaaaaah! What’s with this light?!”</p>

      <p>Although the light covered everybody equally, the only one who began writhing in pain was the evil spirit. The spell Yurika had used was only supposed to bind the dead. But when the light changed from purple to white, it began burning the evil spirit’s body.</p>

      <p>“What’s going on...?”</p>

      <p>Koutarou looked on in surprise as the evil spirit began squirmed in agony.</p>

      <p>“It’s going away! My power is leaving me! Ahhhhh, why?! I was supposed to be reborn with great power!”</p>

      <p>As the evil spirit was burned by the white light, she began shrinking at twice the speed she had grown. At the same time, her opaque body became more and more translucent. Koutarou didn’t understand what had happened, but he did understand that the evil spirit was weakening.</p>

      <p>“Pleb, what’s with your hands?!”</p>

      <p>“My hands?”</p>

      <p>Koutarou didn’t notice that his hands had begun glowing until after Theia pointed it out. They were glowing with the same light that was filling the room.</p>

      <p>“The charms are glowing...?”</p>

      <p>As Koutarou opened his hands, the glow got even brighter. The charms glowing in his hands read “family safety” and “evil spirits begone.” Theia was also the first to realize what was going on.</p>

      <p>“Don’t you get it, pleb?! Those are weapons!”</p>

      <p>When it came to fighting, Theia’s instincts were usually spot on.</p>

      <p>“It won’t matter if you throw them or punch with them! Just use them like you do against Sanae!”</p>

      <p>“R-Right!”</p>

      <p>If the light filling the room could harm the evil spirit, then chances were that charms could do the same. Even if they didn’t, with the evil spirit this weakened, normal charms might still affect her. Realizing that, Koutarou clenched the charms in his fists once more.</p>

      <p>“Here I come! Let me repay you for everything you’ve done!”</p>

      <p>“Guaaah! D-Don’t come any closer! Don’t touch me!”</p>

      <p>The evil spirit had already shrunk to half size. On top of that, she was unable to move anything but her mouth because of the light. As the evil spirit turned translucent again, Sanae could be seen inside.</p>

      <p>“Sanae! Can you hear me, Sanae?!” Koutarou rushed towards the evil spirit while shouting to Sanae.</p>

      <p>“...K-Kouta...rou...?” she responded in a weak voice.</p>

      <p>“Just wait, Sanae! I’ll get you out of there right now!”</p>

      <p>“Koutarou!”</p>

      <p>Oddly enough, Sanae didn’t seem to be suffering any ill effects from the white light. Instead, as the evil spirit got weaker, she regained her vigor some. But even so, she was still in a weakened state. All she could do was call out to Koutarou from inside the evil spirit.</p>

      <p>“Don’t come any closer! Please stop! I was wrong!”</p>

      <p>Seeing Koutarou’s glowing fists, the evil spirit began begging for her life. Her arrogance from before was nowhere to be seen.</p>

      <p>“I don’t want to get hurt! Please forgive me! Can’t you just let me go?”</p>

      <p>“Did you do that when Sanae begged you? Did you let her go?!”</p>

      <p>But Koutarou didn’t care for her begging. After hurting Sanae, the evil spirit was now asking to be spared. Her selfishness only made Koutarou even angrier.</p>

      <p>“I’ll give her back! I’ll get her back to you! So please forgive me!”</p>

      <p>“No, I definitely won’t forgive you! You hurt Sanae and everyone else! You can regret that on the other side!”</p>

      <p>As if responding to Koutarou’s anger, the charms in his hands began to glow more. They started to glow so brightly that just looking at them directly was painful.</p>

      <p>“This is for everyone!”</p>

      <p>As Koutarou roared, his left fist hit the evil spirit right in the face and the glow dissipated. The gathered power had been used up.</p>

      <p>The evil spirit was thrown back by the merciless blow. And taking the hit to the face, she wasn’t even able to scream. After getting punched, the evil spirit instantly shrunk to roughly Koutarou’s size.</p>

      <p>“And this—”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert9">
    <img alt="insert9" class="insert" src="../Images/Insert9.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter52">
    <div class="main">
      <p>Koutarou’s right hand moved now. He was standing like a pitcher, planning on finishing off the evil spirit by throwing the second charm.</p>

      <p>“Eeeeeeeek! Stop! Please forgive me! I don’t want to pass on while holding on to a grudge!”</p>

      <p>“—is for making Sanae cry!”</p>

      <p>Koutarou let fly his trained right arm. His signature fastball screeched through the air like an arrow as it approached the evil spirit. It was like he had thrown a small meteor.</p>

      <p>“Gyaaaaaaaaaaah!”</p>

      <p>And when the charm touched the evil spirit, her body began disappearing from where the charm had touched her. It passed through the fan she held up to defend herself, into the hand holding the fan, and through that hand into her arm. Wherever the charm touched the evil spirit’s body, she popped like a balloon. Unable to withstand the light, the evil spirit lost her form and finally passed on.</p>

      <p>“Kyah!”</p>

      <p>When the evil spirit dispersed, Sanae fell down onto the floor. Though free, Sanae was still weakened and was unable to move as she laid on her back.</p>

      <p>“Owowowow... Ah, that’s...!”</p>

      <p>And with Sanae in that state, another danger approached her. The charm that had just erased the evil spirit was falling down towards her. Despite vanquishing the evil spirit, the charm hadn’t lost its glow. And through the light, she could see the blue bag with golden embroidery that Koutarou would often throw at her.</p>

      <p>“I-It’s over!”</p>

      <p>Normally, getting hit by the charm would only slightly burn her. But Sanae was now extremely weak and the powerful light that erased the evil spirit was burning bright. She tightly closed her eyes as she realized that she would be forced to pass on as well. She was too scared to watch as her own body disappeared.</p>

      <p>However, things did not come to pass as Sanae had imagined. The charm bounced off her chest and landed on her face.</p>

      <p>“Huh...?”</p>

      <p>Realizing that she wasn’t passing on, Sanae slowly opened her right eye. And right in front of her eyes was the glowing white charm.</p>

      <p>“Yikes!”</p>

      <p>She opened both of her eyes and held her breath. But still the white light didn’t harm her, nor did the charm explode like it normally would.</p>

      <p>“Wh-Why...? Doesn’t this light force ghosts to pass on?”</p>

      <p>Instead, she felt something warm entering her body where the charm was touching her. It was healing her weakened body little by little.</p>

      <p>“And why isn’t it exploding...?”</p>

      <p>After recovering for a moment, Sanae stood up. The charm slid off of her face, and she caught it in her hands.</p>

      <p>“It’s disappearing...”</p>

      <p>Almost as if waiting for Sanae to recover, the white light finally vanished, leaving only the charm in Sanae’s hands.</p>

      <p><em>Why...?</em></p>

      <p>The light that forced the evil spirit to pass on had healed her, and the charm that normally exploded on contact was now resting in her hands. Sanae was confused. Looking for an answer, she turned the charm over and read the embroidered words on the front.</p>

      <p><em>Family... safety...?</em></p>

      <p>In gold thread, the charm read “family safety.”</p>

      <p>“Are you okay, Sanae?”</p>

      <p>Before the meaning of the words sunk in, somebody called her name. Hearing that voice, Sanae quickly looked in the direction it had come from.</p>

      <p>“Koutarou!”</p>

      <p>“Well you seem fine...”</p>

      <p>It was Koutarou. He was dragging his injured body towards Sanae, but when he saw that she was fine, he stopped and smiled.</p>

      <p>“Koutarou, you...”</p>

      <p><em>You fought so desperately and got beaten up so badly...</em></p>

      <p>It was seeing Koutarou like that that made the words on the charm finally sink in for Sanae.</p>

      <p>“For my sake... even though I’m your enemy... For my sake...”</p>

      <p>Tears began streaming down her cheeks, yet she wasn’t aware that she was crying. She simply embraced the charm and gazed at Koutarou.</p>

      <p><em>I get it. I understand... just what you think of me, Koutarou...</em></p>

      <p>The charm that didn’t hurt Sanae. Koutarou’s ragged appearance.</p>

      <p>Those things conveyed Koutarou’s intentions far more eloquently than words ever could.</p>

      <p>“H-Hey, what’s wrong, Sanae?! Are you hurt?! Or did the evil spirit do something to you?!”</p>

      <p>Surprised by Sanae’s sudden tears, Koutarou rushed over to her. He had completely forgotten the pain he was in.</p>

      <p>“I-It’s... nothing... Besides, you’re the one who did something to me...”</p>

      <p>That was when Sanae finally realized she was crying. But she didn’t think of stopping her tears, nor did she try to wipe them away. Instead, she just let the emotions overflowing inside of her manifest as tears.</p>

      <p>“That’s... right.”</p>

      <p>“And?”</p>

      <p>“What?”</p>

      <p>“You said you wanted to talk with me about something...”</p>

      <p>“Oh, yeah, right.”</p>

      <p>Standing in front of Sanae, Koutarou stopped to think.</p>

      <p><em>Um, what did I want to talk about again?</em></p>

      <p>But he couldn’t think of what he wanted to say. Too many things had happened and his brain was overheating.</p>

      <p>“Sorry, I completely forgot with all that’s happened. I’ll remember once I’ve calmed down, so let’s go home for now, Sanae.”</p>

      <p>“You really are an idiot...”</p>

      <p><em>You even said you wouldn’t forcibly take me home... What are you saying now?</em></p>

      <p>Sanae complained on the inside...</p>

      <p>“I have no excuses.”</p>

      <p>“But I’ll forgive you.”</p>

      <p>But she wasn’t in as bad of a mood as she sounded.</p>

      <p>“You did come to save me after all.”</p>

      <p>“Sorry.”</p>

      <p>“And Koutarou...”</p>

      <p>Sanae strongly clasped the charm in her hands.</p>

      <p>“Thank... you...”</p>

      <p>Sanae smiled. Her eyes were red and the tears were still flowing, but she flashed the energetic smile she seemed to have lost.<br/><br/></p>

      <p>While Koutarou and Sanae were making up, there were two figures trying to escape.</p>

      <p>“Oh, it looks like it ended well.”</p>

      <p>“If things had turned out bad, it would leave a bad taste in my mouth. With this, we can escape without regrets.”</p>

      <p>It was the culprits behind all of the commotion—the two ghost hunters. They were trying to escape while Koutarou and the others weren’t paying attention. Fortunately, their efforts paid off and they were able to flee the basement without notice.</p>

      <p>“We did it!”</p>

      <p>“Let’s hurry up and run away!”</p>

      <p>However, as they were celebrating, somebody stood in their way.</p>

      <p>“...And where are you planning on going?”</p>

      <p>It was Kiriha and her haniwas. Even while everyone was focused on Koutarou and Sanae, she hadn’t overlooked the hunters moving.</p>

      <p>“Oh no!”</p>

      <p>“Th-They’ve already found us!”</p>

      <p>“P-Please, just overlook us!”</p>

      <p>“Please!”</p>

      <p>The hunters threw away their pride and prostrated themselves before Kiriha.</p>

      <p>“Calm down. It’s not like I want to harm you.”</p>

      <p>“Huh?”</p>

      <p>“Really?!”</p>

      <p>“Well, I do want to hurt you, so if you try to run, I won’t show any mercy.”</p>

      <p>“We won’t run, lady!”</p>

      <p>“We won’t run!”</p>

      <p>The two sat up straight as Kiriha glared at them. They didn’t care that the floor was covered in dust.</p>

      <p>“So, what can we help you with, lady?”</p>

      <p>“You said you captured Sanae so you could sell her, yes?”</p>

      <p>“That’s right, beautiful lady. That ghost is extremely rare, so she would fetch a high price.”</p>

      <p>“Yeah! We were planning on selling her for 300 million! We were going to live a life of luxury!”</p>

      <p>Having completely accepted their defeat, the hunters explained everything to Kiriha. To them, their pride wasn’t worth more than their lives.</p>

      <p>“In that case, I will buy Sanae with my 300 million.”</p>

      <p>“Whaaat?!”</p>

      <p>“Seriously?!”</p>

      <p>The hunters were amazed by the unexpected offer.</p>

      <p>“By 300 million, you mean... 300 million?!”</p>

      <p>The hunters couldn’t believe it. They questioned Kiriha’s sanity when she offered them 300 million yen in a situation where they had partially expected to be killed.</p>

      <p>“Of course.”</p>

      <p>However, Kiriha only calmly nodded her head. Looking at her, the leader’s expression changed.</p>

      <p>“...It seems you have your reasons, lady.”</p>

      <p>“That’s right. Of course, I don’t want you coming back, but there’s something else I want.”</p>

      <p>“And that is?”</p>

      <p>Kiriha narrowed her eyes at the ghost hunter’s question.</p>

      <p>“Information. I want you to give me all the information you have about Sanae. That’s the condition for this deal.”</p>

      <p>“You’re a scary one, lady...”</p>

      <p>Kiriha didn’t chose her means when it came to her targets. She would even work with her enemies and pay them without question.</p>

      <p><em>She said she was an invader, but...</em></p>

      <p>The ghost hunters both broke into a cold sweat. They only just realized how dangerous the person they were dealing with was, and it wasn’t just because of the weapons she was using.</p>

      <p>“I understand. We’ll do exactly as you say, lady.”</p>

      <p>“Yes, we will.”</p>

      <p>It didn’t take the hunters long to come to the realization that making this woman an enemy would be bad.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter6">
    <div class="main">
      <h1>A Dungeon and Treasure</h1>

      <h2>Saturday, August 22nd</h2>

      <p>Ten days had passed since the events at the beach, and the calendar had now reached the latter half of August.</p>

      <p>It was still summer vacation, but Koutarou and Harumi had decided on a couple of days for club activities during the break. Today was one of those days, and they were both currently knitting. That said, they didn’t make their way all the way to school. Instead, they were using a self-study room at a library close by for both of them. An entire self-study room could be reserved as long as arrangements were made in advance. The room wasn’t particularly large, but it was enough for the knitting society’s club activities.</p>

      <p>“...And we were able to make up.”</p>

      <p>“I see. That’s great.”</p>

      <p>“It was all thanks to your advice, Sakuraba-senpai.”</p>

      <p>Koutarou explained what had happened with Sanae and bowed deeply to Harumi. He had called her as soon as he got back from the trip, but he felt the need to thank her in person.</p>

      <p>That said, Koutarou didn’t touch on the part about Sanae being a ghost or that she had been kidnapped by ghost hunters. That would only serve to confuse Harumi, and it wasn’t what was important.</p>

      <p>“Thank you very much.”</p>

      <p>Sanae, who was next to Koutarou, lowered her head as well. She was aware that Harumi couldn’t see or hear her, but she had still come along with Koutarou in order to express her gratitude.</p>

      <p>“U-Um, just treat your friends preciously, okay?”</p>

      <p>Embarrassed by Koutarou’s earnest thanks, Harumi stared down at her hands as she busily knitted away. She had decided to try out a new knitting method today, but she was so embarrassed that she had reverted to using her normal method before realizing it.</p>

      <p>“Yes, I will.”</p>

      <p>Satisfied that he’d accomplished what he wanted to for the day, Koutarou began moving his own knitting needles. He had gotten quite decent at knitting and was now working on a muffler for the coming winter.</p>

      <p>“She called us friends.”</p>

      <p>However, Sanae slightly delayed his progress. Instead of standing or floating around on her own, she was clinging on to Koutarou’s neck. This position made it hard for Koutarou to move his knitting needles.</p>

      <p>“Even though we’re not, right?”</p>

      <p>“...Then get off. It’s hard to knit.”</p>

      <p>Koutarou complained in a quiet voice so that Harumi wouldn’t hear. Fortunately, she seemed quite busy with her own knitting, so she didn’t notice.</p>

      <p>“No way!”</p>

      <p>“...Be reasonable.”</p>

      <p>“We’re enemies, so I’ll get in your way all I want!”</p>

      <p>“...Come on now.”</p>

      <p>However, Sanae just smiled and refused to listen to him. She had been acting like that ever since they got back from the hot spring, and she would trouble Koutarou from time to time.<br/><br/></p>

      <p>Thanks to the events at the beach, Sanae understood that Koutarou wasn’t just her enemy. When it came to room 106, they were enemies, but other than that, she realized that he didn’t dislike her. Because of that, Sanae had now completely returned to her old, energetic self. In fact, she was now less reserved around Koutarou and was even livelier.</p>

      <p>Sanae was often with Koutarou, but ever since the hot spring, she was now always with him as long as there wasn’t a special reason not to be. She also teased and bothered him from time to time. Getting in the way of his knitting was one such occasion. That said, Sanae didn’t <em>really</em> want to trouble him, and she held back when the situation called for it. In the past, she wouldn’t hold back when she got emotional, so this was another change for the better.</p>

      <p>But to Koutarou, the only thing that had changed was when she decided to bother him, so he didn’t feel like that much was different.<br/><br/></p>

      <p>Having finished their club activities, Koutarou and Sanae headed back home. When they reached room 106, Theia jumped out of the room with a pale face.</p>

      <p>“You picked a good time to come back, pleb!”</p>

      <p>“What, did something happen?”</p>

      <p>Koutarou began to worry when he saw Theia’s serious expression.</p>

      <p>“You need to say something to Yurika! She refuses to put down the controller!”</p>

      <p>But when he heard her explanation, Koutarou was drained of all his energy.</p>

      <p>“Wh-What? That’s all...?”</p>

      <p>“What are you saying?! My Blue Knight is just about face the decisive final battle, but Yurika won’t let me have a turn!”</p>

      <p>“Why is Yurika even playing?”</p>

      <p>“Who knows?”</p>

      <p>“That doesn’t matter! Just hurry up and come! The final battle draws near!”</p>

      <p>“Okay, okay... You’re all so selfish, jeez...”</p>

      <p>“I want to play too. Koutarou, let’s fight.”</p>

      <p>“No! I’m first!” Theia impatiently stamped her feet on the floor as Koutarou took off his shoes. “We’ll finish this today no matter what! How dare the boss casually drink tea with his subordinates?! He’ll regret making a fool of me and Blue Knight!”</p>

      <p>“I get it. Just calm down, Tulip!”</p>

      <p>“What kind of fool would calm down before the decisive battle?!”</p>

      <p>“This illness is getting serious...”</p>

      <p>As Koutarou finished taking off his shoes, Theia dragged him to the inner room.</p>

      <p>“Waaaaah! Where are they?!”</p>

      <p>As he entered the inner room, Koutarou instantly noticed Yurika, whether he liked it or not. She was seated in front of the TV, crying bitterly. As she stared into the screen, she desperately fiddled with the controller.</p>

      <p>“Go on, say something, pleb!”</p>

      <p>“Y-Yeah...”</p>

      <p>Slightly taken aback by the sight of Yurika crying while playing a game, Koutarou nodded at Theia and sat down next to her.</p>

      <p>“Yurika, if you don’t like it so much that you’re crying, you could just stop.”</p>

      <p>“You’re wrong! I’m not crying because I don’t like it!”</p>

      <p>Yurika turned towards Koutarou. She had paused the game, but her tears were still freely flowing.</p>

      <p>“Th-Then what is it?”</p>

      <p>“I can’t find them!”</p>

      <p>Yurika pointed to the TV as more tears streamed down her face. It was displaying the status screen of the game Theia was always playing.</p>

      <p>“Who can’t you find?”</p>

      <p>“Yurika, Yurika A, and Yurika B! Theia-chan refuses to recover their bodies from the dungeon!”</p>

      <p>“Ah, I see...”</p>

      <p>Koutarou let out a loud sigh as he finally understood the situation. Theia named the characters after the residents of room 106 because thinking of names was a bother. That alone would have been fine, but Theia had given up on rescuing some of the characters that had fallen. She had abandoned them because it was too troublesome to save them. Yurika was now in a tizzy because she realized what Theia was doing, and she was trying to save the characters named after herself.</p>

      <p>“Well, I guess you can’t sit by quietly with characters named after you lying dead in a dungeon somewhere.”</p>

      <p>“This is your fault, Tulip.”</p>

      <p>“R-Ruth, please refill my tea. And get some for the pleb and the others as well.”</p>

      <p>Theia diverted her eyes as the topic turned unfavorable for her.</p>

      <p>“Yes, I’ll prepare some right away.”</p>

      <p>“Hey, Tulip.”</p>

      <p>“K-Kiriha, these snacks are delicious. What do you call them?”</p>

      <p>“They’re called rice crackers.”</p>

      <p>“I see. Th-They have quite a mysterious texture.”</p>

      <p>Theia pretended like she couldn’t hear Koutarou and began eating the tea snacks Kiriha had prepared.</p>

      <p>“What are you, a kid?”</p>

      <p>“There was no other way. They were a necessary sacrifice for the greater good.”</p>

      <p>Seeing that Koutarou was dumbfounded, Theia desperately made excuses as she gnawed on a rice cracker.</p>

      <p>“Admit it. You just thought it was a pain to go looking for Yurika.”</p>

      <p>“Yes... No, wait, that’s wrong! That’s not what I was thinking at all!”</p>

      <p>“Waaah! You’re terrible!”</p>

      <p>“Don’t make it worse, Sanae...”</p>

      <p>“Why? What does it matter?”</p>

      <p>Sanae smiled as she caused even more trouble for Koutarou.</p>

      <p>“More importantly, why don’t you have some snacks too, Koutarou? If you don’t eat, I don’t get to taste the rice crackers either!”</p>

      <p>Sanae, still hanging on to Koutarou’s back, reached out for the tea table, grabbed a snack, and pushed it against Koutarou’s lips.</p>

      <p>“...Okay, okay, I get it.”</p>

      <p>Koutarou reluctantly opened his mouth as Sanae threw the snack in.</p>

      <p>“You sure do get along, Satomi-sama, Sanae-sama.”</p>

      <p>Ruth, coming back in from the kitchen with tea in hand, smiled as she looked at Sanae clinging on to Koutarou.</p>

      <p>“We don’t.”</p>

      <p>Koutarou looked offended. Lately, Sanae had practically been toying with him, so that was his natural response.</p>

      <p>“Is that so?”</p>

      <p>“Now, now, we all know you’re actually happy!” Sanae hugged Koutarou’s back and poked his cheeks. “Jeez, you’re not being honest at all, Koutarou-chan. Your secrets are out now, you know!”</p>

      <p>Despite Koutarou’s unpleasant expression, Sanae kept smiling. She was convinced that Koutarou was just hiding his embarrassment.</p>

      <p>“Hmm? Heeheehee...”</p>

      <p>Sanae cheerfully clung to Koutarou’s neck. From time to time, she would gaze down at her own hand. In it she held a charm embroidered with the words “family safety.”</p>

      <p><em>This isn’t exploding, so I already know how you really feel. I won’t believe you no matter how many times you say you don’t like it!</em></p>

      <p>That was the reason for Sanae’s conviction.</p>

      <p>“If you don’t stop it, I’ll get angry.”</p>

      <p>“Mmmhmm! That kind of threat won’t work on me!”</p>

      <p>Sanae stubbornly pressed herself against Koutarou, believing that would make him happy too.</p>

      <p>“...It seems you won’t learn unless you get hurt, Sanae.”</p>

      <p>Having gotten a little angry, Koutarou reached into his pocket, pulled out a charm, and showed it to Sanae.</p>

      <p>“Do it if you can. Those things don’t work on me anymore.”</p>

      <p>Sanae didn’t flinch at his threat. The charm in her hand was proof that the charms didn’t affect her now. She no longer had a reason to fear them.</p>

      <p>“...Take that!”</p>

      <p>So even though Koutarou pressed the charm to her face, Sanae kept smiling.</p>

      <p>Boom!</p>

      <p>“Ack!”</p>

      <p>Sanae was blown back with that smile still on her face.</p>

      <p>“Heh heh, have you learned your lesson now, Sanae?”</p>

      <p>“H-How?! I thought the charms didn’t work anymore!”</p>

      <p>Sanae sprang to her feet with smoke rising from her face. She then compared the charm she was holding with the one Koutarou was holding.</p>

      <p>“Justice always wins! Let this be a learning experience for you, Sanae!”</p>

      <p>She was holding the “family safety” charm in her hand while Koutarou was holding the “evil spirits begone” charm in his.</p>

      <p>“I-It couldn’t be...!”</p>

      <p>Seeing that, a theory popped into Sanae’s head.</p>

      <p><em>Koutarou has accepted me into the room, but he still thinks of me as an evil spirit? That’s why “family safety” won’t explode but “evil spirits begone” will?!</em></p>

      <p>She was sure she’d solved the mystery.</p>

      <p>“Aaaaarrghhh! Why are you always like that?!”</p>

      <p>“Whoa!”</p>

      <p>Sanae pounced on Koutarou.</p>

      <p>“My, my...”</p>

      <p>“It’s nice that you get along so well.”</p>

      <p>As Ruth and Kiriha warmly watched over them, Sanae began choking Koutarou for the first time in ten days.</p>

      <p>“Now I’m angry! I’ll make sure you regret that!”</p>

      <p>“C-Curse you, S-Sanaeeeee!”</p>

      <p>And just like that, Koutarou and Sanae’s relationship reverted back to normal. Sometimes laughing together, sometimes getting angry at each other, and sometimes fighting it out. That was just how things were with the two of them.</p>

      <p>“D-Don’t think things will always go your way!”</p>

      <p>“Why can’t you just say ‘Sanae-chan, you sure are cute’?! You sourpuss!”</p>

      <p>Only one thing had really changed. That was the small charm hanging off of Sanae’s neck. The charm embroidered with the words “family safety” now belonged to Sanae.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert10">
    <img alt="insert10" class="insert" src="../Images/Insert10.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter61">
    <div class="main">
      <p>As the regular commotion ensued in room 106, something not so normal was happening on the bridge of the Blue Knight. An alarm suddenly began ringing out. The sound echoed through the vast room and the once quiet bridge was now filled with noise. It was first time during these few months that the emergency alarm had been activated.</p>

      <p>“Detecting a medium-sized distortion in space-time. There is a 95 percent chance of it being a warp exit point.”</p>

      <p>The monitors immediately powered up and displayed the pertinent information, such as the relative position of Earth, the moon, the sun, and the current location of the Blue Knight. It was accompanied by a number of graphs and tables.</p>

      <p>“Calculating the mass of the space distortion. Warning: There is a 90 percent chance of it being a royal class battleship. This is an emergency, my princess.”</p>

      <p>The Blue Knight concluded from these tables, graphs, and numbers that a new spaceship had entered the region.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert11">
    <img alt="insert11" class="insert" src="../Images/Insert11.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="afterword">
    <div class="main">
      <h1>Afterword</h1>

      <p>Long time no see, everybody. It’s Takehaya.</p>

      <p>This time, I’ve safely delivered volume 3. I wasn’t sure if the third volume would even get published in the first place, so getting past that first trial only made me happier. This is all thanks to the support of my readers. I’d like to borrow this page to thank you all very much.</p>

      <p>Speaking of support, I received a fan letter after the second volume hit the market. I mean an actual, physical letter, not an email. I get a few emails every time, but this was the first time I’ve gotten a letter. I was deeply impressed. By the way, it came from the South and that really made me realize that my novels are being sold nationwide.</p>

      <p>I have a little more room for the afterword this time, so I would like to talk about the book some.</p>

      <p>Koutarou and the others go to the beach during summer vacation. Naturally they cause a commotion, but this time it doesn’t just end there. The commotion develops in an unexpected way and shakes Koutarou and the others’ relationships.</p>

      <p>Sanae is put in the spotlight and we finally get to see the Blue Knight. The actual illustration of the Blue Knight will be revealed in the next volume, but Poco-san is working hard, so get your hopes up. But that might instead make it harder for Poco-san, haha.</p>

      <p>And I have two personal messages.</p>

      <p>The first is about the child my friend was having that I wrote about in the last afterword.</p>

      <p>It was safely delivered. Congratulations. But since I’m envious of his happiness, I won’t congratulate him in person. I’ll just write it here and be done with it. Share some of your happiness with me, you bastard. How are your wife and son, you bastard? I feel like I’ve lost, haha...</p>

      <p>As for the second message, I am thinking of moving at the end of the year. The place I’m living now is inconvenient, so I was thinking of moving somewhere more convenient for my writing. Because of that, my contact information will change, so please keep that in mind if you care. I’ll try to finish the move swiftly to make sure it doesn’t get in the way of my work.</p>

      <p>And finally, I would like to thank my friends who helped me out, everyone at the editorial department, and everyone who bought this novel. I will devote myself to be able to respond to everybody’s expectations of the future.</p>

      <p>I’ll leave at this for now. This will be the last volume of the year, but please continue supporting me next year.</p>

      <p class="signature">October, 2009</p>

      <p class="signature">Takehaya</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="notes">
    <div class="main">
      <h1>Notes</h1>

      <ol>
        <li id="note1">Happi - A Japanese straight-sleeved coat imprinted with a distinctive crest, usually worn for festivals. <a href="../Text/chapter1.xhtml#note1">→</a></li>

        <li id="note2">Chesto - A phrase martial artists will yell to psych themselves up before battle. Originally Kagoshima dialect for “Let’s go!” <a href="../Text/chapter1.xhtml#note2">→</a></li>
      </ol>
    </div>
  </section>
</body>
</html>