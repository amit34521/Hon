<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="default-style"/>
  <title>Invaders of the Rokujouma!? Volume 4</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css"/>
  <meta content="urn:uuid:b61613f1-06d3-4625-ac2f-24d6b2aca1f2" name="Adept.expected.resource"/>
</head>

<body>
  <section epub:type="bodymatter chapter" id="chapter1">
    <div class="main">
      <h1>Clan and Hercules</h1>

      <h2>Wednesday, September 2nd</h2>

      <p>The glowing stars in the pitch black darkness reflected in Theia’s eyes. Unlike on the surface of Earth, the stars didn’t twinkle at all in the vacuum of space. Their light was unwavering.</p>

      <p>“It’s Clan...” Theia muttered as she stared at the monitor on the bridge of the Blue Knight.</p>

      <p>Her voice was quiet, but there were so few people in the massive room that everyone heard it. Only four people stood on the bridge of the Blue Knight, serving as its crew: Theia and Ruth, along with Koutarou who was helping out as a part-time job, and Sanae who had tagged along with him.</p>

      <p>“Clan?”</p>

      <p>“What’s that?”</p>

      <p>Koutarou and Sanae had no idea what “Clan” was supposed to mean. As the two of them looked at each other in confusion, Ruth began explaining.</p>

      <p>“Clan is short for Clariossa Daora Forthorthe. Clariossa-sama is the second princess of the Holy Forthorthe Galactic Empire. Clan is just a nickname.”</p>

      <p>About ten days ago, the Blue Knight detected a nearby space-time rift. It was determined to be another Forthorthian spaceship, but after ten days of searching, the ship in question had not been located. That was why Theia now muttered Clan’s name.</p>

      <p>“But how do you know it’s her, Tulip? You don’t have any real clues, right?”</p>

      <p>“Not having any clues is a clue in and of itself. The Blue Knight is a royal class battleship. There aren’t that many vessels that could escape its detection.”</p>

      <p>Starting with Theia’s Blue Knight, it was common for royal class battleships to serve as flagships in times of war. Being led by their revered rulers raised the morale of the soldiers. And to that end, the royal class battleships excelled in detection capabilities and information warfare. It would be an embarrassment for such a flagship to be caught unawares. Consequently, there were only a handful of ships that were capable of escaping the scanners of a royal class battleship.</p>

      <p>“Out of all of them, I can only think of one who would mess with me.”</p>

      <p>“And that’s this... Um, Clan, was it?”</p>

      <p>“Yes. Clan-sama’s personal ship, the Hazy Moon, has a highly advanced stealth system.”</p>

      <p>“Koutarou, what’s stealth?”</p>

      <p>“Simply put, it’s like being really good at hide and seek.”</p>

      <p>Koutarou wasn’t all that knowledgeable about it himself, but he was able to explain it to Sanae from what he had seen and heard in movies.</p>

      <p>“Oh, kind of like me!”</p>

      <p>“Yes. But the stealth technology on Clan’s ship is something she developed herself, so it’s quite troublesome”</p>

      <p>“She developed it herself? Even though she’s a princess?”</p>

      <p>Koutarou’s eyes opened wide in surprise.</p>

      <p>“That’s correct, Satomi-sama. Clan-sama has profound knowledge of technology. Remodeling her own ship is like child’s play for her.”</p>

      <p>“Wow, there really are some amazing people in the world...”</p>

      <p>Koutarou was impressed. Knowing he didn’t have the brightest head on his shoulders, Koutarou couldn’t help respecting someone capable of remodeling ships and inventing new technology.</p>

      <p>“...She’s not amazing.”</p>

      <p>Koutarou’s words irritated Theia, who was now pouting.</p>

      <p>“All she can do is run and hide. It’s unbecoming of royalty!” Theia continued to criticize Clan with a frown on her face.</p>

      <p>“What are you so angry about, Tulip?”</p>

      <p>“I’m not angry!”</p>

      <p>“No, you’re definitely angry.”</p>

      <p>“I said I’m not angry! Hold your tongue, pleb!”</p>

      <p>Really, Theia was sour that Koutarou would compliment Clan, but he never complimented her. Of course, Koutarou had no way of knowing that.</p>

      <p>“You really are rude.”</p>

      <p>“What is with you?”</p>

      <p>As Koutarou looked at Theia with a confused look on his face, Ruth waved him over.</p>

      <p>“...Satomi-sama, Satomi-sama,” she called quietly.</p>

      <p>“...Yes?” Koutarou responded in kind.</p>

      <p>Ruth leaned in to whisper into his ear. She didn’t want Theia to hear.</p>

      <p>“Actually, Her Highness and Clan-sama do not get along at all.”</p>

      <p>“Ah, so that’s why...”</p>

      <p>“While Her Highness has always been very active, Clan-sama prefers to indulge herself in intellectual pursuits. The two of them have often clashed, so there is a very deep rift between them.”</p>

      <p>The Mastir family that Theia belonged to and the Schweiger family that Clan belonged to were known rivals. The Mastir family had a reputation for producing excellent emperors during critical times in the history of Forthorthe, but the Schweiger family had produced more emperors than any other royal family. They both took great pride in their support of the nation. And on top of their family backgrounds, Theia and Clan’s conflicting personalities only fueled the fire. The two of them were often in competition with one another.</p>

      <p>“So Clan is a fierce rival she can’t ignore...”</p>

      <p>“Even princesses can be sneaky, huh?”</p>

      <p>“In Her Highness’ case, that isn’t the only reason...”</p>

      <p>Ruth flashed a melancholy smile. Seeing that, Koutarou could faintly understand Ruth’s sentiment.</p>

      <p><em>She did say that she couldn’t afford to back down to anyone when it came to protecting her mom...</em></p>

      <p>Even though they were destined rivals, Theia still wanted to avoid pointless fighting. But at the same time, if she didn’t prove that she was a worthy heir to the throne, she would cause problems for the current empress, her mother. It was for her mother’s sake that Theia didn’t want to become a princess the army could exploit. Ruth had explained this to Koutarou before, so he had a good idea of what was going on.</p>

      <p>“What are you three whispering about?!”</p>

      <p>“Well...”</p>

      <p>Koutarou knew he couldn’t tell her that they were talking about her relationship with Clan, so he decided to try something else.</p>

      <p>“I’m a teenage boy, you know. I was wondering if this Clan girl was hot. But Ruth-san just won’t tell me.”</p>

      <p>“Huh?!”</p>

      <p>“S-Satomi-sama, wh-what are you...?!”</p>

      <p>Theia’s eyes opened wide in surprise and Ruth began panicking.</p>

      <p>“So how about it, Tulip? Is this Clan girl cuter than you? Can I unleash my teenage passions?!”</p>

      <p>Hearing Koutarou’s words, a vein became visible on Theia’s forehead.</p>

      <p>“C-Curse you, pleb! I’ll teach you a lesson!” Theia blew her top and ran towards him while shouting. “H-How dare you ask me something like that?! How dare you ask me if she’s cuter than me, the Mastir family’s golden flower?!”</p>

      <p>“But this Clan girl’s personality is the complete opposite of yours, right?”</p>

      <p>Despite Theia’s anger, Koutarou looked excited as they faced off. His eyes were shining with curiosity and desire befitting a teenage boy, which only caused Theia to shout at him even louder.</p>

      <p>“Y-You disloyal, traitor—”</p>

      <p>However, Koutarou’s next words cooled all of Theia’s anger.</p>

      <p>“You’d be cute if you just shut up, so I have high hopes for someone with the inverse of your personality!”</p>

      <p>“...”</p>

      <p><em>I’d be c-cute if I shut up...?</em></p>

      <p>Even though it was something he’d blurted out in the middle of their argument, Theia couldn’t simply ignore a comment like that.</p>

      <p>“...”</p>

      <p><em>The pleb thinks... I’m... cute?</em></p>

      <p>Theia’s heart began pounding and her face began to turn red. Short sighs escaped her lips instead of words. And before she knew it, her enraged expression had soften into one of expectation as she looked up at Koutarou.</p>

      <p>“So what is it, Tulip? Is this Clan girl cute or what?!</p>

      <p>“Ah...”</p>

      <p>But it was only temporary. It didn’t take long for her hopes to be overcome with rage again. Realizing Koutarou was only interested in Clan, the initial joy she’d felt at being called cute was only oil on the fire of her fury.</p>

      <p>“I-I’ll kill you! Stand still, pleb! I’ll tear you to pieces right here, right now!”</p>

      <p>“Waaaaah! Here she comes!”</p>

      <p>Koutarou turned tail and fled from Theia’s sudden onslaught.</p>

      <p>“Curse you! How dare you play with my heart repeatedly?! Stop running, pleb! I’m going to rip you limb from limb!”</p>

      <p>“Who would stop after you say that?! Idiot!”</p>

      <p>Koutarou was running away at full speed, but Theia was in hot pursuit.</p>

      <p>“Hahh...”</p>

      <p>“Your Highness! Please stop, Your Highness!”</p>

      <p>They sped past dumbfounded Sanae and panicked Ruth in a flash. The large bridge gave them plenty of room to chase each other around.</p>

      <p>“You’re pretty stupid too, Koutarou. If you keep doing things like that, Theia really will kill you someday...”</p>

      <p>Sanae knew that Koutarou only changed the topic like he did because he was being considerate of Theia, so despite her amazement at the situation, she didn’t really see a way around it.</p>

      <p>“The two of them are very stubborn about the strangest of things...”</p>

      <p>Ruth felt similarly to Sanae, but she also understood what Theia was thinking and feeling. So despite the current chaos, she was pleased.</p>

      <p>“...Thank you for everything, Satomi-sama...”</p>

      <p>Ruth watched over Koutarou and Theia running around with a gentle expression. <br/><br/></p>

      <p>The two of them didn’t stop for several minutes. After sprinting at full speed all that time, Koutarou and Theia both collapsed on the floor in exhaustion.</p>

      <p>“I-I’ll let you off... f-for today...”</p>

      <p>“Th-There’s no need... to let me off...”</p>

      <p>“You pleb... giving me n-needless backtalk...”</p>

      <p>“Yeah... you too...”</p>

      <p>The two of them were lying next to each other, but they were so spent that the only thing they could do now was argue. However, seeing the two of them quarrel like this gave off the impression that they got along very well.</p>

      <p>“Your Highness... Satomi-sama...”</p>

      <p>This made Ruth very happy, and she revealed a very bright smile.</p>

      <p>“You two really are stupid. There was no need to go that far. Jeez...”</p>

      <p>Sanae, on the other hand, was still astonished and let out a big sigh.</p>

      <p>“Sanae, there are some times a man can’t afford to lose.”</p>

      <p>“That’s right. Defeat is not an option for a princess.”</p>

      <p>“Can you two decide if you get along or not?”</p>

      <p>Sanae sighed again as Koutarou and Theia responded to her in synch. Taking over for Sanae, Ruth spoke up as well.</p>

      <p>“By the way, Your Highness, this will make the tenth day of searching. I think it is about time to give up on looking.”</p>

      <p>“Y-Yes. That’s true...”</p>

      <p>Theia caught her breath, nodded, and picked herself up off the floor.</p>

      <p>“Is it okay to just give up like that? You still don’t know what this Clan girl came here to do, right?” Sanae asked, a little worried.</p>

      <p>“No, I know what she’s after. She must be trying to interfere with my trial. Her own trial requires her to wait for the solar eclipse, so she probably came here to get in my way while she waits.”</p>

      <p>Unlike Theia’s invasion, Clan’s trial required her to complete three ceremonies as a test of faith in order to earn the right to the throne. She had already completed two of them, but the third required a solar eclipse. There was still some time yet before a solar eclipse would occur on their home planet, so Clan was forced to wait. Theia figured she must be using her downtime to run interference.</p>

      <p>“Then won’t she use her own battleship to attack you, Tulip?”</p>

      <p>Koutarou got up and looked at Theia with a serious expression. He knew he shouldn’t play around with this topic. Theia understood the gravity of the situation as well and decided to put things behind them for now and address Koutarou’s concerns.</p>

      <p>“That’s what I thought, but ten days have already passed. If she was planning on attacking, she would have done so by now.”</p>

      <p>“On top of that, Satomi-sama, an engagement between two battleships would leave evidence behind. Taking that into account, there is little risk of a direct attack from Clan.”</p>

      <p>“So she hasn’t attacked yet because she’s not stupid...”</p>

      <p>“That’s right. She must be hiding somewhere and coming up with some other kind of plan.”</p>

      <p>Clan hadn’t attacked with her battleship because she was worried about the evidence it would leave behind. If she were a fearless idiot, she would have attacked anyway. But such was not the case with Clan. Instead, by not attacking, her ship’s advanced stealth systems made her impossible to find. That was why Theia decided to abandon the search.</p>

      <p>“And I can think of another reason why Clan hasn’t used her Hazy Moon to attack.”</p>

      <p>“What’s that?”</p>

      <p>“The Hazy Moon is a weak battleship.”</p>

      <p>“You mean even weaker than the Blue Knight?”</p>

      <p>Having a humanoid shape, Theia’s Blue Knight was weaker than comparable ships due to its complicated structure.</p>

      <p>“I have a problem with the way you put that, but yes, that’s correct.”</p>

      <p>“Satomi-sama, that’s because of Clan-sama’s talents. Since she has modified her ship with equipment she developed herself, the ship’s basic capabilities are inferior to anyone else’s.”</p>

      <p>Since there was a limit to the power of a ship, every piece of equipment Clan added consequently reduced the ship’s basic functionality. Just like the Blue Knight’s abilities were compromised due to its intricate shape, the Hazy Moon’s abilities were compromised due to the large amount of extra equipment.“So that means unless this Clan girl really is a complete idiot, she won’t fight head-on?”</p>

      <p>“Clan is devious, so she doesn’t like fighting directly. There is little to worry about in that regard.”</p>

      <p>“Devious, huh?”</p>

      <p>“What’s with that face, pleb?”</p>

      <p>Koutarou looked a little disappointed.</p>

      <p>“Well, I heard she was the opposite of you, so I was expecting her to be more ladylike.”</p>

      <p>“Wha?!”</p>

      <p>“And now I hear she’s devious. I’m even more disappointed because I got my hopes up and everything...”</p>

      <p>“Y-You! You’re still on about that?! You disloyal pleb!”</p>

      <p>“Whoa!”</p>

      <p>Despite having calmed down for a moment, Theia’s rage was instantly reignited. She reached out for Koutarou with both hands and began choking him the same way Sanae usually did.</p>

      <p>“C-Curse you... Damn Tulip!”</p>

      <p>“I’ll definitely teach you who your master is today!”</p>

      <p>Koutarou and Theia began fighting again, but Ruth was still tenderly watching over them. She only saw it as the two of them playing around.</p>

      <p>“Because of that, the part-time job we had you helping out with ends today, Satomi-sama.”</p>

      <p>“Oh? It’s over already?”</p>

      <p>Koutarou looked towards Ruth as he restrained Theia. Ruth nodded in return.</p>

      <p>“Yes. I don’t believe there is any reason to keep you on standby anymore, Satomi-sama.”</p>

      <p>“Oh, yeah, that reminds me. Why did I need to be here in the first place?”</p>

      <p>Koutarou had been on board the Blue Knight together with Theia and Ruth for a few days now. It was part of the job they’d requested his help with, but he still didn’t know exactly why he was there.</p>

      <p>“L-Let go, pleb! And Ruth! Don’t just stand there smiling! Do something!”</p>

      <p>As Theia struggled to get free, Koutarou admonished her like he would a little sister.</p>

      <p>“Just wait a minute, Tulip. I’m having a serious discussion with Ruth-san right now. I’ll play with you later.”</p>

      <p>“I don’t want to play!”</p>

      <p>“Ah, in that case, play with me later instead, Koutarou,” Sanae chimed in.</p>

      <p>“Sure.”</p>

      <p>“C-Curse you! You’re looking down on me again! Play with meeeee!”</p>

      <p>Ruth began explaining with a smile as the commotion continued. She was starting to get used to this kind of thing.</p>

      <p>“Since the Blue Knight is shaped like a human, it would be better if someone with combat skills like Satomi-sama controlled it.”</p>

      <p>“Hmm... Well Koutarou is quick to pick a fight, after all.”</p>

      <p>“Yes. And I’m bad at it, despite being an officer of the royal guard.”</p>

      <p>“I see. So that’s why...”</p>

      <p>The answer satisfied Koutarou.</p>

      <p>“Are you fine with your payment being tatami points instead of money?”</p>

      <p>“Yeah, I don’t mind.”</p>

      <p>“You should mind me instead!”</p>

      <p>And Theia was as full of energy today as ever.<br/><br/></p>

      <p>“Heh heh, I got five centimeters of tatami for doing nothing.”</p>

      <p>“...You don’t get it, do you, pleb?”</p>

      <p>Koutarou and Theia sat in front of the TV. They were both mashing buttons on the controllers in their hands. It had become a daily occurrence for the two of them to play video games against each other.</p>

      <p>“What do you mean?”</p>

      <p>“You see, that’s— Whoa, that was close. Hold back a little, will you? This is my first time playing this game.”</p>

      <p>“Okay, okay... So what is it that I don’t get?”</p>

      <p>“In the end, I don’t just need this room. I need your loyalty too.”</p>

      <p>“So what about it— Whoa!”</p>

      <p>“Ha! Don’t let your guard down... The point is that losing points to you won’t hurt me in the slightest. There’s no meaning in gathering all the points if I can’t get you to swear loyalty to me. But once you do swear loyalty to me, you will pledge all your points to me anyway.”</p>

      <p>In order for Theia to earn the right to the throne, she didn’t just need to invade room 106. She also needed to get Koutarou, the current resident, to pledge himself to her. Ultimately there was no meaning in gaining control of the room without Koutarou’s fealty, but getting Koutarou to swear his loyalty would mean getting all of his points. So even if Koutarou and Theia exchanged points, having less points than he did didn’t mean anything to her for the time being.</p>

      <p>“So what?! I was just working for free?!”</p>

      <p>The character Koutarou was playing exploded on screen. Slightly shaken, Koutarou surrendered a point to Theia for his loss.</p>

      <p>“That’s not true.”</p>

      <p>Having won, Theia smiled radiantly as she lightly shook the controller.</p>

      <p>“It’s perfectly normal for a lord to give territory to a vassal after doing a good job. There’s no need to think of it as free labor. We’re master and servant after all. You should be proud of your service instead of ruing it. Take pride in your work, my subject, Satomi Koutarou.”</p>

      <p>“As if I would! That’s even worse than working for free!”</p>

      <p>“Very good. You’ve at least finally realized that you are my subject.”</p>

      <p>“I-I still don’t remember agreeing to that!”</p>

      <p>Theia was in a great mood, but Koutarou was panicking. He was completely caught up in her antics.</p>

      <p>“There is no need to be embarrassed. Fact is fact. I am pleased with your contributions and that you accepted my reward.”</p>

      <p>“Well, I’m not!”</p>

      <p>Koutarou was in shock after having done exactly what Theia wanted him to.</p>

      <p>“I want you to strive to do even more in the future for my sake and for the royal families. I’m counting on you, Satomi Koutarou.”</p>

      <p>“No waaay!” Koutarou shouted at the top of his lungs.</p>

      <p>“...Satomi-san, Satomi-san.”</p>

      <p>Someone tugged on Koutarou’s sleeve.</p>

      <p>“Oh?”</p>

      <p>“Satomi-san, there’s something I want to talk with you about.”</p>

      <p>Yurika was the one who had been pulling on Koutarou’s shirt. She was holding on to his sleeve with an apologetic expression. Seeing that, Koutarou calmed down a little bit.</p>

      <p>“What is it, Yurika? We’re finally bonding as master and servant,” Theia asked.</p>

      <p>“We’re not bonding at all!”</p>

      <p>Theia, who was in high spirits, frowned a little at Yurika’s interruption. Koutarou, on the other hand, was quite relieved. He turned to see what she needed.</p>

      <p>“So what is it, Yurika?”</p>

      <p>“Um... Actually, an acquaintance asked me to keep their pet while they were moving, so I said yes... Is that okay?”</p>

      <p>“Pet?”</p>

      <p>Normally Koutarou would yell at her and tell her that she absolutely couldn’t, but he felt like he owed her for disrupting Theia’s antics and decided to hear her out.</p>

      <p>“What kind of pet? If it’s a small reptile or something that won’t bark, Landlord-san would probably overlook it.”</p>

      <p>“There’s no need to worry about noise. It’s a quiet one.”</p>

      <p>“Pet?! What kind is it, Yurika?! Show me, show me! Is it cute?!”</p>

      <p>Hearing the word “pet,” Sanae’s eyes lit up. She hopped off Koutarou’s back and approached Yurika.</p>

      <p>“What... What is going on?”</p>

      <p>Theia tossed her controller aside and scooted up to the tea table.</p>

      <p>“Yurika, start with showing us.”</p>

      <p>“Um, actually... it’s this...”</p>

      <p>Yurika apprehensively took out a plastic box. It was a roughly thirty-centimeter long, transparent enclosure with a green lid on top.</p>

      <p>“Th-This is...?!”</p>

      <p>“Yurika, you...!”</p>

      <p>Having been comparatively amenable to the idea up until now, Koutarou and Sanae were both at a loss for words when they saw what was moving inside of the case.</p>

      <p>“Auuuuugh! I-I’m so sorry!”</p>

      <p>And almost as if she had been expecting that reaction, Yurika already had tears in her eyes.</p>

      <p>“What is this brave, manly looking creature?”</p>

      <p>Only the alien, Theia, curiously stared into the case.</p>

      <p>“Y-Yurika, you idiot! Do you have any idea what it means to bring this thing here?!”</p>

      <p>“I understand! I really do understand! But all of the cosclub members took a pet home to take care of! I couldn’t be the only one who said no!”</p>

      <p>As it turned out, the acquaintance Yurika had mentioned was the cosclub vice president. Since her father had finally bought a house, she had entrusted her pets to her fellow club members while her family was moving from their apartment to their new home.</p>

      <p>“Y-Yurika, why’d you pick this?! There must have been something else you could have chosen, right?!”</p>

      <p>“I wanted the goldfish or hamster too! But when I got there after my remedial lessons, this was the only one left!”</p>

      <p>The crying Yurika made excuses as Koutarou and Sanae yelled at her. Meanwhile, Theia, who didn’t understand the situation, looked on at the three of them in confusion.</p>

      <p>“Is it that dangerous of a creature? It does have a somewhat metallic body and powerful looking horns, but...”</p>

      <p>However, neither Koutarou nor Sanae even heard Theia. They were too busy scolding Yurika.</p>

      <p>“Actually, Theia-dono...”</p>

      <p>Instead, it was Kiriha who answered her. She was nearby pouring herself some tea, and after putting down her freshly filled cup on the tea table, she calmly began to explain.</p>

      <p>“This creature is a beetle.”</p>

      <p>Hearing that name, Theia immediately lost her cool.<br/><br/></p>

      <p>The Hercules beetle, scientifically named Dynastes Hercules, is known as the largest of all rhinoceros beetles. Its two large horns are capable of ripping into enemies, and its sturdy shell can defend its body from all kinds of dangers. This invincible king of insects was and still is the subject of much admiration from all young Japanese boys.</p>

      <p>“This is a beetle?! I-It can’t be! Yurika! Do you know what you’ve done by bringing this here?!”</p>

      <p>“I know! I know exactly what I’ve done! But I didn’t have a choice! The other cosclub members left me the easiest pet to care for, so I couldn’t just refuse!”</p>

      <p>Compared to tropical fish that required specific temperatures and the likes, taking care of a beetle in the summer was easy. The other cosclub members looking out for Yurika had backfired in a big way.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert1">
    <img alt="insert1" class="insert" src="../Images/Insert1.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter11">
    <div class="main">
      <p>“What do we do, pleb?! Something terrible will happen if Ruth sees this beetle!”</p>

      <p>While it was the king of insects in the natural world, it was the weakest creature in room 106. Especially compared to Ruthkania Nye Pardomshiha’s hatred for beetles. Merely being in room 106 put its existence in danger.</p>

      <p>“H-How should I know?! Ruth-san finally seems like she’s gotten over it, but this would just push her over the edge again!”</p>

      <p>“If only Hercules-chan was just a myth...”</p>

      <p>“No way! This is the vice president’s little brother’s pet!”</p>

      <p>“Y-Yurika! Throw it out right now! Let it go! It’s what’s best for everyone—for us <em>and</em> that insect!”</p>

      <p>“I-I can’t! Do you know how sad her little brother would be if I did that?!”</p>

      <p>“If someone’s feelings is all you’re worried about, then throw it away right now! Lives are at stake here!”</p>

      <p>“No! I won’t, no matter what you say!”</p>

      <p>Chaos descended upon room 106.</p>

      <p>Ever since their hot spring vacation, Ruth was traumatized by beetles after what Koutarou had done to her in his sleep. While dreaming about catching beetles, he rolled over onto Ruth and embraced her. As a result, Ruth took out her frustrations on Koutarou and now held strong hostility towards beetles.</p>

      <p>Fortunately, she had forgiven Koutarou before the end of summer vacation, but seeing Hercules would only open old wounds. Of course, nobody wanted that. They were all aware of how frightening Ruth could be when she was angry, and they were convinced that Ruth meeting Hercules would bring nothing but misfortune.</p>

      <p>“A beetle, huh? I used to capture them and play with them when I was young as well... Heehee...”</p>

      <p>Only Kiriha, who was sipping on her tea, remained composed.</p>

      <p>“Calm down, Tulip! Nothing will come from panicking!”</p>

      <p>“Th-Then what do we do, pleb?! It will be impossible to hide it from scrupulous Ruth for several days!”</p>

      <p>“What is Ruth doing right now?”</p>

      <p>“She’s still on the Blue Knight! She’s analyzing today’s data on the bridge! She’ll be back any—”</p>

      <p>“Satomi-san, the wall!”</p>

      <p>Just at that moment, the far wall began glowing. It was a sign that a gate between room 106 and the Blue Knight was about to open. Once that light stabilized, Ruth would appear in the room.</p>

      <p>“N-Not good! Tulip!”</p>

      <p>Koutarou frantically stood up and reached his hand out towards Theia.</p>

      <p>“Here! Take it!”</p>

      <p>Theia picked up Hercules’s plastic cage and swiftly passed it over to Koutarou.</p>

      <p>“Koutarou!”</p>

      <p>And Sanae quickly opened the wardrobe’s sliding door.</p>

      <p>“P-Please make it in time!”</p>

      <p>Koutarou rushed towards the open wardrobe and shoved the case inside. He then covered it with Yurika’s blanket and shut the sliding door with all of his might.</p>

      <p>“I am back!”</p>

      <p>Ruth entered the room just as Koutarou slammed the wardrobe closed.</p>

      <p>“Oh? What’s wrong, everybody?”</p>

      <p>Ruth was greeted with a strange sight upon returning to room 106. She first noticed Yurika just staring at her blankly. Then she saw Theia, half-sitting by the tea table with her arms stretched out in front of her. Finally, Koutarou and Sanae were standing facing the wardrobe. The only normal sight was Kiriha sipping her tea.</p>

      <p>“N-No, it’s nothing! Nothing at all, Ruth! Right, pleb?!”</p>

      <p>“Yeah! Nothing wrong here, Ruth-san!”</p>

      <p>Theia and Koutarou let out a dry laugh.</p>

      <p>“That’s right! Nothing’s wrong! There definitely aren’t any bee—”</p>

      <p>“Ugh, idiot!”</p>

      <p>Sanae brought her fist down on Yurika, who was about to say the taboo word. Fortunately, she swallowed the rest of her words on impact.</p>

      <p>“Ouch, that hurt!”</p>

      <p>“It’s nothing, really!”</p>

      <p>“I-Is that so?”</p>

      <p>“Everything is fine, Ruth.”</p>

      <p>“I see...”</p>

      <p>Despite feeling like something was strange, Ruth nodded at Kiriha’s reassurance. She didn’t see a need to pursue the matter.</p>

      <p>“In that case, I’ll start preparing for dinner.”</p>

      <p>“P-Please do...”</p>

      <p>Ruth put on her normal smile and headed for the kitchen. After she walked off, Koutarou and the others sunk to the floor and began whispering to make sure Ruth didn’t overhear them.</p>

      <p>“Th-That was close...”</p>

      <p>“I thought my heart was going to stop...”</p>

      <p>“I-I’m sorry everyone... This is all my...”</p>

      <p>“I hit you too hard. Sorry, Yurika.”</p>

      <p>“No, you saved me, Sanae-chan...”</p>

      <p>Everyone was smiling. They’d successfully managed to avoid the immediate crisis through teamwork. The bond between them all grew a little stronger.</p>

      <p>“Everybody, what would you prefer in the miso soup? Tofu or— Huh? What are you all doing?”</p>

      <p>Ruth suddenly returned to ask them about what ingredients to put into the miso soup. In that instant, Koutarou and the others all froze.</p>

      <p>“Everybody...?”</p>

      <p>Seeing everyone visibly stiffen up, Ruth once again looked at them in confusion.</p>

      <p>“Ruth, I would prefer tofu.”</p>

      <p>“Ah, yes. Is everyone else okay with that too?”</p>

      <p>However, thanks to Kiriha, Ruth’s attention shifted back to the soup ingredients.</p>

      <p>“Y-Yes! That’s fine!”</p>

      <p>“That sounds good, Ruth-san.”</p>

      <p>“I’m fine with anything as long as it tastes good.”</p>

      <p>“I’m fine with anything as long as it’s edible.”</p>

      <p>“Very well. I’ll prepare it right away, so please wait a moment.”</p>

      <p>Ruth returned to the kitchen with a smile as everyone agreed.</p>

      <p>“Phew...”</p>

      <p>“Jeez...”</p>

      <p>“Please give me a break...”</p>

      <p>“I’m sorry. I’m so sorry...”</p>

      <p>“Mm...This tea is delicious. I’ll make sure to purchase more.”</p>

      <p>Thanks to everyone working together, the secret of the beetle was safe for now.<br/><br/></p>

      <p>The spinner on top of the tea table let out loud clicking and whirring sounds as it spun around. The spinner was part of a famous board game called Life Reversal. It was a simple game where the player moved their piece forward as many paces as the spinner indicated, and then the player would have to adhere to what was written on the space where they landed. Despite its simplicity, the game was quite deep, and it was still a bestseller.</p>

      <p>When the spinner stopped, Sanae peeked at the number as she floated over it.</p>

      <p>“It’s a four, Koutarou.”</p>

      <p>“All right. One, two, three, and four...”</p>

      <p>Listening to Sanae, Koutarou moved his piece four spaces forward and read what was written on the new space.</p>

      <p>“Let’s see... ‘You meet your childhood friend and suddenly marry. The other players give you 500 points each as a wedding present.’”</p>

      <p>“You’re a salaryman and you married your childhood friend. It’s turning out to be a plain life for you.”</p>

      <p>“Shut it and leave me be!”</p>

      <p>Koutarou responded to Sanae’s retort while receiving 500 points from the six other players. Sanae, Theia, Kiriha, Yurika, Ruth, and Shizuka were all playing, so altogether Koutarou collected 3,000 points. This was one of the games they were using to determine ownership of the room, but just watching was boring so Ruth and Shizuka were playing as well.</p>

      <p>“Here’s your bride.”</p>

      <p>“Don’t just throw it.”</p>

      <p>Koutarou put the pink stick Theia threw at him into his piece. The game pieces were shaped like houses, and as the player’s family increased, they added tiny markers to their piece accordingly.</p>

      <p>“Living together with just his bride in a small home might unexpectedly fit Satomi-kun.”</p>

      <p>“What do you mean by ‘unexpectedly,’ Landlord-san?”</p>

      <p>“Well, right now you’re with several girls in a small room, right? It’s the complete opposite.”</p>

      <p>“Well, that’s true. I do kind of want a quiet life...”</p>

      <p>“Sanae-chan, Satomi-san is kind of like an old man, don’t you think?”</p>

      <p>“Yeah. He sure acts like it sometimes.”</p>

      <p>Yurika and Sanae stared at Koutarou with playful smiles.</p>

      <p>“Shut it and leave me be!”</p>

      <p>Koutarou yelled at the two of them and then turned to Kiriha, who was sitting next to him.</p>

      <p>“All right, Kiriha-san. It’s your turn.”</p>

      <p>“Very well. Then I shall walk the path of a plain life as well.”</p>

      <p>Kiriha nodded at Koutarou and reached out for the spinner.</p>

      <p>“Kiriha-sama is an entrepreneur, which I don’t believe counts as plain.”</p>

      <p>As Kiriha watched the spinner whirl, Ruth sitting next to her smiled wryly. In the game, Kiriha had started a company and was well on her way to becoming a skilled businesswoman. Ruth couldn’t help being amused at calling such a life “plain.” And seeing Ruth’s reaction, Theia too smirked and shrugged.</p>

      <p>“Any life could be called plain when you’re the leader of an underground empire planning on invading the surface.”</p>

      <p>“That’s true, but...”</p>

      <p>“Compared to that, I am a highly popular idol. What an eventful life. Even in a game, my charm shows itself.”</p>

      <p>“...Any occupation would be eventful with you, Tulip.”</p>

      <p>“I think so too.”</p>

      <p>“What is that supposed to mean?”</p>

      <p>“If you were a salaryman, the company would go under. If you were a doctor, the hospital would lose its reputation. If you were a teacher, there would be violent outbursts... It’s eventful any way you look at it.”</p>

      <p>“Yeah.”</p>

      <p>“C-Curse you, pleb! Why are you always bullying me?! Why can’t you just obediently say ‘Yes, Your Highness’?!”</p>

      <p>“Yes, Your Highness.”</p>

      <p>“Stop messing around!”</p>

      <p>As Theia was about to stand up, Yurika sitting next to her began mumbling.</p>

      <p>“I wish I had your worries... I’m just a job hopper. Because of the wedding present to Satomi-san, I only have 2,000 points left. With this I’m not sure if I’ll survive winter or not...”</p>

      <p>“Y-Your life is quite eventful as well, in a way.”</p>

      <p>Yurika’s pitiful confession calmed Theia down and she took her seat again.</p>

      <p>“Nijino-san, how did it end up like this when you started out rich?”</p>

      <p>“You really have no luck... Your life is spiraling out of control.”</p>

      <p>At the start of the game, Yurika was a millionaire’s daughter. However, before she knew it, her parents’ business had failed, she was dishonorably fired from her job, and her remaining savings were lost in the stock market.</p>

      <p>“How’s that any different from her real life?”</p>

      <p>“Y-Your Highness! That’s too much...”</p>

      <p>“I-It’s true... There’s not much difference. My life is nothing special, both in the game and in real life...”</p>

      <p>Yurika was currently forcibly freeloading in room 106. Even after getting a Hercules beetle for a roommate, her life was a bit too lonely.</p>

      <p>“...Five, six, seven, eight. Let’s see... ‘Your yen stock soars. You get 20 points for every share you have.’ I have 100,000 shares so... Koutarou, can you give me 2 million from the bank?”</p>

      <p>“Here you go.”</p>

      <p>“Just the profits from that stock alone are worth a thousand times Yurika’s entire fortune...”</p>

      <p>“The rich sure do find ways to get richer...”</p>

      <p>Sanae and Shizuka laughed. But Yurika couldn’t find it in herself to do the same. Instead, tears streamed down her face.</p>

      <p>“This is just unfair! Are you saying magical girls have no need for money?! Waaah haa haa...”</p>

      <p>“...”</p>

      <p>After staring at Yurika for a while, Kiriha grabbed a large bundle of bills and presented it to Koutarou.</p>

      <p>“Kiriha-san, what’s this?”</p>

      <p>“I’m investing in the company’s welfare program, so put it into the bank, please. Everyone needs to help out to get through the recession.”</p>

      <p>“That kind of kindness hurts even more...”</p>

      <p>It was now Yurika’s turn, but she had completely forgotten about the game. Tears just continued to roll down her cheeks.<br/><br/></p>

      <p>“Sanae, please bring me the lid to the box.”</p>

      <p>“Here.”</p>

      <p>Sanae obediently listened to Koutarou and handed over the lid for the Life Reversal game.</p>

      <p>“Thanks.”</p>

      <p>With the top in hand, he confirmed the contents of the box once more before putting it on. Everything was in its right place, and this concluded the cleanup after the game. They had used it to fight for tatami points instead of their usual card games, but the battle was over for now.</p>

      <p>Excluding Yurika who became a job hopper early on, they’d kept playing until the endgame. Theia became a popular idol who mass-produced hit singles, Kiriha’s investments into welfare paid off and her company prospered, and Sanae became a baseball player who scored constant home runs. The close race between the three continued until the very end.</p>

      <p>However, Ruth discovered an oil field and made a miraculous comeback, finishing in first place. Second place was Sanae, third was Kiriha, and fourth was Theia. Koutarou finished in fifth just after her. He had changed jobs to become an adventurer in hopes of making a comeback, but he didn’t even manage to quite catch up to Theia. Shizuka lived a plain, happy life as an ordinary housewife and came in sixth place. Coming in last was Yurika, who had made one last attempt to catch up, but it had failed so miserable that the only thing she had left was a mountain of debt.</p>

      <p>“Excluding myself and Shizuka-sama who don’t take part in the tatami point games, the results are as follows: Sanae-sama, Kiriha-sama, Her Highness, Satomi-sama, and finally Yurika-sama.”</p>

      <p>After confirming everyone’s rankings, Ruth updated the scoreboard hanging on the wall. Since there were five of them, the score of whoever finished in the middle didn’t change. After that, five points would be moved from whoever came in fourth to whoever came in second, and ten points from last to first. The updated scoreboard revealed an upset in the control for room 106. Theia, who had held first place for a few days now, was finally passed by Kiriha.</p>

      <p>“So Kiriha-san is retaking first...”</p>

      <p>“Hmph, I really can’t underestimate you, Kiriha! To think the invincible Forthorthe would fall behind!”</p>

      <p>“You and I are evenly-matched, Theia-dono. No matter who is better, we both have our highs and lows.”</p>

      <p>“...In reality I would love to have you as my vassal.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chart">
    <img alt="chart" class="insert" src="../Images/Chart.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter12">
    <div class="main">
      <p>After the two of them was Koutarou in third. The points he had gotten during the sports festival had been a big help, allowing him to keep his current ranking. Sanae was in fourth for the same reason, but because her enthusiasm was less consistent, she had slightly fewer points than Koutarou.</p>

      <p>“Satomi-kun, you’re starting to fall farther and farther behind.”</p>

      <p>“I’ll be making my comeback starting now, Landlord-san.”</p>

      <p>“Give it your best, Satomi-sama.”</p>

      <p>“Yeah! Unlike Yurika, me and Koutarou are still in a position to aim for the top!”</p>

      <p>Yurika was in dead last. After losing over and over again, the points she earned during the sports festival were long gone, and she was behind the others by a considerable margin. While she once had plenty of points, she now had less than half what Sanae in fourth place did. At her current rate, Yurika would lose all of her points before the winter holidays.</p>

      <p>“S-Sanae-chan, by ‘unlike Yurika,’ are you saying I no longer have any chance?!”</p>

      <p>“Yeah. If I were you, I would probably give up soon. You don’t even have half of our points.”</p>

      <p>“That’s not true! I can still pull it together!”</p>

      <p>“There’s no way. It’s just not possible.”</p>

      <p>“There’s no need to be so cruel, Sanae.”</p>

      <p>“Kiriha...?”</p>

      <p>“Yurika is working hard in her own way. And she has her own reasons for not backing down.”</p>

      <p>“Kiriha-san! I knew you were a good person the first time I met you!”</p>

      <p>Getting some unexpected support, tears of gratitude trickled down Yurika’s face as she took Kiriha’s hand.</p>

      <p>“Despite being just a hobbyist, unlike us, it’s amazing that she’s even able to compete with us.”</p>

      <p>“K-Kiriha-san?!”</p>

      <p>“That’s true. Sorry, Yurika.”</p>

      <p>“E-Even you too, Kiriha-san?! Auuugh... This is just too cruel! It’s too much!”</p>

      <p>“There’s no need to cry, Yurika. Even if those enemies you spoke of do appear, we’ll be fine. We can handle them before anything dangerous happens. So just fight with us to your heart’s content and then leave.”</p>

      <p>“Nooooo! None of you understand at all!”</p>

      <p>“Yurika, you’re being overdramatic...”</p>

      <p>“Waaaaah! Listen to this, Hercules-chan! Everyone’s bullying me!”</p>

      <p>Yurika’s tears of joy had changed into tears of despair. Sadly, not a single person in the room correctly understood the reason behind them.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter2">
    <div class="main">
      <h1>Matsudaira Kenji Is Troubled</h1>

      <h2>Thursday, September 10th</h2>

      <p>Matsudaira Kenji was troubled. And it wasn’t because of his less intelligent best friend. He was worried about the cultural festival that was coming up the month after next.</p>

      <p>“All right, I guess I’ll put one up around here...”</p>

      <p>The drama club he was in traditionally put on a play during the festival. They were planning to do the same this year, but they hadn’t yet decided on what to perform. That was because the stage director couldn’t find a manuscript she liked.</p>

      <p>“If only the president would compromise a little...”</p>

      <p>The club president was the one serving as the stage director, but she wasn’t satisfied with student-level work and had ended up rejecting all of the manuscripts the club had.</p>

      <p>And so now the drama club was putting up posters requesting manuscript submissions. Being on the bottom of the totem pole, Kenji was using his lunch break to put up said posters all around the school.</p>

      <p>“Is there even anyone capable of writing a manuscript for a play in this school? Even if there was... would they even apply?”</p>

      <p>As Kenji absentmindedly put up the next poster, a familiar face passed by.</p>

      <p>“Oh? What are you up to, Mackenzie?”</p>

      <p>“Kou?”</p>

      <p>The passerby was none other than Koutarou, who was holding bread and juice in his hands. He was on his way back after buying his lunch at the cafeteria.</p>

      <p>“This is what I’m doing,” Kenji said, pointing to the poster.</p>

      <p>“What’s this? ‘Manuscripts wanted’?”</p>

      <p>“Yeah. The drama club can’t decide on what play they want to do, so they’re looking for submissions from outside of the club.”</p>

      <p>“I see... But you know, Mackenzie, if you’re in trouble, you can always ask me for help. There’s no need to hold back.”</p>

      <p>“What good would asking you do? Do you even know anyone capable of writing something proper?”</p>

      <p>Kenji had excluded Koutarou from the list of possibilities right away. Yet despite his skepticism, Koutarou responded confidently.</p>

      <p>“You’re gonna regret that, Mackenzie-kun. Last year might have been one thing, but I’m a new man now. Do you think you can get away with saying something like that to me?”</p>

      <p>“I do. Obviously. Where, exactly, is there anything worthy of being called an author in you?”</p>

      <p>In the end, Kenji still didn’t trust Koutarou.</p>

      <p>“Mackenzie, you fool. This year, I have a powerful ally by the name of Sakuraba Harumi.”</p>

      <p>“Th-That’s right! I forgot about Sakuraba-senpai!”</p>

      <p>The moment Sakuraba Harumi’s name was mentioned, Kenji’s expression changed. He knew that Harumi loved reading books. If he asked her, he might be able to get a worthy manuscript. Although he’d been making fun of Koutarou, he had a good point.</p>

      <p>“I’ll ask her if she has any ideas”</p>

      <p>“Please do! Right now we’d do just about anything to get our hands on a good manuscript.”</p>

      <p>“Still... You’re rude, you know?”</p>

      <p>Kenji’s quick change of attitude left Koutarou astounded.</p>

      <p>“Don’t sweat the small stuff. It’s your own fault for acting the way you do. Anyway, I’m counting on you, Kou!”</p>

      <p>Seeing Kenji laughing his complaints away, anger began to well up inside of him. That anger gradually took form, and Koutarou eventually made a decision.</p>

      <p>“Yeah, yeah, I got it.”</p>

      <p><em>Mackenzie, you bastard. I’ll show you...</em></p>

      <p>Koutarou nodded at Kenji while scheming on the inside.<br/><br/></p>

      <p>Later that day, Koutarou spoke with the residents in room 106 after they had finished eating dinner.</p>

      <p>“Listen, everyone. May I, Satomi Koutarou, have a moment of your time?”</p>

      <p>Hearing Koutarou speak so formally shocked everyone.</p>

      <p>“Wh-What’s wrong, pleb?! Did you eat something strange?! Should we take you to a medical bed on board the Blue Knight?”</p>

      <p>“Your Highness, that’s going to far!”</p>

      <p>“Satomi-san, you can’t eat things you pick up off the ground!”</p>

      <p>“Karama, Korama, bring some stomach medicine.”</p>

      <p>“Understood! Ho!”</p>

      <p>“Koutarou, just wait one moment! Ho!”</p>

      <p>The only one who didn’t seem to find it strange was Sanae.</p>

      <p>“It’s nothing like that.”</p>

      <p>Sanae sighed and began explaining in Koutarou’s stead. Since she was always with him, she had heard the entire exchange between Koutarou and Kenji.</p>

      <p>“You see, Koutarou’s friend, Glasses-kun... Mackenzie, was it? Well, the drama club he’s in is looking for manuscripts.”</p>

      <p>“Ah, so that’s why Satomi-san is being so dramatic.”</p>

      <p>“That’s right, everybody! I, Satomi Koutarou, would like to help my best friend, Matsudaira Kenji, in his time of need!” Koutarou continued in a theatrical tone of voice, complete with excessive gesturing.</p>

      <p>“...So, Sanae, what is this horrible actor really trying to say?”</p>

      <p>Kiriha could tell at a glance that Koutarou was actually after something else. In response, Sanae exaggeratedly drooped her shoulders and smiled wryly.</p>

      <p>“He’s frustrated because he got told that he doesn’t have a talented bone in his body and that no one was expecting anything from him.”</p>

      <p>“I see. Now I understand.” Kiriha nodded and took a sip of her tea.</p>

      <p>“So everybody! Please lend your strength to me, Satomi Koutarou! Let us save the drama club from their crisis together!”</p>

      <p>“He really is an idiot...”</p>

      <p>“Satomi-san sure is stubborn...”</p>

      <p>“So what do you want from us, Koutarou?”</p>

      <p>“I would like you to write manuscripts with me! If we were to write one manuscript apiece, the possibilities of one us being chosen would be much higher than if I just wrote one on my own!” Koutarou appealed to them in a mighty voice and slammed a poster he got from Kenji onto the table.</p>

      <p>“Submissions are limited to one per person...”</p>

      <p>“And the deadline is the end of the month...”</p>

      <p>“Isn’t finishing a manuscript that would fill an hour of stage time by the end of the month a little too much?”</p>

      <p>“That’s impossible for meee!”</p>

      <p>“Why? Isn’t fantasy your specialty?”</p>

      <p>“That’s not my specialty! Besides, there’s not enough time!”</p>

      <p>However, unlike what Koutarou had hoped, nobody was showing any interest. The short deadline and the unfamiliar medium were major obstacles. But Koutarou didn’t expect the residents of room 106 to accept so easily. He had prepared a suitable reward.</p>

      <p>“Of course, I understand the situation everybody is in quite well, which is why I won’t ask you to help for nothing. First off, if you decide to participate, you will receive five of my tatami points. And that’s not all! If your manuscript is chosen, I will reward you with an additional 20 points.”</p>

      <p>“I’ll do it! I’ll participate!”</p>

      <p>The moment Koutarou mentioned points, Yurika jumped at his offer. Just participating would give her five points, and winning would give her an additional 20. It might even turn out to be the chance she was waiting for to turn things around.</p>

      <p>“In the worst case, you would lose 20 points if all four of us participate, and an additional 20 if one of us actually wins. You could lose a total of 40 points just like that. That’s a big gamble, Koutarou.”</p>

      <p>Kiriha lowered her tea cup and smiled. It was difficult to tell whether she was smiling because she was astounded or if she was happy.</p>

      <p>“I only need to come out victorious, and my expenses would be limited to 20 points.”</p>

      <p>“You really are an idiot... Is it really worth using that many points for something like this?”</p>

      <p>Compared to Kiriha, Theia’s emotions were easy to read. She let out a big sigh, obviously amazed. However, not even she realized the worry hiding beneath her amazement.</p>

      <p>“Princess Theiamillis, there are just times a man cannot back down.”</p>

      <p>“Y-Yeah...”</p>

      <p>Theia froze for a moment with surprise at Koutarou saying her name.</p>

      <p><em>P-Princess Theiamillis...</em></p>

      <p>It was the first time Theia had heard Koutarou call her Theiamillis. She didn’t dislike it, but something felt off. Her feelings were complicated.</p>

      <p>“Koutarou wants to show up Glasses-kun using us instead of relying on Sakuraba Harumi, who is the only one Glasses-kun is expecting anything from.”</p>

      <p>But Theia’s expression changed the moment Harumi’s name was mentioned.</p>

      <p>“Sakuraba Harumi? I see. So if we don’t do it...”</p>

      <p>Her hesitant expression became one of determination.</p>

      <p>“So please, everybody, lend your powers to me, Satomi Koutarou! With your help, we will be able to deal a fatal blow to our enemy, Mackenzie!”</p>

      <p>In the end, Koutarou sounded less like an actor and more like a politician. And of course, Yurika was the first one to respond to his call.</p>

      <p>“I’ll do it! Please let me help! I’ll get 25 points if I’m chosen! A whole 25! Even if I don’t make it, I’ll still get five! I’d do anything to get back some points!”</p>

      <p>In Yurika’s case, the points were the most important part. If all went well, she could get 25 points, and even if things didn’t go her way, she would still get five. That alone was enough to encourage her. She was planning on earning some points this way to stage her comeback.</p>

      <p>“V-Very well, pleb. I owe you for working for me for the past few days. It is only natural that I would lend you a hand. I don’t want you to think that Forthorthe is quick to forget its debts.”</p>

      <p>Theia quickly agreed as well, although her reasons were different from Yurika’s. Points didn’t really matter to her. Just like when Koutarou had worked aboard the Blue Knight, Koutarou and Theia trading points didn’t have any real meaning to her. She was more concerned about her vassal running to Harumi for help.</p>

      <p><em>The pleb is my vassal. As if I would let Sakuraba Harumi just do with him as she pleases!</em></p>

      <p>However, what was motivating Theia right now wasn’t really the bond between a master and servant. Swimming at the beach in the bathing suit Koutarou had bought her, running against each other at the sports festival, and playing together in room 106... Theia hadn’t really noticed it yet, but these happy, eventful days with Koutarou were what she truly desired.</p>

      <p>“Hmm, so Yurika and Theia are doing it?”</p>

      <p>“Are you going to participate too, Sanae?”</p>

      <p>“Yeah. Me and Koutarou have a truce, so me winning would be the best outcome. Besides, I feel like helping Koutarou out a little.”</p>

      <p>Sanae nodded and smiled brightly as she fiddled with the charm hanging off her neck. Unlike Theia, she was more honest with her feelings. She would follow her heart and help Koutarou. For as long as the charm swayed around her neck, she had reason to do so.</p>

      <p>“In that case, I can’t be the only one not to participate.”</p>

      <p>Finally, Kiriha was the last one to agree.</p>

      <p>“Kiriha, you’re in now too?”</p>

      <p>“Indeed.”</p>

      <p>She smiled as she put her cup down on the tea table.</p>

      <p>“If I don’t participate, Theia-dono would automatically retake first place. I’m not kind enough to just let that happen.”</p>

      <p>Kiriha was the current leader in terms of tatami points, but only by a narrow three point margin. Declining to participate would mean handing the lead to Theia.</p>

      <p>“A wise decision.”</p>

      <p>“However, to be honest, participating sounds like fun.”</p>

      <p>“That might be true in your case.”</p>

      <p>Like always, Kiriha looked like she was enjoying the situation.</p>

      <p>“I am grateful for your assistance. I am greatly pleased that you have given me, Satomi Koutarou, a chance.”</p>

      <p>Koutarou was in high spirits as well after all the invaders had decided to contribute. Normally he could be very stern with them, but right now he gave them all a friendly smile.</p>

      <p>“Heh heh heh. Just you wait, Mackenzie. I’ll show you a thing or two!”</p>

      <p>It wasn’t until he muttered Kenji’s name that Koutarou’s face twisted into a harsh expression.</p>

      <p>“By chance, this has become an autumn literature competition.”</p>

      <p>Ruth was watching over them all as the situation developed. Since she disliked fighting, she was very satisfied that everyone was working towards a common goal.</p>

      <p>“Heehee... Do your best, everyone.”</p>

      <p>Ruth smiled as she poured tea into the empty cups on the table.<br/><br/></p>

      <p>As the clock reached 9 PM, all of the invaders had retreated to their respective lairs. Normally they would remain in room 106 a little longer, but from now on they would be using this time in the evening to write their manuscripts. And so the only ones now left in room 106 were Koutarou, Sanae, and Yurika, but Yurika had jumped into the wardrobe. Only Koutarou and Sanae were left in the inner room.</p>

      <p>“What are you going to write, Koutarou?”</p>

      <p>“I’m thinking about it. It will probably be something about a hot-blooded club and its members.”</p>

      <p>Koutarou had been crossing his arms for a while now, thinking of what to write, but he still didn’t have a solid ideas. Because of that, the paper in front of him was still pure white.</p>

      <p>“Hmm, that’s just like you.”</p>

      <p>“So what are you going to write about, Sanae?” Koutarou asked as a change of pace.</p>

      <p>“Me? I was thinking of writing about my mama and papa eloping.”</p>

      <p>Sanae already had a good handle on what she was going to write. So unlike Koutarou, she looked quite pleased.</p>

      <p>“Hmm, so it’s nonfiction... Wait, your parents eloped?!”</p>

      <p>“Yeah.” Sanae casually brought up something rather surprising. “Apparently mama was the only daughter of a really rich family, and before she became a political tool to them, she ran away with my papa who was her childhood friend.”</p>

      <p>“I see. So that’s why you’re so obsessed with this room.”</p>

      <p>“Yeah. Mama and papa would worry if I wasn’t here when they got back.”</p>

      <p>“I see...”</p>

      <p>This was the first time Sanae had explained her situation to Koutarou. And the only reason she felt like sharing it with him now was the charm dangling from her neck.</p>

      <p><em>So that’s what’s going on with Sanae... In that case, maybe I should let her stay for as long as she likes...</em></p>

      <p>Koutarou accepted Sanae’s her story as the truth, even though just half a year ago he wouldn’t even hear her out. But his reason for that was the same as Sanae’s. Just like Harumi had said that during summer vacation, their feelings had grown over all this time.</p>

      <p>“Koutarou, if you still don’t know what to write, can I start writing first?”</p>

      <p>“Hmm? What do you mean?”</p>

      <p>Sanae was a ghost, but she could use her psychic powers to lift a pen. Koutarou didn’t understand why she was asking him for permission.</p>

      <p>“I can move the pen like this, but...”</p>

      <p>Sanae floated the pen into the air and began rotating it in front of Koutarou.</p>

      <p>“That’s your Poltergeist power, right?”</p>

      <p>“Yeah. But it’s really hard to make complicated motions like this. My writing would look terrible and it would exhaust me.”</p>

      <p>Sanae stopped spinning the pen for a moment and then began writing letters in the air. The movements were very awkward. Like she said, her power was too clunky. Granted, it was primarily intended as the ability to cause a ruckus.</p>

      <p>“So instead, I thought it would be easier if I possessed you.”</p>

      <p>“Ah, I get it. I’ve heard of this before. It’s ghostwriting, right?”</p>

      <p>“Yeah. I think it was something like that.”</p>

      <p>Sanae was talking about a spiritual form of automatic writing known as psychography, not ghostwriting. But as Koutarou and Sanae were the only ones in the inner room at the moment, no one was around to correct them.</p>

      <p>“Well, if that’s all, then fine.”</p>

      <p>“Really?! Then, then... After I’m done, I’ll help with your stiff shoulders!”</p>

      <p>“Cool. Then it’s a deal, Sanae.”</p>

      <p>“Yes!”</p>

      <p>Sanae nodded and circled around to Koutarou’s back with a cheerful look.</p>

      <p>“What? So it’s just like always?”</p>

      <p>“Yeah! Hyah!”</p>

      <p>Sanae jumped onto Koutarou’s back with a cute cheer.</p>

      <p>“Oh?”</p>

      <p>“Heeheehee...”</p>

      <p>Sanae put her arms around Koutarou’s neck and rested her chin on Koutarou’s right shoulder. As if doing that was fun, her expression was even brighter than before.</p>

      <p>“Wh-Whoa, my right hand is moving on its own!”</p>

      <p>“This is the power of ghostwriting!”</p>

      <p>Koutarou wasn’t doing anything, but his arm began moving. His right arm picked up the pen lying on the tea table and began scribbling away on the paper in front of him.</p>

      <p>“...It feels kind of weird having your right arm move on its own.”</p>

      <p>“Heh. It’s cool, isn’t it?”</p>

      <p>Letters filled the paper as puzzled Koutarou watched.</p>

      <p>“It’s cool, but the letters look better than when I write them, so it’s a bit unnerving.”</p>

      <p>“Then why don’t you try remembering how your hand is moving now?”</p>

      <p>“I guess I will.”</p>

      <p>As Koutarou nodded, his right hand stopped moving.</p>

      <p>“...”</p>

      <p>Sanae was just staring at Koutarou’s profile without doing anything.</p>

      <p><em>Huh?</em></p>

      <p>Confused, Koutarou looked at the paper in front of him. The last thing written on the page was a short sentence.</p>

      <p>“Yeah, yeah. Jeez...”</p>

      <p>After reading it, Koutarou let out a small sigh and put his left hand on top of Sanae’s head.</p>

      <p>“Good girl,” he said as she began patting her head.</p>

      <p>“Heeheehee!”</p>

      <p>The sentence she’d written was simple: “Compliment me more, you jerk!” Although since Sanae was possessing Koutarou, he couldn’t help wondering if he was patting her, or if she was doing it herself.</p>

      <p>“Koutarou, you could be more gentle too.”</p>

      <p>However, at that point, Koutarou didn’t care either way. He now understood that the affection she showed him was the same kind of love she used to show her dear parents.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert2">
    <img alt="insert2" class="insert" src="../Images/Insert2.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter21">
    <div class="main">
      <p>That was when the sliding door behind Koutarou opened.</p>

      <p>“S-Satomi-san!”</p>

      <p>As Koutarou and Sanae turned around, they saw Yurika jumping out from the wardrobe. For some reason, she had tears in her eyes and the plastic bug cage in her hands.</p>

      <p>“Waaaaaaaah! Please help me, Satomi-san!”</p>

      <p>As soon as she hit the floor, Yurika broke down crying.</p>

      <p>“Wh-What happened, Yurika?”</p>

      <p>“What are you crying for?”</p>

      <p>After looking at each other and asking Yurika what was wrong, she crawled closer to Koutarou and Sanae while embracing the plastic case.</p>

      <p>“A-Actually, I was trying to sleep but Hercules-chan won’t stop making noises!”</p>

      <p>“Who cares about that?!”</p>

      <p>“You really do worry about the dumbest of things...”</p>

      <p>Realizing this wasn’t something serious after all, Koutarou was angry and Sanae was dumbfounded. Despite that, Yurika continued to plead with them.</p>

      <p>“I-It’s not dumb! If Hercules-chan moves even a little bit, it sounds just like the time a cockroach got into the wardrobe!”</p>

      <p>Although Koutarou and Sanae didn’t care, it was important to Yurika. Since she had been through an ordeal with a cockroach once, she couldn’t get a wink of sleep because of the small sounds Hercules was making.</p>

      <p>“I’m too scared to sleep with Hercules-chan!”</p>

      <p>“Then just put that box outside the wardrobe.”</p>

      <p>“But if Ruth-san found it, that would be the end!”</p>

      <p>“I think it would be crushed by Koutarou in his sleep before then.”</p>

      <p>“Sanae, I’m letting you use me for your ghostwriting, so can’t you be at least a little nicer to me?”</p>

      <p>“Hmm... Yeah, then I’m going with Ruth finding it too.”</p>

      <p>“Both of those are no good!”</p>

      <p>Yurika crawled closer to Koutarou and Sanae, still clutching the case. As she approached with tears still streaming down her face, both of them reflexively winced.</p>

      <p>“Please do something, Satomi-san!”</p>

      <p>“Just what am I supposed to do?”</p>

      <p>“You could just give up and set Hercules-chan free.”</p>

      <p>“I can’t do that! The vice president’s little brother would cry!”</p>

      <p>Perhaps sensing danger from the excited Yurika, the Hercules beetle shook its large horns. And as its horns collided with the wood chips inside of the box, it made a sound similar to that of a cockroach.</p>

      <p>“Please help me, Satomi-san!”</p>

      <p>“I get it, I get it. So just calm down, okay?”</p>

      <p>“Really? You won’t bully me like normal?”</p>

      <p>“I won’t.”</p>

      <p>Koutarou was sincere about helping Yurika. He didn’t want to do things haphazardly and risk Ruth losing her temper. He knew how scary Ruth could be ever since the beetle incident over summer vacation.</p>

      <p>“But what are you going to do, Koutarou? If Yurika and Hercules-chan can’t be together, there’s nowhere else to put them.”</p>

      <p>“Hmm...”</p>

      <p>“Please! I’m counting on you, Satomi-san!”</p>

      <p>“Stop your crying and help think of something, Yurika!”</p>

      <p>“Waaaaah! Satomi-san got angry! It’s all over! Not Hercules-chan! How could you be so cruel, Satomi-san?!”</p>

      <p>Yurika looked at the plastic cage she’d set on top of the tea table with tears still spilling off her cheeks.</p>

      <p>“This is too awful! Too cruel! I thought you were a bad person from before, but I never imagined you were this bad!”</p>

      <p>“Calm down, Yurika!”</p>

      <p>“It’s all oveeeeer! Hercules-chaaan!”</p>

      <p>“Aaaaarghhh, jeez!”</p>

      <p>“N-Now that it’s come down to this, I have no choice but to leave this room! N-No, but I still have to protect this room! Awww, Hercules-chan, what should I do?!”</p>

      <p>Yurika was still crying and whining, but that was when an idea popped into Koutarou’s head.</p>

      <p>“Leave the room...? That’s it! Hey, Yurika!”</p>

      <p>“Hhhngh... Wh-What is it? How else are you planning on bullying me?”</p>

      <p>As Koutarou shook Yurika’s shoulders, she turned around to look at him. Tears were still flooding out of her eyes, leaving wet streaks down her face.</p>

      <p>“You’re way off. I got a good idea for how to protect Hercules.”</p>

      <p>“Huh?! What is it?!”</p>

      <p>But as soon as she heard Koutarou say he had a good idea, her tears instantly stopped and her expression transformed into a smile.</p>

      <p>“Satomi-san, I knew you were a good person after all!”</p>

      <p>“I’ve been thinking, but that selfishness and emotional turning on a dime... Yurika, you’re really something else.”</p>

      <p>Despite Sanae’s amazement, Yurika looked up at Koutarou with eyes filled with expectation. If she weren’t still holding on to the beetle box, she probably would have shaken his hands.</p>

      <p><em>Yurika... Are you really okay living your life like this?</em></p>

      <p>Koutarou and Sanae had similar opinions on the matter, but they held them in for now as they continued talking.</p>

      <p>“For starters, we put Hercules in the wardrobe.”</p>

      <p>“Okay, and then what do I do?”</p>

      <p>“Then you leave without any hesitation.”</p>

      <p>“Noooooooo! Tell me you’re kidding!”</p>

      <p>“Don’t make it any worse, Sanae.”</p>

      <p>“B-But, Koutarou...”</p>

      <p>“I know how you feel though.”</p>

      <p>Koutarou also wanted to throw out Yurika, but she was Harumi’s best friend. He couldn’t just turn her out. But he also had another reason for not kicking her out...</p>

      <p>“Just bite your tongue for now, Sanae.”</p>

      <p>“O-Okay...”</p>

      <p>Sanae held back when Koutarou asked her to because she didn’t want to trouble him.</p>

      <p>“Good girl, Sanae.”</p>

      <p>“Hee...”</p>

      <p>Koutarou smiled and patted her head.</p>

      <p><em>Koutarou is...</em></p>

      <p>Koutarou then turned away from Sanae, but she remained motionless. She simply put her hand on top of her recently patted head and looked at his back.</p>

      <p><em>Heeheehee, he said I was a good girl!</em></p>

      <p>Sanae was filled with warm, pleasant emotions. They were very similar to what she felt when Koutarou had come to her rescue after she had been captured by ghost hunters. That’s why she used her other hand to hold her charm and just kept smiling at Koutarou.</p>

      <p>“Yurika, just put Hercules in the wardrobe. You can live in the room for a while.”</p>

      <p>“...Huh?”</p>

      <p>Hearing those words, Yurika froze and timidly looked up at Koutarou.</p>

      <p>“W-Would that really be all right?!”</p>

      <p>“Yeah. Even though you only have half the points of anyone else, you still have the right to some of this room.”</p>

      <p>“Th-Thank youuu!”</p>

      <p>Yurika bowed and thanked Koutarou before looking back at the plastic case.</p>

      <p>“Isn’t that great, Hercules-chan?! Neither of us has to leave!”</p>

      <p>She then cheerfully talked to Hercules in his habitat. Koutarou had one more reason for not throwing out Yurika. And that was this Hercules beetle.</p>

      <p>“Now you can safely return to the vice president’s little brother when the time comes, Hercules-chan!”</p>

      <p><em>The magical girl of love and courage, huh? Just like she proved when Sanae was caught, it’s not like she doesn’t have any love or courage...</em></p>

      <p>For Hercules’s sake, and for the sake of the young boy who was its original owner, Koutarou felt like helping Yurika because she hadn’t given up and abandoned the poor creature.<br/><br/></p>

      <p>Aside from the typical, small commotions, the days passed without incident until the end of the month. Koutarou, Sanae, and Yurika in room 106, Theia on board the Blue Knight, and Kiriha in her secret underground lair all finished up their respective manuscripts. The completed manuscripts were then handed over to the drama club via Kenji. And since Sanae was a ghost, Shizuka put her name down on Sanae’s manuscript instead.</p>

      <p>At the time, it seemed like that the odds of being chosen were the highest in favor of Yurika, who looked like she was good with fantasy, and Kiriha, who could do anything. However, the manuscript that was chosen was written by the hand of someone nobody would have expected.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter3">
    <div class="main">
      <h1>The Silver Princess</h1>

      <h2>Thursday, October 1st</h2>

      <p>“Damn it, you bastards!”</p>

      <p>“Waaah! Bastards!”</p>

      <p>Koutarou and Yurika were sulking after the results had been announced.</p>

      <p>“As if your crappy drama club could understand my and Yurika’s masterpieces!”</p>

      <p>“Satomi-san is right! As if you could understand!”</p>

      <p>Their manuscripts had been eliminated during the first selection phase. Dissatisfied by that result, Koutarou and Yurika were in the middle of causing a stink.</p>

      <p>“Eat up, Yurika! I’ll give you my treasured noodle cups!”</p>

      <p>“Is that really okay?! These are the good kind that cost 300 yen each!”</p>

      <p>“It’s fine! You’re the only one who could understand my masterpiece! Let’s comfort ourselves with food together!”</p>

      <p>“Satomi-saaaaan!”</p>

      <p>And so the two of them began slurping their cup noodles in the corner of the classroom. Only then did things finally quiet down.</p>

      <p>“Both Kou and Nijino-san are being really irritating...”</p>

      <p>Looking at the two of them, Kenji let out a heavy sigh. To him, it was obvious that Koutarou would fail.</p>

      <p>“Don’t say that, Mackenzie-kun. The two of them really tried their best.”</p>

      <p>Koutarou’s manuscript was about hot-blooded knitting battles. The very niche genre and overly unique setting made the judges give up on it after reaching just the second page. Yurika’s manuscript was about a magical girl that nobody understood and whose hard work went unnoticed. Although the parts about the main character’s growth were considered good, the unbelievable setup of a story about a magical girl ultimately backfired and the judges rejected the manuscript only a few pages in.</p>

      <p>“Th-The salty flavor stings...”</p>

      <p>“Don’t cry, Yurika! This loss will only make us stronger!”</p>

      <p>“Yes! Satomi-saaan!”</p>

      <p>“Yurikaaa!”</p>

      <p>After spending several days writing together and then having their dreams crushed together, the two of them now shared a strong bond.</p>

      <p>“It’s getting stuffy in here...”</p>

      <p>“Ahahahaha!”</p>

      <p>“You were close though, Kasagi-san. I heard you were almost chosen.”</p>

      <p>“R-Really? Thank you, Mackenzie-kun.”</p>

      <p>Shizuka had submitted Sanae’s manuscript in her name. Sanae was literally Shizuka’s ghostwriter. Sanae’s age was a perceived disadvantage, but surprisingly, her manuscript was well received and passed the first selection phase. Unfortunately, however, it didn’t pass the final selection, but the judges had hopes for it in the future.</p>

      <p>“Good for you, Sanae-sama.”</p>

      <p>“Heeheehee!”</p>

      <p>Thanks to that, Sanae was in high spirits. Ruth whispering to her only brightened her expression even more.</p>

      <p>“That said, both Kasagi-san and I lost. I’m quite mortified.”</p>

      <p>Next to Shizuka was Kiriha, slumping her shoulders. At school she wore the mask of an honor student, and her gentle smile was as enchanting as always.</p>

      <p>“Don’t worry, Kurano-san!”</p>

      <p>“Yeah! I heard Harukaze University’s drama club picked up your manuscript!”</p>

      <p>Kiriha’s nearby classmates tried to cheer her up. She was popular with her peers, both boys and girls alike.</p>

      <p>“But a loss is a loss. Maybe I should join Satomi-san for some instant noodles. Heehee...”</p>

      <p>Kiriha’s manuscript was remarkably well done. She had a written a comedy that satirized the inquisitorial system, and all of the drama club had praised it highly. However, when it came to using it for a cultural festival, its sophisticated perfection was actually a drawback. The caliber of production that her manuscript required was far higher than what the high school drama club had at their disposal.</p>

      <p>Because of that, Kiriha’s manuscript didn’t make it past the final selection. However, the Kisshouharukaze University drama club caught wind of the manuscript and was planning to use it for their next performance. They were already even working on preparations for it.</p>

      <p>“It’s because you all misjudged the market,” Theia boasted triumphantly. “A car doesn’t just need to be fast. You wouldn’t want a race car or a runaway car to go shopping.”</p>

      <p>“Shut up, Tulip!”</p>

      <p>Feeling ridiculed by Theia calling his work a runaway car, Koutarou lashed out at her while still holding his noodle cup.</p>

      <p>“I don’t care, but I won’t let you insult Yurika like that!”</p>

      <p>“Waaaaah! Thank you very much, Satomi-saaan! Your words are enough for me to stay strong!”</p>

      <p>“What are you talking about, Yurika? You’re my only ally!”</p>

      <p>“Ohohoho! You losers can you sit there and lick your wounds together!”</p>

      <p>“Don’t get too full of yourself, you pathetic princess!”</p>

      <p>“Hohohoho!”</p>

      <p>Even though Koutarou yelled and called her pathetic, Theia showed no sign of caring. Normally she would yell back, but today her confident smile was impervious. That’s because she knew Koutarou was only railing at her out of humiliation. The chosen manuscript was a fantastic love story, penned by none other than Theia herself.<br/><br/></p>

      <p>The title of her manuscript was “The Silver Princess and the Blue Knight.” It was set in the Middle Ages in Europe, but it was based on a conflict between the royal houses of Forthorthe. The heroine, the Silver Princess, was at the center of said conflict. And it was the hero, the Blue Knight, that came to her aid. It was an entertaining tale of romance and battles.</p>

      <p>The story was a famous legend in the Forthorthian Empire, but Theia presented it with her own spin on it. Really, Theia’s admiration of the Blue Knight directly influenced her writing, but it was just the way the stage director liked it. The other club members were also impressed with it. And on top of that, the skills it would require to pull off were just at the level of the high school drama club. It was everything they were looking for, and so Theia’s play was chosen to be performed at the upcoming cultural festival.<br/><br/></p>

      <p id="note1">Now that they’d secured a manuscript, the drama club started with their preparations for the production. The Kisshouharukaze cultural festival was always held for two days, concluding on the third of November, concurrent with Culture Day<sup><a epub:type="noteref" href="../Text/chapter1.xhtml#note1">1</a></sup>. And since it was now the start of October, they only had roughly a month to prepare. With such a short deadline, the drama club was now running at full steam.</p>

      <p>“Thanks for coming, Theiamillis-san. It’s a big help!”</p>

      <p>“Don’t worry. I’m really invested in this story. I’ll help with whatever I can to make the play a success.”</p>

      <p>“My, you’re already getting into your role. Wonderful! Let’s work together to do this, Theiamillis-san!”</p>

      <p>“You can leave everything to me! Let’s make this the best play ever!”</p>

      <p>The stage director and Theia were in perfect synch after working on preparations together since yesterday.</p>

      <p>“Mackenzie, the stage prop guys don’t have enough materials. They want someone to go buy more.”</p>

      <p>“Sure. What do they need?”</p>

      <p>“This is the list.”</p>

      <p>“Hmm, if this is all, the girls should be able to do it. Kasagi-san, do you have a moment?”</p>

      <p>“What is it, Mackenzie-kun?”</p>

      <p>“Could you and Ruth-san go buy the things on this list?”</p>

      <p>“I don’t mind. Is it urgent?”</p>

      <p>“Is it, Kou?”</p>

      <p>“Yeah, it’s pretty urgent, Landlord-san.”</p>

      <p>“Okay. Then we’ll go right away.”</p>

      <p>Theia wasn’t the only one helping out. Koutarou, Shizuka, and the girls of room 106 were all lending a hand. They had decided to pitch in because the drama club was pressed for both time and manpower.</p>

      <p>“Ruth-san! Could you help me shop?”</p>

      <p>“Yes, of course! I’ll be right with you, Shizuka-sama! Can I leave this to you then, Kiriha-sama?”</p>

      <p>“Not a problem. I’ll take care of it. I have the haniwas with me as well, so I’ll be fine here on my own.”</p>

      <p>“Thank you. We’ll return as quickly as possible. Well then, I’ll be off.”</p>

      <p>“See you later. Karama, Korama, you can stay in stealth, so give me a hand.”</p>

      <p>“Ho! Got it, ho!”</p>

      <p>“It’s our time to shine, ho!”</p>

      <p>The drama club wasn’t very big to begin with. It was a modest club with only eight members. Because of that, more than just Koutarou and the others had volunteered. Several other smaller clubs like the broadcast club and wind instruments club had gathered to help. And thanks to that, the drama club’s club room was abuzz with energy. The casting had gone well so far, and part of the cast was already practicing their lines and picking out their costumes.</p>

      <p>“Kurano-san!”</p>

      <p>“Yes, what is it?”</p>

      <p>“Could you help me convince this girl? Her role was decided a while ago, but she keeps complaining...”</p>

      <p>“Yurika?”</p>

      <p>“I don’t want to be a horse’s rear! At least give me a role where you can see my face! At least make me a tree, please!”</p>

      <p>But despite everything going smoothly so far, the casting process had come to a grinding halt. They still couldn’t decide who should play the heroine, the Silver Princess. They had gone through several auditions, but hadn’t found anyone who fit the role.</p>

      <p>“This is a problem, Theiamillis-san.”</p>

      <p>“Yes. The Silver Princess is the star of the play after all.”</p>

      <p>Watching the other preparations for the play progressing, the club president serving as stage director and Theia sighed at the same time. Their biggest problem right now was that they had no one to play the leading lady.</p>

      <p>“It looks like we might have to go with Kurano-san.”</p>

      <p>“Kiriha, huh? If we have to do that, we might as well go with Ruth. She’s much closer to what I had in mind.”</p>

      <p>“Ruth-san is perfect for the accompanying female knight, so I don’t really want to change her role.”</p>

      <p>“Hmm, I see. That is a problem.”</p>

      <p>And as Theia and the club president were scratching their heads, Koutarou walked by carrying a piece of a stage prop.</p>

      <p>“What’s up with that worried face, Tulip?”</p>

      <p>“Ple— No, I mean Koutarou.”</p>

      <p>Theia corrected herself. She couldn’t address Koutarou the way she normally did in front of the drama club members.</p>

      <p>“I mentioned it before, right? The problem with the heroine.”</p>

      <p>“Oh yeah, you said it still wasn’t decided... What’s wrong with the drama club girls? They’re pretty cute.”</p>

      <p>Koutarou glanced around the club room. The girls he could see were all beautiful and looked like they would make good princesses. But Theia shook her head.</p>

      <p>“It’s not that simple. There’s a specific image for the role.”</p>

      <p>According to Theia’s manuscript, the Silver Princess had a delicate, ephemeral aura about her. She was squaring off against a villain who was planning on taking over the country, so that image was important. Unfortunately, no one from the drama club or from room 106 gave off that kind of impression. For better or worse, they were all energetic girls.</p>

      <p>“Image, huh? Nobody really comes to mind.”</p>

      <p>Koutarou couldn’t really understand subtleties like that. Being so focused on athletics, things of that nature were mostly lost on him.</p>

      <p>“If you’re to be my vassal, I at least want you to understand such nuance...”</p>

      <p>“I mean, even if you say that... Hey, wait, don’t just try and casually make me your vassal!”</p>

      <p>As Koutarou raised his voice, Yurika, who was in the middle of having her outfit chosen, interrupted their discussion.</p>

      <p>“Me, me, me! I’ll do it! I’ll play the Silver Princess!”</p>

      <p>Yurika was wearing brown tights underneath her costume as the horse’s rear. But the outfit didn’t stop her. She raised her hands into the air, waving and calling to Koutarou and Theia.</p>

      <p>“I definitely don’t want my only appearance to be as a horse’s rear!”</p>

      <p>“...”</p>

      <p>Koutarou stared at Yurika without saying a word.</p>

      <p>“Wh-What?”</p>

      <p>As Yurika flinched from his stare, Koutarou turned around.</p>

      <p>“Tulip, I suddenly feel like I understand how important image is.”</p>

      <p>“Right? It’s absolutely critical.”</p>

      <p>A horse’s rear rather than the Silver Princess, oddly enough, Koutarou felt was a perfect fit for Yurika.</p>

      <p>“What’s that supposed to meaaan?!”</p>

      <p>However, there was no way Yurika could accept that. She approached the two of them to object.</p>

      <p>“You’re being noisy...”</p>

      <p>“Calm down, Yurika.”</p>

      <p>“I won’t calm down!”</p>

      <p>“The Silver Princess is out of your league, but I’ll talk to Tulip so you won’t have to be a horse’s rear.”</p>

      <p>“Really?”</p>

      <p>“Yeah, really. Believe in your comrade, Yurika.”</p>

      <p>“I will, Satomi-san.”</p>

      <p>At first Yurika looked at Koutarou skeptically, but her expression loosened up as he reassured her. After shedding bitter tears of defeat together, the two of them had gotten a little closer.</p>

      <p>“That’s how it is. So please, Tulip, can’t you do something?”</p>

      <p>“I guess I have no choice. I’ll find you a role where your face shows.”</p>

      <p>“R-Really?!”</p>

      <p>“Isn’t that great, Yurika?”</p>

      <p>“Yes, I’ll do my best!”</p>

      <p>Yurika cheerfully smiled. That said, it was quite comical in her current outfit.</p>

      <p>“The role of the cruel and terrible Bandit A is open. But do you want a role like that, Yurika?”</p>

      <p>“How is that any better as far as image is concerned?”</p>

      <p>“That’s fine! I’ll take it! I’ll do my best to be evil so I won’t let you down!”</p>

      <p>“Yurika, you should worry about your image too...”</p>

      <p>Yurika seemed unusually motivated. And just like that, the self-proclaimed magical girl of love and courage took on the role of the cruel and terrible Bandit A.</p>

      <p>“That solves Bandit A, but there’s still the Silver Princess...”</p>

      <p>Observing this development, the stage director went into deep thought and crossed her arms. Theia followed suit.</p>

      <p>“So, Tulip, what kind of role is the Silver Princess?”</p>

      <p>“Although she has delicate, ephemeral appearance, she is a reliable person deep down. Despite her suffering, she makes a glorious return as empress.”</p>

      <p>“A delicate but reliable girl...?”</p>

      <p>Koutarou suddenly had an idea for someone who might fit the role.</p>

      <p>“Maybe...”</p>

      <p>“Satomi-kun, do you have someone in mind?!”</p>

      <p>Sensing that Koutarou was onto something, the stage director’s eyes lit up.</p>

      <p>“Yes, actually, my—”</p>

      <p>As Koutarou was about to share who it was, the door to the club room opened and a girl peeked in.</p>

      <p>“Excuse me... Ah, Satomi-kun! Thank goodness you’re here!”</p>

      <p>The girl peeked in with a worried expression, but once she spotted Koutarou, she smiled and entered the club room.</p>

      <p>“I had some free time so I was wondering if I could help— What’s wrong, Satomi-kun?”</p>

      <p>Koutarou quietly staring at her with a surprised expression confused her a little.</p>

      <p>“Is there something wrong with me?”</p>

      <p>She embarrassedly looked down at herself. She checked the hem of her skirt and looked around to see if anything was strange with her outfit.</p>

      <p>“President-san!”</p>

      <p>Koutarou’s eyes lit up. He turned to the stage director, who then nodded back at him.</p>

      <p>“This is the girl! This girl will be perfect! She fits the image perfectly!”</p>

      <p>“H-Huh?! What do you mean by fitting the image?!”</p>

      <p>The person who had entered the club room was exactly the person Koutarou was about to name.</p>

      <p>“You there, would you like to become a princess?!”</p>

      <p>“Huh?”</p>

      <p>It was none other than Sakuraba Harumi, an ephemerally delicate, but reliable girl.<br/><br/></p>

      <p>The legend of the Blue Knight was mainly split into two halves. The first was mostly about the Silver Princess losing her position in a coup d’état and fleeing to the territory of a famous family of knights, the Pardomshihas, all while the Blue Knight protects her. The second half was about the Silver Princess taking back her country afterward. She used the Blue Knight’s power to raise a new imperial army and rebel against the coup d’état forces in order to defeat the court magician and cardinal who were behind it all.</p>

      <p>Because of the relationship that developed between the Silver Princess and the Blue Knight in their escape during the first half, the story had a lot of romantic appeal to the women of Forthorthe. And because of the large-scale war and the Blue Knight’s intense fight against a dragon, plenty of movies had been made covering the epic events of the second half.</p>

      <p>Theia’s manuscript, “The Silver Princess and the Blue Knight,” was based on the first half. The story began with the Silver Princess and her little sister, the Golden Princess, meeting the Blue Knight. The play then concluded with the Pardomshiha territory in sight and the Blue Knight going off to battle on his own. Both were famous scenes popular with the women of Forthorthe.<br/><br/></p>

      <p>“U-Um... ‘Layous-sama, going to battle on your own is unreasonable! You have fought enough! Please forget about us and retreat somewhere safe!’”</p>

      <p>Harumi’s voice filled the empty courtyard illuminated by the evening sun. She was reciting the princess’ lines from “The Silver Princess and the Blue Knight” while there was no one else around.</p>

      <p>On the day she had gone to the club room to help out Koutarou, she had been unable to decline the stage director’s request and ended up taking on the role of the Silver Princess. But this was the first time she had ever tried acting. Uneasy about this situation she’d found herself in, she had spent the last few days practicing on her own.</p>

      <p>“Hmm... I can’t quite understand what Alaia, the Silver Princess, is going through...”</p>

      <p>But no matter how much she practiced on her own, she didn’t feel like she was making any progress. Harumi thought that it was a wonderful manuscript, but she couldn’t relate to the Silver Princess’s feelings. She wasn’t a citizen of Forthorthe that had heard the story told countless times, nor did she have a strong attachment to the Blue Knight like Theia did. She’d never had her life threatened, nor had she ever seen someone off to battle. Harumi just didn’t understand the feelings the Silver Princess harbored for the Blue Knight. Although she could vaguely imagine them, it wasn’t enough to convincingly play the part of the princess.</p>

      <p>“What should I do...?”</p>

      <p>The Blue Knight, Layous Fatra Veltlion, and the Silver Princess, Alaia Kua Forthorthe. In the end, both of them were strangers to Harumi.</p>

      <p>“Hmm...”</p>

      <p>As Harumi closed her script and furrowed her brow, she heard someone’s voice echo through the courtyard.</p>

      <p>“Senpai!”</p>

      <p>It was a low and powerful voice, the complete opposite of Harumi’s. She knew who it belonged to right away.</p>

      <p>“Satomi-kun?!”</p>

      <p>It was Koutarou. As Harumi looked in the direction of the voice, she saw him jumping out from the fire exit. As they looked at each other, Koutarou smiled and ran straight for her.</p>

      <p>“Hahh... Hahh... Hahh... H-How’s it going, Senpai? Hahh... Hahh...”</p>

      <p>Running towards Harumi at full speed, Koutarou called out to her between heavy breaths. Seeing him like that, all the confusion pent up inside of Harumi seemed to vanish.</p>

      <p><em>Satomi-kun is almost like a child...</em></p>

      <p>Instead, her confusion was replaced with joy and her lips turned up into a bright smile as she answered him.</p>

      <p>“Heehee. Actually, I’m a little troubled. I just can’t imagine how the Silver Princess must have felt...”</p>

      <p>“I was worried about that.”</p>

      <p>Having caught his breath, Koutarou nodded at Harumi’s words.</p>

      <p>“You were? What do you mean?”</p>

      <p>“Actually, the drama club president said that you were struggling with getting into your role, so I came to help,” Koutarou said, showing her the script in his hand.</p>

      <p>“The president said that? I see...”</p>

      <p>Because she was having trouble getting into character, Harumi had contacted the president several times. The president had then relayed that to Koutarou, which is why he came to see Harumi now.</p>

      <p><em>Satomi-kun came to help me, knowing I was having trouble...</em></p>

      <p>Realizing what had happened delighted Harumi. She was happy that Koutarou had come to save her in a pinch.</p>

      <p>“Senpai, in the end it all comes down to practice! I used to have trouble finding a good batting form, so I just kept swinging the bat until I was satisfied. You’ll have to forgive the baseball comparison, but you just need to keep at it until it’s all muscle memory!”</p>

      <p>“Satomi-kun...”</p>

      <p>Looking into Koutarou’s eyes beaming with his willingness to help, Harumi felt like everything would work out. Her worries from just a moment ago had now completely vanished.</p>

      <p>“Thank you, Satomi-kun. Then shall we practice together?”</p>

      <p>“Yeah, you can count on me.”</p>

      <p><em>How strange... Satomi-kun only came to help me, but...</em></p>

      <p>Harumi found her change in feelings odd, yet she couldn’t help but smile.<br/><br/></p>

      <p>“So what role did you end up getting, Satomi-kun?”</p>

      <p>“I’m Soldier A. There is a scene where I talk to the Silver Princess, so let’s start from there.”</p>

      <p>“Okay.”</p>

      <p>Koutarou and Harumi stood face to face as they flipped through the pages of their scripts. The evening sun shone on them as it sunk low, casting long shadows on the floor.</p>

      <p>Soldier A and the Silver Princess’s exchange was in the middle of the play, when a disguised Silver Princess and her party try to pass through a checkpoint. In reality, Soldier A was a popular character in Forthorthe. Although the name wouldn’t hint it, he was loved by the citizens of Forthorthe for his loyalty.</p>

      <p>“Let’s see... Here it is. ‘Hey, you! That girl over there! Nobody may pass through here without permission!’”</p>

      <p>Koutarou had practiced his lines before, but he faltered as he spoke them now. Although he had said he wanted to help Harumi with her practice, the truth was that he needed practice too.</p>

      <p>“Let’s just run through the lines from here until the end of the scene. There’s no need to start acting right away.”</p>

      <p>“All right.”</p>

      <p>Koutarou and Harumi nodded at each other and began reading their scripts. Reciting their lines and reviewing the stage directions, they worked their way through the scene.</p>

      <p>“Hey, you! That girl over there! Nobody may pass through here without permission!”</p>

      <p>The scene began with a line from Koutarou’s Soldier A as the Silver Princess and her party are fleeing from the coup d’état forces. As the Silver Princess tries to pass through a checkpoint, she gets stopped by Soldier A who considers her suspicious.</p>

      <p>“I have a sign of permission in this bag. Please take a look.”</p>

      <p>However, having escaped with nothing but the clothes on her back, the Silver Princess didn’t have any kind of documentation. She had already prepared herself for what would come next.</p>

      <p>“Show me. Hmm? Quit messing around! There’s nothing in this bag!”</p>

      <p>“...Please, let me pass...”</p>

      <p>“You’re not going anywhere! You’re under— No, wait, that crest is...!”</p>

      <p>But finally, Soldier A recognizes the crest of her royal family on the Silver Princess’s bag.</p>

      <p>“...”</p>

      <p>“I see. So that’s how it is...”</p>

      <p>Once he realizes what is going on, Soldier A decides to let the Silver Princess through, knowing what might happen to him.</p>

      <p>“I’m sorry, young girl. It was my mistake. You most certainly have permission.”</p>

      <p>“No, I’m the one who should be apologizing...”</p>

      <p>“Now hurry and go. There are people waiting behind you.”</p>

      <p>“Thank you... so very much...”</p>

      <p>The scene ends with the Silver Princess and her party safely passing through the barrier. While there are many theories on what happened to Soldier A afterwards, the story of this brave, loyal soldier was still being told. As Koutarou and Harumi finish reading the scene, Koutarou began laughing.</p>

      <p>“Ahahaha! I’m no good at all.”</p>

      <p>Koutarou had stumbled over all of his lines.</p>

      <p>“Heehee, it’s like that for everyone at the start.”</p>

      <p>“Compared to me, you did great, Senpai.”</p>

      <p>Harumi’s intonation made her lines easy on the ears and she put her heart into it. Koutarou didn’t feel like she was having problems getting into her role with that kind of performance.</p>

      <p>“Now that you mention it... it did go rather smoothly.”</p>

      <p><em>That’s strange. Just a minute ago, I couldn’t understand the Silver Princess’s feelings...</em></p>

      <p>Harumi was perplexed. Once she started practicing again, the Silver Princess’s lines seemed to flow naturally. Even though nothing had changed, she had begun understanding the Silver Princess.</p>

      <p><em>Now I might be able to do the scene with the Blue Knight better than before...</em></p>

      <p>As expected, Harumi’s biggest problem was her conversations with the Blue Knight.</p>

      <p>“Satomi-kun, can we do another scene while I’m still on a roll?”</p>

      <p>“I don’t mind. Which one?”</p>

      <p>“It’s at the end of the script... um, where the Blue Knight is going off to fight on his own...”</p>

      <p>Harumi had the page marked and could find it right away, while Koutarou hurriedly began flipping through the pages to find the scene.</p>

      <p>“Okay, found it.”</p>

      <p>At the climax of the play when the party is about to reach Pardomshiha territory, the Silver Princess and the others get surrounded by the coup d’état forces. In the scene Harumi was talking about, the Blue Knight steels his resolve and decides to go into battle alone in order to protect the princesses.</p>

      <p>“I’ve been practicing this scene for a while but it doesn’t feel right. I’d like to try it while you’re helping me, Satomi-kun.”</p>

      <p>“Sure. I can do that.”</p>

      <p>Although Koutarou remained ignorant when it came to romance, he still understood it was an important scene. If the Blue Knight was the star of the next scene, the Silver Princess was definitely the star of this one.</p>

      <p>“Could you do the Blue Knight’s lines, Satomi-kun?”</p>

      <p>“The Blue Knight’s?”</p>

      <p><em>I should just do it the same way Mackenzie did during practice.</em></p>

      <p>Koutarou recalled the figure of Kenji rehearsing. He had landed the part of the Blue Knight. After getting a grasp of the Blue Knight’s image, Koutarou nodded at Harumi.</p>

      <p>“Got it. Let’s get started right away then. Practice is all about quantity.”</p>

      <p>“Yes.”</p>

      <p>The two nodded and faced each other, scripts in hand. The evening sun’s red light shone down on Koutarou, illuminating him like he was on fire.</p>

      <p><em>Ah...</em></p>

      <p>Harumi stared at Koutarou.</p>

      <p>“...Princess Alaia, it seems this is as far as I can go with you.”</p>

      <p>“Layous-sama!”</p>

      <p><em>I’m sure it must have been like this...</em></p>

      <p>The Blue Knight in the script addressed the Silver Princess in the evening sun as well. Koutarou was wearing his uniform rather than armor and he was wielding a script rather than a sword, but it felt quite different from when Harumi had practiced on her own. She finally felt like she might have a handle on what the Silver Princess was feeling in that moment.</p>

      <p><em>And she was attracted to this person...</em></p>

      <p>At this point in the story, the Silver Princess had already begun falling for the Blue Knight. And if it wasn’t for the coup d’état, the Silver Princess never would have met the local knight. It was a miraculous encounter only made possible by hardship.</p>

      <p>“Your Highness, please run away with your little sister. I’ll take on as many enemies as I can. Please use that opportunity to get as far away as possible.”</p>

      <p>“No, I can’t leave you behind, Layous-sama! You’re the only reason we were able to make it this far!”</p>

      <p><em>Now that I think about it, I guess you could say I met Koutarou during hard times as well...</em></p>

      <p>The knitting society was on the verge of collapsing. There were no new members to recruit to keep it alive, and the only person who was interested in joining was a boy who just wanted to go out with Harumi. Koutarou had come to Harumi’s rescue as that boy was harassing her. After that, he joined the knitting society and even took club activities seriously. To Harumi, her meeting Koutarou was also a miracle in a time of need.</p>

      <p><em>The Silver Princess’s feelings might not be so different from my own...</em></p>

      <p>As Harumi began thinking of it that way, her image of herself began overlapping with the Silver Princess, the same way Koutarou’s did with the Blue Knight.</p>

      <p>“It was all thanks to the citizens of this country that you got this far. If it wasn’t for them, we never would have made it here.”</p>

      <p>“That’s not true, Layous-sama!”</p>

      <p><em>Even if she was a princess, she wouldn’t think that differently from normal people like us. She fell in love with someone and wanted that person to love her back. But she couldn’t say it out loud...</em></p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert3">
    <img alt="insert3" class="insert" src="../Images/Insert3.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter31">
    <div class="main">
      <p>Harumi now started to see herself as the Silver Princess. Like Harumi, she loved somebody but couldn’t say it. She was a delicate and cowardly princess.</p>

      <p>“And they all did it because of their love for you, Your Highness. So please, for the citizens and for yourself, please run away, Princess Alaia.”</p>

      <p>“Please wait, Layous-sama!”</p>

      <p><em>That’s not true, Layous-sama! You’re the one who’s sustained me! It’s because you were at my side!</em></p>

      <p>Eventually Harumi’s feelings began melding with the Silver Princess’s. She wasn’t sure how she could have missed it before. Right now, she was painfully aware of how the Silver Princess in the script must have felt.</p>

      <p>“Layous-sama, going to battle on your own is unreasonable! You have fought enough! Please forget about us and retreat somewhere safe!”</p>

      <p><em>Satomi-kun is going away... He’s leaving me behind...!</em></p>

      <p>Suddenly, tears began welling in Harumi’s eyes. With all the tears in her way, she couldn’t read the script in her hands. Yet she didn’t mess up her lines. Right now, she didn’t need a script.</p>

      <p>Being as serious as she was, Harumi had already read through the play several times, repeating her lines over and over again. She had them all memorized now. The only thing she had been missing was the emotion behind the Silver Princess. And now that Harumi had that too, she spoke her lines as if they were her own words.</p>

      <p>“I want you to live!”</p>

      <p>Right now, Harumi couldn’t distinguish who was in front of her, nor who the feelings that were overflowing from her heart really belonged to. But nonetheless, she poured her heart out to Koutarou.<br/><br/></p>

      <p>“That was amazing, Sakuraba-senpai...”</p>

      <p>Even after they were finished practicing, Koutarou was still in awe. Harumi’s tone of voice, her desperate expressions, and her tears all overwhelmed him. It was enough to make him feel embarrassed for simply reading his lines from the script.</p>

      <p>“Th-Thank you, Satomi-kun...”</p>

      <p>Harumi was also surprised at herself. She was embarrassedly wiping her tears away, still confused by the change that had come over her.</p>

      <p>“I’m a little surprised as well. I couldn’t even understand the Silver Princess’s feelings just a moment ago. I wonder why this happened all of a sudden...”</p>

      <p>Harumi couldn’t tell Koutarou that it was because she felt her emotions overlapping with Alaia’s. That would be the same as confessing to him. All she could do was blush and give him a vague answer.</p>

      <p>“Sakuraba-senpai, maybe you have a knack for this.”</p>

      <p>“Th-That’s not true, Satomi-kun! E-Even now, I just want to run and hide!”</p>

      <p>Harumi was shy and was uncomfortable with standing in front of a lot of people. Her timidity had just backfired when she was unable to refuse the club president insisting she take the role. Harumi never would have even dreamed about getting up on stage.</p>

      <p>“There’s no need to be so modest, Sakuraba-san.”</p>

      <p>That was when the drama club president suddenly appeared.</p>

      <p>“You’re here, President-san?”</p>

      <p>As Koutarou called out to her, she put on a satisfied smile and approached the two of them.</p>

      <p>“Yes. Sakuraba-san said she was having trouble getting into her role, so I came to see how she was doing, but it seems like there was no reason to be worried. That was an incredible practice run. It didn’t even seem like acting at all.”</p>

      <p>The drama club president was happy to have found an unpolished gem in Harumi. She excitedly grabbed both of her hands.</p>

      <p>“Please keep it up, Sakuraba-san! If you can act like that in every scene, this play will be a huge hit!”</p>

      <p>“Th-That’s not true. I still have a long way to go...”</p>

      <p>Harumi blushed and looked down at receiving such unexpected praise.</p>

      <p>“I told you, didn’t I? You really are amazing, Sakuraba-senpai. You’re a real rich lady after all!”</p>

      <p>“S-Satomi-kun!”</p>

      <p>Harumi wasn’t used to being complimented to her face, and getting praised for her acting just now felt like being praised for her feelings for Koutarou. To her, it was extraordinarily embarrassing. She couldn’t bring herself to look up.</p>

      <p>“Satomi-kun, I’m counting on you to keep helping out Sakuraba-san like this.”</p>

      <p>“Leave it to me! I, Satomi Koutarou, will turn her into a splendid princess.”</p>

      <p>“S-Satomi-kun...”</p>

      <p>So instead of Harumi, Koutarou was the one proudly boasting.<br/><br/></p>

      <p>Stepping out from the kitchen, Kiriha was carrying a plate of cut up cucumbers. Entering the inner room, she looked around. After making sure that Ruth wasn’t there, she called out to Yurika.</p>

      <p>“Yurika, I have some cucumber left over from breakfast. Do you need it?”</p>

      <p>“Oh, yes! It’s Hercules-chan’s favorite!”</p>

      <p>Before too long, everyone had begun using the nickname Yurika had given the Hercules beetle: Hercules-chan.</p>

      <p>Yurika took the plate from Kiriha, approached the wardrobe, and slid open the door. Inside was Hercules in his plastic case. Since Ruth’s irrational hatred of beetles hadn’t improved any, they were still keeping him hidden.</p>

      <p>“Here’s some food, Hercules-chan.”</p>

      <p>As Yurika put the cucumber slices into the box, the Hercules beetle shook his large body and began moving. Understanding that food had been dropped into the case, he slowly but surely moved towards the cucumber.</p>

      <p>“Now that I think about it, do you have enough food for Hercules-chan, Yurika?”</p>

      <p>“It’s not a problem, Sanae-chan.”</p>

      <p>“If you’re running low, I can buy some on my way home from my part-time job.”</p>

      <p>“I bought some yesterday, so it’s fine.”</p>

      <p>“Oh, well in that case...”</p>

      <p>“Thank you, Satomi-san and Sanae-chan.”</p>

      <p>Koutarou who loved beetles, and Sanae who loved all living creatures were both cooperative when it came to Hercules. Yurika was sleeping in the inner room after Hercules had taken the wardrobe from her. And now that the three of them were living together, they all started getting along a little better. Before she knew it, Yurika’s quality of life began improving.</p>

      <p>“Your jacket, Koutarou.”</p>

      <p>“Yeah, thanks, Kiriha-san.”</p>

      <p>Kiriha helped Koutarou put on his jacket. With the change of the seasons, it started getting colder in the evenings when Koutarou was coming home from work.</p>

      <p>“You look like a married couple like that...”</p>

      <p>Yurika watched longingly as Kiriha helped Koutarou.</p>

      <p>“His heart has been completely invaded. Koutarou really is an idiot! I’m the only one he should be trusting!”</p>

      <p>Unlike Yurika, Sanae was irritated. She couldn’t stand Koutarou and Kiriha getting along, but she was more worried about him than she was jealous. And she was close enough with Koutarou now to be vocal about it.</p>

      <p>“If I don’t do something, Koutarou will give in to Kiriha or Theia over something stupid!”</p>

      <p>“Sanae-chan?”</p>

      <p>Pumping herself up, Sanae left Yurika behind and headed for Koutarou’s cellphone charging at the outlet on the wall. Using her Poltergeist power, she floated it towards him.</p>

      <p>“Koutarou! You’re forgetting your cellphone!”</p>

      <p>Sanae then clung to Koutarou’s back in her usual fashion, and despite being unhappy just a few moments ago, she now gave him a big grin.</p>

      <p>“Ah, thanks, Sanae.”</p>

      <p>“Yeah!”</p>

      <p>Koutarou took the phone floating in front of him, put it into his pocket, and thanked Sanae. That was when he spotted her cheerful smile.</p>

      <p><em>Praise me even more, you jerk!</em></p>

      <p>That was what her smile seemed to be saying to Koutarou. He reached his hand over towards her.</p>

      <p>“Heehee...”</p>

      <p>“Good girl, good girl.”</p>

      <p>As Koutarou patted Sanae’s head, her smile grew bigger and she put more strength into her arms wrapped around his neck.</p>

      <p>“Sanae-chan was talking about invasions and winning and losing... but in reality, she just wants Satomi-san to dote on her.”</p>

      <p>At least, that’s what it looked like to Yurika.<br/><br/></p>

      <p>Reaching the base of the hill where Kisshouharukaze High School stood, plenty of students in uniform could be seen despite it being Sunday. There were a good number of clubs that held activities even on the weekend.</p>

      <p>“Good morning, Satomi-kun!”</p>

      <p>“Hey, first-year brat, once you’re done with your job, you should come show your face!”</p>

      <p>The gathering students included some members from the drama club. After greeting Koutarou, they hurried up the slope to the school.</p>

      <p>“Good morning! I’ll stop by on my way home!”</p>

      <p>But the club members didn’t turn around to listen to Koutarou’s reply. Instead, they just kept hurrying up the hill and vanished around a corner. Seeing them off, Koutarou and Sanae started laughing.</p>

      <p>“It looks like they’re late to a meeting.”</p>

      <p>“Looks like it. Tulip and Ruth-san did leave pretty early this morning.”</p>

      <p>Theia and Ruth hadn’t been to room 106 much since they had made plans with the drama club. Mostly, Koutarou and the others would join up with them after each of them had taken care of business for the day. However, Theia who had written the play was enthusiastically participating with the drama club full-time. And of course, Ruth tagged along with her.</p>

      <p>“They’ll probably get yelled at by Theia.”</p>

      <p>“Probably.”</p>

      <p>Koutarou slowly walked up the slope. He was on his way to his part-time job excavating the ruins, but unlike the drama club members, he was in no rush since he still had plenty of time to spare.</p>

      <p>“It’s starting to get cold,” Sanae commented.</p>

      <p>“The cultural festival getting closer means that November is too,” Koutarou replied.</p>

      <p>The cultural festival was going to be held on November 2nd and 3rd, alongside Culture Day. Since they were now in the middle of October, the mornings were getting colder too.</p>

      <p>“Hmm... Now that I think about it, Sanae, can you feel the cold?”</p>

      <p>Sanae mentioning the temperature confused Koutarou.</p>

      <p>“I can’t, but I can feel it through you.”</p>

      <p>“Ah, that makes sense.”</p>

      <p>Similar to Sanae “eating,” she could feel heat and cold when she was holding on to Koutarou. And since she had been doing that for a while now, she could feel the change in seasons too.</p>

      <p>“Besides, you’ve been nice lately, so I can tell what you feel.”</p>

      <p>“What’s that supposed to mean?”</p>

      <p>“Before, even if I was clinging on to you, I couldn’t smell the air. But lately, I can even do that. It must be because you’re opening up to me now.”</p>

      <p>Koutarou thought that might be the case as well. Ever since that day on summer break, Koutarou had stopped thinking of Sanae as a nuisance. Right now, he thought of her as a friend or maybe even a little sister.</p>

      <p><em>But...</em></p>

      <p>“Isn’t it just because you’re possessing me more often?”</p>

      <p>Koutarou wasn’t mature enough to simply admit his change in feelings. Mortified at Sanae seeing through him, Koutarou stubbornly tried to hide his feelings.</p>

      <p>“Why can’t you just be honest and say ‘I love you, Sanae-chan’?!”</p>

      <p>“Guah!”</p>

      <p>Now angry, Sanae began choking Koutarou. Since she already had her arms around his neck, Koutarou had no way of preventing her attack.</p>

      <p>“If you love me, just say so! Whisper ‘I love you’ in a sweet voice! Gently embrace me!”</p>

      <p>“I-It hurts...”</p>

      <p>Sanae practically had the chokehold of a professional wrestler, and Koutarou was about to lose consciousness.</p>

      <p>“...Huh?”</p>

      <p>However, just before Koutarou passed out, Sanae loosened her grip.</p>

      <p>“Ugh! Ahh... Hahh...”</p>

      <p>With the pressure suddenly released, Koutarou was finally able to breathe again. He gasped for air, but then Sanae whispered into his ear.</p>

      <p>“Koutarou, they’re playing baseball up ahead.”</p>

      <p>“Hmm?”</p>

      <p>Having caught his breath, Koutarou looked up and heard something familiar. It was the distinct sound of a bat hitting a ball. On top of that, he could also hear the voices of cheering and people running around. It was just as Sanae had said—people playing baseball.</p>

      <p>“The baseball club should be in the middle of a big tournament right now, so they’re getting practice in whenever they don’t have a match.”</p>

      <p>“I see...”</p>

      <p>Koutarou began climbing the hill again, still shouldering Sanae who had finally calmed down. It didn’t take long to reach the point where the line of trees was replaced by stone walls and fences. On the other side of them was Harukaze High school grounds where the students clad in baseball uniforms were busily running around.</p>

      <p>“It really is the baseball club.”</p>

      <p>“This is their time to shine...”</p>

      <p>Koutarou watched on as he passed by. His pace slowed down some as he got lost in thought.</p>

      <p><em>Baseball, huh?</em></p>

      <p>Koutarou had no problems with the knitting society. The club activities were fun and he was getting along well with Harumi, but he still loved baseball. He’d played it all the way through middle school and he loved the exercise and physical activity. He missed it and still had some regrets over not joining the baseball club in high school.</p>

      <p>“Hey, Koutarou.”</p>

      <p>After passing by half of the school yard and losing sight of the baseball club, Sanae whispered to Koutarou.</p>

      <p>“Hmm?”</p>

      <p>Koutarou looked over at Sanae. He had no interest in the soccer club practicing.</p>

      <p>“Let’s do it. Baseball, I mean. You might start out as an underling, but it’s best to do what you really want!”</p>

      <p>“Sanae...”</p>

      <p>Sanae’s words surprised Koutarou, but she kept pushing him.</p>

      <p>“I’ll help out more with the housework and stuff! That way, I’m sure you can play baseball!”</p>

      <p>“...Thank you, Sanae”</p>

      <p>Sanae’s kind words warmed up Koutarou and he patted her on the head. What she said truly made him happy.</p>

      <p>“But it’s fine. I’m not going to play baseball, so you don’t have to worry about it,” Koutarou declared as he shook his head and patted Sanae’s more.</p>

      <p>“Why not?! You love baseball, don’t you?!”</p>

      <p>“Yeah.”</p>

      <p>“Then just play it!”</p>

      <p>“Baseball takes money. It’s not that easy to work part-time and play baseball seriously at the same time. Since it’s a team sport, it’s not something you can do at your own pace like knitting.”</p>

      <p>“Koutarou...”</p>

      <p>“But thanks, Sanae. I’m happy you feel that way.”</p>

      <p>Koutarou continued patting Sanae’s head as he smiled.</p>

      <p>“But...”</p>

      <p>Even though Koutarou was smiling, Sanae still looked gloomy. She frustratedly bit her lip.</p>

      <p><em>If I wasn’t a ghost... I could work or do something... and then...</em></p>

      <p>It was the first time Sanae had regretted that she was a ghost since she met Koutarou.</p>

      <p>“Oh?” Koutarou abruptly stopped and pointed in front of him. “Isn’t that Tulip?”</p>

      <p>“Huh?”</p>

      <p>Sanae looked in the direction Koutarou indicated and could see a golden head of hair. It looked like she had fallen over by the school gate. But oddly enough, there was a large bag over where her body should have been. Because of that, the only thing visible was her head.</p>

      <p>“What is she doing...?”</p>

      <p>“Wh-Who knows?”</p>

      <p>Spotting Theia in such a strange predicament made Sanae completely forget about her complicated emotions for the time being.</p>

      <p>“Hey, Tulip, what are you doing down there?”</p>

      <p>Koutarou called out to Theia as he rushed over to her. Sanae was still hanging on to him, so she was dragged along for the ride.</p>

      <p>“...Hmm?”</p>

      <p>Hearing Koutarou’s voice, Theia moved her head to look up at him.</p>

      <p>“Is this some new kind of game?”</p>

      <p>“O-Of course not! Hurry up and help me!”</p>

      <p><em>Looks like she’s okay...</em></p>

      <p>Based on Theia’s tone of voice, Koutarou determined that she was fine. The sight of her like this had worried him a little at first, so he took a moment to calm down.</p>

      <p>“...A turtle?”</p>

      <p>“Tulip, how in the world did you end up like this?”</p>

      <p>Finally reaching Theia’s side, Koutarou and Sanae stared at her. She had fallen on her stomach with a large bag on top of her back. The bag alone was enough to cover up Theia’s small body. The only things sticking out from under the bag were her head and limbs. She really did look like some kind of turtle.</p>

      <p>“That doesn’t matter! Just hurry up and help me!”</p>

      <p>“No way. I’ll only help if you tell me how you got yourself into this hilarious position.”</p>

      <p>Koutarou was fascinated and stared at Theia with an excited look.</p>

      <p>“I refuse! As if a princess of Forthorthe would go out of her way to purposely shame herself!”</p>

      <p>Of course, Theia didn’t give Koutarou the answer he wanted. Her face turned red and she looked away from him. Seeing that, Koutarou turned his back on Theia.</p>

      <p>“Then wait for someone else to pass by, Tulip.”</p>

      <p>“No, wait! I’d rather tell you the truth than let a civilian see me in such a disgraceful state!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert4">
    <img alt="insert4" class="insert" src="../Images/Insert4.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter32">
    <div class="main">
      <p>As Theia called out to Koutarou in a panic, he turned around with a smile and squatted down in front of her.</p>

      <p>“Then you should have just done so in the first place.”</p>

      <p>“You were going help her either way, so why not just help in the first place?”</p>

      <p>“Don’t you want to know what happened to Tulip too?”</p>

      <p>“Well, that’s true”</p>

      <p>“So what happened, Tulip?” Koutarou asked with a grin.</p>

      <p>Seeing that, she turned her face away again before replying,</p>

      <p>“I was helping move materials for the play... Since there’s just cloth inside, I thought even I could carry it, but as you can see, I fell! That’s all!”</p>

      <p>Theia began her explanation in a whisper but her voice gradually grew louder. By the end, she was yelling.</p>

      <p>“Go ahead and laugh! I know you—”</p>

      <p>However, before Theia could finish, she turned back towards Koutarou and realized he wasn’t there anymore.</p>

      <p>“H-Huh? Pleb...?”</p>

      <p>Surprised at Koutarou’s sudden disappearance, Theia looked around. She quickly saw that he had circled around to her side and was touching the large bag on top of her.</p>

      <p>“Sanae, help me out.”</p>

      <p>“Okay, should I just push here?”</p>

      <p>“Please do.”</p>

      <p>“Pleb...? Wh-What are you...?”</p>

      <p>Theia couldn’t comprehend what Koutarou was doing. She just stared at him.</p>

      <p>“What do you mean? I’m helping you. Obviously,” Koutarou responded with an astounded expression.</p>

      <p>“N-No, I understand that, but weren’t you going to laugh at me?”</p>

      <p>That was the real reason for Theia’s confusion. Based on their conversation, she was sure Koutarou was just chomping at the bit for a reason to laugh at her. But he hadn’t so much as cracked a smile. Instead, he was diligently trying to help her.</p>

      <p>“That’s what I was planning on doing, but I changed my mind after hearing your story.”</p>

      <p>Koutarou let out a sigh. He was feeling bad for teasing her.</p>

      <p>“I figured you were trying to do something stupid again, but it turns out you were trying to help everyone out. There’s no reason to laugh, is there?”</p>

      <p>Being forced to admit that much, Koutarou scratched his head and self-consciously turned away from Theia.</p>

      <p>“Ah, uh... yeah...”</p>

      <p>Theia didn’t mind that at all. Really, his words shocked her.</p>

      <p><em>The pleb isn’t laughing at my failure...?</em></p>

      <p>Theia was certain that Koutarou would laugh at her, so she was perplexed by this reaction.</p>

      <p>“Sanae, let’s do this.”</p>

      <p>“Yeah, I got it.”</p>

      <p>“Push!”</p>

      <p>“Hyah!”</p>

      <p>But in her puzzlement, Koutarou and Sanae worked together to get the bag off of her back. Finally free, Theia used her hands to push herself up. Rather than standing up, however, she just sat on the concrete with a blank expression on her face.</p>

      <p>As she sat there in her stupor, a hand was held out to her. She followed the hand to its source and found herself staring at Koutarou’s face. While she was staring at him like a deer in headlights, he smiled.</p>

      <p>“Are you hurt anywhere, Your Highness?”</p>

      <p>It was one of the Blue Knight’s lines from Theia’s manuscript. After practicing with Harumi several times, Koutarou knew most of the Blue Knight’s lines.</p>

      <p>“N-No... I’m fine...”</p>

      <p>Hearing Koutarou recite the Blue Knight’s line, Theia was unable to look away from his face. Staring at him, she hesitatingly grabbed his hand. When she did, he firmly took her hand in return and pulled her up.</p>

      <p>“Please forgive my rudeness, Princess Theiamillis.”</p>

      <p>“You should just honestly apologize for teasing her...”</p>

      <p>Sanae was stunned by Koutarou’s behavior and let out an exaggerated sigh as she lightly kicked him.</p>

      <p>“You idiot! As if I could do something that embarrassing!”</p>

      <p>“You really can’t be honest, can you? Jeez...”</p>

      <p>Koutarou wanted to apologize to Theia, but he was too mortified to do it in his own words, so he’d borrowed the Blue Knight’s instead. That was his way of hiding his embarrassment. However, his cover-up had some unexpected results. The cheesy line had a great effect on Theia.</p>

      <p>“B-Blue Knight-sama...”</p>

      <p>“Hmm? What’s wrong, Tulip? You’re making a weird face.”</p>

      <p>Theia was still standing there, looking up at Koutarou. Confused, he looked down at her in return.</p>

      <p>“A-Ah! I-I’m fine, Blue— I mean, I-I’m fine, p-pleb!”</p>

      <p>“You’re acting strange. Did you hit your head?”</p>

      <p>Suspecting that Theia might have been hurt, Koutarou stared her down.</p>

      <p>“I-I’m fine, r-really!”</p>

      <p>Theia then turned her back to Koutarou, her face now beet red.</p>

      <p>“Are you sure? Don’t push yourself. You had something pretty heavy on top of you...”</p>

      <p>“I keep telling you I’m fine!” Theia yelled back at Koutarou, still turned away from him.</p>

      <p><em>C-Calm down, Theiamillis. That is not Blue Knight-sama. It’s Koutarou... I mean the pleb! What are you so shaken up for?! This is nothing! Nothing!</em></p>

      <p>However, her shouting seemed to be directed at herself rather than Koutarou.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter4">
    <div class="main">
      <h1>A Change of Cast and Traces of a Plot</h1>

      <h2>Tuesday, October 20th</h2>

      <p>With less than two weeks left before the cultural festival, the drama club began rehearsing using the stage in the gym. The sets had already been installed. While they had been made by amateurs and certainly weren’t professional quality, they looked strangely realistic under the colorful light.</p>

      <p>“Yes, this will do.”</p>

      <p>“I’m glad we finished in time for the rehearsals.”</p>

      <p>Theia and the stage director smiled in satisfaction as they looked at the stage.</p>

      <p>“We worked hard after all, first-year brat.”</p>

      <p>“We sure did... But it’s not done yet.”</p>

      <p>Behind Theia and the stage director were the drama club members that had made the stage props and everyone else who had helped them. They were all looking up at the sets on the stage, including Koutarou and several people from other clubs. That was when Theia turned around and called out to Koutarou and the others.</p>

      <p>“Allow me to praise you all. You have done well.”</p>

      <p>Theia had helped them work when she had spare time, so she knew what they had been through to pull this off.</p>

      <p>“Normally I would like to make a few complaints, but I’ll overlook it this time.”</p>

      <p><em>Tulip seems to be quite obsessed with the Blue Knight, so she’s willing to look the other way for this, huh?</em></p>

      <p>Ruth had told Koutarou about Theia’s love for the Blue Knight, including that it was largely due to her mother’s influence. He’d seen for himself how hard she had worked to make the play a reality, so he respected those feelings.</p>

      <p>As Koutarou and the others were taking a break, Ruth appeared.</p>

      <p>“Thank you for your hard work, Satomi-sama. Thank all of you.”</p>

      <p>“Ruth-san.”</p>

      <p>She came in carrying plenty of damp towels on a tray. It was her way of thanking Koutarou and the others who had worked on the set.</p>

      <p>“Everyone, please use these to wipe off your sweat.”</p>

      <p>“Oh, Ruth-chan, how thoughtful of you!”</p>

      <p>“Thanks! I’m covered in sweat.”</p>

      <p>“This kind of care really puts my mind at ease. The girls in my club could learn a thing or two...”</p>

      <p>The men working on the set surrounded Ruth and grabbed towels.</p>

      <p>“Hey, wait, why are you taking two?”</p>

      <p>“What does it matter? I’m taking one home to treasure!”</p>

      <p>“Hey, that’s playing dirty! I want another one too!”</p>

      <p>However, since everyone began taking two or three towels, the supply quickly diminished.</p>

      <p>“Wait, everyone! You can’t do that! One per person, please!”</p>

      <p>Ruth attempted to regain control, but the damage was already done.</p>

      <p>“Aww, there’s none left for me!”</p>

      <p>Being last in line, by the time Koutarou arrived, the tray was already empty.</p>

      <p>“Ah... Man, this brings me back to life...”</p>

      <p>“Give it up, first-year brat. We’ll thoroughly enjoy Ruth-chan’s love for you.”</p>

      <p>“Tch, looks like I was too slow!”</p>

      <p>“Hey, Satomi. I’ll give you my towel once I’m done with it.”</p>

      <p>“Who would want something like that?!”</p>

      <p>As Koutarou shouted at the set props team, Ruth looked quite apologetic as she held on to the empty tray.</p>

      <p>“I’m really sorry, Satomi-sama... Oh, I know!”</p>

      <p>She stopped in the middle of her apology and her expression brightened up. As she rummaged through her pocket with her right hand, she waved Koutarou over with her left.</p>

      <p>“Satomi-sama, please come here for a moment.”</p>

      <p>“What is it, Ruth-san?”</p>

      <p>As Koutarou closed in, Ruth beckoned him even closer.</p>

      <p>“Lean in a little more.”</p>

      <p>“Okay...”</p>

      <p>Although he didn’t understand what Ruth wanted, Koutarou did as she asked and leaned in closer to her.</p>

      <p>“Just stand still for a moment, Satomi-sama.”</p>

      <p>With a smile, Ruth pulled out her handkerchief and used it to wipe the sweat off Koutarou’s face. Her handkerchief was soft and smelled faintly of flowers. Each time she dabbed it to Koutarou’s face, it absorbed sweat and left behind a trace of the pleasant scent.</p>

      <p>“Ruth-san, there’s no need to go this far. I only need to rinse off my face, you know.”</p>

      <p>“No, Satomi-sama. This is my thanks for all of your help.”</p>

      <p>Ruth shook her head, still smiling and patting his face with her handkerchief.</p>

      <p>Before Koutarou could say something else, she whispered in a quiet voice only Koutarou could hear, “You’ve been very considerate yourself, Satomi-sama.”</p>

      <p>Ruth glanced at Theia as she whispered. Even now, Theia was cheerfully looking at the stage.</p>

      <p><em>It seems like I can’t hide anything about Tulip from Ruth-san...</em></p>

      <p>When Koutarou looked at Theia and smiled wryly, Ruth’s expression grew even brighter.</p>

      <p>“Waaaaah! Hey you first-year brat! Wh-Wh-What kind of envious thing are you doing?!”</p>

      <p>“Damn you! I’ll give you my wet towel, so trade places with me!”</p>

      <p>But the very next moment, the set team surrounded them and Ruth’s brilliant smile ended up only lasting for a few seconds.<br/><br/></p>

      <p>The Blue Knight—Layous Fatra Veltlion—wore, as the name implied, a set of blue armor. But as the costume armor hadn’t been completed yet, Kenji was temporarily wearing a white surcoat that had been used in another play. The person in charge of the wardrobe seemed to be struggling with the armor and had suggested that they just dye the surcoat blue instead.</p>

      <p>Kenji, who had been blessed with both charisma and height, looked like a professional actor once he took off his glasses and tied his hair back behind his head. When he was wearing it, it didn’t really seem to make a difference what color the surcoat was.</p>

      <p>“Curse them! To think they would poison an entire river to capture a single lady... This is the act of a true coward! I cannot forgive them! Their blood will stain my sword!”</p>

      <p>But there was a foreseeable problem. Despite his looks, Kenji was still a high school student and had only been in the drama club for half a year. It showed in his awkward acting.</p>

      <p>“Hmm, well, it’s so-so.”</p>

      <p>However, the drama club president watching from below the stage didn’t see it as that big of a problem.</p>

      <p>“Ken-chan seems to be taking his practice seriously. And I can tell he’s read the manuscript thoroughly... He looks the part too, so if he keeps practicing like this, I’m sure he’ll get the hang of it.”</p>

      <p>As the stage director, the club president believed that Kenji’s acting would be good enough by opening night, and that pleased her.</p>

      <p>“What do you think, Theiamillis-san?”</p>

      <p>“Hmm...”</p>

      <p>Theia, however, looked vexed.</p>

      <p>“Is there something bothering you?”</p>

      <p>“He’s a good looking man and his acting is good enough. If he keeps at it like this he’ll probably do well. But I feel like something’s missing.”</p>

      <p>Theia’s shoulders drooped. There was nothing obviously wrong with Kenji or his acting, but somewhere deep inside she felt like something wasn’t right.</p>

      <p>“I can’t really tell what though...”</p>

      <p>“Me neither. Since we don’t understand the reason behind it, it might just be within the margin of error.”</p>

      <p>Theia looked back at the stage.</p>

      <p><em>I wonder what this sense of incongruity is...? It’s like seeing a tiger and being told it’s a lion.</em></p>

      <p>As Theia was thinking with her head tilted in confusion, Koutarou wearing work clothes appeared from backstage during the break between scenes.</p>

      <p>“You’re fabulous, White Knight-sama!”</p>

      <p>“You’re making me sick, Kou. Stop it.”</p>

      <p>“Don’t worry. Me too.”</p>

      <p>“Then don’t do it...”</p>

      <p>“I’m regretting it too. More importantly, Mackenzie, don’t stand in the wrong place. You were way off the marked spot just now.”</p>

      <p>“Seriously?”</p>

      <p>“Yeah. I’ll remark it in a color that stands out more just in case.”</p>

      <p>“Please do.”</p>

      <p>As Koutarou and Kenji exchanged words, Koutarou replaced the tape that marked the actors’ starting positions for the scene. Up until now, they had been using black and white tape, but Koutarou was switching it for something more colorful.</p>

      <p>“Ah...”</p>

      <p>The moment Theia saw Kenji and Koutarou together, she was reminded of Koutarou the other day.</p>

      <p><em>“Please forgive my rudeness, Princess Theiamillis.”</em></p>

      <p>A gentle smile. Powerful words. Recalling the incident erased the image of Kenji as the Blue Knight in her head and replaced it with Koutarou.</p>

      <p>“What’s wrong, Theiamillis-san?”</p>

      <p>“Oh, it’s nothing...”</p>

      <p><em>I’m just imagining things. The pleb is far too terrible of an actor. He’s not fit for the precious role of the Blue Knight.</em></p>

      <p>Theia shook her head in an attempt to drive the idea out of her brain, but she couldn’t take her eyes off of Koutarou standing there on the stage.</p>

      <p>“All right. Next up is finally the appearance of the Silver Princess. Satomi-kun, could you call Sakuraba-san in?”</p>

      <p>“Okay, just wait a second.”</p>

      <p><em>Ah...</em></p>

      <p>As Koutarou jumped backstage again, Theia realized how she was staring at Koutarou and felt embarrassed. Blood rushed to her head, turning her whole face red. She could scarcely believe herself.</p>

      <p><em>Wh-What is happening to me...?</em></p>

      <p>Theia was completely confused. She was supposed to be admiring the Blue Knight, not Koutarou who was working as a stagehand. For Theia, this was the long-awaited debut of her beloved Blue Knight on stage, but she kept staring at Koutarou instead for some reason. It was an understandably confusing situation for her.</p>

      <p>“Sakuraba-senpai is coming up!” Koutarou called as he returned to the stage with Harumi.</p>

      <p>“P-Please go easy on me,” said Harumi who was standing next to Koutarou and wearing a pure white dress.</p>

      <p>With her delicate features, the dress suited her rather well. The silver tiara on her head was a lovely contrast to her beautiful black hair and more than made up for her normal lack of sparkle. And since she was brought up as an upper-class woman, there was a certain grace and elegance to the way she carried herself.</p>

      <p>“Ooohh...”</p>

      <p>As she stepped up on the stage, the other actors and crew all held their breath. Right now, she was the spitting image of the Silver Princess. A few people had objected to Harumi playing the lead role at first, but when they saw her now, there was no one left to dispute that she was perfect for the part.</p>

      <p>“S-Satomi-kun...”</p>

      <p>However, feeling uneasy with so many gazes locked on her, Harumi hid behind Koutarou’s large body. In order to calm her down, he tried to talk to her like everything was normal.</p>

      <p>“It’s all right, Sakuraba-senpai.”</p>

      <p>“But... My nerves get the better of me when I’m being watched like this...”</p>

      <p>“Everyone is looking at you because you’re beautiful, Senpai. Please have a little more confidence in yourself.”</p>

      <p>“Easier said than done...”</p>

      <p>Harumi looked down at her right hand. Her hand, neatly fitted in a pure white glove, was trembling. Koutarou grabbed her gloved hand and called out to Theia and the director in front of the stage.</p>

      <p>“President-san, Tulip, what scene should we start with?”</p>

      <p>“Hmm, I want to see her abilities. So maybe the scene where she sees the Blue Knight off. What do you think, Theiamillis-san?”</p>

      <p>“...I-I’m fine with that too.”</p>

      <p>Theia sounded distracted. She couldn’t take her eyes off of the hand Koutarou was holding.</p>

      <p>“I understand. This way, Sakuraba-senpai.”</p>

      <p>“O-Okay.”</p>

      <p>With her hand in his, Koutarou guided Harumi to her starting position for the scene in question. At this point, she had stopped trembling.</p>

      <p><em>Satomi-kun’s hand is so... warm...</em></p>

      <p>Now she was holding his hand in return.</p>

      <p>“This is your position. The scene is the one you’re best at. The one where you see the Blue Knight off before he heads into battle. You’ll do great if you just do it like we’ve been practicing.”</p>

      <p>Koutarou let go of Harumi’s hand once he got her into position. And once he did, Harumi immediately began feeling helpless again.</p>

      <p>“Good luck, Senpai!”</p>

      <p>Koutarou who had been helping her practice, however, wasn’t concerned at all. All she had to do was act the way she had with him. Even if she had some problems, there was still plenty of time left to practice. He had no reason to worry about Harumi.</p>

      <p>After casually leaving Harumi behind, he called out to Kenji who was nearby.</p>

      <p>“I’m counting on you, Mackenzie. On that stage, you’re all Sakuraba-senpai has to rely on.”</p>

      <p>“I know. I’ll make sure to take good care of her.”</p>

      <p>“You sure are diligent when it comes to girls.”</p>

      <p>“I’ll send you flying, you bastard.”</p>

      <p>“I guess I’ll just have to retreat before that happens!”</p>

      <p>After talking to Kenji, Koutarou turned to leave.</p>

      <p>“W-Wait! Are you leaving, Satomi-kun?”</p>

      <p>“Well, yeah. I’m just working the sets, so you can’t act with me in the way.”</p>

      <p>“Th-That’s true but...”</p>

      <p>Despite Harumi pitifully calling out for Koutarou, he simply jumped off the stage.</p>

      <p><em>You can do it, Sakuraba-senpai. Knock ’em dead.</em></p>

      <p>Koutarou had absolute confidence in Harumi’s acting. Which was why, even if she was unsure of herself, he wasn’t worried at all.</p>

      <p>“Now then, let’s begin!”</p>

      <p>With Koutarou off the stage, the club president signaled for the rehearsal to start. Koutarou made his way to Theia and the club president and looked up at the stage together with them. Just as he turned around, Kenji began with his opening line for the scene.</p>

      <p>“...Princess Alaia, it seems this is as far as I can go with you.”</p>

      <p>The words flowed sonorously from his lips, and compared to Koutarou, his voice was louder and easier on the ears. It was a voice well suited for plays. He finished his line without any hesitation or stumbling over a single word. Not only was his line recited well, but he made it look good too. Standing with an upright posture, he exuded the aura of a knight.</p>

      <p><em> That’s Mackenzie for you. He’s good at everything... And next up is Sakuraba-senpai. She takes one step forward and calls out the Blue Knight’s name...</em></p>

      <p>Koutarou had practiced these scenes with Harumi many times, so he knew what happened next without looking at the script. Harumi would look surprised and take a step towards him. She was going to try and stop the Blue Knight from saying his farewell.</p>

      <p>The high heels that Harumi was wearing clacked on the stage. She had taken a step forward like the stage directions called for.</p>

      <p><em>That’s it. Now she calls, “Layous-sama!”</em></p>

      <p>Koutarou recalled Harumi’s voice. She had practiced the line countless times, so it should be a breeze.</p>

      <p>“Um...”</p>

      <p>But Harumi hesitated. The line Koutarou was waiting to hear never left her lips.</p>

      <p>“Um, I...”</p>

      <p>Unable to say her line, Harumi stared blankly at Kenji.<br/><br/></p>

      <p>“I’m sorry, everybody...”</p>

      <p>Harumi bowed deeply with a pained expression on her face. She was clearly disappointed.</p>

      <p>“I’m sorry for holding you back...”</p>

      <p>In the end, Harumi was unable to act while on stage. She could struggle through reading her lines, but it was hard to call that acting.</p>

      <p>“But it’s strange... You did so well in the courtyard.”</p>

      <p>The drama club president tilted her head in a perplexed fashion. She had watched Koutarou and Harumi practice and had a decent understanding of Harumi’s acting ability. It was almost like she forgot everything once she got on the stage. The club president found it quite odd.</p>

      <p>“Admit it, Mackenzie. You did something to her.”</p>

      <p>“Of course not! Why would I? I finally got to talk to her!”</p>

      <p>Koutarou was also confused. After practicing with her, he knew better than anyone else just how well Harumi could act. That’s why he was convinced the reason must be something else.</p>

      <p>“This is a problem. Getting someone else to play the Silver Princess now would be hard.”</p>

      <p>“I’m sorry, Theiamillis-san.”</p>

      <p>Harumi felt even worse after what Theia said. She just wanted to shrink down and disappear. Fortunately, Koutarou stepped in between Theia and Harumi.</p>

      <p>“That won’t be necessary, Tulip! I know Senpai can do it!”</p>

      <p>“Satomi-kun...”</p>

      <p>Harumi felt cornered and was on the verge tears, but Koutarou stepping in helped her regain her composure.</p>

      <p>“But the obvious truth is that she can’t. It might be cruel, but we need a backup plan.”</p>

      <p>“It’ll be fine! Senpai only needs to get used to being on a stage! She’s only ever practiced in the courtyard or in the club room.”</p>

      <p>“Then what do you want us to do?”</p>

      <p>“She’s not used to it, so we just have to practice! We’ll keep at it until she can do it.”</p>

      <p>Koutarou approached Kenji as he explained his plan to Theia.</p>

      <p>“Strip, Mackenzie!”</p>

      <p>Koutarou started grabbing on Kenji’s clothes.</p>

      <p>“Wh-What?”</p>

      <p>“Just shut up and take off your outfit! I’ll practice with Senpai on the stage, so you guys go practice somewhere else!”</p>

      <p>Excited, Koutarou began forcibly taking off Kenji’s costume.</p>

      <p>“I get it, I get it! So get your hands off me! Don’t try to strip me down here!”</p>

      <p>“Theiamillis-san, what do you think?”</p>

      <p>“Just let them do as they please. She’s no use to us at the moment.”</p>

      <p>Koutarou shot Theia a piercing glare.</p>

      <p>“Don’t look down on her, Tulip. You don’t know how amazing Sakuraba-senpai is!”</p>

      <p>Koutarou’s sharp glance and fearless smile temporarily kept Theia from saying anything back.<br/><br/></p>

      <p>“...Princess Alaia, it seems this is as far as I can go with you.”</p>

      <p>“Layous-sama!”</p>

      <p>“Your Highness, please run away with your little sister. I’ll take on as many enemies as I can. Please use that opportunity to get as far away as possible.”</p>

      <p>“No, I can’t leave you behind, Layous-sama! You’re the only reason we were able to make it this far!”</p>

      <p>When Koutarou and Harumi began practicing, no one there could take their eyes off them. Mostly, they were focused on Harumi. In fact, Koutarou—who was delivering his lines in monotone fashion—was holding her back. And yet despite his shortcomings, everyone who happened to be there was mesmerized by the two of them.</p>

      <p>Harumi’s expressive voice effectively conveyed the Silver Princess’s desperate emotions, and even Koutarou stumbling over his lines made the Blue Knight sound earnest. The entire audience was wrapped up in the unique dynamic of their performance.</p>

      <p>“It was all thanks to the citizens of this country that you got this far. If it wasn’t for them, we never would have made it here.”</p>

      <p>“That’s not true, Layous-sama!”</p>

      <p>“And they all did it because of their love for you, Your Highness. So please, for the citizens and for yourself, please run away, Princess Alaia.”</p>

      <p>“Please wait, Layous-sama!”</p>

      <p>Only a few people in the room were calmly watching the two of them perform. Two of those people were the club president and Sanae, who had both seen them practice before. The third was Kiriha, who understood the subtleties of such feelings.</p>

      <p>“That’s right, <em>this</em> is Sakuraba-san’s acting.”</p>

      <p>The club president nodded repeatedly in approval. Relieved by the spectacle unfolding right before her eyes reaffirmed for her that she had made the right choice.</p>

      <p>“Watching them makes Koutarou look terrible.”</p>

      <p>“Don’t say that. Koutarou is the only one who can get Sakuraba Harumi to act like this.”</p>

      <p>Out of the excited crowd, only Sanae and Kiriha were able to keep their cool. Sanae had had a front row seat to all of Koutarou and Harumi’s practice leading up to this, and Kiriha could imagine what Harumi must be going through. To the two of them, the scene in front of them wasn’t all that surprising.</p>

      <p>“Well, well, this is quite a sight...”</p>

      <p>Kenji, who had changed into a jersey after getting his outfit stolen by Koutarou, nodded his head. He was starting to understand why Harumi had been chosen and why Koutarou had been so stubborn about insisting on it.</p>

      <p>“When I look at it like this, it really...”</p>

      <p><em>Kou aside, Sakuraba-san’s acting abilities certainly aren’t on a high school level. She’s...</em></p>

      <p>After the initial surprise, part of Kenji was genuinely amazed.</p>

      <p>“Sakuraba-senpai and Satomi-san are amazing... I’m happy my role is a horse’s rear... I couldn’t act like that...”</p>

      <p>Yurika, who was wearing brown tights and a horse’s hind legs, looked up at the stage and let out a sigh of relief. After briefly pursuing the role of the Silver Princess, she couldn’t help being glad that it was Harumi up on the stage now. Even if she’d gotten the role, Yurika never would have been able to play the part this well.</p>

      <p>“Your Highness, this is...”</p>

      <p>“Impossible... This is almost like the real...”</p>

      <p>But the most surprised of everyone there were the two from Forthorthe, Theia and Ruth. Theia in particular was extremely taken aback. She looked up at the two of them, completely awestruck.</p>

      <p>Other than the color of her hair, Harumi’s Silver Princess was exactly the way Theia had pictured her—delicate but determined. It was almost as if the princess Theia imagined had come to life and was standing on stage before them.</p>

      <p>But what surprised her even more was Koutarou. He was a terrible actor with flat delivery. He was a poor substitute for Kenji who was on stage just a moment ago. However, when he spoke his lines, something deep inside of Theia began screaming... telling her the Blue Knight was right in front of her.<br/><br/></p>

      <p>With Harumi back in top form, the club president called for the rehearsal to continue. But it didn’t last long.</p>

      <p>“Stop! Stop! What’s wrong, Sakuraba-san?”</p>

      <p>“I-I’m sorry, acting really is impossible for me...”</p>

      <p>“This is a problem. You were doing so well just a moment ago...”</p>

      <p>Harumi was, again, the reason for stopping. She had put on a splendid performance with Koutarou as the Blue Knight, but once they changed out Koutarou for someone else, her acting became awkward and sloppy again. And it wasn’t just Kenji either. It happened with anyone else they tried.</p>

      <p>“President-san, someone else really should take the role of the Silver Princess. There’s still time if we act now.”</p>

      <p>Feeling responsible for her failures, Harumi suggested stepping down from her role. But the club president shook her head.</p>

      <p>“Sakuraba-san, I couldn’t even think of replacing you after seeing what you can do. And it’s not just me. Everyone else feels the same way.”</p>

      <p>“But if we continue like this, I’ll just hold everyone else back...”</p>

      <p>“Therein lies the problem. But when you practice with Koutarou, you’re always able to act so well...”</p>

      <p>Neither the club president nor the other drama club members had any intention of giving up on Harumi as the Silver Princess. Instead, they were determined to solve the problem with her acting. But even so, they had been scratching their heads for a while now.</p>

      <p>“...Everyone, I have a suggestion.”</p>

      <p>It was Kiriha who finally raised her hand. When she was interacting with people other than Koutarou and the other invaders, she hid her true self, and helping out now would make a good impression.</p>

      <p>“Kurano-san, if you have an idea, please tell us. Frankly, I can’t come up with anything.”</p>

      <p>“Very well.” Kiriha nodded and began explaining. “Sakuraba-senpai can only act properly with Koutarou-kun, so why not go all out and give Koutarou-kun the role of the Blue Knight?”</p>

      <p>“Make Koutarou the Blue Knight?”</p>

      <p>The club president’s eyes opened wide at Kiriha’s suggestion, but Kiriha nodded and continued.</p>

      <p>“Yes. It’s a matter of efficiency. Would it be faster to get Sakuraba-senpai used to Kenji-kun, or to teach Koutarou-kun how to act? Personally, I think it would be faster for Koutarou-kun to learn how to act.”</p>

      <p>“I see. You do have a point... Ken-chan, Theiamillis-san, what do you think?”</p>

      <p>“I’m fine with it, honestly. I don’t want to give up my role, but if it’s between me and Sakuraba-senpai, I would pick Sakuraba-senpai without hesitation.”</p>

      <p>Kenji ultimately had no objections. Watching Harumi have such a hard time, he couldn’t help feeling like he was bullying her. Rather than let that continue, it would be a lot easier for him to let Koutarou do the hard work.</p>

      <p>“And Theiamillis-san?”</p>

      <p>“I...” Theia thought about it, but only for a moment. “I guess there’s no choice. Although I don’t like it, our only option is to let Koutarou play the Blue Knight in this situation.”</p>

      <p>Theia said things like “there’s no choice” and “I don’t like it,” but that was just her being stubborn. She had been thinking of letting Koutarou play the Blue Knight for a while now. While she had difficulties agreeing outright, she had no real reason to disagree.</p>

      <p>“All right. Then it’s decided. We’ll let Satomi-kun play the role of the Blue Knight!”</p>

      <p>“W-Wait a minute! I-I’m going to be the Blue Knight?!”</p>

      <p>Koutarou didn’t know how to respond. He was sure that Kenji or Theia would object, but surprisingly enough they had both agreed. The unexpected development completely confounded him.</p>

      <p>“That’s right. Since Sakuraba-san doesn’t want to do it with anyone but you, we’ll just have to use you.”</p>

      <p>“A-Are you serious?! You know I’m terrible at acting, right?!”</p>

      <p>“Oh, so you were aware of your terrible acting, Koutarou? That’ll make this easier.”</p>

      <p>“T-Tulip?”</p>

      <p>“There’s no reason to worry.”</p>

      <p>Theia’s eyes sparkled. Before anyone realized it, she was exuding a fiery determination.</p>

      <p>“I know the Blue Knight better than anyone else. I’ll turn you into a splendid Blue Knight before the cultural festival!”</p>

      <p>As it turned out, the drama club’s goal overlapped with Theia’s wishes. It gave her an excuse to act on her heart’s true desires.<br/><br/></p>

      <p>At that moment, somebody was secretly watching Theia.</p>

      <p>“Oh? To think they’re doing a play about the Blue Knight in a place like this... Theiamillis-san, this might be too eccentric even for you.”</p>

      <p>It was a cold, judgmental stare. Whoever it was was amazed that Theia would put on a play on what could be called Forthorthe’s soul on a backwater planet like this, much less be working together with its inferior life forms.</p>

      <p>“That said, this situation is convenient for me. Maybe I should be thanking you instead, Theiamillis-san...”</p>

      <p>The shadowy figure began laughing. It was a woman’s shrill, high-pitched laugh. In fact, it came from a girl just about Theia’s age.</p>

      <p>“With this, my victory is all but decided... Until then, just enjoy your little play.”</p>

      <p>The girl laughed once more before taking her eyes off Theia and turning around.</p>

      <p>“It’s not going to have a happy ending...”</p>

      <p>She then walked away, her horribly cruel and desolate laughter echoing behind her.<br/><br/></p>

      <p>Once it was decided that Koutarou would be playing the Blue Knight, the first thing Theia did was take him to the bridge of her battleship, the Blue Knight.</p>

      <p>“Tulip, what’s the point of bringing me to your battleship?”</p>

      <p>“Everything starts with appearance. We have the outfit that you’ll be wearing.”</p>

      <p>“Outfit?”</p>

      <p>“This way, Satomi-sama.”</p>

      <p>Following after Ruth in the lead, Koutarou walked shoulder to shoulder with Theia. Even cutting across the large bridge meant walking quite a ways.</p>

      <p>“I know you said outfit, but this is the flight deck of a battleship, right? Are there even any outfits here?”</p>

      <p>“You might think it unexpected, but we have exactly what you need. I’ll tell you the details once you’ve seen it. It will be difficult to explain otherwise.”</p>

      <p>“Okay...”</p>

      <p>Koutarou and Theia continued following after Ruth. She guided Koutarou to the back of the bridge, towards the corner with the commander’s seat and steering equipment. The only equipment truly needed to control the Blue Knight was concentrated in this part of the room. The other controls only concerned the Blue Knight’s function as a flagship.</p>

      <p>“Go ahead, Ruth.”</p>

      <p>“Yes, Your Highness.”</p>

      <p>As Ruth approached the operator’s seat, she touched the panel and activated something.</p>

      <p>“What’s about to happen?”</p>

      <p>“Well, just wait and see.”</p>

      <p>And just as Theia said that, a large hole opened up in the floor next to Koutarou.</p>

      <p>“...What?”</p>

      <p>And from the hole appeared a large person about two meters tall.</p>

      <p>“A person?”</p>

      <p>“It’s not a person. This is just armor.”</p>

      <p>“Armor...?”</p>

      <p>What Koutarou had thought was a man was actually a metallic blue set of armor. It was supported by several arms, almost like a suit on a hanger.</p>

      <p>“I want you to put this on.”</p>

      <p>“This? Well, it does have the right vibe...”</p>

      <p>Compared to the design of the Blue Knight’s interior, the armor was old-fashioned. It was similar to the armor knights wore in the Middle Ages.</p>

      <p>“Actually, this is a replica of the original Blue Knight’s armor. My mother designed it based on some ancient documents, so it should be pretty close to the real deal.”</p>

      <p>“So this is the Blue Knight’s armor?”</p>

      <p>Koutarou inspected the beautiful blue armor. It had such luster that when he brought his face close, he could see his reflection in it. Its curvature also resembled the weapons that Theia used. Although it had been designed for the practical purpose of defending the body, its beauty was like that of a work of art. Koutarou felt it had a similar splendor to beholding a masterpiece katana.</p>

      <p>“But why is this thing here? It feels horribly out of place.”</p>

      <p>The medieval looking armor certainly did not fit in with the futuristic bridge of the space battleship. It was like putting an antique in a modern building.</p>

      <p>“It’s my hobby.”</p>

      <p>“Hobby?!”</p>

      <p>Theia’s curt words caused Koutarou’s eyes to shoot open wide.</p>

      <p>“So, what? You’re just keeping it here for fun?”</p>

      <p>“Heh, that’s not what I mean. Explain it to him, Ruth.”</p>

      <p>“Yes.”</p>

      <p>Ruth moved up to the side of the armor and then turned to look at Koutarou.</p>

      <p>“Actually, this armor is one of the devices used for operating the ship,” she explained.</p>

      <p>“Do you mean it’s something like a steering wheel?”</p>

      <p>“That’s right. The Blue Knight is in the shape of a person and it is able to move its limbs freely. That’s what this suit of armor is for.”</p>

      <p>“I see... So how exactly do you use it?”</p>

      <p>Interested, Koutarou began studying the armor from various angles. Seeing that, Ruth revealed a small smile.</p>

      <p>“All you need to do is put it on and move. The armor will sense those movements, and the Blue Knight will replicate them.”</p>

      <p>“Oh, that’s convenient.”</p>

      <p>This was generally known a master/slave controller, where a device exerts unidirectional control over another. Every movement of the armor directly influenced the Blue Knight. Because of that, anyone could control the Blue Knight with hardly any training.</p>

      <p>“Back when you were on board for that part-time job, we were planning on having you use this to fight since you’re good at punching and kicking. Although, in the end, it wasn’t necessary.”</p>

      <p>“So that’s what it was...”</p>

      <p>Koutarou had been brought aboard the Blue Knight for a part-time job a while back when Theia and Ruth had detected another battleship near Earth. Already short-handed, instead of having Ruth or Theia wear the armor, using Koutarou who was worth his salt in a fight would be more efficient.</p>

      <p>“But this time, we’re only going to be using it as a costume.”</p>

      <p>Ruth touched the base of the arm holding up the armor, which then lowered it to the ground in front of Koutarou. It looked like two people were facing one another.</p>

      <p>“But Tulip, I don’t think I’ll be able to wear this heavy looking armor”</p>

      <p>Koutarou knocked on the breastplate. It felt like a solid, heavy metal. As he knocked on the armor, the heavy sound reverberated inside. Koutarou figured it must have weighed several dozen kilograms.</p>

      <p>“It’s okay. That is a powered suit of armor and it will follow your movements.”</p>

      <p>“I see. Then it should be fine.”</p>

      <p>Since the armor was a part of a battleship, it had additional functions that allowed it to double as a working spacesuit. It would be useless if it was too heavy to move in, so the entire suit was powered and controlled according to the wearer’s will so as not to get in their way.</p>

      <p>“This way please, Satomi-sama. We’ll adjust the armor to fit you.”</p>

      <p>“That sounds like a pain,” Koutarou said to Theia as he walked over to Ruth.</p>

      <p>“It’s not like it was custom-made for a specific person.”</p>

      <p>Theia smiled wryly and shrugged. Since the armor was used as an operating device, it could be adjusted so that anyone could wear it, but it would need to be readjusted each time the user changed.</p>

      <p>“Satomi-sama, please just stand up straight like that. This device will measure your physique and adjust the armor accordingly.”</p>

      <p>“Got it.”</p>

      <p>Koutarou straightened his posture as Ruth had asked. She then pointed something that looked like a small camera at him. It was the measuring device she had mentioned. The device let out a bleep in Ruth’s hands and the measurements were complete in an instant.</p>

      <p>“Oh?”</p>

      <p>But when Ruth peeked at the small monitor, she nearly gasped in surprise. She then lightly tapped the device.</p>

      <p>“What’s wrong, Ruth?”</p>

      <p>“Well... The armor won’t start its adjustments. It’s stuck on the default setting and won’t move.”</p>

      <p>Ruth was troubled. She’d successfully taken the measurements, but the armor wasn’t automatically adjusting its size.</p>

      <p>“Were there any errors?”</p>

      <p>“No, there were none reported.”</p>

      <p>Ruth suspected that the device was malfunctioning. She lightly tapped it again and rebooted it, but she still couldn’t find any errors.</p>

      <p>“Your Highness, I’ll do it over one more time. Satomi-sama, please let me try again.”</p>

      <p>“I don’t mind.”</p>

      <p>Ruth pointed the measuring device at Koutarou, and he once again stood up straight.</p>

      <p>“Here we go.”</p>

      <p>The measuring device bleeped once more, but the results were the same.</p>

      <p>“That’s strange... It’s functioning normally, but— Wait, could this be...?”</p>

      <p>“What is it, Ruth?”</p>

      <p>“It seems it isn’t malfunctioning after all.”</p>

      <p>Ruth left the monitor where she was standing and approached the armor. She then moved a crest with a dragon and a knight on it and pushed the button that was hidden underneath. The armor began venting compressed air and opened up. In order to put the armor on, this was how the user would get into it. Unlike the outside, the inside was outfitted with all kinds of machinery.</p>

      <p>“Satomi-sama, please enter here.”</p>

      <p>The inside of the armor had just enough space to fit a person, but it was padded so that the operator wouldn’t get uncomfortable.</p>

      <p>“I only need to wear it, right?”</p>

      <p>“Yes. Once you’ve entered, it will automatically close.”</p>

      <p>“Gotcha.”</p>

      <p>Koutarou obeyed Ruth and slid into the open space in the armor. When he did, he found that he fit inside perfectly. It wasn’t too large or too small. The size was just right.</p>

      <p>Shortly after, the motor started up and the armor sealed itself, returning to its original form. And in a matter of seconds, Koutarou was now wearing the blue armor.</p>

      <p>“I see... So that’s really what it was...”</p>

      <p>Ruth looked on in amazement as Koutarou donned the armor without any problems. She then nodded as if satisfied.</p>

      <p>“Is this by some random chance too, I wonder...?”</p>

      <p>“What’s wrong, Ruth? What do you mean?”</p>

      <p>Confused, Theia began asking questions. Only then did Ruth, who had been staring at Koutarou, return to her senses.</p>

      <p>“Well, Your Highness, I thought it was an error, but it seems that Satomi-sama has the exact same physique as the legendary Blue Knight.”</p>

      <p>“What?!”</p>

      <p>This time, it was Theia’s turn to be amazed.</p>

      <p>“That was why the measuring device didn’t automatically adjust the size.”</p>

      <p>The suit was a replication of the Blue Knight’s original armor. Because of that, the default size was modeled after the Blue Knight himself. By chance, Koutarou just so happened to have the exact same physique, meaning no adjustments were necessary.</p>

      <p>“I see, so the pleb is... That’s quite the coincidence...”</p>

      <p>Theia looked up at Koutarou at a loss for words. The man who had ended up getting the role of the Blue Knight also had the same physique he did, despite being from a different planet. It was an almost unbelievable coincidence.</p>

      <p>“Your Highness, it just might be...”</p>

      <p>“Yeah... N-No, what are you saying?! There’s no way that’s possible! This Neanderthal from some backwater planet couldn’t possibly be the second coming of the Blue Knight! It’s merely a coincidence!”</p>

      <p>Ever since their childhood, the Blue Knight had been the hero that Theia and Ruth had admired. Someone just having the same physique was enough for them to get excited.</p>

      <p>“Whoa! You were right! I feel so light! But it feels strange knowing that I’m wearing armor and not feeling any weight.”</p>

      <p>However, Koutarou was too busy admiring the armor to listen to Theia and Ruth’s fantasies.<br/><br/></p>

      <p>Once Koutarou put on the armor, the only thing waiting for him were days of Spartan education.</p>

      <p>“You fool! That’s wrong! The Blue Knight is nothing like that! Don’t slouch! Stand up straight! Raise your head! Lower your chin! Why is it so hard for you to walk straight forward?!”</p>

      <p>“Y-Yelling’s not going to change anything, you know...”</p>

      <p>Koutarou awkwardly walked across the large room as Theia continued to hound him. They were in a room on the Blue Knight that Theia and Ruth used to live in. The interior had been designed in an antique style, and it was hard to believe that such a luxurious room was part of a battleship. Moreover, the room was so large that it could fit room 106 in it several times over. It was certainly a display of royal wealth, making it crystal clear that Theia really was a princess.</p>

      <p>“We’re less than two weeks away from the cultural festival! We have no more time to spare! I’ll have you learn how to behave in a fashion worthy of a knight of Forthorthe by the end of the day!”</p>

      <p>“That’s unreasonable!”</p>

      <p>“I am utterly aware! But I must turn you into a knight that won’t bring shame upon me!”</p>

      <p>However, as regal as the setting was, Koutarou didn’t have the chance to admire it. He was far too busy being shouted at by Theia and training to behave in a way befitting her standards of nobility.</p>

      <p>“Why do we even need to go this far?! Shouldn’t we just practice what we need to for the play?!”</p>

      <p>“You fool! Acting comes from the heart! If you don’t know the ways of nobility, how could you ever act the part?! I’ll make you noble, both in mind and body! You’ll become my Blue Knight!”</p>

      <p>“Y-Your eyes aren’t laughing, Tulip!”</p>

      <p>“Not Tulip! Call me Princess Theiamillis! Don’t get distracted by conversation! And don’t shake the book balancing on top of your head! Walk straight forward without shaking it!”</p>

      <p>“Somebody save me!”</p>

      <p>“No one is coming to save you! You only have two choices! Become the Blue Knight or die trying!”</p>

      <p>“Ahhh! The Blue Knight craze is crushing me!”</p>

      <p>Theia had her reasons for what she was doing. Mostly, it was because she was dealing with Koutarou now. She hadn’t demanded this much from Kenji. If anyone else were playing the Blue Knight, she would have been settling for high school talent.</p>

      <p>But with Koutarou as the Blue Knight, things were different. Since she was planning on making Koutarou her vassal, she wanted him to truly behave in a manner worthy of the Blue Knight.</p>

      <p>“Craze, huh? You could call it that. The maidens of Forthorthe have obsessed over the Blue Knight for over two thousand years! You need to live up to their expectations!”</p>

      <p>“Waaaaah! This is a premeditated crime!”</p>

      <p>Koutarou desperately continued his training as Theia continued scolding him. For better or worse, their raw emotions clashed. It was an especially big deal for Theia, who had lived her life mostly restraining herself. It was very rare for her to reveal her true feelings to someone else.</p>

      <p>“Heehee, Her Highness and Satomi-sama seem to be having so much fun...”</p>

      <p>Knowing Theia’s situation, Ruth watched over the two of them with a smile. She was unbearably happy that Theia was able to show so much emotion. And she was also grateful to Koutarou, who made it possible.</p>

      <p><em>Her Highness said that Satomi-sama wasn’t the second coming of the Blue Knight, but... I see it differently. Satomi-sama may not be the second coming of the Blue Knight, but he is without a doubt Her Highness’s Blue Knight...</em></p>

      <p>To Ruth, the important part was that Theia was smiling. So even if the real Blue Knight were to appear, she wouldn’t have hesitated to choose Koutarou. For Theia and Ruth, Koutarou was gradually coming to mean more to them than the Blue Knight.<br/><br/></p>

      <p>While Theia was training Koutarou to become a knight on board the Blue Knight, room 106 was quite peaceful.</p>

      <p>“Yurika, Sanae, what do you want to eat for dinner?”</p>

      <p>“If you’re cooking, Kiriha-san, I want to eat pork miso soup and fried tofu!”</p>

      <p>“Yurika, isn’t that something an old man would pick?”</p>

      <p>It was just Yurika, Sanae, and Kiriha with her two haniwas in the apartment now. Without Koutarou, Theia, and Ruth, the place was a lot quieter.</p>

      <p>“An old man...? But Kiriha-san’s Japanese food is delicious!”</p>

      <p>“I can agree to that. Which means I’m fine with having what Yurika wants”</p>

      <p>“Understood.”</p>

      <p>With tonight’s menu decided, Kiriha returned to the kitchen. Watching her go, Yurika remembered something and clapped her hands together.</p>

      <p>“That’s right, I need to feed Hercules-chan!”</p>

      <p>“If we don’t hurry, Koutarou and the others will be back soon.”</p>

      <p>Yurika and Sanae walked over to the wardrobe. Both of them were taking care of the beetle that Yurika was keeping. Normally Koutarou would have joined in as well, but he hadn’t had the time to help lately.</p>

      <p>“It’s time for dinner, Hercules-chan!”</p>

      <p>As Yurika opened the wardrobe, they were met with the sight of the plastic habitat case. The sudden light startled the Hercules beetle and it slowly moved to hide in the shadow.</p>

      <p>“What are we going to give it today, Yurika?”</p>

      <p>“It was vegetables yesterday, so today we’ll give it its normal food.”</p>

      <p>“Roger.”</p>

      <p>Yurika picked up the case and Sanae retrieved the canister of beetle food. They convened at the tea table.</p>

      <p>“I’m sorry for always keeping you in such a dark place, Hercules-chan,” Yurika apologized as she removed the green lid to the habitat. “But it’s to protect you, so just hang on a while longer.”</p>

      <p>“Yurika, here you go”</p>

      <p>Sanae opened the canister and presented it to Yurika. The canister was full of fodder with a very distinct odor. At first Yurika had wrinkled her nose whenever she smelled it, but now she was perfectly fine with it.</p>

      <p>“Thank you. Here you go, Hercules-chan. It’s dinnertime.”</p>

      <p>As Yurika poured the fodder into the case, Hercules came out from hiding in the shadows. It was well aware that Yurika had put food into the case.</p>

      <p id="note2">“It’s almost hard to imagine that it’s related to the kanabun<sup><a epub:type="noteref" href="../Text/chapter1.xhtml#note2">2</a></sup>.”</p>

      <p>“What, really?!”</p>

      <p>“Yeah, Koutarou said so.”</p>

      <p>“To think the king of bugs has such a plain relative...”</p>

      <p>“It’s like realizing that a popular idol’s father is just some plain old man.”</p>

      <p>Yurika and Sanae stared into the case. As the two of them looked on, Hercules picked up a large piece of food and began eating. With its large appetite, it chewed away at the fodder.</p>

      <p>“It’s eating, it’s eating!”</p>

      <p>“Eat up and grow even bigger!”</p>

      <p>Yurika and Sanae smiled as they watched Hercules eat, but all of a sudden a shadow was cast over the plastic box.</p>

      <p>“That’s a pretty big horn.”</p>

      <p>“Huh?!”</p>

      <p>“Whoa!”</p>

      <p>The shadow belonged to Ruth. Before they knew it, she had returned to room 106 and was staring into the breeding case from the other side of the tea table.</p>

      <p>“R-Ruth-san?!”</p>

      <p>“Ruth, wh-when did you...?!”</p>

      <p>Yurika and Sanae froze when they realized what had happened.</p>

      <p><em>Th-This is it!</em></p>

      <p><em>I-It’s all over...</em></p>

      <p>Ruth harbored a great hostility towards beetles. And now that she had discovered Hercules, Yurika and Sanae prepared themselves for the worst. The image of Ruth tearing Hercules to pieces popped into their heads. They could only imagine the terrible fate that awaited Hercules.</p>

      <p>“So what do you call this bug?”</p>

      <p>However, contrary to their fears, Hercules wasn’t being torn apart. Ruth was only looking into the case with a curious expression.</p>

      <p>“Whaaat?!”</p>

      <p>“R-Ruth, y-you don’t know what this is?!”</p>

      <p>“No, it’s my first time seeing one...”</p>

      <p>To their surprise, Ruth didn’t actually know what beetles looked like. Despite knowing the name, she had never encountered the creature before.</p>

      <p>“Is there something wrong?”</p>

      <p>“N-No! Nothing at all!”</p>

      <p>“It’s nothing!”</p>

      <p>Yurika and Sanae quickly shook their heads in response to Ruth’s question.</p>

      <p><em>Score!</em></p>

      <p><em>Thank god!</em></p>

      <p>But while they were shaking their heads, they were secretly cheering on the inside.</p>

      <p>“So what kind of insect is this?”</p>

      <p>“Oh, that’s a—”</p>

      <p>After sighing in relief, Yurika was about to blurt out the truth. Sanae stopped her by smacking the back of her head.</p>

      <p>“A... what?”</p>

      <p>“A... um, a sort of kanabun! It’s a rare species known as the king of bugs, and its name is Hercules-chan!”</p>

      <p>Sanae may not have technically been lying, but she intentionally left out the most important part.</p>

      <p>“Kanabun? Hercules? It certainly has a bold appearance fitting of a king.”</p>

      <p>But Ruth had no idea. She just looked inside of the transparent case with admiration in her eyes. Once Ruth’s attention was no longer on them, Sanae whispered to Yurika.</p>

      <p>“Come on, Yurika! Give me a break, will you? Hercules-chan’s life is at stake here!”</p>

      <p>“I’m sorryyy! It wasn’t on purpose, I sweeear!”</p>

      <p>Yurika repeatedly apologized to Sanae in a hushed voice.</p>

      <p>“Wow, it’s eating! I guess when a bug gets this big, even its food gets bigger!”</p>

      <p>Fortunately, Ruth wasn’t paying attention to their conversation. Instead, she was studying Hercules with great interest.</p>

      <p>“H-Hurry up and go somewhere else, Ruth...”</p>

      <p>“Auuuuugh...”</p>

      <p>Even though Ruth didn’t know that she was looking at a beetle, Sanae and Yurika still felt like they were walking on eggshells.<br/><br/></p>

      <p>There was now less than one week left until the cultural festival. At this point, the drama club couldn’t simply wait for Koutarou’s acting to improve, so they’d moved into doing full-blown dress rehearsals.</p>

      <p>“J-Just one more week... Just one more week and I’ll be free from this life...”</p>

      <p>“Are you okay, Satomi-kun?”</p>

      <p>Having been put through the ringer by Theia’s Spartan-style education all this time, Koutarou looked completely gaunt. But as Harumi looked worried, he quickly pulled himself together again.</p>

      <p><em>Not good! I can’t make Sakuraba-senpai worry about me.</em></p>

      <p>Koutarou pumped himself up and smiled at Harumi.</p>

      <p>“I’m fine, Sakuraba-senpai.”</p>

      <p>“I’m glad...”</p>

      <p>Harumi was a little relieved to see him smile. She continued to gaze at him, but it was more out of admiration than worry.</p>

      <p><em>Satomi-kun must have practiced very hard...</em></p>

      <p>Koutarou was gaunt, but the way he moved was completely different from a week ago. His posture was straight, his walk was graceful, and his gestures were refined and beautiful. His very appearance when wearing his blue armor exuded the essence of the Blue Knight without any acting required.</p>

      <p><em>This feels strange somehow...</em></p>

      <p>Wearing the Silver Princess’s outfit and standing in front of Koutarou dressed as the Blue Knight, a mysterious emotion gripped Harumi. For some reason, she felt nostalgic. She felt like something about the two of them standing together like this was the way it was meant to be.</p>

      <p><em>I guess even I have some rather romantic fantasies I haven’t realized...</em></p>

      <p>At least, that’s how Harumi interpreted her feelings as she gazed at Koutarou. Just looking at him made her feel happy. But her eyes weren’t the only ones locked on Koutarou.</p>

      <p>“Damn you, pleb! You got it wrong again!”</p>

      <p>Theia, who had been teaching Koutarou the ways of a proper knight, was also staring him down. Unlike Harumi, she was dissatisfied with the way Koutarou was carrying himself. He had been making mistakes for a while now, and it was starting to irritate Theia.</p>

      <p>“Once we get back, we’ll get straight to training! Honestly, how many times do I have to tell you for you to understand?!”</p>

      <p>Theia was currently in her costume as the Golden Princess, the Silver Princess’s little sister. Her voluminous dress ruffled as she clenched the script in her hands. It looked like it could be torn apart at any moment.</p>

      <p>“I see. So that’s how you taught Koutarou manners in such a short amount of time.”</p>

      <p>Standing next to Theia, Kiriha let out an amused laugh. She was currently wearing ecclesiastical robes. Normally she was in charge of the wardrobe, but because she could do anything well, she had been given a role as of today. She would be playing the priestess who served as the Silver Princess’s advisor. Dressed the way she was, her laughter felt warmer than usual.</p>

      <p>“Her Highness is very obstinate when it comes to anything involving the Blue Knight, after all.”</p>

      <p>Ruth let out a laugh not unlike Kiriha’s. She was wearing armor similar to Koutarou’s. It was a ceremonial suit of armor that had been passed down through the Pardomshiha family for generations. Ruth was playing the role of the female knight in charge of protecting the Silver Princess and was using her family heirloom to look the part.</p>

      <p>“She’s more like a stalker. She sticks to Koutarou even when he goes to the toilet or gets in the bath.”</p>

      <p>Sanae smiled wryly as she shrugged. Today, she was wearing a fairy outfit. She had made it herself for a liberal arts exhibition several years ago. The quality was unremarkable, but as she flew around in it, she looked like a real fairy. Sanae was going to hang around Koutarou and help him out whenever he forgot his lines.</p>

      <p>“Watch your tongue. Not even I understand how men behave on the toilet!”</p>

      <p>“So you did follow him into the bathroom?”</p>

      <p>Shizuka was cheerfully smiling in her maid outfit. Her costume had been designed based on a Forthorthian style and it was a good fit for her regular calm, settled attitude. She was going to be playing the role of the Silver Princess’s maid.</p>

      <p>“Of course! That pleb doesn’t even know how to bathe properly!”</p>

      <p>“So that’s why Satomi-san’s been looking so happy when he’s heading to the toilet lately...”</p>

      <p>Yurika looked at Koutarou with pity in her eyes. However, Yurika in her brown tights and costume as the horse’s rear was the most pitiful of them all. She had gotten other roles to play, but she hadn’t gotten out of being the horse’s backside.</p>

      <p>“All right, everyone! Get in position! We’ll start the rehearsal from the top!” the stage director suddenly called from the stage.</p>

      <p>The preparations for the set had been completed.</p>

      <p>“It’s time.”</p>

      <p>“Wait for meee!”</p>

      <p>Sanae quickly floated over to Koutarou, and Yurika followed shortly after. The first scene was about the Silver Princess being chased by villains and then being saved by the Blue Knight who happened to pass by. The only residents of room 106 who had any part in this scene were Koutarou as the Blue Knight and the Yurika as the horse’s rear.</p>

      <p>“Well, I start from over there, Satomi-kun. I’ll see you later.”</p>

      <p>Harumi and Koutarou’s starting points were different, so she said goodbye to him for the time being and headed for the left side of the stage.</p>

      <p>“Okay, Senpai. Good luck!”</p>

      <p>“You too!”</p>

      <p>As Harumi walked off with a vibrant smile on her face, a small fairy and a horse’s rear appeared.</p>

      <p>“Hey, Koutarou.”</p>

      <p>“I’m counting on you two today.”</p>

      <p>“Yeah.”</p>

      <p>“Neigh!”</p>

      <p>After joining up with Koutarou, Sanae and Yurika showed off how motivated they were too. Yurika, who had the role of Bandit A later on, looked especially pumped up.</p>

      <p>“So what do I do first, Koutarou?”</p>

      <p>“Hmm... Well, start off by noting what mistakes I make, acting and line-wise. You’ll only really need to coach me on my lines once we get closer to the cultural festival.”</p>

      <p>“I got it. So I just need to remember the parts you got wrong, right?”</p>

      <p>Although Koutarou had gotten better, he still had Sanae assist him if he got something wrong. She had a better memory than he did and couldn’t be seen by normal people, so she was perfect for the job. On top of that, she also had various special tasks like secretly making his mantle flap in scenes with strong wind.</p>

      <p>“Yurika can’t see in front of her, so keep an eye out on where you’re going.”</p>

      <p>“It’s okay. I’ve practiced plenty!”</p>

      <p>Koutarou and the two girls climbed up to the stage where they would wait on standby until their parts came up.</p>

      <p>“...Huh?”</p>

      <p>Koutarou couldn’t help noticing an unfamiliar face passing him on the stairs to the stage.</p>

      <p><em>Who is that girl?</em></p>

      <p>Koutarou instinctively turned around to look at her. She had light blue hair and was wearing a black and white dress. On her face were antique-style glasses. He had never seen her before.</p>

      <p>“What’s wrong, Satomi-san?”</p>

      <p>“Oh, I was just wondering who that girl is. I’ve never seen her before.”</p>

      <p>“Really?”</p>

      <p>Yurika hadn’t seen anything with her costume in the way.</p>

      <p>“She was wearing a very elegant costume. Maybe she’s playing a noble or something.”</p>

      <p>“Yeah, maybe.”</p>

      <p>Theia’s play called for a large number of extras. Many of the roles had been filled with members of other clubs, so it wasn’t like Koutarou knew all of their faces. What Sanae said made sense, but when Koutarou looked back at the girl in question, she wasn’t anywhere to be seen. She had disappeared somewhere while Koutarou was talking to Yurika and Sanae.</p>

      <p><em>She’s gone? Oh well...</em></p>

      <p>Something about her bothered Koutarou, but he simply assumed she was an extra and figured he’d see her again later. For now, Koutarou had something important to do.</p>

      <p>“All right, let’s do this!”</p>

      <p>His only concern right now was to properly act out his part as the Blue Knight.<br/><br/></p>

      <p>“Wh-Who are you?!”</p>

      <p>“Please rest easy, Princess Alaia. I may be a wandering knight far from my homeland, but my loyalty for the royal families remains unchanged.”</p>

      <p>Harumi and Koutarou rehearsed their roles on the stage. Their acting was splendid, and Harumi in particular was dazzling.</p>

      <p><em>You really are amazing, Sakuraba-senpai... It’s like you’re on a completely different level. You’re like the real thing...</em></p>

      <p>Koutarou had the best appreciation for just how amazing she really was. They had been practicing together since the first day they went over their lines, so he was well aware of how serious and invested Harumi was. Facing her on stage, that became all the more apparent.</p>

      <p>All Koutarou had to do was follow her lead, and doing that naturally allowed him to assume his role as the Blue Knight. Since Harumi’s compelling acting was pulling him in, even if he stumbled on his lines, he could act without faltering.</p>

      <p>“But becoming our ally when we’ve lost our titles would make you an enemy of all Forthorthe!”</p>

      <p>“It might be just as you say, Princess Alaia.”</p>

      <p>“Then—”</p>

      <p>“But that doesn’t mean I have to betray my pride, my loyalty, and most importantly, the hearts of the citizens of Forthorthe. They are not my enemy. Besides, who considers you an enemy is not all that important. What really matters is who stands by you.”</p>

      <p>On her part, Harumi found Koutarou to be a reliable bastion on an otherwise scary stage.</p>

      <p><em>As long as I’m with Satomi-kun, I can do this... Besides, my heart is throbbing... With this feeling, I’m sure I can do it!</em></p>

      <p>Since Harumi was normally shy, just standing on stage was enough to make her feel anxious. But with Koutarou at her side, she was able to put that behind her and concentrate on acting.</p>

      <p><em>I know Satomi-kun will protect me...</em></p>

      <p>That sense of security gave Harumi the strength to act to the best of her ability, and that didn’t change in the scenes Koutarou wasn’t with her, either. Her belief that he would come to her rescue gave her all the strength she needed.</p>

      <p>“Your Highness... Satomi-sama and Sakuraba-sama are wonderful, aren’t they?”</p>

      <p>“...”</p>

      <p>Koutarou and Harumi’s acting was enough to satisfy even Theia and Ruth who had seen this kind of play countless times on Forthorthe.</p>

      <p>“The training you gave Satomi-sama is certainly showing, Your Highness.”</p>

      <p>“N-No, this is... not at that kind of...”</p>

      <p>In terms of acting, they certainly weren’t pros. The delivery of their lines was lacking and their movements were clumsy. But to Theia, they looked like the real Blue Knight and Silver Princess. Their acting evoked something that made her feel that way.</p>

      <p>“Then please tell me one thing.”</p>

      <p>“Anything you ask.”</p>

      <p>“That royal crest engraved on your breastplate... Your appearance, your mannerisms, and your honor indicate you are without a doubt a true knight of Forthorthe, but... I have no recollection of that crest on your armor and sword. Just where have you come from?”</p>

      <p>“...From an endless time and an immeasurable distance.”</p>

      <p>“But...”</p>

      <p>Theia had only one complaint, and it was something she had only picked up on precisely because the play was proceeding so smoothly.</p>

      <p><em>Why am I here? Why am I only watching? Why...</em></p>

      <p>“Why am I not the princess the Blue Knight is protecting...?”</p>

      <p>A small complaint leaked out from Theia’s lips. They were words born of her admiration of the Blue Knight since childhood. One day, she wanted to become a princess worthy of the Blue Knight. One day, she wanted to meet a wonderful knight just like him. And she wanted the two of them to work together to protect her mother, Elfaria.</p>

      <p>Those were the feelings that had made Theia who she was. And what supported her and those feelings all along was her powerful admiration for the Blue Knight. Yet that very admiration was being swayed as she watched Koutarou on stage. She was overcome with her own feelings once she admitted that the man on that stage was her Blue Knight.<br/><br/></p>

      <p>There was someone else just as shaken up as Theia was.</p>

      <p>“I-Impossible! Those words... They’re the same...?”</p>

      <p>It was Kiriha. Her normally calm, confident, and gentle smile had been replaced with an expression of great surprise. The cause was the line Koutarou had just recited. She had heard those words before.</p>

      <p>“But why is the Blue Knight saying those words...?”</p>

      <p>Kiriha quickly flipped through the script she had gotten today. She hadn’t misheard him. It was definitely one of the Blue Knight’s lines.</p>

      <p>“That’s... Why on earth...?”</p>

      <p>Stupefied, she thrust her right hand into her pocket and pulled out a card. It was a memento of her first love from ten years ago. As she looked at the card, she recalled her past.</p>

      <p>“Onii-chan, where did you come from?”</p>

      <p>“Hmm, that would be hard to explain but... let’s just say from an endless time and an immeasurable distance.”</p>

      <p>“Ahahaha! You’re trying too hard to be cool, Onii-chan.”</p>

      <p>“Actually, I was just thinking the same thing.”</p>

      <p>At the time, Kiriha was young. And a long time had passed since then, so she could only vaguely remember what her first love looked like. She must have known his name, but she could only remember calling him Onii-chan.</p>

      <p>But she remembered his words with certainty. When she asked him where he was from, he answered, “From an endless time and an immeasurable distance.” It left such an impression on her that even now she could clearly remember it.</p>

      <p><em>Is there some reason? No, that can’t be... There’s no reason for that line to be spoken on both Forthorthe and on Earth, which means it’s a coincidence, but...</em></p>

      <p>Kiriha was well aware that it was most likely just a coincidence, but it was an emotionally weighty one. It involved one of her most precious memories, so it wasn’t a matter that could simply be brushed off. Coincidence or not.</p>

      <p><em>I should make sure to ask Theia-dono more specifically about it later...</em></p>

      <p>Once Kiriha made up her mind, she began looking around for Theia. With her long, beautiful golden hair and pure white dress, she was easy to find. She was standing next to a tall light and ardently looking up at the stage.</p>

      <p><em>It seems that just like me, Theia-dono has some strong feelings regarding this play...</em></p>

      <p>As Kiriha unconsciously flashed a small smile, the tall light next to Theia began to tip over.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert5">
    <img alt="insert5" class="insert" src="../Images/Insert5.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter41">
    <div class="main">
      <p>“Oh no!” Seeing the light starting to lean, Kiriha didn’t hesitate to yell out. “Theia-dono! Get away from there! The light is falling!”</p>

      <p>The light came crashing down towards Theia.<br/><br/></p>

      <p>“Theia-dono! Get away from there! The light is falling!”</p>

      <p>“Wh-What?!”</p>

      <p>Kiriha’s voiced reached Theia ears, but she was too focused on the stage. She just froze in surprise.</p>

      <p>“Your Highness, the light is falling down!”</p>

      <p>Theia finally turned towards the light as Ruth shouted to her.</p>

      <p>“Wha—?!”</p>

      <p>The light picked up speed and came straight for her. Since it was a large fixture intended for illuminating the stage, getting hit by it would mean serious injury.</p>

      <p><em>I won’t make it!</em></p>

      <p>Theia tried to dodge out of the way, but the light was already coming down on her and she had no time to get out of the way.</p>

      <p>“Kyaaaaah!”</p>

      <p>The only thing she could do was cry out, shut her eyes tightly, and brace herself.</p>

      <p>There was a loud sound and a heavy impact. Theia was thrown to the gym floor, and she lost consciousness for a second. She had no idea what had just happened.</p>

      <p>“Your Highness! Satomi-sama!”</p>

      <p>What brought Theia back to her senses was Ruth’s distressed voice.</p>

      <p><em>Did she say Satomi-sama...?</em></p>

      <p>As Theia puzzled over why Ruth had called out Koutarou’s name, she felt a drop of water hit her face.</p>

      <p><em>What is this...?</em></p>

      <p>Finding it strange, Theia finally opened her eyes, but all she could see was something blue.</p>

      <p>“What...?”</p>

      <p>Before she could realize what it was, another drop of water fell on her face. When she reactively looked up in the direction the water had come from, she saw a face she never expected to see.</p>

      <p>“Are you hurt anywhere, Your Highness?”</p>

      <p>What had hit her face wasn’t water, but blood. The moment she felt the warm liquid drip onto her face again, her clouded mind suddenly cleared and she recalled what had happened.</p>

      <p>“...B-Blue Knight-sama...?”</p>

      <p><em>H-He protected me...? Blue Knight-sama came to save me...?</em></p>

      <p>Now all she could do was stare up at the person over top of her.</p>

      <p>“Good. It seems you are unhurt, Princess Theiamillis.”</p>

      <p>It was none other than Koutarou who had blocked the falling light and protected her with his own body.<br/><br/></p>

      <p>When Kiriha had shouted, Koutarou just happened to be looking in Theia’s direction. It was thanks to the stage directions in the script, but because of that, he noticed the light falling down on Theia.</p>

      <p><em>Tulip!</em></p>

      <p>In that instant, Koutarou dashed for her on reflex. He had no plan and no chance of success, but his only thought was that he had to save her. Koutarou dashed off the stage and made a jump for Theia.</p>

      <p>As soon as he grabbed her, the light came crashing down on them. It hit Koutarou with violent force and a shrill metallic clanging rang out. Fortunately, since he was wearing the Blue Knight’s armor, he was somehow able to withstand the hit. In fact, he was practically unharmed apart from the small cut on his forehead.</p>

      <p>“Are you hurt anywhere, Your Highness?”</p>

      <p>Because of that, he still had enough wits about him to crack a joke.</p>

      <p>Koutarou had been able to protect Theia because of two lucky things. The first was that he’d been looking in the right direction at the right time, and the second was that he was wearing the Blue Knight’s armor.</p>

      <p>If he hadn’t seen the falling light, he would’ve had no way of saving her, and if he hadn’t been wearing the Blue Knight’s armor, he wouldn’t have made it to her in time. He’d only made it because the armor amplified his jumping powers, and both he and Theia had escaped serious harm thanks to the armor’s protection.</p>

      <p>“...B-Blue Knight-sama...?”</p>

      <p>“Good. It seems you are unhurt, Princess Theiamillis.”</p>

      <p><em>Phew, she’s safe...</em></p>

      <p>Once Koutarou had confirmed that Theia—who he was holding on to with both arms—was all right, he let out a sigh of relief. He then moved his right hand and put it on the light on his back.</p>

      <p>“There we go.”</p>

      <p>Koutarou only had to put a little bit of strength into it in order to easily push the light off of him while in the armor. As the light hit the ground, Koutarou and Theia were finally free from danger.</p>

      <p>“Phew...”</p>

      <p>Koutarou let out another sigh of relief and stood up while still embracing Theia. She seemed to be in shock even after he stood up with her. She was staring at him, perfectly speechless.</p>

      <p>“Tulip, can you stand?”</p>

      <p>“Ah...”</p>

      <p><em>“Tulip.”</em></p>

      <p>As soon as Koutarou said that word, Theia twitched and shook off her stupor. She blinked a couple of times before looking around and confirming her situation.</p>

      <p>“I-I’m fine. I can stand.”</p>

      <p>Theia’s face turned red as she nodded her head. Once she realized Koutarou was embracing her, she was quite embarrassed.</p>

      <p>“Then I’m going to let go now, okay?”</p>

      <p>“Yeah...”</p>

      <p>But once Koutarou set Theia free, she noticed the line of blood along Koutarou’s cheek. From the cut on his forehead, blood was running down his cheek and dripping from his chin to the floor.</p>

      <p><em>Blue Knight-sama is injured...</em></p>

      <p>Seeing Koutarou’s injury, Theia hurriedly searched through her pocket and pulled out a handkerchief. She then stretched herself to reach upward and hold it to his forehead.</p>

      <p>“Hmm? Wh-What is this, Tulip?”</p>

      <p>Koutarou wasn’t aware of his own injury, so he didn’t understand what Theia was doing. He stepped back and asked for an explanation.</p>

      <p>“W-Wait, Blue Knight-sama. Your forehead is wounded!”</p>

      <p>“Wounded...?”</p>

      <p>It wasn’t until Theia mentioned it that Koutarou noticed the pain from his forehead. When he touched it, he felt something wet. Theia then pushed his hand away and put her handkerchief on his cut once more.</p>

      <p>“Calm down, Tulip. It’s not that big of a deal.”</p>

      <p>“The fact that Blue Knight-sama was injured for my sake is a big deal!”</p>

      <p>Theia was currently confusing Koutarou for the Blue Knight.</p>

      <p>“Just calm down. I’m not the real Blue Knight.”</p>

      <p>Thinking it was from shock, Koutarou tried to calm Theia down.</p>

      <p>“Ah...”</p>

      <p><em>“I’m not the real Blue Knight.”</em></p>

      <p>When Theia heard those words, she stopped moving for a moment. That quickly changed, but her face turned red.</p>

      <p>“...S-Sorry. It seems I panicked a little.”</p>

      <p>“I understand. But you have a rather cute side to you too.”</p>

      <p>Theia had panicked because she thought that she had allowed the Blue Knight to get hurt. It was quite different from how she usually thought of Koutarou.</p>

      <p>“...N-Normally I would hit you, but I’ll forgive you today.”</p>

      <p>“Thank you, Your Highness.”</p>

      <p>The situation being what it was, Theia was more modest than usual. Koutarou couldn’t find it in him to tease her any more than he already had, and obediently said his thanks.</p>

      <p>“No, that’s my line.” Theia shook her head. “Well done, Koutarou.”</p>

      <p>Even though they were words of gratitude, Theia still managed to say them as if she was talking down to him.</p>

      <p>“Y-Yeah...”</p>

      <p>But this time, Koutarou didn’t have any complaints about it.<br/><br/></p>

      <p>“Satomi-sama, let’s go to the nurse’s office.”</p>

      <p>“I-I’m fine. This is nothing.”</p>

      <p>“You have a head injury. Just give it up and go.”</p>

      <p>“But...”</p>

      <p>“If you don’t go, neither will I.”</p>

      <p>“Fine, I get it. Jeez...”</p>

      <p>Accompanied by Ruth, Koutarou and Theia headed towards the gym’s exit. Although Koutarou hated going places like the hospital or the nurse’s office, he quickly gave up and left the gym with the two girls.</p>

      <p>“Thank god Satomi-kun is okay...”</p>

      <p>Seeing the three of them off, Harumi let out a sigh of relief. Hearing that Koutarou had been hurt, she had a small panic attack. However, after learning that Koutarou was fine, she was able to regain her composure. And she wasn’t alone. Everyone in the gym was starting to calm down after the incident too. The frozen atmosphere slowly recovered and smiles returned to the people in the gym.</p>

      <p>“Yeah, thank god.”</p>

      <p>Standing next to Harumi, Kiriha nodded. However, unlike the other people around her, Kiriha’s expression was serious, although Harumi was too focused on Koutarou and the others to notice.</p>

      <p>“What’s wrong, Kiriha? You’re making a scary face...”</p>

      <p>Instead, it was Sanae who was floating nearby that noticed Kiriha’s expression. Kiriha glanced up at Sanae and then indicated one of the legs on the fallen light.</p>

      <p>“Look there, Sanae.”</p>

      <p>“What? Is there something wrong with this broken leg?”</p>

      <p>Kiriha was pointing at one of the three legs of the light. It had fallen over because the leg was broken.</p>

      <p>“Take a good look at that break. It’s far too clean to have just broken off on its own.”</p>

      <p>“You’re right. This is almost like— Wait, you mean...?!”</p>

      <p>Sanae then realized what Kiriha was implying. Her eyes shot open wide in surprise, and Kiriha nodded at her as if to confirm her suspicions.</p>

      <p>“That’s right. It looks like we have a serious problem on our hands.”</p>

      <p><em>Theia-dono mentioned that an unidentified spaceship had appeared, but...</em></p>

      <p>The unidentified spaceship. The light suddenly collapsing on Theia. The suspiciously broken leg. Adding everything up, Kiriha reached the conclusion that a new enemy had appeared.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter5">
    <div class="main">
      <h1>At the Dance Party</h1>

      <h2>Sunday, November 1st</h2>

      <p>“Hmm, it seems your injuries have completely healed.”</p>

      <p>“That’s what I keep telling you.”</p>

      <p>“I can’t trust you.”</p>

      <p>A week had passed since Koutarou had cut his forehead saving Theia. By now, the wound had completely closed and it was hardly noticeable.</p>

      <p>“Besides, your face is yours, but at the same time, it’s not. Tomorrow is the big day, so it’s only natural that I’m worried about your face.”</p>

      <p>“...You’re just worried about the Blue Knight, not me, aren’t you?”</p>

      <p>“Is that so wrong?”</p>

      <p>“No, I think that’s just like you, Tulip.”</p>

      <p>“Heh!”</p>

      <p>Theia let out a satisfied laugh and began walking next to Koutarou with light steps.</p>

      <p><em>So the pleb’s all healed up, I see...</em></p>

      <p>But in reality, to Theia, the line had become blurry between the two. Not even she herself was sure if she was truly worried about Koutarou or the Blue Knight.</p>

      <p>“Anyway, with this, the cultural festival tomorrow should go smoothly.”</p>

      <p>“Hey, Tulip, you should worry about yourself instead of the cultural festival. That Clan girl is targeting you, right?”</p>

      <p>In the week following the incident with the light fixture, Theia had been put in several dangerous situations. All of them had been attacks disguised as accidents. Even more alarming was the fact that there seemed to be no evidence of the culprit left behind. The only reason Theia hadn’t been hurt yet was thanks her athletic abilities and the fact that she had Koutarou and the others watching out for her.</p>

      <p>“What? Are you worried about me?”</p>

      <p>“A little, yes. Seeing you get hurt or die would leave a behind a bad taste in my mouth. Besides, Ruth would cry.”</p>

      <p>“But I won’t run and hide. It’s not my style.”</p>

      <p>Koutarou was worried about further attacks, but Theia just smiled fearlessly.</p>

      <p>“If you keep saying things like that, a light falling on top of you will be the least of your problems.”</p>

      <p>“It’s all right. It’s not just bravado. As long as I’m aware that I’m going up against Clan, it’ll be fine.”</p>

      <p>“What do you mean?”</p>

      <p>Koutarou figured that Theia was simply being stubborn, but her reply surprised him.</p>

      <p>“Clan has clearly studied me and my routines, but she won’t attack in a way that would leave any evidence behind or reveal her identity as the culprit.”</p>

      <p>If something were to happen to Theia, there would definitely be an investigation to see if Clan was involved. Theia was on Earth for her trial, but Clan who was here without a reason to be was quite suspicious. If any evidence of her interference was discovered, she would lose her right to the throne. Theia was certain Clan would take that into account even as she tried to get in the way of Theia’s trial.</p>

      <p>“Which means that as long as I act in a way that Clan hasn’t seen before, I’ll be safe.”</p>

      <p>“Is that really how it works...?”</p>

      <p>“Yes, it is. The reason it took her so long to make a move is because of her preliminary investigation and deliberate preparations. Think about it. It’s already been two months since she came to Earth.”</p>

      <p>“Now that you mention it...”</p>

      <p>The light bulb finally came on for Koutarou. It had already been two months since the Blue Knight detected the unidentified spaceship, so what had that ship been doing all this time? Surely Clan and her crew must have been scouting in order to attack Theia. Once he thought about it, it started to make sense.</p>

      <p>Clan’s lack of firepower, her personality, and the underhanded ways Theia had been attacked... Connecting the dots, Koutarou agreed that Theia was most likely right in her assumptions.</p>

      <p>“That’s why if I go to school together with you, nothing will happen. Up until now, that’s something I’ve never done.”</p>

      <p>“But still...”</p>

      <p>Koutarou was still uneasy, largely because he didn’t really know what kind of person Clan was. He didn’t know her personally, so he had no idea how she would attack Theia next.</p>

      <p><em>The pleb is worried about me...</em></p>

      <p>Ever since they met, Koutarou had rejected the idea of becoming Theia’s vassal. But now that Theia was in danger, he couldn’t help worrying.</p>

      <p><em>He’s not worried about Princess Theiamillis, but rather me personally. He’s worried about Tulip, so to say...</em></p>

      <p>Despite his denial of any sort of master/servant relationship, he was still concerned for her well-being. That was a first for Theia who had been born into royalty, but she didn’t dislike it.</p>

      <p>“If you’re so worried, then why don’t you protect me?” Theia flashed a strangely happily smile. “Isn’t that your duty as a knight, Blue Knight-sama?”</p>

      <p>“Don’t just treat me like the Blue Knight whenever it’s convenient for you...”</p>

      <p>Unlike Theia who looked quite pleased, Koutarou slumped his shoulders and sighed.</p>

      <p>“Is that so wrong?” she asked, her lips curling into a mischievous grin.</p>

      <p>“No, I think that’s just like you, Tulip.”</p>

      <p>“Heh!”</p>

      <p>But the mischievous look on her face lasted only for a moment, quickly fading back into her cheerful smile.</p>

      <p>“Work as hard as you can. Guarding a princess is a knight’s highest honor.”</p>

      <p>“...”</p>

      <p><em>Tulip...?</em></p>

      <p>In that moment, her smile was so beautiful that Koutarou did indeed feel a strong desire to protect her.<br/><br/></p>

      <p>On the eve of the last day before the cultural festival, there was a party. In order to be done in time for it, the drama club finished their final rehearsal earlier in the evening.</p>

      <p>“Good work, everyone. Tomorrow’s the big day, so don’t party too hard tonight.”</p>

      <p>As the drama club president declared the official end of rehearsal, a second wind seemed to sweep through the gym.</p>

      <p>“All right! The cultural festival is finally starting!”</p>

      <p>“Cosplay cafe! Cosplay cafe!”</p>

      <p>“Oh, that reminds me. Apparently the choral club is doing a butler cafe.”</p>

      <p>“Seriously?! But now that you mention it, they could just use the suits they wear during concerts.”</p>

      <p>“I wanna go see the science club’s annual haunted house.”</p>

      <p>With their long, hard practice finally over, everyone was excited for the evening’s party and tomorrow’s cultural festival.</p>

      <p>“Phew, it’s finally over...”</p>

      <p>Koutarou, who had been scolded by Theia up until the very last rehearsal, stretched his body after the club president dismissed them all for the evening. As he did, his stiff joints cracked. Although the armor fit him, it was still tight.</p>

      <p>“Koutarou, use this.”</p>

      <p>Kiriha, wearing her priestess costume, presented Koutarou with a towel.</p>

      <p>“Thanks, Kiriha-san.”</p>

      <p>“Let me get that for you,” offered Sanae.</p>

      <p>Dressed in her fairy outfit, she flew over to Kiriha and took the towel. To a bystander, it would have looked like a towel was floating on its own, but Sanae skillfully avoided being seen by anyone as she carried the towel to Koutarou.</p>

      <p>“Here you go, Koutarou.”</p>

      <p>“Thank you, Sanae.”</p>

      <p>“Heehee!”</p>

      <p>As Koutarou took the towel from Sanae, he patted her on the head. When he did, the charm around her neck began swaying. It didn’t exactly go with her fairy outfit, but Sanae didn’t seem to mind.</p>

      <p>“I’m starting to feel alive again. I can finally take a load off.”</p>

      <p>“You sound like an old man...”</p>

      <p>As Koutarou wiped his face with the towel, Kenji happened to pass by. He had already taken off his soldier’s outfit and changed into his school uniform.</p>

      <p>“Hey, Mackenzie.”</p>

      <p>“Kou, you’re the Blue Knight now, so can’t you at least act like it while you’re in costume?”</p>

      <p>“Shut up! The club president said rehearsal’s over, so it’s over!”</p>

      <p>“Sure, sure.”</p>

      <p>Kenji shrugged and smiled wryly as Koutarou shouted at him. While looking at Koutarou, Kenji began examining his armor.</p>

      <p>“But the armor suits you. You’re really starting to look like the Blue Knight.”</p>

      <p>“I better. If I didn’t, all that time Tulip spent coaching me would have been for nothing.”</p>

      <p>“From what I hear, she gave you a pretty hard time.”</p>

      <p>“You bet she did. If I told you about it, we’d both be in tears by the end. But I managed to suffer through it. I don’t think anything can hold me back now.”</p>

      <p>Koutarou remembered every painful exercise he’d been through in the past two weeks. Correcting his posture. Fixing the way he walked. His way with words. His manners. Even sword fighting had all been part of Theia’s unbelievably broad education for knights. And every time he made a mistake, a bamboo sword would come flying at him. Other than the bathroom, nowhere was safe.</p>

      <p>“I-I’m sorry, Satomi-kun. It’s all because I’m so unreliable...”</p>

      <p>Before he knew it, Harumi was standing next to Koutarou. Hearing him complain, she shrunk back and looked apologetic. She felt like it was her fault Koutarou had to go through all of that.</p>

      <p>“It’s not your fault, Senpai. Besides, I was the one who recommended you for the role of the Silver Princess.”</p>

      <p>“That might be true... But if I had just been able to keep it together, Matsudaira-san could have stayed the Blue Knight...”</p>

      <p>“If Kou’s complaining about the training, I certainly wouldn’t have enjoyed it, so I don’t mind at all.”</p>

      <p>Although Kenji was disappointed that he had to give up the role of the Blue Knight, he didn’t regret a thing after seeing how Koutarou looked after his training. He had no way of knowing that Theia most likely wouldn’t have gone to such lengths if he had stayed on as the Blue Knight. She only went overboard because she was dealing with Koutarou, but the only one who knew that was Theia herself.</p>

      <p>“Besides, if I had to play the Blue Knight on the same level as our Silver Princess here, I’d need more time to get into the role. With the short amount of time we had, it was probably best to force Kou to get on this level.”</p>

      <p>“...I can’t tell if you’re praising me or making fun of me.”</p>

      <p>“Idiot, I’m praising you for once.”</p>

      <p>“Heehee...”</p>

      <p>Harumi giggled a little at Koutarou and Kenji’s back and forth.</p>

      <p><em>Thank god...</em></p>

      <p>Koutarou let out a sigh of relief after Harumi finally started to smile.</p>

      <p>“What are you doing over here, Satomi Koutarou?”</p>

      <p>“What?”</p>

      <p>However, Koutarou’s relief was short-lived. After finishing her meeting with the club president, Theia came running and grabbed his arm.</p>

      <p>“What do you mean, ‘what’? You’re staying behind for some special training!”</p>

      <p>“Whaaaaat?!”</p>

      <p>Theia tried to drag him towards the stage, but Koutarou resisted. He wanted to go to the party.</p>

      <p>“W-Wait, Tulip! I’m going to the party! I’m going to have fun with everyoneee!”</p>

      <p>“Not happening! If you have enough spare time to party, you have time to practice the ways of knighthood! You still have a long way to go before your public debut!”</p>

      <p>“Noooo! I don’t want a debut!”</p>

      <p>But Theia ignored his pleading and headed for the stage, forcibly dragging Koutarou along with her.</p>

      <p>“Satomi-kun...”</p>

      <p>“My condolences.”</p>

      <p>Harumi watched on anxiously while Kenji cheerfully saw them off.</p>

      <p>“Man... Theia sure is selfish.”</p>

      <p>“There’s no need to make that kind of face, Sanae.”</p>

      <p>Sanae, who was all ready to go play with Koutarou, was pouting. Kiriha smiled at her calmly.</p>

      <p>“Koutarou might be protesting, but the truth is that he wants to train.”</p>

      <p>“What do you mean?”</p>

      <p>“Considering the difference in strength between Theia and Koutarou, there’s no way he would let her drag him along if he didn’t really want to go. He’s even wearing that contraption of a suit of armor. There’s no doubt he could get away if he wanted to.”</p>

      <p>“...Oh.”</p>

      <p>Realizing what Kiriha said was true, Sanae found herself frustrated with Koutarou.</p>

      <p><em>Koutarou is always so reckless, but he’s weirdly kind sometimes... But he only needs to be nice to me!</em></p>

      <p>But it wasn’t just frustration. Her feelings were complex. She knew better than anyone that this was one of Koutarou’s good points.<br/><br/></p>

      <p>After Harumi had finished changing and was preparing to go home, Koutarou and Theia were still practicing on the stage.</p>

      <p>“Pleb, your posture is slouching! Don’t just focus on your sword!”</p>

      <p>“It’s not that easy to pull out a sword and keep a straight posture!”</p>

      <p>“I don’t want to hear your excuses! If you have time to complain, fix your grip on the sword!”</p>

      <p>Their energetic voices reached Harumi as she passed by outside of the gym.</p>

      <p>“Satomi-kun is still at it...”</p>

      <p>The sun was already dipping on the horizon, cloaking the area in twilight. Since the entrance to the gym was secluded, it was especially dark. Harumi stood there all alone in that lonely place. She could hear the commotion from the party in the schoolyard. There was someone talking over the loudspeaker, music, and the cheerful shouts of her classmates. She could hear it all clearly even from the gym.</p>

      <p>“You bastard! Don’t get so full of yourself!”</p>

      <p>“Watch your tongue! Is that how you speak to a princess?!”</p>

      <p>But all Harumi was listening to was Koutarou and Theia. Nothing else registered.</p>

      <p>“Just remember you’re gonna regret this when it’s all over, Princess Theiamillis!”</p>

      <p>“I already forgot!”</p>

      <p>“Curse you! Let’s take this outside!”</p>

      <p><em>Satomi-kun... Theiamillis-san...</em></p>

      <p>Harumi had stopped by to help Koutarou with his practice, but when she put her hand on the gym door to enter, her determination faltered. She was discouraged by the sound of Koutarou and Theia arguing.</p>

      <p>“Calm down, pleb. Once the play is over tomorrow, I’ll make it up to you.”</p>

      <p>“Now you said that! You better be good for your word!”</p>

      <p>“Of course! I’m not that twisted. I’ll give you a reward worthy of your actions. I swear on my name.”</p>

      <p>“All right, fine... So where were we?”</p>

      <p>Koutarou and Theia’s practice was completely different from Koutarou and Harumi’s. The Koutarou with Theia now was energetic and speaking his mind without holding back. Compared to that, he seemed to be restraining himself when he was with Harumi.</p>

      <p><em>Satomi-kun is treating Theiamillis-san like a good friend, but I’m... literally getting treated like a princess...</em></p>

      <p>Harumi understood that Koutarou cherished her in a particular way. But when she saw Koutarou and Theia together, she felt like she was one or two steps behind. Even though they were both supposed to be Koutarou’s friends, it almost felt like she was getting some kind of lip service instead.</p>

      <p><em>When we ran into each other on the beach, maybe the girl he was fighting with was Theiamillis-san...?</em></p>

      <p>As she recalled their encounter on the seashore, she began feeling very uneasy. At the time, Koutarou was worried about a change in his relationship with someone. Harumi was beginning to wonder if that someone was Theia.</p>

      <p><em>If that really is the case, I have no way of winning... Satomi-kun would never treat me like that...</em></p>

      <p>Those thoughts were what kept her from mustering the courage to open the door.</p>

      <p>“Wahahaha! Stand up straight there, Tulip. Y-You’re far too short to play the Silver Princess! Gyahahaha!”</p>

      <p>“Sh-Shut up, pleb! How could you say that to a lady?! Where are your manners?!”</p>

      <p>“S-Sorry, heh heh... Why don’t you try standing on this cardboard box instead? Hahahaha!”</p>

      <p>“Damn you! I treat you nicely and this is how you repay me?! It looks like you need another lesson in manners!”</p>

      <p>In the end, Harumi couldn’t open the door. She turned her back on the gym and headed for the schoolyard.</p>

      <p><em>What do I have to do to get along with Satomi-kun like that?</em></p>

      <p>But even after joining the party, that was the only thing on Harumi’s mind.<br/><br/></p>

      <p>While Koutarou and Theia were still arguing in the gym, Ruth and Yurika returned to room 106.</p>

      <p>“I’m back.”</p>

      <p>“I’m baaack!”</p>

      <p>The school party was still going strong, but Ruth left early to prepare dinner and Yurika came home to feed Hercules.</p>

      <p>“Welcome home, Yurika-sama,”</p>

      <p>“Welcome home, Ruth-san.”</p>

      <p>The two girls greeted each other as they entered the empty room together.</p>

      <p>“Ruth, where do I put the key?”</p>

      <p>“Over here. I’ll hold on to it.”</p>

      <p>Yurika handed over the key to the apartment. Ruth was the most responsible resident of room 106, so Koutarou entrusted her with the apartment’s budget and key.</p>

      <p>“TV time!”</p>

      <p>Yurika crossed the poorly lit room and headed straight for the TV. Ruth turned on the light for her and returned to the kitchen. As Yurika turned on the old tube TV, it emitted a unique high-pitched sound. As the TV could only receive analog transmissions, the image was blurry.</p>

      <p>“Thank god, I made it...”</p>

      <p>But Yurika didn’t seem to mind. She was glued to the fuzzy screen as an anime called <em>Magical Girl Love Love Heart</em> came on. Although watching it every week lowered her own credibility as a magical girl, Yurika showed no signs of caring.</p>

      <p>“Oh, right, I still need to feed Hercules-chan. That’s why I came back to begin with.”</p>

      <p>On the first commercial break, Yurika remembered her original objective. She tore herself away from the TV and approached the wardrobe. Just as Yurika put her hand on the sliding door, Ruth entered the room.</p>

      <p>“Yurika-sama, would you like a cup of tea with me?”</p>

      <p>“Oh, that sounds great! I’ll get out some snacks!”</p>

      <p>Yurika brought out Hercules’s case, its food, and a bag of rice crackers with a reduced price sticker stuck to it. She carried them all to the tea table as Ruth came back into the room holding a tray with two tea cups and a teapot.</p>

      <p>“Here, Ruth-san. Please use this cushion.”</p>

      <p>“Thank you, Yurika-sama.”</p>

      <p>The two girls sat down next to each other in front of the TV and each began doing their own thing. Yurika fed Hercules as Ruth filled the tea cups.</p>

      <p>“A new series!”</p>

      <p>The words from the TV caught Yurika’s attention. She put the lid on the beetle food container and looked up to watch.</p>

      <p>“Thanks to all of our viewers’ support, a special program will finally be making its return!”</p>

      <p>“Huh—”</p>

      <p>The next instant, a large beetle appeared on the screen. It had the trademark horns, as well as a yellow shell with black spots. Although it had been made cuter for the anime, it was without a doubt the imposing figure of a Hercules beetle.</p>

      <p>“<em>Kabutonga, the King of Beetles: Second Impact!</em> The fierce fighting beetles are finally making their comeback! Hercules! Atlas! Caucasus! And Japan’s all-time favorite, the Japanese Rhinoceros Beetle!”</p>

      <p>Yurika slowly turned to look at Ruth with a terrified expression.</p>

      <p>“Will power come out on top? Will technique? Just who will win?! And don’t miss a special legendary beetle entering the battle!”</p>

      <p>With a smile frozen on her face, Ruth kept pouring tea into the cup which was now full and overflowing onto the table.</p>

      <p>“Eek!”</p>

      <p>Yurika sensed danger from her smile and cowered in fear.</p>

      <p>“<em>Kabutonga, the King of Beetles: Second Impact</em> will air on this channel starting November 11th at 6:30 PM!”</p>

      <p>In contrast to Yurika’s mounting tension, the narrator’s voice was deep and reassuring. But alas, it did nothing to comfort Yurika as it boomed out of the TV speakers.</p>

      <p>“Hmm, I see... So Hercules-chan... is a beetle...”</p>

      <p>“Eeeeek!”</p>

      <p><em>S-Satomi-san, help! Save me! Hurry back home. Come save me! I-I don’t want to face this all alone!</em></p>

      <p>Yurika screamed internally, but she found herself unable to do so out loud.</p>

      <p>“Beetle... Heh heh, I see. So that’s a beetle... Ahahaha...”</p>

      <p>Ruth let go of the teapot, practically dropping it onto the table, yet it mysteriously landed perfectly.</p>

      <p>“R-Ruth-san... L-Let’s take a second and calm down. Please?”</p>

      <p>“I am calm... Oh, I am quite calm...”</p>

      <p>Ruth spoke in a cold, quiet voice and extended her right hand in front of her. As she did, a blue light began to glow on her bracelet and a long rod of some kind appeared in her hand as it was beamed in from the Blue Knight. It was a big, green plastic fly swatter.</p>

      <p>“It’s just...”</p>

      <p>Ruth’s eyes lit up with rage.</p>

      <p>“Eeeeek!”</p>

      <p>“In the name of my proud family of knights, the Pardomshihas, I cannot allow the existence of beetles!”</p>

      <p>Ruth had finally discovered that Hercules was a beetle. This was the moment Yurika had feared.</p>

      <p>“You will rue the fate that allowed our paths to cross, Hercules-chan!”</p>

      <p>Ruth swung the fly swatter down with all of her might.</p>

      <p>“Suffer my wrath!”</p>

      <p>“Kyaaaaaaaah!”</p>

      <p>It closed in on the plastic case at an alarming rate.</p>

      <p>“Nooooo! Hercules-chaaaaan!”</p>

      <p>But Ruth’s fly swatter cut through the air and smashed into the tea table. Yurika had managed to push the breeding case out of the way just in the nick of time. Thanks to her, Hercules-chan survived by the skin of his teeth.</p>

      <p>“Haaahh... Ahh... Hahh... Th-That was close...”</p>

      <p>“Yurika-sama, you shouldn’t have done that.”</p>

      <p>“R-Ruth-san!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert6">
    <img alt="insert6" class="insert" src="../Images/Insert6.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter51">
    <div class="main">
      <p>“You cannot take pity on these foul creatures. I need to exterminate them all or I’ll go insane.”</p>

      <p>“Y-You can’t!”</p>

      <p>Yurika shook her head and stood up while defensively holding the case.</p>

      <p>“If Hercules-chan dies, the vice president’s little brother will be sad.”</p>

      <p>“But I will be sad as long as that beetle lives.”</p>

      <p>Ruth took aim at the plastic case in Yurika’s arms.</p>

      <p>“Ahahahaha! Satomi-sama desires me, not some beetle!”</p>

      <p>The trauma Ruth suffered that night at the beach was deep-seated. As a woman, she simply couldn’t accept that Koutarou liked beetles more than her. It was enough to drive her to this madness. She had lost all self-control.</p>

      <p>“Ruth-san, you’re scaring me.”</p>

      <p>“Suffer my wrath!”</p>

      <p>“Kyaaaaaaaah!”</p>

      <p>The fly swatter came crashing down once more, but Yurika quickly moved out of the way.</p>

      <p>“We’re running away, Hercules-chan!”</p>

      <p>Yurika dashed out of the inner room and headed for the front door. The vice president would take Hercules back after the cultural festival, so Yurika couldn’t let it get flattened just two days before.</p>

      <p>“Please wait, Yurika-sama! I have no intention of fighting with you!”</p>

      <p>“It’s not me I’m worried about! It’s Hercules-chan!”</p>

      <p>“It’s okay! I’ll personally see to it that Hercules-chan has a proper burial!”</p>

      <p>“That’s not okay!”</p>

      <p>Yurika bolted out of room 106 without looking back. She had gotten attached to Hercules after taking care of him for two months, and she wasn’t going to let Ruth take him away from her at the very end.<br/><br/></p>

      <p>Although Koutarou and Theia’s practice had started off with a ruckus, it turned serious as the evening went on. The party in the schoolyard was also dwindling and things were calming down, so the only voices that could be heard in the gym now belonged to Koutarou and Theia.</p>

      <p>“You jest, Princess.”</p>

      <p>“It is no jest. While it might just be a village harvest festival, a dance is a dance. As a girl of age, I too am interested.”</p>

      <p>Koutarou was acting as the Blue Knight and Theia was acting as the Silver Princess. Having spent two weeks practicing together, Koutarou and Theia had a good rapport. Thanks to all of his training, Koutarou was acting like a proper knight. And because of Theia’s deep emotional connection to the Silver Princess, her acting was comparable to Harumi’s.</p>

      <p>“But it is too dangerous for you to go alone.”</p>

      <p>“That’s why I am asking a knight such as yourself to be my escort, Lord Veltlion.”</p>

      <p><em>As expected from a princess, I guess...</em></p>

      <p>Koutarou thought highly of Theia’s acting after practicing with her. Unlike Harumi, Theia wasn’t able to portray the fragile Silver Princess as well since her energetic, dominating personality got in the way. But when it came to acting like a princess, Theia’s mannerisms were far superior. The lines sounded natural coming from her lips.</p>

      <p>Really, Theia was better when it came to playing the Silver Princess, while Harumi was better when it came to playing Alaia as a person. That was how Koutarou felt.</p>

      <p>“I am but a mere local knight. I am hardly worthy of the honor.”</p>

      <p>“Even though I may look like this, I grew up roaming the fields and mountains of northern Mastir. I am quite qualified to be called a peasant girl.”</p>

      <p><em>Well done on working this hard. You’ve become quite like the Blue Knight...</em></p>

      <p>Theia also thought highly of Koutarou’s acting. He still had a long way to go as a knight and an actor, but considering what he’d accomplished in two weeks, his progress was worthy of praise.</p>

      <p><em>Besides...</em></p>

      <p>Theia recalled the day the light came crashing down on her, the way Koutarou looked as he protected her, his figure clad in blue armor, and his voice when he called her princess. Thinking about it all, something deep inside her screamed out again that the person before her really was the Blue Knight. It was enough to alleviate any frustration at Koutarou’s acting ability. She wasn’t really as bothered as she made it seem like.<br/><br/></p>

      <p>After finishing their practice, there was a pregnant pause. Koutarou’s expression turned serious. Whenever they had finished their training sessions these past two weeks, Theia would always take the time to point out minor flaws.</p>

      <p>“Hmm, well, this is good enough.”</p>

      <p>“Huh?”</p>

      <p>But contrary to Koutarou’s expectations, Theia didn’t say anything else. She simply smiled and stayed quiet.</p>

      <p>“A-Are you sure?”</p>

      <p>“I have a few complaints, but nothing that could be fixed before the play tomorrow. I’ll let you off the hook this time.”</p>

      <p>“Yahooo! I-It’s finally over!” Koutarou raised his voice and cheered.</p>

      <p>He had finally completed his two week long private lesson. It had been a long, painful journey, but it was finally over.</p>

      <p>“Calm down, will you? How many times have I told you to mind your manners in that outfit?”</p>

      <p>“S-Sorry.”</p>

      <p>“...Well, it’s all right. I understand how you feel.”</p>

      <p>Theia furrowed her brow and was about to start complaining, but a smile crept across her lips instead. She was also satisfied she had finished her job.</p>

      <p>“Now all that’s left is to wait for tomorrow’s play. It went by so quickly...”</p>

      <p>“It felt like an eternity to me.”</p>

      <p>Koutarou smirked and shrugged his shoulders.</p>

      <p>“Heh, you weakling.”</p>

      <p>“Shut up.”</p>

      <p>Both Koutarou and Theia dialed down their usual antics. They each looked quite satisfied with what they had accomplished. Really, it was thanks to the partnership they had forged over the past two weeks.</p>

      <p>“Hmm? This is...”</p>

      <p>But once their practice was over, silence returned to the gym. Theia was then able to hear what was going on outside.</p>

      <p>“What?”</p>

      <p>“The music...”</p>

      <p>It was a slow ballad. Koutarou noticed it too and nodded.</p>

      <p>“Yeah, they must have started dancing at the party.”</p>

      <p>“Dancing?”</p>

      <p>“Yeah. It’s an annual tradition for the ballroom dance club. Of course, nobody really knows how to dance, so they just sort of wing it.”</p>

      <p>If it wasn’t for his extra practice with Theia, Koutarou would be out there dancing too.</p>

      <p>“Dancing, huh? Now that I think about it, I haven’t danced in a while...”</p>

      <p>Theia lightly held the hems of her skirt and began tapping her toes along with the music. When Theia was living on Forthorthe, she would regularly go to balls. Although she was unable to let her guard down even there, balls were one of the few things she didn’t hate.</p>

      <p><em>Tulip?</em></p>

      <p>Seeing Theia look so nostalgic, both happy and sad, Koutarou heard a little voice calling to him from within. It was telling him not to walk away from her.</p>

      <p><em>Man... I thought I was finally through with this painful practice...</em></p>

      <p>But he couldn’t keep himself from saying...</p>

      <p>“Teach me, Tulip.”</p>

      <p>...Despite knowing that it would lead to his practice being extended.</p>

      <p>“What?”</p>

      <p>Theia stopped tapping her foot and looked up. She hadn’t expected Koutarou to say such a thing, so she didn’t know how to respond.</p>

      <p>“Dancing. You taught me manners, but you didn’t teach me dancing. Knowing how to do that is important for a noble, right?”</p>

      <p>“Ah...”</p>

      <p>Theia’s eyes opened wide and she soon began blushing. She had realized why Koutarou said that.</p>

      <p>“N-Now that you mention it, it’s true I haven’t taught you dancing yet...”</p>

      <p><em>Is this for my sake...? Really...?</em></p>

      <p>Theia calmed her shaken heart and looked up at Koutarou. As she did, she saw the exact expression she was hoping for. He was gently smiling back at her, and it was that smile that turned Theia’s doubts into convictions.</p>

      <p><em>Fool... Learn your place. You’re being too ambitious...</em></p>

      <p>Despite Theia’s internal thoughts, her blushing wasn’t stopping. Her right hand that had begun moving on its own wasn’t stopping either.</p>

      <p>“I am but a mere local knight. I am hardly worthy of the honor.”</p>

      <p>Koutarou recited one of his lines from the script and reached his hand out to Theia. She smiled and replied with a line of her own.</p>

      <p>“Even though I may look like this, I grew up roaming the fields and mountains of northern Mastir. I am quite qualified to be called a peasant girl.”</p>

      <p>They held hands and began moving in time with the music.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert7">
    <img alt="insert7" class="insert" src="../Images/Insert7.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter52">
    <div class="main">
      <p>When Sanae, Kiriha, and Shizuka arrived at the gym, Koutarou and Theia were in the middle of their dance lesson. The girls didn’t want to interrupt, so they watched on from a corner near the entrance.</p>

      <p>“Don’t step on my feet! If you keep stepping on them in that armor, they’ll be crushed!”</p>

      <p>“S-Sorry, it’s more complicated to move my legs than I thought.”</p>

      <p>“At this rate, you’re going to give me complicated fractures in my legs!”</p>

      <p>“Oh, that’s a good one...”</p>

      <p>“Stop saying stupid things and learn the steps already!”</p>

      <p>Despite Koutarou and Theia being on the other side of the gym, their energetic voices reached all the way to the corner where the three girls were watching.</p>

      <p>“Really?” Looking at the two, Sanae let out a heavy sigh. “I figured they must be getting bored with all this practice, but it looks like they’re having fun. It seems like I was worried over nothing.”</p>

      <p>“Yeah, I wasn’t expecting them to be dancing though.”</p>

      <p>Shizuka agreed with Sanae. To her, it looked like they were having fun despite their arguing.</p>

      <p>“Karama, Korama.”</p>

      <p>But Kiriha wasn’t sharing in the fun. She hadn’t enjoyed the party and she wasn’t worried about Koutarou and Theia’s training. She had a serious look on her face like something was very, very wrong.</p>

      <p>“Yes! Ho!”</p>

      <p>“We’re here! Ho!”</p>

      <p>The two haniwas appeared at Kiriha’s call.</p>

      <p>“Did someone enter or leave the gym while I was gone?”</p>

      <p>“No! Ho!”</p>

      <p>“Harumi-chan stopped by, but she left without entering! Ho!”</p>

      <p>“I see. Good. Continue keeping guard.”</p>

      <p>“Roger that! Ho!”</p>

      <p>“Let’s go, Karama! Ho!”</p>

      <p>Kiriha had ordered her haniwas to watch over the gym. She was still troubled by someone targeting Theia.</p>

      <p>“Kiriha, aren’t you worrying too much? She wouldn’t attack during a silly event like the cultural festival.”</p>

      <p>“I hope not...”</p>

      <p>“Are you talking about Theia-san’s rival?”</p>

      <p>“That’s right. Theia-dono has already been attacked several times, so I’m a bit anxious.”</p>

      <p>Kiriha had been staying vigilant, but she couldn’t seem to catch the trail of Theia’s enemy or find any evidence that might be useful.</p>

      <p>“Fighting between families, huh? To think that would really happen so close to me...”</p>

      <p>“It still doesn’t feel like it, but Theia really is an important princess, huh?”</p>

      <p>The three girls looked back at the stage. Koutarou and Theia’s dance lesson was still going, the two of them bickering as they danced. Considering the circumstances, they certainly weren’t acting like they felt like they were in any danger.</p>

      <p><em>Is she confident because she knows her opponent, or is she acting that way because of Koutarou?</em></p>

      <p>“Hhnngh! Everyone, p-please save meeee!” Yurika cried out, making a grand entrance to the gym.</p>

      <p>She was tightly holding the beetle case as she approached Kiriha and the others.</p>

      <p>“Hercules-chan! Hercules-chan will...!”</p>

      <p>“Yurika?! What happened?!”</p>

      <p>All three girls were surprised by her appearance, so she did the best she could to explain through her tears.</p>

      <p>“A-Actually, Ruth-san found out that Hercules-chan is a beetle!”</p>

      <p>They all knew about the Hercules situation, not to mention how much Ruth hated beetles. That was enough to get a rough idea of what had happened, but they each had a different reaction.</p>

      <p>“Y-You idiot! What were you thinking?!” Sanae scolded Yurika.</p>

      <p>Sanae had tears in her eyes as well. Since she loved animals, she was worried for Hercules.</p>

      <p>“Oh my. You were so close, too...”</p>

      <p>Shizuka was worried about both Yurika and Hercules as well, but nowhere near as much as Sanae. Shizuka was more concerned for Hercules’s original owner, the cosclub vice president’s little brother.</p>

      <p>“I see...”</p>

      <p>But Kiriha smiled happily. She had been so worried about Theia being attacked that this minor problem put her mind at ease.</p>

      <p>“I couldn’t help it! It was unavoidable! We were watching TV and a commercial for a new beetle show came on! If you have any complaints, call up whoever decided to make an anime about beetles!”</p>

      <p>“Idiot! This is all because you were watching anime!”</p>

      <p>The anime promo commercial only came on because Yurika was watching anime. If she hadn’t been watching her magical girl show in the first place, this tragedy could have been avoided.</p>

      <p>“Eeek! I-I’m sorry!”</p>

      <p>“M-More importantly, what’s going on?! Where’s Ruth?!”</p>

      <p>“W-Well, Ruth-san lost it. She said she was going to make Hercules suffer her wrath, and then she came chasing after me!”</p>

      <p>Ever since she dashed out of room 106, Yurika hadn’t stopped running. Although she wasn’t in very good shape, Hercules’s life was at stake. She had run all the way to school without stopping once. And her hard work had paid off. She was able to lose Ruth along the way.</p>

      <p>“Please hide me! Pleaaase!”</p>

      <p>“Okay. If Ruth-san shows up, I’ll send her elsewhere.”</p>

      <p>“Th-Thank youuu!”</p>

      <p>Hercules would be going home in two days. Counting the party tonight, Kisshouharukaze High School’s cultural festival ran for three days. Yurika was planning on protecting Hercules by hiding out here at school until it was all over.</p>

      <p>Suddenly, a haniwa appeared at the entrance of the gym.</p>

      <p>“Nee-san, Ruth-chan is closing in! Ho!”</p>

      <p>“O-Oh, I see...”</p>

      <p>“Yurika, don’t space out! Go hide somewhere!”</p>

      <p>“O-Okaaay!”</p>

      <p>Yurika forced her exhausted body to run into the gym’s equipment room on the left side of the stage. Since the equipment room had another door that led to the stage, it was where most of the set pieces for tomorrow’s play were being stored. It was the perfect place to hide. And not a moment too soon. Just as Yurika shut the door, Ruth appeared in the gym.</p>

      <p>“Hahh... Aah... Hahh...”</p>

      <p>Like Yurika, Ruth was exhausted. Even though they were a good distance away, Sanae and the others could hear her panting. But she didn’t even take the time to catch her breath. She stomped into the gym and looked around, holding a large fly swatter.</p>

      <p>“R-Ruth-san, you’re here too?”</p>

      <p>“Hey, Ruth, what’s with that outfit?”</p>

      <p>Shizuka and Sanae called out to her.</p>

      <p>“Hngh... Hahh... Hngh...”</p>

      <p>But Ruth didn’t even react to their voices. She just kept moving, still breathing roughly.</p>

      <p>“Eek!”</p>

      <p>“S-Scary!”</p>

      <p>The surreal sight of a teenager wearing an apron and stomping around with an oversized fly swatter in her hand and a crazed look in her eye was enough to make Sanae and Shizuka recoil.</p>

      <p>“She’s completely lost it. She’s not herself at all. It’s like she doesn’t even hear us.”</p>

      <p>“What are we even supposed to do with her like this?!”</p>

      <p>“I-It’s over... I’m sorry, Yurika-san and Hercules-chan...”</p>

      <p>Sanae and Shizuka had already abandoned the idea of reasoning with Ruth. Seeing the way she was acting at the moment, neither of them had any confidence that they would be able to talk her down. It was only a matter of time before Yurika and Hercules fell prey to Ruth. However, that was when something unexpected happened.</p>

      <p>“...?!”</p>

      <p>For some reason, Ruth stopped moving. It happened just as she looked up at the stage in her search for Yurika and Hercules.</p>

      <p>“Y-Your... Highness...? Satomi... sama...?”</p>

      <p>On top of the stage were Theia and Koutarou, holding hands and happily dancing. Theia was a good dancer, but with an amateur partner like Koutarou, their dancing looked awkward. And whenever Koutarou made a mistake, Theia would scold him. It was a childish comedy of errors, hardly worthy of praise.</p>

      <p>“Her Highness is... dancing so happily...”</p>

      <p>But that didn’t matter to Ruth. She knew that Theia was enjoying this awkward dance from the bottom of her heart. Having grown up together, the two of them were like sisters and Ruth understood Theia better than anyone else. Theia might have liked attending balls, but Ruth had never seen her enjoy herself this much at one. Even though the dance hall was shabby, the band wasn’t playing in sync, and her partner had two left feet, Theia’s smile was dazzling. To Ruth, that was an amazing spectacle.</p>

      <p>“...H-Huh? Why am I here? What?!”</p>

      <p>It was that spectacle that brought Ruth back to her senses.</p>

      <p>“And why am I holding a fly swatter?”</p>

      <p>Having regained her sanity, Ruth had no memory of anything that happened after she went berserk. It was her subconscious’ way of protecting her from those painful memories.</p>

      <p>“I was pouring some tea for Yurika-sama and then... Huh?”</p>

      <p>“She’s back to normal?! All right!”</p>

      <p>“Thank god! Are you okay, Ruth-san?”</p>

      <p>“H-Huh...? Shizuka-sama, what are you talking about? Did something happen?”</p>

      <p>Without any idea what was going on, Ruth looked around in confusion.</p>

      <p>“Oh, um, well, Ruth-san...”</p>

      <p>“Hmm...”</p>

      <p>Since Shizuka was unable to finish her sentence, Ruth tried to remember what had happened on her own. She went through the events in her head.</p>

      <p><em>U-Um... I was pouring tea for Yurika-sama, and then I have this feeling that something big happened...</em></p>

      <p>“Nothing happened, Ruth. Don’t think too much about it. We just stopped by to see how Koutarou and Theia’s practice was going,” said Kiriha as if nothing was wrong. She didn’t want her to remember anything.</p>

      <p>“Satomi-sama and Her Highness’s practice...?”</p>

      <p>Because of Kiriha’s words, Ruth’s eyes were drawn back up to the two of them on top of the stage.</p>

      <p>“W-Watch it! You’re being too forceful.”</p>

      <p>“Easier said than done. It’s hard to adjust my strength.”</p>

      <p>“Ugh, just take it off!”</p>

      <p>“Waah, stop! Don’t take it off!”</p>

      <p>And before she knew it, all Ruth could think of was how much fun Koutarou and Theia seemed to be having on the stage.</p>

      <p>“Your Highness... Satomi-sama...”</p>

      <p><em>I’m so spellbound watching them like this, of course I would forget about everything else...</em></p>

      <p>Ruth gave up on trying to remember and just contentedly watched the stage. She no longer cared about why she was holding a fly swatter.</p>

      <p>“Heehee... Your Highness, Satomi-sama, your dance is quite wonderful.”</p>

      <p>Right now, the only things on her mind were her beloved princess and the Blue Knight that was making her beloved princess smile. Seeing that, Sanae, Shizuka, and Kiriha all let out a sigh of relief.</p>

      <p>“Pheeew! I was a little worried for a minute there...”</p>

      <p>“Yurika made the right choice coming here.”</p>

      <p>“She probably came for Satomi Koutarou since she had no one else to go to, but it seems to have worked for the best.”</p>

      <p>The girls sighed again as they looked towards the equipment room where Yurika was hiding. After seeing the normally calm Ruth in such a rampage, the three of them were a bit shaken up.</p>

      <p>“Sanae-chan, when you get the chance, could you go tell Nijino-san that everything turned out okay?”</p>

      <p>“Yeah. I’ll sneak away when Ruth isn’t looking and let her know.”</p>

      <p>Everything seemed to be okay now. Ruth was herself again and she hadn’t noticed the three of them whispering. Yurika and Hercules would live to see another day.</p>

      <p>But they were only able to relax for a moment. The haniwas who were keeping watch outside suddenly flew into the gym.</p>

      <p>“Ane-go! Emergency alert, ho!”</p>

      <p>“A space distortion has been detected inside the gym, ho!”</p>

      <p>“Based on the size, it seems like somebody has infiltrated the gym, ho!”</p>

      <p>“Karama-chan, Korama-chan! What do you mean by infiltrate?!”</p>

      <p>“Sorry, ho! That is all we can tell with our sensors, ho!”</p>

      <p>Kiriha left the haniwas to Sanae and spun around towards the stage. Koutarou and Theia were still dancing, and Ruth was standing next to Kiriha, still watching the stage.</p>

      <p><em>That means...!</em></p>

      <p>The only ones with the ability to distort space were Theia and Ruth. And if neither of them had done anything, there was only one other possibility.</p>

      <p>“Theia-dono! Koutarou! The enemy is attacking!”</p>

      <p>All signs pointed to the unidentified spaceship that was detected two months ago. This must be the work of its crew, declared enemies of Theia.</p>

      <p>“Kiriha-san?! You’re all here?!”</p>

      <p>Koutarou was more surprised by the presence of Kiriha and the others than the enemy. He’d been so focused on dancing that he hadn’t noticed them enter. He was so taken aback that he blanked out instead of taking action.</p>

      <p>“The enemy?! I see! So Clan is here!”</p>

      <p>In contrast, Theia’s reaction was quick. She was a talented dancer and didn’t have to concentrate on it like Koutarou did, so she had noticed Kiriha and the others a while ago. Because of that, she was able to swiftly react to Kiriha’s warning.</p>

      <p>“To think she’s attacking now! Did I misjudge her?!”</p>

      <p>When Theia looked around, she saw a figure standing to the right of the stage.</p>

      <p>“Yes, that’s correct, Theiamillis-san!” said a sneering, shrill voice.</p>

      <p>And when Koutarou looked in the direction the jarring voice came from, he saw a lone girl. She had light blue hair and was wearing a black and white dress. On her face were antique-style glasses. It was the girl Koutarou had seen during rehearsal once.</p>

      <p>“Clan, I never expected you to come at me with a head-on attack!”</p>

      <p><em>This girl is Clan?!</em></p>

      <p>Koutarou was stunned by Theia’s words partly because this was his first time encountering royalty other than Theia, but more importantly, because he had seen her before.</p>

      <p>“That’s why I keep telling you that you’re simple-minded, Theiamillis-san!”</p>

      <p>Clan pointed the weapon in her hands towards Theia.</p>

      <p><em>That’s...!</em></p>

      <p>The moment she saw Clan’s weapon, Theia had a moment of revelation.</p>

      <p>“I see! So that’s how it is!”</p>

      <p>Clan was wielding a handheld beam weapon of her own design. Since Clan was a renowned scientist, that wasn’t the part that surprised Theia. The part that baffled her was that Clan’s weapon appeared to be made of parts and materials from Earth. Its shape was bulky and angular in stark contrast to the sleek, curvy designs of Forthorthe.</p>

      <p><em>I’ve been had! She didn’t attack for two months because she was making this weapon! Her sabotage was just a front to throw me off her trail!</em></p>

      <p>Theia had previously been convinced that Clan would avoid a direct attack because it would leave behind incriminating evidence. If she used the Hazy Moon’s artillery, there were be a record of it in the ship’s logs. And even if she made her own weapon to attack, the parts could still be traced back to Forthorthe.</p>

      <p>But what would happen if she used parts found on Earth to make a weapon? Would Forthorthe be able to gather enough evidence to indict Clan on this small planet on the outskirts of known space that they had no diplomatic relationships with?</p>

      <p>The answer was no. It would be next to impossible. And if Clan disposed of her weapon, the evidence would disappear along with it. A weapon to attack Theia that could vanish without a trace... That was Clan’s plan.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert8">
    <img alt="insert8" class="insert" src="../Images/Insert8.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter53">
    <div class="main">
      <p>“Heh heh, it’s too late to do anything about it now!”</p>

      <p>The beam weapon in Clan’s hands started to emit an ominous sound.</p>

      <p>“But this wasn’t easy. The technology on this planet is so backwards that it took me two months to build this. And to think it will all be over in a single shot... What a waste.”</p>

      <p>Clan aimed the muzzle at Theia and flashed a cold smile. It radiated the confidence of someone who was certain they had won.</p>

      <p><em>Something’s wrong... Why is this Clan girl so confident?</em></p>

      <p>Listening to Theia and Clan, Koutarou felt something was off. There was a slight incongruity between what Clan was saying and how she was acting.</p>

      <p><em>If what Clan is saying is true, why was she here that day? What was she doing?</em></p>

      <p>While Clan was claiming she was going to kill Theia with the weapon she’d made on Earth, Koutarou had seen her in the gym just a few days ago. Her story seemed to check out since she came to sabotage the light, but if that was the case, why would she return to the scene of the crime like this? Moreover, why do it while Koutarou, Kiriha, and the others were all right here?</p>

      <p>“How clever of you! In that case, I’ll just have to shoot you down!”</p>

      <p>Before Koutarou could reach a conclusion, Theia held her bracelet up to her mouth. The bracelet decorated with a blue jewel was a voice-activated remote control for the Blue Knight.</p>

      <p>“Heh heh heh...”</p>

      <p>As Theia prepared to issue her command, the corners of Clan’s mouth curled up ever so slightly.</p>

      <p><em>She’s laughing?! That must mean—</em></p>

      <p>When he saw that unnerving smile, Koutarou made up his mind. Not a moment later, Theia’s voice rang out from the top of the stage.</p>

      <p>“Blue Knight! Prepare the Anti-Personnel Pulse Laser and—”</p>

      <p>The way Koutarou figured it, Clan had come to the school that day to set a trap. That was when he saw her for the first time. She must have deliberately damaged the light to make it fall over. It was her insurance in case she was spotted.</p>

      <p>And with Clan laughing now, that could only mean—</p>

      <p>“Stop it, Tulip!”</p>

      <p>Koutarou trusted his instincts and grabbed Theia’s hand before pulling as hard as he could.</p>

      <p>“P-Pleb?! Don’t get in my way!”</p>

      <p>Theia tried to shake him off. She was completely focused on Clan. The black holes were already appearing, meaning there wasn’t much time before the weapons would be ready to fire. Seeing that, Koutarou panicked and shouted.</p>

      <p>“Theia!”</p>

      <p>He had only called out her name.</p>

      <p>“K-Koutarou...”</p>

      <p>But that was enough to shift Theia’s attention away from Clan.</p>

      <p>“She wants you to use your weapons!”</p>

      <p>“But Clan is...!”</p>

      <p>However, Theia still fully intended to attack Clan. It was partly because of her personality, but it was also because she wanted to protect Koutarou. If Clan fired her beam weapon, Koutarou standing right next to Theia would also be in the crosshairs.</p>

      <p>“Theia! I need you to trust me now! I’m your knight, aren’t I?!”</p>

      <p><em>Koutarou?!</em></p>

      <p>The instant she heard Koutarou’s voice, Theia relaxed the tension in her body. As she did, she was pulled aside and embraced by Koutarou. He leaned over her to protect her.</p>

      <p>The next moment, there was an explosion. Specifically, the space-time holes above her shoulders had blown up. The black disks that usually summoned weapons issued forth small explosions. While the bursts weren’t that large, if Theia had been right underneath them, she would have been seriously hurt. But because Koutarou shielded her, the explosion was blocked by his armor.</p>

      <p>“Tch, damn fake Blue Knight! You’re getting in the way!”</p>

      <p>Seeing that the explosion had been mitigated, Clan clicked her tongue. She was getting angry that Koutarou had ruined her plan.</p>

      <p>The explosion had been caused by one of Clan’s inventions: an interference device designed to cause an explosion whenever Theia or Ruth tried to summon a weapon through their space-time holes. Just as Koutarou suspected, she had come here to set it up when he spotted her the first time during rehearsal.</p>

      <p>Clan was counting on using her device to make Theia blow herself up. Knowing Theia’s personality, Clan knew that the moment she showed off her weapon, Theia would fall for the trap on her own. That way Clan wouldn’t personally have to dirty her own hands and there was a high chance the incident be classified as an accident. That was why Clan had to make her move here, in the gym, even after potentially being seen.</p>

      <p>“There is no way I’ll forgive some barbarian from a backwater planet for interfering with my plans!”</p>

      <p>But her supposedly perfect plan had been thwarted by some random Earthling. It was enough to make Clan lose her cool.</p>

      <p>“A-Are you okay, Theia...?”</p>

      <p>After getting the wind knocked out of him by the explosion, Koutarou loosened his grip on Theia. As he did, she turned to look at him.</p>

      <p>“I’m okay! You protected me! There’s no need to worry. Only my hair is a little scorched.”</p>

      <p>Theia touched her beautiful blonde hair, the ends of which had been singed.</p>

      <p><em>There’s blood...</em></p>

      <p>Koutarou noticed a cut on Theia’s hand as she stroked her hair. Seeing the blood pouring out from the wound, Koutarou began to boil with rage. It was the same kind of rage that filled him when Sanae was in danger at the beach.</p>

      <p>“Koutarou, are you okay?!”</p>

      <p>“Ho! We came to help you, Koutarou! Ho!”</p>

      <p>“With us here, you have nothing to fear, ho!”</p>

      <p>Sanae appeared with the two haniwas. Being more mobile than the others, they were the first ones to reach Koutarou and Theia. Realizing they were there to help, Koutarou let go of Theia and stood up.</p>

      <p>“...You guys protect the princess.”</p>

      <p>“Huh?”</p>

      <p>“Wh-What’s that supposed to mean?!”</p>

      <p>Koutarou turned his back to the confused Theia and Sanae.</p>

      <p>“It means just what I said. Right now, Theia has no way of protecting herself. So I’m counting on you!”</p>

      <p>If Theia tried to summon her weapons, there might be another explosion. Koutarou didn’t know if Clan’s trap could cause multiple explosions, but he had no intention of finding out.</p>

      <p>“W-Wait, Koutarou! Going to battle on your own is unreasonable! I will—”</p>

      <p>Theia hurriedly stood up to go after him.</p>

      <p>“Your Highness, please trust in me and wait. War is a knight’s duty. Not even a princess should violate that sanctuary.”</p>

      <p>Theia stopped dead in her tracks upon hearing the Blue Knight’s words coming out of Koutarou’s mouth.</p>

      <p>“B-But—”</p>

      <p>Theia tried to object just as the Silver Princess had. It was a line from the play, but she hadn’t done that intentionally. She just wanted to stop her knight.</p>

      <p>“If you don’t believe in me, then just who will believe in my victory?”</p>

      <p>Koutarou put his hand on the hilt of the sword hanging from his waist and pulled it out in a dignified manner. It was the motion that he had practiced countless times with Theia.</p>

      <p>“I am your knight.”</p>

      <p><em>So this is how the Blue Knight must have felt...</em></p>

      <p>In that moment, Koutarou finally understood what must have been going through the Blue Knight’s head as he left for battle. While Koutarou had had difficulty getting into character, right now he related to the Blue Knight perfectly.</p>

      <p>“B-Blue Knight-sama...?”</p>

      <p>Theia was about to stand up, but when Koutarou turned his back to her to go, she fell to her knees again.</p>

      <p>Theia understood that Koutarou wasn’t a real knight and that he was quoting lines from the script, but oddly enough, she still couldn’t defy him.</p>

      <p><em>My... knight...</em></p>

      <p>Those words from Koutarou quashed any desire Theia had to argue and replaced it with anticipation. But there was almost no hope of Koutarou winning.</p>

      <p><em>That’s right. He’s my knight... If I don’t believe in him, who will?!</em></p>

      <p>And so Theia put all of her trust in him anyway.<br/><br/></p>

      <p>Seeing Koutarou draw his sword and step forward, Clan laughed loudly.</p>

      <p>“Ohohohoho! You sure know how to make me laugh! To think a fake Blue Knight with replica armor would dare fight me! You don’t even have the magical gauntlet or Signaltin!”</p>

      <p>There were four magical treasures that appeared in the legend of the Blue Knight: armor that could block all attacks, boots that allowed free flight, magical gloves infused with flames that could scorch a thousand enemies, and the holy sword Signaltin that had the power to shape the future, given to the Blue Knight by the Silver Princess.</p>

      <p>But of course, Koutarou didn’t have any of those. Everything he was wearing was a replica. His armor was mechanical and his sword didn’t have any holy powers. The armor he was wearing was barely capable of flight and though it would protect against some attacks, it was no legendary artifact.</p>

      <p>“For a fake princess like you, this is more than enough!”</p>

      <p>However, Koutarou didn’t even flinch. He simply responded to Clan in a dignified manner.</p>

      <p>“A fake princess?!”</p>

      <p>“That’s right! Someone who can only think of holding other people back can’t be a real princess!”</p>

      <p>As he looked at Clan, Koutarou remembered how he’d meet Theia. Partly because she was an alien, Theia had been the same way at first. But she had changed since then. She was still selfish, but she no longer tried to put others down. She was doing her best to win in a dignified manner befitting of a princess. She had matured after coming to Earth.</p>

      <p>“And to think you want to hurt my princess! You’re the one who knows how to make me laugh!”</p>

      <p>“Wha?!” Clan was nearly speechless. “Feh! Y-You impudent...”</p>

      <p>However, her dumfounded expression soon turned to one of anger. Koutarou’s words infuriated her, but most of all she couldn’t forgive herself for being flustered in the heat of the moment.</p>

      <p>“How dare you speak that way to someone like me, a daughter of the noble Schweiger family!”</p>

      <p>“If the only thing noble is your name, the Schweiger family is in a state of disgrace.”</p>

      <p>“Ugh! I definitely won’t forgive you! I’ll reduce you to mere atoms!”</p>

      <p>Now Clan’s rage was all focused on Koutarou. Sensing that, he tightened his grip on his sword and pumped himself up.</p>

      <p><em>Everything’s gone according to plan so far. Now for the hard part...</em></p>

      <p>Angering your opponent and making them focus on you was an old fighting trick. Once Koutarou got the impression that Clan was similar to Theia, he figured that provoking her might work, but the outcome had exceeded his expectations. Clan was furious because she felt like she was being compared to Theia. Koutarou being dressed as the Blue Knight only made it worse.</p>

      <p><em>Based on the circumstances, she won’t use any flashy attacks like Theia did. Which means that what I need to look out for is that cannon...</em></p>

      <p>Clan should know that giving in to her anger and resorting to using the weapons on her battleship would be the end of her. With that in mind, Koutarou was focused on the weapon currently in her hands.</p>

      <p>“It’s best to assume I’ll be out if that hits me. In that case...!”</p>

      <p>Koutarou held his sword with both hands and charged at Clan. At a distance, Clan had an advantage with a ranged weapon. If he didn’t close in and prevent her from using the beam cannon, she would keep the upper hand.</p>

      <p>“So you’re coming at me?! But do you really think you can hurt me with that dull blade?!”</p>

      <p>However, despite his charge, Clan remained confident. She simply held her beam cannon steady and remained motionless.</p>

      <p>“I’ve got youuu!”</p>

      <p>Not missing his chance, Koutarou swung his sword. Although it was a replica, the power of the armor was amplifying his strength. The blow had quite a bit of force behind it.</p>

      <p>But the sword never reached Clan. It was deflected by semi-transparent hexagons like the ones Theia and Ruth used for shields.</p>

      <p>“So that’s your game!”</p>

      <p>It was a barrier that distorted space as a way of protecting the user. Koutarou knew just how powerful its defensive capabilities were. Moreover, this barrier was one Clan had made for herself. A haphazard attack would never get through defenses like that.</p>

      <p>“Heh heh heh, but you’ve realized it too late— Wait, what is this?!”</p>

      <p>The sword had been stopped by the barrier, but Clan’s confident and cocky expression changed into one of surprise.</p>

      <p>“That’s impossible! This can’t be!”</p>

      <p>Clan hurriedly jumped back.</p>

      <p>“What?!”</p>

      <p>This time, Koutarou was the surprised one. Clan, who should have had the upper hand, was retreating. It was something he hadn’t expected from her.</p>

      <p>“Satomi-kun, continue attacking! I don’t know why, but the attacks seem to be working!” Shizuka shouted to Koutarou.</p>

      <p>She had seen the tip of the sword bury itself in the barrier. Clan had seen the same thing and retreated.</p>

      <p>“So that’s it!”</p>

      <p>Listening to Shizuka’s advice, Koutarou chased after Clan. While the stage was quite large, it didn’t feel like it to Koutarou who could run considerably faster than normal thanks to the armor. He quickly closed the distance between himself and Clan.</p>

      <p>“Quit running around!”</p>

      <p>Clan tried to take aim at Koutarou, but the bulky, improvised beam cannon was too large for Clan to lock on to Koutarou at his speed.</p>

      <p>“Haaaaaaaah!”</p>

      <p>Koutarou’s sword clashed with the barrier once again.</p>

      <p><em>It’s true! This sword can cut through the barrier!</em></p>

      <p>This time, Koutarou saw it too. The tip of the sword had penetrated the barrier.</p>

      <p>“A-Again?! What’s with that sword?! Does it have the power of the real Signaltin despite being a replica?!”</p>

      <p>Clan couldn’t hide her surprise. The sword had pierced through the barrier more deeply than the first time.</p>

      <p><em>That’s not possible! This Neanderthal on this backwater planet is only equipped with Blue Knight replicas, but he’s cornering me!</em></p>

      <p>“K-Koutarou...?” murmured Theia. Watching over the fight, she was even more surprised than Clan.</p>

      <p><em>What is that light coming from the sword? It isn’t equipped with that kind of power...</em></p>

      <p>The sword that Koutarou was wielding had started emitting a faint white light.</p>

      <p>“Kyaaah! Th-The barrier’s converter won’t last at this rate!”</p>

      <p>“Haaaaaaaah!”</p>

      <p>“I-I’m being beaten this easily?!”</p>

      <p>The light emitted from the sword grew stronger each time Koutarou swung it. It was now so bright that it was plain to see. And as the light grew stronger, the sword was able to cut through more of Clan’s barrier.</p>

      <p>“Is that the same light as before...?”</p>

      <p>Looking at the sword’s glow, Sanae instinctively touched the charm hanging around her neck. Right now it was just a plain charm, but once in the past it had glowed with the same light as the sword was now.</p>

      <p>“Could it be...? Are you truly... the Blue Knight’s...”</p>

      <p>Next to Sanae was Theia, who was currently at a loss for words. The blue armor and shining sword... Koutarou was almost like the real Blue Knight. Theia couldn’t take her eyes off of him.</p>

      <p>“D-Damn you! Damn fake Blue Knight! I’ll just have to...”</p>

      <p>Clan aimed her beam cannon.</p>

      <p><em>If it’s come to this, I’ll just let you have the barrier! And when you take it down, I’ll hit you with my beam!</em></p>

      <p>Clan stopped trying to dodge Koutarou’s attacks. Instead, she was waiting to counterattack when he destroyed the barrier. The barrier might get destroyed in a single hit, but she should be able to take Koutarou down the same way.</p>

      <p>“Come get me, fake Blue Knight!”</p>

      <p>“That’s just what I was going to do!”</p>

      <p>Koutarou charged at Clan again without realizing what she was up to.</p>

      <p>“She’s taunting you, Koutarou! Don’t rush in recklessly!”</p>

      <p>Theia, however, knew better and tried to warn Koutarou. Unfortunately, it was already too late. There was no stopping him now. But someone else had heard Theia’s warning.</p>

      <p>“Leave it to me, Theia!”</p>

      <p>“Sanae?!”</p>

      <p>It was Sanae. She made a beeline for Clan with both arms outstretched and shouted, “Special Attack: Sanae-chan Tulip, part two!”</p>

      <p>In a flash, Sanae flipped up Clan’s dress and wrapped it around her upper body just like she had once done to Theia.</p>

      <p>“Wh-What?! What is happening?!”</p>

      <p>Taken by surprise, Clan was stunned and remained motionless.</p>

      <p>“Oh, so this girl has a cat...” Shizuka commented, observing the design on Clan’s underwear.</p>

      <p>“Shizuka-sama! Now is not the time for that!”</p>

      <p>“I-I’m sorry, Ruth-san. But what can I do against an opponent who has a barrier like that?”</p>

      <p>While Shizuka might have been invincible when it came to martial arts, she was weak against an opponent in a wide open space who was hiding behind a barrier. She knew better and was watching from the sidelines with Theia and Ruth who couldn’t use their weapons right now.</p>

      <p>“Well done, Sanae!”</p>

      <p>And as Clan froze up, Koutarou attacked.</p>

      <p>“Hiyaaaaaaaaaaah!”</p>

      <p>Combining his momentum with the strength he got from the armor and the sword shining with white light, Koutarou unleashed a powerful attack on Clan. Her barrier was only able to withstand the attack for an instant. The barrier’s energy converter let out a whistling scream, and the barrier generation device attached to Clan’s back blew up. And once the sword broke through the barrier, it went straight for Clan.</p>

      <p>“Impossible! There’s no way I could lose! I don’t believe it!”</p>

      <p>If she had been able to see, Clan would have been the victor, but Sanae functionally blinding her had left her completely helpless. She had no means to defend against Koutarou’s strike, which struck the barrel of the beam cannon. Unlike the barrier, the cannon wasn’t built for defense and was easily cut in half.</p>

      <p>The next moment, there was a small explosion at the base of the beam cannon. The hems of Clan’s skirt were torn apart by the burst, freeing her from Sanae’s restraint.</p>

      <p>“T-To think that I, the Moon of the Schweiger family, would lose to a mere Neanderthal...”</p>

      <p>Having fallen over, Clan clenched her jaw as she pushed herself up. She’d had absolute belief in her plan. She was sure she could get Theia to use her weapons by revealing an Earth-made beam cannon. Even if Theia didn’t fall for it, Clan could have defeated her using the beam cannon. At least, that’s how it was supposed to go. But with the appearance of a lone man who wasn’t even worthy of being taking into account, her plan had fallen completely apart.</p>

      <p>“Just give up, Clan or whatever. You’ve lost.”</p>

      <p>Koutarou pointed his sword at Clan and recommended that she surrender.</p>

      <p>“This is all your fault, you fake Blue Knight! I should have disposed of you first! It won’t matter if I use the Hazy Moon’s weapons if I’m only getting rid of you!”</p>

      <p>Unlike Theia and Ruth, Clan wouldn’t be held responsible for her crimes if she were to attack Koutarou, a citizen of an undeveloped region of space. If she killed Koutarou before Theia could make him a citizen of Forthorthe, Theia wouldn’t be able to do anything. It was out of Forthorthian jurisdiction.</p>

      <p>“I may have failed to kill Theiamillis-san, but you...! I definitely will kill you myself! The fact that I was forced to crawl on the ground is completely unacceptable!”</p>

      <p>However, Clan didn’t surrender. Instead, she glared at Koutarou with a hateful disdain.</p>

      <p>“Y-You still want to go at it?!”</p>

      <p>“Koutarou! Restrain Clan right away! She’s planning on attacking you with the Hazy Moon’s weapons!”</p>

      <p>“Wh-What?!”</p>

      <p>While Koutarou was surprised by what Theia had said, Clan saw her chance and escaped out of his reach. She then laughed at Theia.</p>

      <p>“Ooohohohoho! It’s too late now, Theiamillis-san! You just sit there and watch this fake Blue Knight get obliterated!”</p>

      <p>“Run away, Koutarou! Don’t die for my sake!”</p>

      <p>“E-Even if I wanted to, where exactly am I supposed to run from that?!”</p>

      <p>Clan brought a bracelet, very similar to Theia’s, to her face and loudly declared, “It’s too late! Hazy Moon! Use the Disintegrator to reduce that fake Blue Knight to atoms!”</p>

      <p>“As you wish, my princess.”</p>

      <p>A hole, the same kind that Theia used, opened up above Clan’s right shoulder. The next moment, the muzzle of a large weapon was poking though it.</p>

      <p>“I win, fake Blue Knight! You can regret going up against the second princess of Forthorthe on the other side!”</p>

      <p>Clan boasted victoriously. Like she said, at this rate, Koutarou would be annihilated by Clan’s attack.</p>

      <p>“Waaaaah! I-It’s all over!”</p>

      <p>Koutarou panicked and started running all over the place. There was no longer anything he could do.</p>

      <p>“Oh, we’ll see about that...”</p>

      <p>Kiriha, who hadn’t been spotted since the fight first broke out, suddenly appeared at the other side of the stage.</p>

      <p>“Hmph, you just don’t know when you’ve lost! What could you possibly do to overcome this situation?!”</p>

      <p>“The people of this planet have an interesting proverb.”</p>

      <p>Clan was overly excited, but Kiriha appeared to be overly calm. Despite both being intelligent, they were behaving in completely opposite manners.</p>

      <p>“A proverb?!”</p>

      <p>“Indeed.”</p>

      <p>Kiriha nodded and raised what she was holding above her head.</p>

      <p>“It is the deceitful man who oft falls into the snares of deceit.”</p>

      <p>“Th-That’s the device I set up!”</p>

      <p>Indeed, what Kiriha was holding was the space distortion jammer that Clan had used against Theia just moments ago. It was still active and was now pointed at Clan.</p>

      <p>“You were close, Moon of Schweiger or whatever.”</p>

      <p>And since the weapon Clan had summoned was large, the explosion was several times bigger than it had been for Theia.<br/><br/></p>

      <p>Once the smoke from the explosion cleared, Clan was nowhere to be seen. The only thing left behind were fragments of her hand-held cannon.</p>

      <p>“So she escaped after all... Her tactics might be second-rate, but she is a first-rate escape artist.”</p>

      <p>“Theia-dono, are you sure we shouldn’t be chasing after her?”</p>

      <p>“It’s fine. Her specialty is fleeing. Chasing after would be a waste of time.”</p>

      <p>Theia shrugged at Kiriha, who was examining the remains of the explosion with her. She tossed aside a fragment of the weapon she had picked up, which then slid across the stage floor and stopped when it crashed into Koutarou.</p>

      <p>“I... I thought I was a goner...”</p>

      <p>Koutarou was lying on the stage with his arms and legs stretched out. He’d been moving nonstop since the rehearsal and he’d finally run out of energy</p>

      <p>“From what? Exhaustion or Clan?”</p>

      <p>“B-Both...”</p>

      <p><em>It’s just one thing after another today...</em></p>

      <p>After everything that had happened today, Koutarou just wanted to go home and go to sleep.</p>

      <p>“Wait, I’ll get the armor off for you.”</p>

      <p>Normally Theia would scoff at Koutarou in this state, but this time she was gentle with him.</p>

      <p><em>You did well today, Koutarou...</em></p>

      <p>Even the relentless Theia could only find words of appreciation for Koutarou right now. She approached him with a rare, calm smile.</p>

      <p>“Tulip, sorry to interrupt when you’re in such a good mood, but...”</p>

      <p>As Theia came closer, Koutarou looked at her with a very serious expression.</p>

      <p>“What?”</p>

      <p>“It broke.”</p>

      <p>“Huh?”</p>

      <p>“I said it broke.”</p>

      <p>As Theia crouched down next to him, Koutarou showed her the replica sword. The blade had snapped off about ten centimeters from the handle.</p>

      <p>“I think it happened when I swung it with all my might that last time. It was already broken when I noticed. Sorry.”</p>

      <p>That was apparently the reason Koutarou looked so serious. He knew that Theia treasured anything and everything related to the Blue Knight, so he was afraid that she would yell at him again. The sword was a particularly important symbol to a knight. Koutarou could vividly imagine Theia scolding him already.</p>

      <p>“I see. So it broke...”</p>

      <p>“Oh?”</p>

      <p>However, contrary to what he expected, Theia wasn’t angry. When he looked at her, visibly confused, she laughed at him.</p>

      <p>“What’s with that startled look on your face? Heh heh...”</p>

      <p>“What is that supposed to mean? Aren’t you angry? You’re always going on about how a sword is the soul of a knight...”</p>

      <p>“You fool! Are you telling me you never understood what I was talking about?!”</p>

      <p>Aghast, Theia raised her eyebrows. But she wasn’t angry because the sword was broken. Rather, she was angry because Koutarou hadn’t understood what she’d been trying to tell him all along.</p>

      <p>“The sword is a knight’s soul because of the vow placed on it! What can’t be broken is that vow, not the sword itself!”</p>

      <p>Theia excitedly swung the broken sword around as she yelled at Koutarou.</p>

      <p>“And so this sword remains unbroken! Why can’t you understand such a simple thing?!”</p>

      <p>“The knight’s code and all that stuff is beyond me!”</p>

      <p>As Koutarou whined, Theia fell silent for a moment. She stared at Koutarou’s face begrudgingly before finally speaking up in a quiet voice.</p>

      <p>“...That settles it. You’re going to keep training to become a proper knight.”</p>

      <p>Although she was speaking quietly, her anger was more intense than ever.</p>

      <p>“Whaaat?! Y-You mean it’s not over?!”</p>

      <p>“As if I would let you off that easily! If I just let you parade around as such an unprincipled knight, it would bring shame upon the Mastir family! At the very least, we’ll keep training until your public debut!”</p>

      <p>“I don’t want tooooo! G-Give me a break!”</p>

      <p>The rehearsals were done and the fight with Clan had ended in victory. However, it looked like Koutarou’s knight training was far from over.<br/><br/></p>

      <p>As Koutarou and the others collected themselves, Clan began to take action in the equipment room. Everyone thought she had vanished, but she was just hiding nearby.</p>

      <p>“Theiamillis-san and that fake Blue Knight.... Y-You’re making a huge mistake if you think I’ll retreat because of something like this!”</p>

      <p>Clan had managed to drag her wounded body towards the stage. While she looked like she was in terrible shape, her eyes were burning with rage.</p>

      <p>“I can’t accept this! There’s no way I could lose! There’s no way that I lost to Theiamillis-san and that fake Blue Knight! There’s no way I can accept that!”</p>

      <p>Sheer willpower and fury were all that was keeping Clan conscious. She just couldn’t believe that she had lost to Theia. Otherwise, she would have passed out long ago.</p>

      <p>“Heh... Heh heh... ‘It is the deceitful man who oft falls into the snares of deceit,’ was it? In that case, you will be the one who falls into the final snare!”</p>

      <p>Clan put her hand in her pocket and pulled out a small box with a button on it.</p>

      <p>“I didn’t want to use this while it was still under research ... But now that it’s come to this, I have no choice. Heh heh heh...”</p>

      <p>It was a new type of bomb Clan had developed that used space-time technology. Its destructive power far outstripped that of conventional bombs, and on top of that it was capable of destroying everything within a specified range.</p>

      <p>“G-Goodbye, Theiamillis-san. May you—”</p>

      <p>However, Clan was unable to push that button. The moment she was about to, something fell right on top of her, causing her to lose her consciousness after all. And just like that, Clan’s final attack had failed too. The fact that she had passed out with a satisfied smile on her face was her only saving grace.<br/><br/></p>

      <p>Roughly twenty minutes had passed since Yurika hid herself in the equipment room. Although she could hear some kind of commotion outside, she prioritized her own crisis.</p>

      <p>“...I-I can’t hold on... I’m falling, I’m falling!”</p>

      <p>Yurika had been fighting against her exhaustion for a while now. When she first ran into the equipment room, she figured that she would be found right away if she hid carelessly. It was in that rare moment that she used her brain to think. The idea she came up with was to hide in the gap left by the air duct that trailed along the wall and ceiling.</p>

      <p>It was a great hiding spot, but since the air duct was diagonal, Yurika needed to use some strength to support herself in order to hide there. If she just managed to hide long enough for Ruth to pass by, she could reposition and hide somewhere else in the room for as long as she needed. A little preparation and perseverance would ensure her safety indefinitely. It was pretty brilliant for Yurika.</p>

      <p>“I can’t... It’s too much... I-I’m slipping!”</p>

      <p>But no matter how long she waited, Ruth never showed up. Still, she knew she couldn’t come down until Ruth had checked the equipment room and moved on. And so Yurika simply waited.</p>

      <p>At times a rat would run over her face or a spider would crawl around on her hand, but Yurika withstood those trials and waited for over twenty minutes. That was when the door to the equipment room finally opened and a lone girl appeared. Convinced it was Ruth, Yurika used the last of her strength to hang on to the air duct for all she was worth.</p>

      <p>“I didn’t want to use this while it was still under research ... But now that it’s come to this, I have no choice. Heh heh heh...”</p>

      <p>“Huh?”</p>

      <p>But it turned out that it wasn’t Ruth at all. When Yurika realized that, the disappointment was so great that the tension that was keeping her wedged in the air duct disappeared.</p>

      <p>“H-Hercules-chan, Hercules-chan! Lend me your strength!”</p>

      <p>Without anything else to rely on, Yurika’s limbs were at their limits. She didn’t even have enough strength to let go with one hand so she could use magic. Of course, when she asked Hercules for help, she got no response.</p>

      <p>“I can’t hold on! I’m sorry, Hercules-chan! I’m so sorry!”</p>

      <p>Yurika finally fell. All she could do was carefully hold on to Hercules’s case so that it wouldn’t break.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert9">
    <img alt="insert9" class="insert" src="../Images/Insert9.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter54">
    <div class="main">
      <p>But the floor in the equipment room was a lot softer than Yurika had imagined.</p>

      <p>“H-Huh?”</p>

      <p>She had braced herself for a strong impact, but when that didn’t happen, she slowly opened her eyes.</p>

      <p>“Th-Thank god. Hercules-chan is okay...”</p>

      <p>The first thing that came into view as she opened her eyes was the plastic case with Hercules in it. Fortunately it looked like it had survived the impact and it didn’t seem to be cracked anywhere. Hercules, still inside, was scurrying around energetically.</p>

      <p>“Hahh...”</p>

      <p>Yurika let out a sigh of relief after seeing that Hercules was okay, but once she calmed down, she noticed that she was sitting on top of something.</p>

      <p>“U-Um...”</p>

      <p>She was scared she might have broken a set piece or the likes again.</p>

      <p>“Huh?!”</p>

      <p>However, what Yurika was sitting on wasn’t a set piece. It was a girl in a black and white dress. Once she realized she was sitting on top of a person, Yurika hurriedly jumped off.</p>

      <p>“Kyah! N-Nooo—”</p>

      <p>Yurika was about to scream, but she quickly covered her own mouth. If she screamed now, Ruth might appear. And even if she didn’t, she could still be in danger.</p>

      <p>“Wh-Wh-What should I do?! I-I can’t just leave her like this, but I can’t call anyone either!”</p>

      <p>Still holding on to Hercules’s case, Yurika ran around in circles. After doing that for a while, she made a decision and stopped scrambling.</p>

      <p>“A-All right, let’s just pretend this didn’t happen...”</p>

      <p>Since she was worried that someone might find out that she had hurt someone, she decided to clean up after herself using magic.</p>

      <p>“This is for Hercules-chan! That’s right! I’m protecting Hercules-chan’s owner’s dreams! This is the duty of a magical girl!”</p>

      <p>And so the magical girl of love and courage, Rainbow Yurika, made her appearance.</p>

      <p>“Come, Angel Halo!”</p>

      <p>Without anyone realizing it, she had defeated Clan and saved lives.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter6">
    <div class="main">
      <h1>Theiamillis’s Blue Knight</h1>

      <h2>Wednesday, November 11th</h2>

      <p>The cultural festival kicked into high gear the next day and continued for two days without any troubles. This of course included the drama club’s play, “The Silver Princess and the Blue Knight.”</p>

      <p>The play received all kinds of high praise, in particular for Harumi in her role as the Silver Princess. It was such a success that the club decided they would continue it the next year. Because of that, Theia would be writing a new manuscript for the second part coming the following year.</p>

      <p>Moreover, Yurika was able to safely return the Hercules beetle to its original owner. But since she had gotten deeply attached to Hercules after everything they’d been through together, parting with it was hard on her and she spent several days crying.</p>

      <p>After the battle during the party, Clan didn’t appear to Koutarou and the others again. Although they remained on guard for a while after that, several days after the cultural festival, the Blue Knight detected a large-scale space distortion. According to the Blue Knight’s analysis, it was the Hazy Moon leaving Earth’s orbit. So if the analysis was correct, Clan had left Earth and returned to Forthorthe.</p>

      <p>And so Koutarou and the others were able to return to their everyday lives. The battle for the small apartment would probably continue, but Koutarou was strangely okay with that. It was a sign that he had begun accepting the invading girls, though he wasn’t mature enough to admit it.<br/><br/></p>

      <p>But not quite everything returned to normal. In fact, something was changing that no one had noticed.</p>

      <p>“Zzzzz...”</p>

      <p>Room 106 was quiet during the night. Although Koutarou rolled around in his sleep, he wasn’t snoring or sleep talking. Apart from when he rolled into something, the only sounds that could be heard in the room were the ticking clock and Koutarou’s breathing.</p>

      <p>The other two staying in room 106 had their own places to sleep—Sanae in the ceiling and Yurika in the wardrobe. Because of that, the apartment was quiet enough right now to hear the grass blowing in the wind outside.</p>

      <p>It was a calm autumn night. The change in the room was so gradual that it was hard to perceive. Normally the night would peacefully pass like this until dawn with nothing more eventful than the ticking of the clock and Koutarou’s breathing.</p>

      <p>But not tonight. As the clock’s hand pointed to two past midnight, the wall furthest into the room began glowing.</p>

      <p>The first thing that happened was a leg stepping out from the wall. It was a mysterious sight, almost as if someone was on the other side. And after that stockinged leg confirmed its footing, it returned back through the glowing wall. The next moment, a girl wearing a luxurious, pure white dress came out from the wall.</p>

      <p>“...”</p>

      <p>When she came out from the wall, the girl looked down. After making sure the only thing under her feet was a tatami mat, she slouched her shoulders and looked relieved.</p>

      <p>“...Your Highness.”</p>

      <p>Next, another girl came out from the wall, this one dressed in a military uniform. She did the same thing the first girl had and looked down at her feet. She also looked relieved she hadn’t stepped on anything.</p>

      <p>“To think I’d have to worry about my own vassal’s sleeping habits...”</p>

      <p>“It was the only way, Your Highness. We couldn’t afford to step on Satomi-sama tonight...”</p>

      <p>Of course, the two girls that had come out from the wall were Theia and Ruth.</p>

      <p>“That’s true.”</p>

      <p>They giggled quietly with each other and approached Koutarou who was leaning against a wall in his sleep.</p>

      <p>However, something about the two of them was strange. They were both wearing clothing in a more lavish style than normal. Although Theia’s dress had the same white base as always, it had an obvious formal design to it. On top of that, she had on more accessories than usual. The tiara on her head in particular was loaded with jewels that looked like they were worth billions. The military uniform Ruth was wearing was different from normal as well. This one had elegant colors and plenty of decorations. Clearly prioritizing design over function, it was intended for ceremonies.</p>

      <p>And what was even stranger than their clothing was the sword Ruth was holding in her hand. She was holding it close to her chest, and it appeared to be of a similar design to the one Koutarou had broken. The two girls who were clearly acting different from normal walked over to Koutarou and kneeled down beside him.</p>

      <p>“He’s just sleeping without a care in the world... He doesn’t even know what’s about to happen...”</p>

      <p>“We could always do it boldly during the day when he’s awake.”</p>

      <p>In order to not wake up Koutarou or Sanae, the two girls were whispering to each other. Fortunately, neither of them showed signs of waking up. Their breathing was heavy and regular.</p>

      <p>“I’ll pass on that.”</p>

      <p>Theia shook her head, causing her dress and accessories to shake as well. Her overly extravagant dress made it even harder for her to move around in the small room.</p>

      <p>“Because of the circumstances, this is a good trade-off...”</p>

      <p>“Heehee... Oh, Your Highness...”</p>

      <p>Ruth nearly doubled over as she tried to hold in her laughter. Their efforts would all be for naught if she burst out laughing and woke up Koutarou now.</p>

      <p>“Quiet down. You’ll wake Koutarou up.”</p>

      <p>“Y-Yes... Then let’s finish up our business.”</p>

      <p>“You’re right... Ruth, give me Saguratin.”</p>

      <p>“Yes, Your Highness.”</p>

      <p>Ruth unsheathed the sword she was carrying—the treasured Saguratin. It was the sword that was made when Theia was born, bearing her crest, a golden flower.</p>

      <p>“Your Highness.”</p>

      <p>“Yes.”</p>

      <p>After receiving the sword from Ruth, Theia turned back to Koutarou.</p>

      <p>“...Koutarou.”</p>

      <p>Theia smiled as she started whispering to him.</p>

      <p>“You have served me well since the second princess, Clariossa, appeared. I am deeply grateful for your actions that have repeatedly protected me from danger. Normally I would like to grant you whatever you wish as a reward. Yet since I am but a wanderer, I cannot do so under these circumstances.”</p>

      <p>And with those words, Theia held the sword firmly with both hands.</p>

      <p>“So as a proof of my gratitude, I have decided to grant you the rank and title of knight. However, you wouldn’t be pleased if I treated you like a vassal, so I have come at this late hour with Ruth as the only witness.”</p>

      <p>Theia continued softly whispering, although it saddened her a little because she truly wanted to convey her feelings directly to Koutarou.</p>

      <p>“...Forgive me, Koutarou. I don’t know any other way of showing my gratitude. You can laugh at me for being a sheltered princess if you like. I didn’t know any other way of living until I came here.”</p>

      <p>Theia revealed a lonely smile, then gently tapped the flat part of the blade against Koutarou’s shoulders.</p>

      <p>“Just don’t move right now, Koutarou. I may hurt you if you do...”</p>

      <p>First the right, and then the left. That was the traditional ritual when bestowing knighthood to someone in Forthorthe. All that was left was for the title of the knight to be conferred.</p>

      <p>“...Satomi Koutarou. I, Theiamillis Gre Mastir Sagurada von Forthorthe, bestow upon you the rank of knight and the title of ‘Theiamillis’s Blue Knight.’”</p>

      <p>Waiting for Theia to finish speaking, Ruth presented the sheath to her.</p>

      <p>“...Your Highness.”</p>

      <p>“Yes.”</p>

      <p>Theia took the sheath and slowly stowed the sword inside.</p>

      <p>“And as a bonus, I’ll give you this sword as a replacement for the one you broke. I’ll keep it safe for you, so let me know whenever you need it.”</p>

      <p>As Theia said that, she handed the sword back to Ruth, who held it with great care. Right now, Ruth was incredibly happy. Although it might have been one-sided, she was thrilled that Koutarou and Theia had formed a master and servant bond. This sword was proof of that. To her, there was nothing more valuable.</p>

      <p>“Good work, Your Highness.”</p>

      <p>“Yes...”</p>

      <p>With that, both of them looked pleased at finishing what they had come to do.</p>

      <p>“Mmm, mm...”</p>

      <p>But that was when Koutarou’s eyelids began twitching. It might have been because he realized Theia and Ruth were there, or it could just have been a coincidence. Either way, Koutarou was about to open his eyes and find them out for sure.</p>

      <p>“Mm...”</p>

      <p>When Koutarou did wake up, he saw Theia in front of him and blinked repeatedly.</p>

      <p>“...Hmm? What...? Is it already time for practice...?”</p>

      <p>Half-asleep, he had assumed it was time for training. Theia smiled at him and gently shook her head.</p>

      <p>“No. Practice is on hold for a while longer...”</p>

      <p>“I see... Huaaaah... Then I’m going to sleep a little more... Wake me up when it’s time...”</p>

      <p>Koutarou’s eyes slowly closed again.</p>

      <p>“Yes, I will...”</p>

      <p>Koutarou fell asleep in an instant, leaving Theia and Ruth on their own once more. The two had accomplished their task so they no longer had any reason to be in the room, but neither of them moved.</p>

      <p>“...Rest well, my knight...”</p>

      <p>“Goodnight, Satomi-sama...”</p>

      <p>Motionless, they simply stared at the first ally—in the truest sense of the word—they had found in the outskirts of space.<br/><br/></p>

      <p>Not long after the cultural festival, another transfer student arrived at Kisshouharukaze High School.</p>

      <p>“So this is the cosplay society...”</p>

      <p>The new student was a girl.</p>

      <p>“It certainly is a good place to hide your true identity. I’d never even considered it myself, so all I can say is well done...”</p>

      <p>She was sixteen years old, the same as Koutarou and the others. Like them, she was a first-year student.</p>

      <p>“I thought she was just a stupid coward, but I guess I should reevaluate things. That, or she’s found someone to think for her... Either way, I can’t be careless.”</p>

      <p>As she mumbled to herself, she knocked on the door in front of her.</p>

      <p>“Coming!” someone quickly called from the other side of the door.</p>

      <p>“Excuse me, I would like to join!” the new girl responded, announcing her intentions.</p>

      <p>“President! We have an applicant!”</p>

      <p>“R-Really?! Are you sure it’s not just some other club pranking us?!”</p>

      <p>“Heehee... Just you wait, Yurika...”</p>

      <p>Her goal was Yurika. She was going to defeat her and claim the power spot Yurika was protecting for herself. This girl was one of the enemies that Yurika stubbornly claimed existed. Yes, an evil magical girl.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert10">
    <img alt="insert10" class="insert" src="../Images/Insert10.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="afterword">
    <div class="main">
      <h1>Afterword</h1>

      <p>Long time no see everybody. It’s the author, Takehaya.</p>

      <p>A year has passed since the first volume went on sale, and now the fourth volume has been released. With the volumes starting to pile up, the story is gradually moving forward. Right now is the most important period. I will keep working hard in the future as well, so please continue to support me.<br/><br/></p>

      <p>I’ve kept saying that I’m going to move, but I’ve finally decided on where. I’m planning on moving at the start of March. The place I’m currently living is hard to work in, so I’m going to move even though it will make things hectic. It will be better for me in the long run. I believe work on the fifth volume will probably start once I’ve finished moving.</p>

      <p>Oh right, I was asked to mention this in the afterword, but it seems like there’s going to be an announcement regarding <em>Rokujouma</em> on Hobby Japan’s website. However, as I’m writing this afterword, it hasn’t been decided if they are doing it or not. And if they are, it’s not certain exactly what they’re doing. I would greatly appreciate it if you took the bait and had a look for yourself. I wonder what they’re doing, hmm...?<br/><br/></p>

      <p>There are more things I want to write about, but I’ll leave it at this for now since I’m already running out of space this time.</p>

      <p>I would like to thank everyone at the editorial department for their work in publishing this book; the illustrator, Poco-san, who listens to my unreasonable requests; my friends who listen to me when I bring up my stupid stories with a smile; and finally, all of the readers who bought this novel.</p>

      <p>Let’s meet again. Hopefully it’ll be in the afterword of the fifth volume, written from my new house.<br/><br/></p>

      <p class="signature">January, 2010</p>

      <p class="signature">Takehaya</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="notes">
    <div class="main">
      <h1>Notes</h1>

      <ol>
        <li epub:type="footnote" id="note1">Culture Day – A national holiday in Japan. <a href="../Text/chapter1.xhtml#note1">→</a></li>

        <li epub:type="footnote" id="note2">Kanabun - Also known as the drone beetle, its scientific name is Rhomborrhina japonica. <a href="../Text/chapter1.xhtml#note2">→</a></li>
      </ol>
    </div>
  </section>
</body>
</html>