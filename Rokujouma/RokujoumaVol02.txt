<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="default-style"/>
  <title>Invaders of the Rokujouma!? Volume 2</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css"/>
  <meta content="urn:uuid:5ca89fc7-e59a-411f-84ba-16dd55c1374a" name="Adept.expected.resource"/>
</head>

<body>
  <section epub:type="bodymatter chapter" id="chapter1">
    <div class="main">
      <h1>A Day in Room 106</h1>

      <h2>Friday, April 24th</h2>

      <p>Satomi Koutarou’s ability to wake up was absolutely terrible.</p>

      <p>Today was no exception. Even as the strong morning light shone down on him, he showed no sign of waking up. His mouth hung wide open as he snored almost as loudly as the fridge’s compressor.</p>

      <p>“Mm...”</p>

      <p>That said, it seemed the morning sunlight did at least appear to bother him. He turned over in his sleep, putting him up against the wall. Koutarou had laid out his futon in the middle of the room, but since he rolled around in his sleep, he’d ended up in the corner of the room by morning.</p>

      <p>But thanks to that last roll, the sunlight was no longer washing over his face, and he returned to sleeping as normal.</p>

      <p>The time was now 6 AM.</p>

      <p>The sunshine was bright and the sky beyond the window was clear blue. As it was nearing late April, the temperature was pleasantly starting to rise. It was nice outside these days. If the window were open, there would have been a nice, cool breeze coming through it.</p>

      <p>But the first thing to open in room 106 was not the window. With a little noise, the tatami mat closest to the front door appeared to lift itself up slightly. As it rose, the plastic bag on top of it starting to rustle, revealing several instant noodle cups inside. The rustling, however, was short-lived. Not a moment later, the tatami mat was raised up from the floor completely. From underneath it, a lone girl appeared.</p>

      <p>There was another rustling sound.</p>

      <p>“I keep telling her to put those away...”</p>

      <p>Because the girl had flipped up the tatami mat, the bag of instant noodle cups had spilled over. She saw this and sighed. Her beautiful, long, black hair swayed as she crawled up into room 106. The girl’s name was Kiriha. She was wearing an outfit that was something of a cross between a kimono and a shrine maiden’s garb. Her clothing and her cool, long, narrow eyes were quite striking. She was one of the girls attempting to seize control of room 106.</p>

      <p>“Hey, ho! Hey, ho!”</p>

      <p>“Ho! Ho! Ho, ho, ho! Hey, ho!”</p>

      <p>Following Kiriha out from under the tatami mat were two haniwas, each about thirty centimeters tall. As they entered room 106, they began picking up the noodle cups without waiting for Kiriha’s orders. This was getting to be a daily occurrence.</p>

      <p>That was when the far wall began glowing, just above where Koutarou happened to be sleeping.</p>

      <p>“Is that Ruth?”</p>

      <p>Kiriha was unfazed by the strange spectacle taking place before her. She simply went about replacing the tatami mat she had moved. As she put it back, a girl appeared from the glowing wall. She had a short bob and serious eyes, and she was wearing something resembling a military uniform. This was Ruth. She was an alien that had come to Earth from over ten million light years away.</p>

      <p>“Kyaaah!”</p>

      <p>As Ruth entered the room, she screamed. It wasn’t because she had fallen, though. It was more so an issue of where she had landed.</p>

      <p>“I-I’m so sorry, Satomi-sama! I’ll move right away!”</p>

      <p>Ruth had appeared right above Koutarou, planting her stockinged feet right in Koutarou’s face.</p>

      <p>The glowing wall served as a sort of door to room 106. Passing through it would teleport one to and from the alien spaceship in orbit around Earth. But unlike a normal door, you couldn’t see through it. There was no way of knowing what it was like on the other side until you were already passing through it. Because of that, Ruth had unwittingly stepped on Koutarou’s face.</p>

      <p>“I’m deeply sorry for stepping on your face morning after morning, Satomi-sama!”</p>

      <p>Ruth hurriedly got off of Koutarou and apologized. She looked truly penitent as she repeatedly bowed her head.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert1">
    <img alt="insert1" class="insert" src="../Images/Insert1.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter11">
    <div class="main">
      <p>“...”</p>

      <p>However, there was no response from Koutarou.</p>

      <p>“S-Satomi-sama?”</p>

      <p>“You’re really something, aren’t you, Satomi Koutarou?”</p>

      <p>Both girls looked at Koutarou. Ruth was surprised and Kiriha was just impressed. Thanks to his remarkable ability to stay asleep, despite being stepped on, he still showed no sign of waking up. It was as if nothing had happened.</p>

      <p>Having Kiriha and Ruth around made the plain room a lot more colorful. But when they put that aside and donned aprons, they looked just like normal girls their age.</p>

      <p>“Kiriha-sama, what should I do with this long and slender vegetable?”</p>

      <p>“We’re adding the leek to the miso soup, so cut it into round slices.”</p>

      <p>“Okay, I understand.”</p>

      <p>Kiriha stood at the stove with a ladle in hand, and Ruth was holding a knife at the sink. They were working together to prepare breakfast. But being an alien, Ruth was unfamiliar with Earth-style cooking. That meant Kiriha worked as the chef with Ruth as her assistant. As the two girls cooperated to make the food, they seemed like good friends. It was hard to imagine they were enemies just by looking at them.</p>

      <p>“Goooood mooorniiiiing...”</p>

      <p>That was when one of the few people who knew the truth about their relationship appeared. It was a petite girl in a summer dress who looked like she was in grade school.</p>

      <p>“Good morning to you too.”</p>

      <p>“Good morning, Sanae.”</p>

      <p>“Hnnn...” Sanae sleepily rubbed her eyes.</p>

      <p>But calling her a person was questionable, considering she had appeared from the ceiling. She didn’t flip over a tatami mat or make a wall glow, but literally materialized from the ceiling. Her name was Sanae, and she was the resident ghost of room 106.</p>

      <p>“What’s for breakfast today?”</p>

      <p>“Rice and miso soup. And the fish we bought yesterday, um... Kiriha-sama, what was it called again?”</p>

      <p>“Salmon. And then there are the wieners that didn’t fit into today’s bentou.”</p>

      <p>However, neither Kiriha nor Ruth was surprised by Sanae’s unusual entrance. They both smiled and acted as if they were talking to a friend. They were used to Sanae.</p>

      <p>“Are they shaped like octopi?!”</p>

      <p>“The best a girl of age can make.”</p>

      <p>“Is that so?”</p>

      <p>“She’s lying. Kiriha always lies with a straight face... Oh right, I almost forgot. Can I taste them?!”</p>

      <p>“I don’t mind. I was going to serve them to Koutarou anyway.”</p>

      <p>“All right!”</p>

      <p>Sanae was delighted to get Kiriha’s permission. Looking as young as she did, she truly did seem like a child sometimes. But instead of reaching out for the wieners in front of her, she turned around and headed to the inner room.</p>

      <p>“Wake up, Koutarou! Hey!”</p>

      <p>“Hnnn...”</p>

      <p>Once she made it to the inner room, Sanae got to work on waking up Koutarou. In order for her to taste the wieners, she needed Koutarou’s help. As a ghost, she couldn’t eat on her own. She needed to possess someone and share their senses so she could “eat” vicariously. Her willing victim was none other than Koutarou. They were currently in a truce, and the condition for the ceasefire was that Sanae was allowed to possess Koutarou.</p>

      <p>“Hurry! Wake up! The octopi will get cold!”</p>

      <p>“Hnnn... I can’t eat any more... Mhm...”</p>

      <p>“I won’t let you be the only one eating good stuff!”</p>

      <p>As expected, Koutarou was still out cold even after being shaken and shouted at. It also seemed like he was having a dream about eating, which only got on Sanae’s nerves even more.</p>

      <p>“Heh heh, Mackenzie, I’m leaving the bill to you... Mmm...”</p>

      <p>“Ugh! Why are you always denying ghosts a reason to exist?! I’m not asking you to be surprised anymore, but at least listen to my voice! When someone shakes you, wake up! And when you wake up, say ‘good morning, my angel’ to the adorable Sanae-chan!”</p>

      <p>“Don’t cry over something like that... It’s pitiful...”</p>

      <p>“Anyone would want to cry!”</p>

      <p>Dumbfounded by Koutarou’s ability to talk in his sleep without waking up, Sanae finally reached her limit.</p>

      <p>“I-In that case...”</p>

      <p>With tears forming in her eyes, Sanae used her Poltergeist powers to lift up a nearby encyclopedia.</p>

      <p>“Just you watch. This is what happens if you think a woman will just hold it in forever!”</p>

      <p>Sanae grinned and tilted the encyclopedia slightly. She was going to drive the corner of the book right into Koutarou’s head.</p>

      <p>“...Hmm?”</p>

      <p>But before Sanae could put her plan into action, the wall began glowing just like it did when Ruth had appeared.</p>

      <p>“There we go.”</p>

      <p>The only difference this time was that a different person came through. Everything else was exactly the same.</p>

      <p>The girl who stepped out of the wall now was a little older than Sanae. She wore a white dress and had beautiful, golden hair and clear blue eyes. This was Theia, an alien princess. She was also Ruth’s master.</p>

      <p>“Gwaaaaaaaah?!”</p>

      <p>“Oh, I didn’t see you, pleb.”</p>

      <p>And things played out exactly the same way. Theia stepped directly on Koutarou’s face just like Ruth had. But unlike Ruth, she didn’t take it upon herself to do anything about it. Even worse, she was wearing shoes. Her high heels dug into Koutarou’s forehead.</p>

      <p>“Owowowow!”</p>

      <p>“You never learn, do you? Why do you always sleep there? Seriously... this is why you are a pleb,” Theia declared in an astounded tone of voice.</p>

      <p>She then stepped off his face and onto the tatami floor. The edges of her white dress fluttered captivatingly, but Koutarou wasn’t in the mood to appreciate it right now.</p>

      <p>“Tulip, you idiot! How many times do I have to tell you not to step on people?! And don’t wear shoes inside the room!”</p>

      <p>Koutarou had a red bruise on his forehead. Not even he could sleep through being stabbed in the face by high heels with Theia’s full weight behind them.</p>

      <p>“Aaaah?! Y-You pleb! You dare call me an idiot again?!”</p>

      <p>“I’ll say it as many times as I have to, you idiot!”</p>

      <p>“How dare you show your master such disrespect?!”</p>

      <p>Koutarou and Theia butted heads and shouted at each other. They were so close they could kiss, but that didn’t matter to either of them when they were so worked up.</p>

      <p>“And what’s this? Why do you only complain about me? Am I the only one that has stepped on you?!”</p>

      <p>“I’m truly sorry, Satomi-sama. Allow me to apologize for my master and myself for stepping on you over and over.”</p>

      <p>Before Koutarou and Theia knew it, Ruth was right there beside them. She deeply bowed to Koutarou as if she were the one being shouted at.</p>

      <p>“No, there’s no need for you to apologize, Ruth-san. Please raise your head.”</p>

      <p>Koutarou shook his head. He had no grievance with Ruth.</p>

      <p>“This is all Tulip’s fault.”</p>

      <p>“But...”</p>

      <p>“Hey! You pleb! Why only forgive Ruth? How absurd! Why do you favor her?!”</p>

      <p>Theia’s face turned red with anger and she stomped her feet. As she did, her heels pierced the tatami mat repeatedly. Seeing that, Koutarou’s tone grew even harsher.</p>

      <p>“That’s obvious, you stupid princess! Why don’t you put a hand on your chest and ask yourself that again?!”</p>

      <p>“My chest...?”</p>

      <p>Theia vacantly stared down at herself, and then looked over at Ruth.</p>

      <p>“Y-Your Highness?!”</p>

      <p>Ruth blushed and crossed her arms over her chest to hide it.</p>

      <p>“...Breasts...”</p>

      <p>Although it had vanished momentarily in her confusion, Theia’s anger was soon reignited.</p>

      <p>“You’re saying that you forgive her because her breasts are big?!”</p>

      <p>But this time, she wasn’t just angry. She was livid. Getting so worked up, Theia completely lost sight of herself and screamed at Koutarou.</p>

      <p>“Of course not! Why would that be the reason?!”</p>

      <p>“Koutarou, who cares what barely-there boobs girl has to say? Forget her! Let’s eat!”</p>

      <p>“Are you trying to pick a fight with me?!”</p>

      <p>“Don’t, Your Highness!”</p>

      <p>And just like that, a brawl broke out in the small room.</p>

      <p>“Mmm, this tastes great.”</p>

      <p>Kiriha, who was still in the kitchen, didn’t seem to care much about it as she tasted her miso soup with a satisfied smile.</p>

      <p>“I’ll make sure to teach you who your master is today!”</p>

      <p>“Just try it, Tulip! The only place you’re going is the flowerbed!”</p>

      <p>“Just how much are you going to belittle your master? You rude Neanderthal!”</p>

      <p>“Both of you, please stop it!”</p>

      <p>“Food! Food!”</p>

      <p>“Yet another peaceful day... Or far from it, rather...”</p>

      <p>It was only natural for Kiriha to be so calm. It was just another morning in room 106.<br/><br/></p>

      <p>“Thank you for the food!”</p>

      <p>“Of course. Eat up.”</p>

      <p>Once the breakfast preparations were complete, Sanae jumped onto Koutarou’s back and wrapped her arms around his neck. According to Sanae, that was how you possessed someone. But at first glance, it just looked like a child clinging to her father’s back.</p>

      <p>“Hurry up and eat, Koutarou!”</p>

      <p>“...”</p>

      <p>Though Sanae was dying for Koutarou to start eating, Koutarou was glaring at the person across from him rather than focusing on the food.</p>

      <p>“...”</p>

      <p>Sitting opposite of Koutarou on the other side of the tea table was Theia, glaring right back at him. They had been glaring at each other for a while now. In addition to the bruise on Koutarou’s forehead, he had scratches and bite marks on him. Theia, on the other hand, was sporting a black eye. Neither one of them had come out unscathed from their earlier brawl.</p>

      <p>“Your Highness, if you keep this up, your food will get cold.”</p>

      <p>“You should be saying that to the pleb! What’s wrong with disciplining a fool who raises their hand against their master?”</p>

      <p>Ruth was sitting between Koutarou and Theia, and was doing her best to get the two of them to make up.</p>

      <p>“Ha, to think you’re calling someone a fool.”</p>

      <p>“Hmph. You lowlife.”</p>

      <p>Despite her efforts, they were both still sulking and looked away from each other in irritation. They had no intentions of making up. Though they couldn’t get along, they shared the same stubbornness.</p>

      <p>“But Your Highness, we are the ones who started it.”</p>

      <p>“I don’t care. A vassal’s fealty shouldn’t be circumstantial. He should respect me universally.”</p>

      <p>“Who are you calling a vassal?”</p>

      <p>“You’re being such a baby...”</p>

      <p>“That’s not true. It’s Tulip’s fault.”</p>

      <p>Even while looking away from each other, they continued to argue. In fact, it carried on solely because of how conscious of one another they were.</p>

      <p>“We can’t have that, Koutarou.”</p>

      <p>That was when Kiriha spoke up with a vexed smile. With his head turned away from Theia, Koutarou just so happened to be looking at her. Kiriha was seated across from Ruth, between Koutarou and Theia on the other side. They were sitting around the tea table in what had become their usual order: Koutarou and Sanae, Ruth, Theia, and then Kiriha.</p>

      <p>“Kenji and Shizuka will worry if you make a scary face like that.”</p>

      <p>“But, Tulip is—”</p>

      <p>“That’s e-n-o-u-g-h.”</p>

      <p>Koutarou tried to protest, but Kiriha stopped him by placing her finger over his lips. She leaned forward a little and smiled.</p>

      <p>“I don’t like you this way either. I prefer it when you smile.”</p>

      <p>“Huh...?”</p>

      <p>The soft, warm tip of Kiriha’s finger felt like a kiss to Koutarou. Her dazzling smile and calming eyes sucked him in.</p>

      <p>“Listen, Koutarou, it’s okay to act like this sometimes. But that doesn’t mean you should be that way around everyone. Kenji, Shizuka, and even I will be sad to see you this way. You shouldn’t bring down the people you love like that.”</p>

      <p>“Ugh...”</p>

      <p>“Let go of your anger, Koutarou. It’s for our sake and yours.”</p>

      <p>Koutarou’s anger dissolved as Kiriha calmly admonished him. He was mad at Theia because he was irritated by her selfishness, but Kiriha’s smile made him realize that it was selfish of him to take that out on other people.</p>

      <p>“Waaait just a minute! I mind my own business and this is what happens?!”</p>

      <p>“Wh-What?!”</p>

      <p>As Koutarou and Kiriha started to come to an understanding, Sanae shouted at the two of them. Still clinging on to Koutarou, she strengthened her grip around his neck like she was going to choke him.</p>

      <p>“Kiriha! Don’t act like you’re the only one who’s not Koutarou’s enemy! He can fuss at you all he wants! You’re planning on taking this room for yourself after all! Don’t casually try to act like you’re so buddy-buddy!”</p>

      <p>“My, my, you sure are strict, Sanae.”</p>

      <p>“And Koutarou! What’s with you?! She’s just trying to get you to lower your guard so she can take over the room. That’s what she always does!”</p>

      <p>“S-Sorry, it was a reflex...”</p>

      <p>“Don’t hand me that! Give me a break, Koutarou! You’ve almost fallen for her tricks so many times these past few days! What do you think would happen if I wasn’t around?!”</p>

      <p>“I get it. Just calm down, okay?”</p>

      <p>“...Are you reflecting on your actions?”</p>

      <p>As Koutarou apologized, both the force in Sanae’s voice and her grip weakened.</p>

      <p>“I am. Of course I am.”</p>

      <p>“And do you have any words of thanks for the beautiful ghost who keeps helping you?”</p>

      <p>“Thank you for always looking out for me.”</p>

      <p>The only reason he hadn’t already been fooled by Kiriha and still had a place to live was thanks to Sanae. If it weren’t for his truce with her, he would have succumbed to Kiriha long ago.</p>

      <p>“Good. Now hurry up and eat. I’m starving.”</p>

      <p>Satisfied with Koutarou’s answer, Sanae leaned forward and pointed at the table. On it was rice, miso soup, salmon, and wieners cut into octopus shapes. It was the long-awaited breakfast.</p>

      <p>“I know. Thank you for the food.”</p>

      <p>“Koutarou, start with the octopi wieners!”</p>

      <p>By the time Koutarou picked up his chopsticks, Sanae was back to her usual self. Her voice now seemed to suit her appearance—innocent and lively.</p>

      <p>“...Hey, Sanae.”</p>

      <p>Koutarou’s chopsticks stopped just before reaching the wiener.</p>

      <p>“What?”</p>

      <p>“Never mind. It’s nothing.”</p>

      <p><em>Even she’s been tamed by Kiriha’s cooking...</em></p>

      <p>Koutarou kept himself from saying what was on his mind.</p>

      <p>“Oh? Then hurry up already!”</p>

      <p>“Okay, okay.”</p>

      <p><em>But why don’t I want to say it?</em></p>

      <p>Koutarou was uncertain of why he restrained himself.<br/><br/></p>

      <p>“Your Highness, it’s almost time,” proclaimed Ruth as she returned to the inner room after doing the dishes.</p>

      <p>“Very well. Then let’s go.”</p>

      <p>Hearing that, Theia put down the empty cup she had been playing with and stood up. As she did, the skirt of her dress filled out enough to take up a sizable fraction of the room. Considering how small the apartment was, her dress made for a substantial obstacle.</p>

      <p>“Well then, everyone, we’ll meet again later.”</p>

      <p>“Don’t be late, pleb.”</p>

      <p>“Of course I won’t”</p>

      <p>“That’s good. A vassal’s failure reflects poorly on me. It seems you can at least appreciate that. Very good.”</p>

      <p>Theia and Ruth went back through the glowing wall. They were returning to their spaceship to change. From there, they would make their way to school using their own route.</p>

      <p>“...She just keeps spouting selfish nonsense...”</p>

      <p>“She seems determined to make you her vassal.”</p>

      <p>Koutarou and Sanae, who were drinking tea at the table, stared at the glowing wall and sighed. Kiriha, who was drinking with them, smiled dryly as her shoulders drooped.</p>

      <p>“That is her condition for succeeding the throne. She most likely can’t back down. That said, I can’t either. Well then...”</p>

      <p>After waiting for Koutarou to finish his tea, Kiriha took the empty cups to the sink.</p>

      <p>“Ho!”</p>

      <p>“Hey! Ho!”</p>

      <p>As she did, the two haniwas flipped the tatami closest to the front door. Below it was a tunnel leading to Kiriha’s secret base. At first it had just been a hole in the ground, but before they knew it, it was surrounded with concrete and tiling. That was thanks to the work the two haniwas had done.</p>

      <p>“I will be taking my leave as well. I’ll see you in class, Koutarou, Sanae.”</p>

      <p>Like Theia and Ruth, Kiriha would make her own way to Harukaze High. Neither Kiriha nor Theia wanted to cause any unnecessary commotion.</p>

      <p>“Yeah, See you lat—”</p>

      <p>“Stooooop!”</p>

      <p>As Koutarou was about to see Kiriha off, Sanae’s fist came crashing down on the back of his head.</p>

      <p>“You’re being tricked again! You don’t need to see that woman off!”</p>

      <p>“R-Right.”</p>

      <p><em>Not good. I’m completely falling for Kiriha’s kindness...</em></p>

      <p>Koutarou himself grew wary. He was just going along with the flow of what seemed like perfectly normal behavior from Kiriha. He had completely forgotten, but everything she said was a trap to lure him into a false sense of security. If Koutarou let his guard down with her, he might wake up tomorrow to his room being used to invade the surface.</p>

      <p>“Heehee, so you can’t believe that my feelings for Koutarou are serious?”</p>

      <p>“Isn’t that obvious?! Where would anyone find romantic feelings in you?!”</p>

      <p>“Koutarou, do you feel the same...?”</p>

      <p>Kiriha held her hands to her chests and whispered to him in a sweet voice. Her smile vanished as she sadly looked down.</p>

      <p>“Ugh...”</p>

      <p>When faced with her dewy eyes and dulcet voice, Koutarou unconsciously gulped. Even though he knew she was the enemy, Koutarou was a boy in puberty. When she acted like this, he couldn’t help but waver.</p>

      <p>“Koutarou! Get a grip!”</p>

      <p>“Y-Yeah... S-Sorry, Sanae.”</p>

      <p><em>Not good. Even though I know better, this still happens...</em></p>

      <p>Koutarou started to panic internally. Kiriha’s attacks grew more skillful by the day. As Kiriha got to know Koutarou, she was adjusting her strategies accordingly.</p>

      <p>“Heehee. Foiled again, huh? I’ll see you later, Koutarou.”</p>

      <p>Kiriha disappeared into the tunnel with a smile. The two haniwas followed, putting the tatami mat back in place as they went.</p>

      <p>“Th-This is bad for my heart...”</p>

      <p>Koutarou could feel his heart throbbing as he stared at the floor where Kiriha had left.</p>

      <p>“That woman is the worst...”</p>

      <p>Sanae puffed up her cheeks and let out an irritated sigh.<br/><br/></p>

      <p></p>

      <p>“Sanae, let’s go.”</p>

      <p>“Just wait a second.”</p>

      <p>Koutarou had changed and was ready to leave for school, but Sanae was still struggling to put on her uniform. Her scarf was crooked and the hem of her shirt was caught in her skirt, revealing her underwear. She was also only wearing one sock. She looked like a train wreck even to Koutarou, who was largely indifferent when it came to clothing.</p>

      <p>“Can you try to keep it together?”</p>

      <p>“S-Sorry, heh heh...”</p>

      <p>Sanae let out an embarrassed laugh as she put on her other sock. Meanwhile, Koutarou pulled her shirt out from her skirt and fixed her scarf.</p>

      <p>“Thanks, Koutarou.”</p>

      <p>“That’s fine and all, but why are you wearing a uniform to begin with?”</p>

      <p>“It’s cute, isn’t it?”</p>

      <p>Once she got herself straightened out, Sanae spun around in front of Koutarou. The uniform didn’t quite fit her. It was too large, but that only increased the cuteness factor. Koutarou had to agree with Sanae’s assessment.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert2">
    <img alt="insert2" class="insert" src="../Images/Insert2.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter12">
    <div class="main">
      <p>“Yeah, but I’m more interested in why a ghost is changing clothes in the first place. More importantly, where did you get a uniform that a ghost can wear? I’ve been dying to know.”</p>

      <p>“It’s girl stuff. Don’t worry about it. If you keep sweating the tiny details, you’re going to go bald.”</p>

      <p>“Are they really ‘tiny details’ though...?”</p>

      <p>Koutarou found himself staring at Sanae’s uniform. Noticing, she grabbed the hem of her skirt and gave him curtsy.</p>

      <p>“Very tiny. Ghosts in movies change their outfits between scenes all the time. That’s just what ghosts do! Ah, the tragic maiden, Sanae-chan...”</p>

      <p>“Now that you mention it, the mysterious man in the hockey mask changes his weapons between scenes as well... From chainsaw to machete to hatchet... I wonder where he gets those...”</p>

      <p>“Don’t compare me to him! You’re always like this!”</p>

      <p>“Uwah!”</p>

      <p>Sanae grabbed ahold of Koutarou’s neck in a sudden fit of rage. But as the doorbell rang, Sanae loosened her grip on Koutarou and jumped off of him.</p>

      <p>“Hey, Kou... Are you up?”</p>

      <p>“Satomi-kuuun!”</p>

      <p>Following the doorbell, there were voices. They belonged to Koutarou’s friends, Kenji and Shizuka, who had come to pick him up.</p>

      <p>“I’m awake! I’ll be right there!”</p>

      <p>After shouting towards the front door, Koutarou grabbed his school bag sitting nearby.</p>

      <p>“Sanae, you haven’t forgotten anything, have you?”</p>

      <p>“No, I’m all good.”</p>

      <p>Sanae turned off the light and headed for the front door after Koutarou.</p>

      <p>“What about you?”</p>

      <p>“I’m...”</p>

      <p>Koutarou, who was in the middle of putting on his shoes, paused and looked up.</p>

      <p>“Hmm... I do have a feeling I’m forgetting something...”</p>

      <p>“What is it?”</p>

      <p>“I have no idea. Well, if I can’t remember it right away then it probably wasn’t that important.”</p>

      <p>“Then let’s go, Koutarou.”</p>

      <p>“Yeah.”</p>

      <p>Koutarou nodded at Sanae and put the thought out of his mind before finishing putting on his shoes.</p>

      <p>“Make sure you don’t forget to make it so Landlord-san can’t see you, okay?”</p>

      <p>“Aye aye, sir!”</p>

      <p>And so Koutarou and the others left Corona House. With them all gone, the room fell silent. The only sounds in room 106 were the tick of the clock and the hum of the fridge. It was quiet enough to hear birdsong and the occasional passing car from outside.</p>

      <p>But as time passed, the outdoor noises gradually grew louder. Morning rush hour was beginning and large crowds started to gather at the nearby stations. Bicycles and cars passed by on their way to work or school. And as the time for school drew closer, even the sound of preschoolers mischievously blowing on whistles reached the apartment. But the chaos of morning only lasted for thirty minutes or so. Then room 106 was quiet again.</p>

      <p>That is, at least until a suspicious noise was heard coming from the wardrobe. Not a moment later, the sliding door flew open.</p>

      <p>“I-I-I’m laaaaate!”</p>

      <p>There appeared to be a girl in the upper half of the wardrobe. The bottom half contained Koutarou’s belongings, but there was a futon inexplicably spread out along the top compartment with a half-crying girl seated on top of it.</p>

      <p>“Wh-Why didn’t anyone wake me up?! ...Wait, they’ve already left!”</p>

      <p>This was Yurika. She was a cosplayer that Koutarou and the others girls knew. When Koutarou thought he might be forgetting something, it was her.</p>

      <p>“Aaaaahh! This will be the tenth day I’m late! The teacher’s definitely going to yell at me! They’re all terrible! They know I’m absent a lot and they just left me here anyways!”</p>

      <p>Yurika hurriedly changed from her pajamas to her uniform while still inside of the wardrobe. The upper half of the wardrobe had several small shelves where Yurika kept her belongings. She also had a change of clothes hanging up. Although it was very narrow inside of the wardrobe, Yurika showed no sign of being affected by it as she skillfully changed her clothes.</p>

      <p>Astoundingly, Yurika was using the upper half of the wardrobe as her own room.</p>

      <p>“All right, I’m done changing! If I don’t hurry, I’ll miss first period!”</p>

      <p>Once in her uniform, Yurika grabbed her bag and jumped out of the wardrobe. There was a loud crunching noise as she landed.</p>

      <p>“...Hm?”</p>

      <p>Hearing the curious sound, Yurika looked down to see a white plastic bag under her foot.</p>

      <p>“I-It couldn’t be...”</p>

      <p>Yurika shuddered at the sight. Despite being in a hurry, the surprised Yurika slowly lifted her foot. If this was the bag she thought it was, this was a disaster far more serious than being late to school.</p>

      <p>“Nooooooooooo!”</p>

      <p>Just as she had feared, what she found below her foot was the bag containing her cups of instant noodles. Landing on the bag had crushed the majority of them.</p>

      <p>“Wh-Why is it right here?! I know I left it over there! How could this happen?!”</p>

      <p>Yurika fell into a complete panic.</p>

      <p>With the recession, the price of instant noodles had soared. Because of that, even during specials, the best price available was still a hefty 98 yen. Yurika had trampled her precious food supply. In total she had destroyed six of the noodle cups. With a single step, two days worth of food went right out the window.</p>

      <p>“W-Would it still be edible if I gather all of it up?”</p>

      <p>It was a devastating blow to Yurika. She was now groveling on the floor, staring longingly at the broken noodles spilled across the tatami mat.</p>

      <p>“No, you can’t do that, Yurika! Eating food off the floor is just...! Besides, that has to be bad for you!”</p>

      <p>For a moment, she had seriously considered gathering the noodles up and eating them, but her pride got in the way. However, given her current financial situation and her attachment to these noodle cups, even her pride was gradually giving in.</p>

      <p>“I need to pick them up anyways! Not eating anything for two days, I... Aaaaahh! B-But what kind of a person would eat food off the floor like this? Aaaaahh! But, but... two days without food! Two whole days!”</p>

      <p>Yurika was torn.</p>

      <p>After picking up the noodle cups, should she throw them away or eat them? It was just a simple choice between two options, but to Yurika it held a much deeper meaning. It was an intense internal struggle. Should she throw away the food she needed to survive, or should she throw away her pride as a human being?</p>

      <p>It was a moral crisis over her humanity.</p>

      <p>“...But if I throw away my pride, I’ll be able to fill my stomach! That’s right, Yurika, you can’t live off of your pride! You have to fill up your stomach first! You have to survive, otherwise you can’t protect your pride!”</p>

      <p>In the end Yurika chose to throw away her pride. She just couldn’t bring herself to throw out her noodle cups. She couldn’t scorn the synthetic taste and the texture of the instant noodles.</p>

      <p>“I should treasure life! I have to treasure my things! That should allow me to fulfill my purpose as a magical girl as well! I need to teach the children to treasure all kinds of things!”</p>

      <p>Yurika quickly put her plan into action and collected the scattered noodles into the plastic bag.</p>

      <p>Today, Yurika wasn’t going make it in time for the second period either. At this rate, she would be held back a grade.</p>

      <p>“Yurika, fight! Yurika, fight!”</p>

      <p>But only one thing mattered to Yurika right now, and that was to hoard every last crumb of food—the most important thing to her after her life. She wasn’t thinking of anything else.</p>

      <p>“This is a magical girl’s duty! An important duty! It’s the only way!”</p>

      <p>She was the self-proclaimed magical girl of love and courage, Rainbow Yurika. Everyone was convinced that she was just a cosplayer, but even if she were a real magical girl, this was surely enough to make any of her fans give up on her.</p>

      <p>When Yurika finally left for school, the room was still once more. This time of day, room 106 was a rather peaceful place to be. From time to time the voices of housewives going out to shop or a passing truck could be heard, but in general Corona House was quiet. And it continued to be so until the afternoon.<br/><br/></p>

      <p>At about 2 PM, groups of young children passed by Corona House on their way home from school. They were playing around and carrying on about what they saw on TV yesterday, how delicious the pudding they had for desert was, and various other things. Their carefree conversations could be heard from the apartment as they walked by.</p>

      <p>As the hour grew later, the age of the kids passing by Corona House gradually rose. The voices of children playing in a nearby park could be heard too. It was around that time that people started returning to room 106.</p>

      <p>“I have returned.”</p>

      <p>The first one to arrive was Ruth. Her voice echoed in the empty room. She appeared by the entrance holding a large shopping bag. Unlike the other four girls, Koutarou trusted Ruth, so he had left the shopping to her. In her bag were the ingredients that Koutarou and the others would need for dinner.</p>

      <p>“Oh? What’s this...?”</p>

      <p>As Ruth was about to put the groceries in the refrigerator, she noticed the plastic bag next to the sink. Peeking into the bag, she saw splintered foam cups and crushed instant noodles.</p>

      <p>“Looks like trash.”</p>

      <p>In addition to the foam and noodles, there was a good amount of dust inside of the bag. Ruth was aware that the noodles were food, but nobody would eat trash like this. Although she felt like it was a waste, she threw the bag into the garbage can. Being as proper as she was, she even made sure to sort the garbage as well.</p>

      <p>“Now then, next is...”</p>

      <p>After throwing out the garbage, she washed her hands and continued putting away the groceries. While she hadn’t been sure how to act on Earth at first, she no longer showed any sign of hesitation. This was in part because she had spent half a month on Earth already, but her disposition also played a big part in it. Although she held the official position of a royal guard, she was extremely well-versed in domestic matters.</p>

      <p>As Ruth finished up, two more people returned to room 106.</p>

      <p>“But just playing card games all the time is getting old. How about we use next month’s sports festival?”</p>

      <p>“As you say, Theia-dono, just playing card games all the time is getting boring. But wouldn’t the sports festival just be a challenge of stamina?”</p>

      <p>Coming through the front door were Theia and Kiriha, who were amicably discussing the school sports festival being held in May.</p>

      <p>“Well, for example, there’s that obstacle marathon for clubs, right? We’d be able to have a fair fight using that, don’t you think?”</p>

      <p>“I see, that certainly would be...”</p>

      <p>“Welcome back, Your Highness, Kiriha-sama.”</p>

      <p>“Thank you, Ruth.”</p>

      <p>“Thank you.”</p>

      <p>Ruth welcomed them as she closed the refrigerator and stood up, and the two girls casually entered as if it was their own apartment.</p>

      <p>“Your Highness! Your shoes, your shoes!”</p>

      <p>“Oh, right.”</p>

      <p>Theia had already stepped into the apartment still wearing her shoes. But after Ruth’s reminder, she hurried back to take them off.</p>

      <p>“...This country sure has some weird customs.”</p>

      <p>“Oh, don’t say that.”</p>

      <p>“That pleb is my vassal, so he should value my nation’s customs over his own.”</p>

      <p>“It’s only proper to observe a nation’s customs while visiting.”</p>

      <p>Theia was unused to the practice of taking off her shoes when entering a home, and expressed her frustration accordingly. The fact that Koutarou got angry whenever she forgot only made it worse. Being stubborn as she was, if Koutarou hadn’t gotten mad, she might have been more inclined to take them off.</p>

      <p>“That doesn’t matter anymore. Kiriha, I’m thinking of bringing up what we were talking about with Koutarou. What do you think?”</p>

      <p>“I don’t mind. I will support your suggestion, Theia-dono.”</p>

      <p>Kiriha agreed to Theia’s proposal, but that was because it seemed to pan out in her favor. If they competed in the sports festival, Theia’s weaker physique would certainly put her at a disadvantage. Moreover, Theia was unfamiliar with Earth sports. And since Sanae was a ghost, it would essentially be a competition between Kiriha and Koutarou.</p>

      <p><em>Even so, who knows what she’s thinking beyond that smile? I can’t let my guard down yet...</em></p>

      <p>Theia had been smiling confidently this whole time. It made Kiriha somewhat uneasy, so she began forming a plan in her head just to be on the safe side.</p>

      <p>As they continued their discussion, someone else appeared at the front door.</p>

      <p>“I’m baaack!”</p>

      <p>“Welcome back, Yurika-sama.”</p>

      <p>“Thanks, Ruth-san.”</p>

      <p>It was indeed Yurika. As she opened the door and entered, she let out a heavy sigh.</p>

      <p>“Is something the matter, Yurika-sama?”</p>

      <p>“Well, um... The teacher got angry at me... because I’m late so often...”</p>

      <p>“Is that so?”</p>

      <p>Yurika was sighing because she’d been yelled at by her homeroom teacher after school. The stern lecture left her in a bad mood.</p>

      <p>“Please cheer up, Yurika-sama.”</p>

      <p>“Thank you, Ruth-san. You’re right. I can’t just stay depressed! Yurika, fight!”</p>

      <p>Encouraged by Ruth, Yurika recovered somewhat and flashed a small smile. But the very next moment, Yurika was staring at the kitchen counter with a stupefied expression.</p>

      <p>“Huh?”</p>

      <p>“Is something wrong?”</p>

      <p>“R-Ruth-san, w-wasn’t there a plastic bag here? A big, white plastic bag from the supermarket?”</p>

      <p>Yurika began to panic. She was sure she’d left that plastic bag by the sink this morning. She was planning on having its contents for dinner when she returned from school, but now that precious bag was gone without a trace.</p>

      <p>“Oh, if you’re talking about the trash, I threw it away.”</p>

      <p>“T-Trash? You threw it away?!”</p>

      <p>“Yes. Is there a problem?”</p>

      <p>“Kyaaaaah!”</p>

      <p>Yurika didn’t answer Ruth—she no longer had the time for that. She hurriedly threw off her shoes and made a mad dash for the garbage can next to the sink.</p>

      <p>“Please be all right!”</p>

      <p>Yurika prayed with all of her might as she opened the lid to the garbage can.</p>

      <p>“Yurika-sama?”</p>

      <p>“Ahh...”</p>

      <p>But alas, reality is harsh.</p>

      <p>Being as diligent as she was, Ruth had gone through the plastic bag and sorted its contents. The splintered foam cups were put in with the burnable waste and the noodles were tossed with the rest of the garbage.</p>

      <p>“H-How did this happen...?”</p>

      <p>“What’s the matter, Yurika-sama?”</p>

      <p>Her precious noodles were now mixed with the other garbage. At this point, not even Yurika could think of eating them.</p>

      <p>“Ah... Aaaaaaaahh!”</p>

      <p>Yurika was intensely discouraged, but at the same time, an immense hunger attacked her. Faced with the loss of her dinner, her appetite had awoken.</p>

      <p>“Th-There’s no more hope for recovery...”</p>

      <p>Tears streamed down Yurika’s cheeks as her stomach growled. The growl was so loud even Ruth could clearly hear it.</p>

      <p>“Why... Why does this always happen to me? I’m working as hard as I can... Waah haa haa...”</p>

      <p>“Yurika-sama, what’s wrong? Yurika-sama!”</p>

      <p>Yurika could no longer hear Ruth’s voice. She just continued to cry as she stared down at the floor.</p>

      <p>The tears dripped from her cheeks, falling onto the floor in a speckled pattern. In her puddle of tears, however, Yurika spotted something—one of the shattered noodles. She hastily reached for the tear-stained noodle.</p>

      <p>“Your Highness! Kiriha-sama! Yurika-sama is...!”</p>

      <p>“What, did something happen?”</p>

      <p>“Yurika?”</p>

      <p>When Ruth called to them, Theia and Kiriha came to peek into the kitchen. Yurika simply stood there, looking down sadly.</p>

      <p>“Is this it...? Is this fragment all I have to live on for the next two days...?”</p>

      <p>Yurika’s stomach continued to growl as she stared at the piece of a noodle in her hand.<br/><br/></p>

      <p>In room 106, playing card games after dinner was the norm. But this wasn’t any ordinary game. It wasn’t for fun or to deepen their friendship; it was a battle for control of the apartment.</p>

      <p>The inner room was floored with six tatami mats. One of those tatami mats was covered with furniture, leaving five more. As luck would have it, that was also the number of people competing over the room. Accordingly, they had determined that everyone controlled one tatami mat each.</p>

      <p>Koutarou’s mat was in the center of the room. When the tea table wasn’t there, that was where he normally sat. It was also where he would lay out his futon.</p>

      <p>South of that was Sanae’s mat, the one by the window. Although that was her spot, she was usually over piggybacking on Koutarou in his space. But when they moved the tea table to the center of the room, Koutarou retreated back to the tatami mat by the window, bringing Sanae along for the ride.</p>

      <p>Kiriha’s tatami mat was the one closest to the kitchen. It was the one above the underground tunnel leading to her secret base. It would be an awkward place to live, but to Kiriha, it was mostly a convenient way to get home easily.</p>

      <p>Yurika’s tatami mat was next to Kiriha’s, and was positioned in front of the wardrobe. Since she had taken to living in the wardrobe before anyone noticed, that tatami mat naturally became hers. But as she was weak to pressure, it was common for her to allow the other invaders to violate her borders, even though she would often suffer for it.</p>

      <p>Theia’s tatami mat was the one farthest back in the room, in front of the glowing wall. She often left a mini table and chair meant for tea time there. And courtesy of her voluminous dress, she would often trespass into the territory of the others. Really, it was Theia who was most likely to invade Yurika’s tatami mat.</p>

      <p>With their borders established, each mat was determined to be worth 180 points, and control of the room would be calculated that way. One point was worth one centimeter, so 180 points was 180 centimeters—one whole tatami mat.</p>

      <p>The five of them fought over these points using mostly card games. Gaining points would result in expanded territory. Matches were held five times a day so that each of them would have a chance to choose which game they played. The plan was to repeat this until somebody had 900 points, meaning they held all five tatami mats and thus had gained full control of the room. This was how they had agreed to settle their disputes after signing the Corona Convention.</p>

      <p>At the current moment, Yurika was in dead last with less than 160 points. The other four players were maintaining somewhere around 180 points. Theia was violating Yurika’s territory because of this, and at this rate Yurika would surely be driven out of the room.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert3">
    <img alt="insert3" class="insert" src="../Images/Insert3.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter13">
    <div class="main">
      <p>According to plan, there was another round of games scheduled for today, but the competition showed no sign of starting. Despite everyone gathering by the tea table, they weren’t doing anything.</p>

      <p>“Kiriha-san, what’s the matter with Yurika?”</p>

      <p>“Well, it seems like she has ruined two days worth of food.”</p>

      <p>“So that’s why she’s acting like that...”</p>

      <p>They hadn’t started playing yet because of Yurika.</p>

      <p>“Heehee! Ahahaha! Fight! Yurika, fight! I love noodle cups!”</p>

      <p>Staring into oblivion, Yurika just kept hysterically repeating the same sing-song nonsense. This was the state Koutarou and Sanae found her in when they returned from his part-time job. They knew they weren’t going to be able to play cards with her like this, so they decided to postpone today’s games.</p>

      <p>“So what is she clutching?”</p>

      <p>“It’s a fragment of something known as an instant noodle. Apparently everything but that fragment has gone to waste.”</p>

      <p>“Fight! Yurika, fight! I am a magical girl!”</p>

      <p>“Actually, Satomi-sama, I was the one who mistook Yurika’s food for garbage and threw it away.”</p>

      <p>Ruth’s expression clouded as she looked at the miserable Yurika and explained the situation to Koutarou.</p>

      <p>“The noodles were in a bag with broken cups and dust, so I was certain it was all trash...”</p>

      <p>Feeling responsible for the incident, Ruth was quite apologetic.</p>

      <p>“I see... All right.”</p>

      <p>Once he had the full story, Koutarou quickly decided what to do. If it had just been a matter of Yurika, he would have hesitated, but Ruth being involved too was a little different. He was going to resolve things immediately.</p>

      <p>“What are you doing?”</p>

      <p>“Just wait and see... Hey, Yurika.”</p>

      <p>“I believe in love and courage! The most important things are life and love! I love everyone! Lots of food! L-Lots of... food...”</p>

      <p>“Wuh?”</p>

      <p>“Uuuwaaaaahh!”</p>

      <p>Yurika wasn’t listening to Koutarou at all. Instead, she suddenly started crying. She had depressed herself with the lyrics of the song she was singing to herself. “Lots of food.” To her, that line was just too sad.</p>

      <p>“Since it’s come to this...”</p>

      <p>Although he’d jumped back in surprise when Yurika first started to cry, Koutarou had no intention of leaving Yurika as she was. He collected himself and approached her again, snatching the noodle shard out of her hands.</p>

      <p>“Aaah! Give it back! Please give it back! That’s the only food I have until the day after tomorrow!”</p>

      <p>Koutarou finally got Yurika to snap out of it. Having had her last piece of food stolen from her, she began panicking.</p>

      <p>“Hey, Yurika, don’t you want to eat some normal food instead of this?”</p>

      <p>“Huh...?”</p>

      <p>Yurika froze in her tracks and her stomach began growling when she heard what Koutarou said. Her body gave an honest answer to his question.</p>

      <p>“Th-That would be a dream come true, b-but you’re not planning to demand that I hand over several points in return, are you?!”</p>

      <p>“I would love to, but this isn’t just about you, so I’ll overlook it for the next two days.”</p>

      <p>“Y-You will?!”</p>

      <p>“Satomi-sama! Thank you very much!”</p>

      <p>Yurika and Ruth both smiled.</p>

      <p>“Ooooooh, Satomi-san! I knew you were a good person from the moment we first met!”</p>

      <p>“Yeah right...”</p>

      <p>Yurika shed tears of joy as she grabbed ahold of Koutarou’s hand and began shaking it. Sanae, who was clinging to Koutarou’s back, sighed. The day they had first met, she called Koutarou a horrible person and a bully.</p>

      <p><em>But back then, I never thought things would end up like...</em></p>

      <p>Deep in thought, Sanae clung to Koutarou just a little tighter.</p>

      <p>“Thank you very much for looking out for us, Satomi-sama.”</p>

      <p>“Haha, I’d rather feed Yurika for two days than watch you walk around with that gloomy face, Ruth-san.”</p>

      <p>Really, going for two days without food wasn’t going to kill anyone. It was more like a rough diet. Even so, Koutarou just couldn’t stand to see Ruth look so down.</p>

      <p>“Oh my... Thank you very much, Satomi-sama...”</p>

      <p>Ruth smiled and slightly blushed as she deeply bowed. Such earnest thanks from Ruth made Koutarou feel a little warm and fuzzy.</p>

      <p>“Please raise your head, Ruth-san. It’s really not a big deal.”</p>

      <p>“Satomi-sama, relative worth is indeed relative.”</p>

      <p>“...Hey, pleb.”</p>

      <p>At that moment, Theia’s piercing gaze shot right through Koutarou.</p>

      <p>“Wh-What is it now all of a sudden?”</p>

      <p>“It was the same way this morning. What’s with the unfair difference in how you treat me and Ruth? It’s like you’re saying you’re willing to swear your loyalty to her, not me!”</p>

      <p>Theia frustratedly bit her lip and puffed up her cheeks as she glared at Koutarou. To a stranger, it might have looked cute, but the truth was that she was seriously upset.</p>

      <p>“Jeez, here I was wondering what you’d say, but...”</p>

      <p>“What?! Then give me a satisfactory explanation!”</p>

      <p>Theia grew even angrier as Koutarou exaggeratedly sighed. With a cool look, he ignored her tantrum and pointed at Sanae, Theia, Yurika, and Kiriha in that order.</p>

      <p>“A weird person, a weird person, an extremely weird person, and another weird person. There are four weird people in this room. It should be obvious that I care about the only other normal person here!”</p>

      <p>“What kind of nonsense is that? And how dare you call me strange?! I am your master!”</p>

      <p>“Some master! Do you have any idea the trouble you put Ruth-san through?!”</p>

      <p>“I-It’s not trouble, Satomi-sama...”</p>

      <p>“Just listen to her, pleb! Ruth herself says serving me isn’t troublesome!”</p>

      <p>“As if someone that polite would admit how much of a pain you are right in front of you!”</p>

      <p>“No, there’s no pain or trouble! Honestly!”</p>

      <p>While Koutarou and Theia were making a fuss, Ruth was oddly flustered. Her behavior was all that really needed to be said about how she felt, but Koutarou and Theia were too busy arguing to notice.</p>

      <p>“Hmph, it doesn’t matter. No matter what you think, I only need to seize control of this room. Doing that will put you under my domain too!”</p>

      <p>“Like it’ll be that simple!”</p>

      <p>“I’ll make it that simple! That’s the power of royalty!”</p>

      <p>“I’ll fend you right off!”</p>

      <p>As Koutarou and Theia were glaring at each other, Kiriha, who had been quietly observing, finally spoke up.</p>

      <p>“About that, Koutarou... We have a proposal.”</p>

      <p>“...A proposal?”</p>

      <p>Slightly calmer now, Koutarou turned towards Kiriha.</p>

      <p>“That’s right. You and I both have plenty of will to fight, however just playing card games every day is dulling that. With that in mind, we would like to suggest a different kind of match. Of course, the amount of points played for will be appropriately higher.”</p>

      <p>“What do you mean?”</p>

      <p>“Well, there’s an obstacle marathon for clubs in the upcoming sports festival, right? We could participate and compete using that. Just playing card games every day is getting stale, isn’t it?”</p>

      <p>Theia continued Kiriha’s explanation. She had calmed down and was now back to normal.</p>

      <p><em>I will win this match by a landslide and demonstrate my superiority to the pleb...</em></p>

      <p>At least, that’s what Theia was thinking.</p>

      <p>“That sounds interesting. That kind of special match really heats things up. I’m on board.”</p>

      <p>Koutarou quickly agreed to the proposal. As the star of previous sporting events, he had no reason to refuse.</p>

      <p><em>Heh heh, I’ll make you regret challenging me to a sports match, Tulip...</em></p>

      <p>Koutarou flashed a confident, fearless grin.</p>

      <p>“I... I agree as well.”</p>

      <p>Yurika, who would normally complain about matters being resolved without her, obediently assented. With two days worth of food on the line, she was going to do whatever Koutarou wanted.</p>

      <p>“Wait just a minute. What about me? I can’t join the sports festival.”</p>

      <p>But that was when Sanae spoke up. Being a ghost, she was unable to take part in the match.</p>

      <p>“It’s all right. We’ve already come up with a way to take that into account. You’ll pick one of us beforehand, and you’ll get the same rank as that person.”</p>

      <p>“Pick beforehand? What do you mean?”</p>

      <p>“Well for example, say you pick me.”</p>

      <p>“I absolutely refuse.”</p>

      <p>“Hold on, Sanae, this is just an example... Let’s say I get second place. In that case, you would get second place too, Sanae. It would just be like two people got a draw for second place.”</p>

      <p>Effectively, third place would then be fourth, fourth would be fifth, and fifth would be sixth. Sanae would just get the same rank as the person she chose to bet on.</p>

      <p>“I see, so we would be in the same boat.”</p>

      <p>“That’s right. Although, this method puts you at a slight disadvantage since you have no say in the outcome of the event. Alternatively, if you don’t choose anyone, you would just get third place. Feel free to choose whichever way suits you best.”</p>

      <p>With five people competing, the person in third place wouldn’t lose any points. It would basically allow Sanae the option not to take part in the match.</p>

      <p>“Hmm...”</p>

      <p>While still clinging on to Koutarou’s back, Sanae put one hand on her cheek and pondered.</p>

      <p>“I can’t just not participate. That would be too boring...”</p>

      <p>Sanae glanced at Kiriha, Theia, and Yurika in order and then finally looked at Koutarou in front of her. After staring at the side of his face for a while, she smiled brightly.</p>

      <p>“All right, I’ve decided! I’ll be in the same boat as Koutarou!”</p>

      <p>“Hmm? Are you okay with that?”</p>

      <p>“Even though there might be obstacles, it’s still a marathon, right? You look like you have the most stamina. Besides, we have a truce, remember?”</p>

      <p>“I see. I’ll make sure you don’t regret choosing me, Sanae.”</p>

      <p>“Nyahaha! I’m counting on you.”</p>

      <p>Sanae smiled and nodded at Koutarou before putting her arm back around his neck.</p>

      <p>“All right! With that, it’s been decided! As a special match, we shall take part in the obstacle marathon for clubs!”</p>

      <p>And so Koutarou and the others would be holding their own competition during the school sports festival.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter2">
    <div class="main">
      <h1>A Day for the Invaders</h1>

      <h2>Monday, April 27th</h2>

      <p>Over half a month had passed since the four invaders first forced their way into room 106. During that time, they had fought over the room primarily using card games, although they were mostly just trading points going back and forth. Koutarou still wasn’t convinced that games alone would be enough to solve his problems. He was using every cell in his not-so-clever head to come up with countermeasures, which was why he was visiting Kisshouharukaze High School’s cosplay club today. Of course, his goal was to deal with one of the invaders in particular.</p>

      <p>“...So there you have it. She’s just cosplaying without any consideration for her environment or the people around her. That’s why I would like you to teach her the true meaning of cosplay.”</p>

      <p>Koutarou was sitting at a conference table and talking to six girls. These six young ladies were the cosplay society’s club president and the other five members. Like the knitting society, they were considered a weak club.</p>

      <p>Koutarou came to them to explain the situation he was in. He had an acquaintance who was a cosplayer, and this cosplayer was cosplaying regardless of the time, place, or occasion.</p>

      <p>“This is a photo of the cosplayer in question.”</p>

      <p>Once he’d given them a general idea of his predicament, Koutarou pulled out a photograph and put it on top of the table. The club president, who was sitting at the opposite of the end of the table, picked it up.</p>

      <p>“I see... So this is the girl...”</p>

      <p>It was a picture of Yurika in her magical girl outfit.</p>

      <p>“What a cute girl. Is the outfit an original, I wonder?”</p>

      <p>“The quality of her outfit seems to be pretty high.”</p>

      <p>“Maybe it was custom made. Either way, it must have cost quite a bit...”</p>

      <p>“Look at the staff! It’s really well done!”</p>

      <p>“It seems she’s at least got the determination of a first-rate cosplayer.”</p>

      <p>The members of the society all took peeks at the photograph and stated their impressions.</p>

      <p>“If we just leave her like this, she will eventually cause problems for all of you as well. If she walks around here in this outfit, people will think she’s one of you.”</p>

      <p>“You’re right. People would think that...”</p>

      <p>The club president looked down as she replied to Koutarou. When she did, he noticed that her shoulders were trembling slightly.</p>

      <p><em>Not good. Did I make her angry?</em></p>

      <p>It was clear that Yurika would cause problems for the society sooner or later.</p>

      <p>“What will you do?”</p>

      <p>“President!”</p>

      <p>The other members also noticed their president’s behavior and looked at her anxiously.</p>

      <p>“So how about it? Will you do it?”</p>

      <p>A single tear streamed down the president’s cheek and fell onto Yurika’s photograph, distorting the outline. Seeing that, Koutarou naturally assumed the negotiations had ended in failure.</p>

      <p>“Heh... Heh heh... Heh heh heh heh...”</p>

      <p>The president’s shoulders trembled more as she began laughing in what was a small voice at first, but gradually grew louder.</p>

      <p>“Ahahahaha!”</p>

      <p>There was a huge grin on her face as she finally looked up.</p>

      <p>“How could this be?!”</p>

      <p>“...?”</p>

      <p>The president was crying as she laughed gleefully. Koutarou had no idea what was going on and wasn’t sure what to think of her reaction.</p>

      <p>“President, what about his request?”</p>

      <p>“Wonderful! Absolutely wonderful! Today is a marvelous day!”</p>

      <p>The president excitedly slammed her hands on the table and kicked her chair away as she stood up.</p>

      <p>“So will we accept?!”</p>

      <p>“Of course! This is love! A very deep love! Satomi-kun wouldn’t make such a request without a true understanding and deep love of cosplayers!”</p>

      <p>“In that case, President...”</p>

      <p>“You all understand, right?! If we don’t respond to Satomi-kun’s deep love, how can we call ourselves true cosplayers? Let’s combine our powers and turn this girl, Yurika-san, into a first-rate cosplayer!”</p>

      <p>“Yes!”</p>

      <p>“Coscluuub!”</p>

      <p>“Fight!”</p>

      <p>The five members responded to the president in chorus. The whole cosplay society was getting fired up.</p>

      <p>“Umm...”</p>

      <p>Initially taken aback by this unexpected development, Koutarou finally regained his composure.</p>

      <p>“...So you’ll do it?”</p>

      <p>“Ah, yes. E-Excuse us, Satomi-kun. We got a bit too excited...”</p>

      <p>Upon realizing Koutarou’s reaction, the president’s cheeks turned red with embarrassment.</p>

      <p>“I don’t know if it was just a fad, but a shadow has been cast on the cosplay boom lately... On top of that, we have to endure the prejudice and harassment of heartless onlookers. That’s why we were just so happy for a normal person like you to show that you understand...”</p>

      <p>The president’s face was beet red, but the other members were in a similar state. Some were scratching their noses and others scratching their heads. They were each embarrassed in different ways, but they were all looking at Koutarou warmly.</p>

      <p><em>I see. They’re enduring their own hardships...</em></p>

      <p>Koutarou sympathized with the girls. When it came to being isolated, the knitting society and the cosclub were in similar situations.</p>

      <p>“Thank you very much, everyone. I won’t forget this. If you ever have problems with something, please let me know.”</p>

      <p>At first, Koutarou had come to them as a countermeasure against the invaders, but before he knew it, his desire to use the cosclub had disappeared. Now he was glad he had decided to consult with them so early. It would have been too late once Yurika had already caused problems for them.</p>

      <p>“In that case, can I ask something of you, Satomi-kun?”</p>

      <p>“Of course. What can I do for you?”</p>

      <p>“Well... could you stop by and play from time to time?”</p>

      <p>The president pressed her hands together and smiled awkwardly.</p>

      <p>“I don’t mind... but why?”</p>

      <p>“W-Well, you see... Our club only has girls in it, right?”</p>

      <p>The president indicated the club members on either side of her. There were six of them in total, all girls.</p>

      <p>“That’s why there are times when we’d love to hear a boy’s thoughts on designs, but it’s hard to ask a normal boy... It’s easier to ask someone like you who doesn’t have any underlying prejudice...”</p>

      <p>The president’s voice gradually grew quieter. By the end of her sentence, her voice had vanished altogether. She just looked at Koutarou with an uneasy glance.</p>

      <p>“I understand. Since you listened to my request, I have no reason not to listen to yours. I would love to help out.”</p>

      <p>Hearing her explanation, Koutarou nodded his head. Since he was asking them to help with Yurika, this seemed like a fair deal to him.</p>

      <p>“Thank you, Satomi-kun!”</p>

      <p>“Then let’s get to it right away, President!”</p>

      <p>“Huh? Now?!”</p>

      <p>“Of course, Satomi-kun! It won’t take long!”</p>

      <p>With Koutarou’s consent, the girls jumped into action straight away. They ran around the room in a tizzy, grabbing outfits from their hangers. It looked like they were having a lot of fun.</p>

      <p><em>Oh well...</em></p>

      <p>Koutarou was again taken aback momentarily, but quickly collected himself and relaxed as he straightened his posture in the chair.<br/><br/></p>

      <p>“Well then, I’ll be on my way now.”</p>

      <p>“Thank you, Satomi-kun. Leave Yurika-san to us.”</p>

      <p>“Please come visit again, Satomi-kuuun!”</p>

      <p>“You’re not doing it right!”</p>

      <p>“Oh yeah!”</p>

      <p>“All together now!”</p>

      <p>“Farewell, Master! We’ll be waiting for your return!” they all called.</p>

      <p>“Ahaha, okay. See you later.”</p>

      <p>Koutarou left the club room as he was seen off by the smiling cosplayers. The windowless hallway he entered was dim and chilly, the complete opposite of the cosplay society’s club room.</p>

      <p>“Still, they sure are great. All cosplaying should be disciplined like that.”</p>

      <p>The girls of the cosplay society would never cosplay somewhere without permission. They wouldn’t even walk around school in their costumes. Even when going to the bathroom, they made sure to change first.</p>

      <p>“I absolutely agree.”</p>

      <p>All of a sudden, Sanae spoke up. She had kept quiet during his meeting in order not to disturb Koutarou. Still floating in the air, she clung to Koutarou’s back and poked at his cheeks.</p>

      <p>“But aren’t you a sly one? Trying to pawn off Yurika to the cosplay society like that...”</p>

      <p>“That was my plan at first. But after talking to them, I was glad I did.”</p>

      <p>“Give and take?”</p>

      <p>“Something like that.”</p>

      <p>“...Isn’t it just because you love those maid outfits?”</p>

      <p>“It’s not! ...Well, I certainly don’t hate them.”</p>

      <p>“If you say so... But with this, it looks like there’ll be one less rival, huh?”</p>

      <p>“Heh heh heh, one down...”</p>

      <p>Koutarou grinned and laughed. If Yurika joined the cosplay society, she would no longer need room 106 as a place to express herself. That was Koutarou’s goal, and having one less invader to deal with was worth celebrating.</p>

      <p>“You really are sly, you know?”</p>

      <p>“You think so?”</p>

      <p>And so Koutarou’s negotiations with the cosplay society were concluded successfully. Koutarou and Sanae continued to chat as they left the club building. Once outside, they then headed back towards their classroom as their lunch break was about to end.</p>

      <p>Even though Sanae was floating through the air in broad daylight, none of the students made a commotion. That was because only the residents of room 106 could see Sanae at school. The only exception was Shizuka, who could see Sanae while she was at Corona House or when she wasn’t concealing her presence.</p>

      <p>But since she was hiding now, Kenji and Shizuka only greeted Koutarou.</p>

      <p>“Welcome back, Satomi-kun.”</p>

      <p>“Where’d you go, Kou?”</p>

      <p>“I had an errand to take care of in the club building.”</p>

      <p>“An errand?”</p>

      <p>“Yeah, I went to one of the clubs and introduced Yurika to them.”</p>

      <p>“Introduced Nijino-san? What kind of club was it?”</p>

      <p>At the mention of Yurika’s name, Kenji perked up as he adjusted his glasses. Since she started sitting next to him, Kenji had a lot of interaction with her. He was the type that tended to take care of the people around him, so he couldn’t help himself. She was even more dangerous to leave on her own than Koutarou was.</p>

      <p>“I can’t say. Not even to you. It has to do with her hobby.”</p>

      <p>“Hmm... Well, that’s fine. More importantly, Kou, where did you meet those four?”</p>

      <p>“What four?”</p>

      <p>“Don’t try to play dumb. I’m talking about Nijino-san, Kurano-san, Ruth-san, and Theia-san.”</p>

      <p>“Oh, you mean them.”</p>

      <p>Koutarou really wasn’t trying to play dumb. Including Ruth, there were five invaders, so the mention of “four” just didn’t click for him. But since Kenji didn’t know about Sanae, it was a simple misunderstanding.</p>

      <p>“You were acquainted before they transferred here, right?”</p>

      <p>“Yeah, I met them while I was out shopping once.”</p>

      <p>“Shopping...?”</p>

      <p>Kenji cocked his head to the side. He spent a lot of time with Koutarou, but he didn’t have any recollection of meeting those four girls while they were out shopping. Something seemed fishy to Kenji about Koutarou’s answer.</p>

      <p>“When was this sho—”</p>

      <p>“A-Anyways, those four girls sure stand out, don’t they, Mackenzie-kun?”</p>

      <p>“Huh? Yeah, they do. I guess you could stay they’re rich in variety...”</p>

      <p>Having sensed where the conversation was heading, Shizuka, who knew the truth, diverted Kenji’s attention elsewhere. He didn’t have the will to pursue it any further, so he went along with the change of topic without objection.</p>

      <p>“Phew...”</p>

      <p><em>That was close. Thank you, Landlord-san.</em></p>

      <p>With Kenji now focused on Shizuka, Koutarou let out a sigh of relief. When his eyes met hers, they smiled at each other. At the moment, Shizuka was one of Koutarou’s few allies. She would give him a hand every now and then.</p>

      <p>“Mackenzie-kun, which one of them is your type?”</p>

      <p>“Me?”</p>

      <p>“Yeah, I’m kind of interested.”</p>

      <p>“For Mackenzie, it’s that girl in the drama club, right? You even joined the drama club to chase after her.”</p>

      <p>“You’re wrong. A friend of mine asked me to join to even their numbers.”</p>

      <p>Kenji let out an exasperated sigh at Koutarou’s jab. This wasn’t the first time it had come up.</p>

      <p>“Then tell me, Mackenzie-kun! My friends are always asking what kind of girls you’re interested in!”</p>

      <p>“Hmm... Out of those four...”</p>

      <p>Kenji looked over at the four girls. Koutarou naturally looked over as well. Apart from Sanae, the invaders were all sitting together and chatting with several other students. The girls stuck out when they first arrived at school, but now they had blended in and were a part of the class.<br/><br/></p>

      <p>“Are you dating someone, Kurano-san?”</p>

      <p>“Would you leave it alone? That’s all you boys care about...”</p>

      <p>“Aren’t you curious too?”</p>

      <p>“Th-That’s...”</p>

      <p>“Heehee, I don’t mind. I’m not currently seeing anyone.”</p>

      <p>“All right! Me! Me! I’ll volunteer!”</p>

      <p>“You idiot...”</p>

      <p>“However, there is someone I have chosen.”</p>

      <p>“Really? Who?!”</p>

      <p>“Ahaha, that’s a secret.”</p>

      <p>Kiriha was known as the class honor student. At school, she changed her tone and behavior. She was active and had a quick mind, but she was also kind to everyone. Because of that, she always had people around her. Most of the students gathered around the invaders now were Kiriha’s friends and acquaintances. She put on quite the act, but for Koutarou who knew the real Kiriha, he couldn’t help but feel a little sorry for his oblivious classmates.</p>

      <p>“Ah, there’s only five minutes left! I still have six problems left! I won’t make it! Um... Ah...! Waaaaah!”</p>

      <p>“Yurika-san, do you want me to show you my homework again?”</p>

      <p>“Is that okay?!”</p>

      <p>“If you buy me juice.”</p>

      <p>“...That’s fine. I’ll solve them myself. Waaah...”</p>

      <p>Compared to Kiriha, Yurika was known as a lost cause. She was always restless and acted suspiciously. She failed a lot, and was often late. Forgetting her homework was an everyday occurrence. Even now, she was desperately toiling away to get her math homework done. She also often hung out with Kiriha, which only made her hopelessness stand out even more. Yurika, however, hadn’t realized that at all.</p>

      <p>“I’m not fond of rock.”</p>

      <p>“Then what do you listen to, Theia-chan?”</p>

      <p>“Normally classical music, although I’m interested in enka. Last year’s big hit ‘The Festival’s Flame Drum’ utterly impressed me.”</p>

      <p>“That was a huge hit in the enka world, wasn’t it?”</p>

      <p>“So cool... As expected from a princess.”</p>

      <p>The most conspicuous of the four was Theia. Unlike Kiriha, Theia was simply being herself. That said, she had changed her backstory from that of an alien princess to an international student from Europe. She announced herself as a princess from a country that still had a monarchy.</p>

      <p>Her manner of speaking and origin were strange, but everything she said was still plausible. Surprisingly, she also was well-versed in popular artists and comedians. The truth was that her translation device was capable of supplementing on such topics, so she wasn’t having much trouble adjusting. Thanks to that, the class simply accepted her as high society.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert4">
    <img alt="insert4" class="insert" src="../Images/Insert4.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter21">
    <div class="main">
      <p>“Hmm, so do you make Theia-chan’s bentou too, Ruth-san?”</p>

      <p>“Yes, but I’m still studying native cuisine here.”</p>

      <p>“That’s nice. I wish I could cook...”</p>

      <p>“You’re envious, aren’t you? Ruth is a childhood friend I can boast about. Isn’t that right, Ruth?”</p>

      <p>“Yes.”</p>

      <p>Compared to how unique the other girls were, Ruth lacked impact. She never spoke out of line and, apart from her fitness, she had no noteworthy flaws. She always blended in with the background, gently smiling next to Theia. Even so, there were plenty of people who were attracted to her modest personality, so she was secretly quite popular. Although she didn’t stand out among the four, she still attracted attention.<br/><br/></p>

      <p>“Hmm...”</p>

      <p>“Don’t act like you have to think about it, Mackenzie. Out of those four, you’d pick Yurika.”</p>

      <p>As Kenji was deep in thought, Koutarou called him out with a grin.</p>

      <p>“Don’t put words in my mouth.”</p>

      <p>“No, I know I’m right. You’ve always been like that. You have a thing for girls who can’t do anything on their own.”</p>

      <p>“Ahaha, is that so, Mackenzie-kun?”</p>

      <p>“It’s not, Kasagi-san. Kou’s just spouting crap.”</p>

      <p>Kenji was quick to deny Koutarou’s accusation.</p>

      <p>“Then who is it?”</p>

      <p>“...”</p>

      <p>But when Koutarou pursued the question even further, Kenji fell silent. The truth was that Yurika <em>was</em> his type out of the four.</p>

      <p>“See? It is Yurika.”</p>

      <p>“But it’s not like that! It’s just a coincidence!”</p>

      <p>“Now that you mention it, Satomi-kun is pretty helpless too. That’s really what you fall for, isn’t it?”</p>

      <p>“Please don’t say something so terrifying, Kasagi-san.”</p>

      <p>“Don’t blush now.”</p>

      <p>“You just shut up, Kou! It’s really not like that, Kasagi-san...”</p>

      <p>After scolding Koutarou, Kenji desperately tried to explain himself to Shizuka. At that point, Sanae, who had been floating in the air nearby, started hanging off of Koutarou’s back.</p>

      <p>“Hey, Koutarou, what about you?”</p>

      <p>“Hmm?”</p>

      <p>“Which of us is your type?”</p>

      <p>Sanae hung on to Koutarou and whispered into his ear. Koutarou whispered back to her.</p>

      <p>“...You don’t even need to ask.”</p>

      <p>“You mean it’s me?! I’m always with you, after all! The innocent, energetic, brave, beautiful ghost, Sanae-chan!”</p>

      <p>Sanae’s eyes sparkled with anticipation as she leaned in more. However, Koutarou emphatically shook his head.</p>

      <p>“No way. It’s Ruth-san. Out of the five of you, it’s not even a contest.”</p>

      <p>To Koutarou who struggled day in and day out, the clear choice to him was the only girl he didn’t have to fight—Ruth.</p>

      <p>“Don’t even joke about that! I’m obviously the cutest!”</p>

      <p>“Gweh...”</p>

      <p>Sanae strengthened the grip around Koutarou’s neck and choked him.</p>

      <p>“I’m always right next to you! Can’t you say something like in those romantic comedies? How about that your heart is always throbbing near me and that you think I’m cute?!”</p>

      <p>“N-No, I don’t really feel anything...”</p>

      <p>“I’m even rooting for you in the sports festival! I’ve had it!”</p>

      <p>In her excitement, Sanae tightened her grip on Koutarou even more.</p>

      <p>“I-In the end you just want to chase me out of the room too...” Koutarou coughed.</p>

      <p>“I don’t care! It’s still unfair!”</p>

      <p>With the pressure around his neck, Koutarou felt like he was about to pass out. But to the others it looked like Koutarou was just sitting there normally, so nobody noticed anything. Really, it wasn’t just the four invaders; Koutarou and Sanae’s odd relationship was already a normal part of the class as well.</p>

      <p>After school, Kiriha went to the club building on her own.</p>

      <p>“In order to participate in the obstacle marathon for clubs, I’ll need to join a club, but...”</p>

      <p>Her goal was of course the sports festival next month. The specific event they were going to enter was known as the obstacle marathon for clubs. As the name suggested, representatives from a club would pair up to take part in the race. Because of that, the invaders each needed to join a club and be chosen as one of the representatives.</p>

      <p>“Which club should I join...?”</p>

      <p>Kiriha stopped in front of the club building and looked at the club directory. As she stared at the list, Kiriha was plotting out her strategies for the race.</p>

      <p><em>Since it’s an event that requires us to work in pairs, I’ll need a capable partner in case I get into trouble. Specifically, the foremost requirement is fast legs. Since it is a marathon, picking an athletic club is self-evident. Relying on the legs of a liberal arts club member would be foolish. And since it’s an obstacle course, having a small body would be favorable. Speaking of fast runners with slight builds, the first thing that comes to mind is...</em></p>

      <p>Having gathered her thoughts, a single club stood out to Kiriha: the girls’ track and field team. When her eyes happened across it on the board, her lips curled into a smile.</p>

      <p><em>The girls’ track and field team, huh? Not bad. Now all that remains is to see if I’ll be chosen as one of the representatives. I’ll try to talk my way into it, but if that doesn’t work, I’ll just head to a different club. I still have time left...</em></p>

      <p>“Karama, Korama, you’re here, aren’t you?”</p>

      <p>“We’re here! Ho!”</p>

      <p>“Of course! Ho!”</p>

      <p>Kiriha appeared to be the only one standing there, but the voices of her haniwa servants rang out from somewhere. They had been secretly following Kiriha around using their built-in cloaking devices.</p>

      <p>“Record all the conversations where I’m headed. I need to analyze everyone’s character and their relationships, so record as much as you can.”</p>

      <p>“Understood! Ho!”</p>

      <p>“We’ll do our best! Ho!”</p>

      <p>Kiriha was planning on forcing her way into the girls’ track and field team like she had done with Koutarou and room 106. She would examine the club members and skillfully manipulate them into selecting her as a representative for the obstacle marathon.</p>

      <p>“All right.”</p>

      <p>Kiriha nodded to the haniwas and headed for the door to the club building.</p>

      <p>“Nooooo! I won’t join the cosplay club! I keep telling you I’m not a cosplayer!”</p>

      <p>“She’s struggling more than I thought she would.”</p>

      <p>“Don’t mind that. Just bring her in. Remember this is for our beloved Satomi-kun’s sake.”</p>

      <p>“Roger!”</p>

      <p>“Noooooooo!”</p>

      <p>Kiriha entered crossed paths with a strangely noisy group as she entered, although she paid them no mind. She was exclusively focused on getting the girls’ track and field team to nominate her for the race.</p>

      <p>“Heh, I wonder how the others will manage...”</p>

      <p>Kiriha smiled confidently as she and the two haniwas made their way to the track and field club room.<br/><br/></p>

      <p>But Kiriha wasn’t the only invader at work. As she was meeting with the track and field team, Theia was also trying to join a certain club.</p>

      <p>“So she’s joining the girls’ track and field team?”</p>

      <p>“Yes. I have confirmed that she has entered their club room.”</p>

      <p>“Good work, Ruth. Keep up the observation.”</p>

      <p>“Understood.”</p>

      <p>With a beep, Ruth’s voice cut out over Theia’s bracelet. The device on her right wrist had several functions aside from summoning weapons. Communications being one of them, she was able to freely talk with Ruth through her own bracelet. After hearing Ruth’s report, Theia ended the call and put both of her hands on her hips.</p>

      <p>“Heh heh heh, so Kiriha is joining the girl’s track and field team. That would be the typical way to go about this. However...!”</p>

      <p>There was a glint in Theia’s eyes as she looked up at the building in front of her. It looked rather large that way, but in reality it was simply because of her small stature. The building itself wasn’t really all that big.</p>

      <p>“A competition is all about organizational strength and combined force! I’ll just leave the physical labor to the men! You chose the wrong club, underground dweller! Hahaha!”</p>

      <p>The building in front of her was also a club building, but it was different from the common club building. It was a prefabricated hut that the boys’ cheerleading squad used. Because they made a lot of noise when they practiced, they were put in a separate building.</p>

      <p>“What I seek is complete unity and utter loyalty! I’ll have you lay down your lives for my sake, boys’ cheerleading squad!”</p>

      <p>“Go! Go! Ha-ru-ka-ze!”</p>

      <p>“Go, go, Harukaze! Go, go, Harukaze!”</p>

      <p>As Theia laughed loudly, the boys’ booming voices and an intense drumbeat reverberated from the prefab structure forcefully enough to shake the ground.</p>

      <p>“Good, very good! Enthusiasm befitting my troops! Prepare yourselves!”</p>

      <p>“Go, go, Harukaze! Go, go, Harukaze!”</p>

      <p>Voices thundered and drums roared. They were so fierce that it seemed like they had enough power to blow away Theia’s tiny body. But that did not intimidate her. She walked right up to the door with a determined look and knocked.</p>

      <p>“Greetings!”</p>

      <p>“Who’s there? We’re busy practicing. If you have any business with us, come back later.”</p>

      <p>Shortly after Theia knocked, the door opened and a boy with a rough looking face appeared. The uniform he was wearing was in a more traditional style than the normal Harukaze High uniform. The hems of his coat and pants were longer and they had lots of embroidery. Around his left arm was an armband that read “boss.” This was this club’s leader.</p>

      <p>But the most noteworthy thing about him was his gargantuan figure. He looked like he would get caught in the doorframe. Compared to Theia, he looked like a giant.</p>

      <p>“That won’t happen. From today on, I will be this club’s ruler.”</p>

      <p>But even then, Theia’s smile never wavered. Her confident grin was quite fitting for such a ruler. She pointed directly in the giant’s face.</p>

      <p>“Hand over rulership of the cheerleading squad to me immediately. All of the members are to obey my every command!”</p>

      <p>“What?! Are you challenging us?! You think you could do anything against the glory of our squad with that tiny body of yours?!”</p>

      <p>“That’s the spirit! However, current boss, I won’t let you off so easily! I’ll properly discipline you and make you regret calling your new master tiny!”</p>

      <p>“Rubbish! Don’t get ahead of yourself, shrimp! Men, to arms! Don’t hold back, even if she’s a tiny girl! She insulted our squad!”</p>

      <p>Rallying to their boss, the whole squad streamed out of the club room. Each and every member that swarmed around Theia was huge. They towered over her so staggeringly that it literally looked like she disappeared in the crowd.</p>

      <p>“Very good! That’s the behavior I expect from my vassals!”</p>

      <p>“Cut the crap!”</p>

      <p>“Don’t think you’ll make it out of this alive!”</p>

      <p>The squad members flew into a fit of rage and threatened Theia. It was almost like a pack of fierce animals hunting a rabbit.</p>

      <p>“Of course I will! That’s simply the nature of victory! Behold the seventh princess of the Holy Forthorthe Galactic Empire, Theiamillis Gre Forthorthe!</p>

      <p>As it turns out, the fiercest animal among them was the tiny rabbit herself.<br/><br/></p>

      <p>Roughly an hour later, Theia’s figure could be seen through the window of the prefabricated hut. She calmly sat upon an elegant wooden chair in the back of the building. She now had the boss’ armband around her left arm. There was also a flag bearing the same crest as her bracelet hanging behind her. What had originally belonged to Kisshouharukaze High School was now property of the Forthorthe Empire.</p>

      <p>The cheerleading squad assembled before Theia. Strangely enough, they all were all injured to one extent or another. Bruises and sprains aside, some had burns, some blue bruises, and some even had scorched hair. Yet these iron-willed men were not the type to complain. They all stood up straight with their chests sticking out. The sight of ten boys in black uniforms lined up in military fashion left quite an impression. The only exception was the boy who had been the boss an hour ago. He had been roughed up and was now lying in the corner of the room.</p>

      <p>“Nooooo! I don’t want to wear that and take part in the sports festival! Please forgive meeeee!”</p>

      <p>“Just give up, Yurika-chan.”</p>

      <p>Voices could be heard from outside, but the men inside didn’t pay any attention. The same was true for Theia. She flashed a satisfied smile as she observed the squad members fall in line.</p>

      <p>She stood up, put her hands on her hips, and declared in a dignified manner, “Listen up. Starting today, the cheerleading squad will be reborn! You won’t be cheering from something as vague as a school anymore. From this point on, you are the royal cheerleading squad, and you will only cheer for me! This is the first time in the long history of the Forthorthe Empire that royalty has ever had a direct cheering squadron! I want you to be fully aware of that significance and pour your heart and soul into your work!”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>The ten men roared in response to Theia’s declaration. Their powerful voices, cultivated by daily training, shook the building. However, what they did could no longer be called cheering. It was more a raw demonstration of loyalty to Theia.</p>

      <p>“Boast and praise my noble name! Defeat is not permitted in Forthorthe! Don’t forget Forthorthe is synonymous with victory!”</p>

      <p>“Victory for Her Highness Theiamillis! Glory to the royal families of Forthorthe!”</p>

      <p>Theia had seized the cheerleading squad through military force. Kiriha’s way of gradually taking control didn’t suit Theia.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert5">
    <img alt="insert5" class="insert" src="../Images/Insert5.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter22">
    <div class="main">
      <p>As Theia took over the cheerleading squad, she radically changed its nature. It was molded into a force that existed solely for her sake. She was going to take on the sports festival with this reformed squad.</p>

      <p>“Fight the enemies of the royal families! Bleed for my sake! Complete discipline, trust in your companions, and—most importantly—utter loyalty to me will lead us to victory!”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>“Ahahaha! What will you do, pleb, now that I have obtained an invincible army?!”</p>

      <p>The excited Theia was thinking of Koutarou.</p>

      <p><em>Just you watch, pleb. I’ll show you how powerful loyalty and unity can be!</em></p>

      <p>She hadn’t fully realized that part of her reason for staging a coup of the cheerleading squad was to get back at Koutarou for refusing to swear his loyalty to her.<br/><br/></p>

      <p>While Theia was busy seizing control of the cheerleading squad, Koutarou was in the middle of his own club activities and was blissfully unaware of Theia’s and Kiriha’s tactics. In fact, he had completely forgotten about his normally chaotic life. When he was knitting with Harumi after school, he felt a strange sense of peaceful satisfaction similar to when he was sleeping.</p>

      <p>“Satomi-kun, you’ve gotten better.”</p>

      <p>“Really?”</p>

      <p>“Yes. Your stitches no longer show any hesitation.”</p>

      <p>“Hahaha, I’ve just used the same method since I started. I guess even someone as clumsy as me is bound to get better that way.”</p>

      <p>Koutarou hadn’t realized what he’d accomplished until Harumi mentioned it. But she was right. Even though he claimed it was muscle memory, his hands moved with a certain confidence now.</p>

      <p><em>It’s gradually gotten longer...</em></p>

      <p>Koutarou paused to inspect his progress for the day. What he was knitting was already over thirty centimeters long. If he kept up at this rate, he’d have completed a muffler shortly.</p>

      <p><em>This part here is pretty poorly done...</em></p>

      <p>His stitches at the start were a mess. They were puckered here or there and the finish was uneven, but the quality of the knitting gradually increased every ten centimeters or so. He was still no match for Harumi, but there was a big difference in his work from when he’d first started.</p>

      <p><em>Now that I look at it, I really have gotten better.</em></p>

      <p>When it came to knitting, hard work paid off with visible results. Koutarou could see for himself how much he’d improved.</p>

      <p>“...You really are seriously knitting, Satomi-kun.”</p>

      <p>“Huh?”</p>

      <p>When Koutarou looked up, Harumi’s gentle eyes were looking over his work.</p>

      <p>“Looking at your knitting, I can tell.”</p>

      <p>Harumi reached over and softly stroked Koutarou’s knitting as if she were petting a puppy.</p>

      <p>“You must really love knitting, Senpai.”</p>

      <p>“Oh...”</p>

      <p>Harumi was gentle even as she touched the knitting with the tips of her fingers. Seeing that, Koutarou could tell just how much she adored it. But when he pointed that out, Harumi slightly blushed and looked down.</p>

      <p>“Yes, I love it. That’s why... um... it makes me really happy to see you being so serious about it...”</p>

      <p>“In that case, I better live up to your expectations.”</p>

      <p>Koutarou smiled at Harumi and began moving his knitting needles again. Lately, he’d started to enjoy knitting, but he did even more so now that he was aware he was actually improving.</p>

      <p>“N-No, there’s no need to be in such a hurry... Let’s talk some mo—”</p>

      <p>“Hmm?”</p>

      <p>“Oh, n-nothing! Nothing at all!”</p>

      <p>When Koutarou looked back up at Harumi, her face was bright red and she was knitting away furiously. Her stitches were much rougher than normal and Koutarou couldn’t see any of her usual thoroughness in her work.</p>

      <p><em>I wonder what’s up...</em></p>

      <p>Koutarou tilted his head to the side and observed Harumi, who was acting rather unlike herself. But Koutarou staring at her only made Harumi’s face turn even redder and her hands move even faster.</p>

      <p>“Please stop taking my clothes off! I change clothes myself!”</p>

      <p>“It’ll be all right. Just relax.”</p>

      <p>“Stop fooling around and take this seriously. This is so we can get the measurements for the outfit she’ll be wearing for the obstacle marathon at the sports festival.”</p>

      <p>“Okay.”</p>

      <p>“I don’t want tooooo!”</p>

      <p><em>Ah, I completely forgot!</em></p>

      <p>Hearing the voices from outside reminded Koutarou of something.</p>

      <p>“By the way, Senpai, I have something I’d like to ask you.”</p>

      <p>“Y-Yes?”</p>

      <p>Harumi sat up straight as if she had been startled. While Koutarou found it strange, he continued talking.</p>

      <p>“Would you mind participating with me in the upcoming obstacle marathon for clubs?”</p>

      <p>“In the obstacle marathon...?”</p>

      <p>As she repeated his words, she seemed to return to her normal self. Shortly thereafter, she furrowed her brow and looked a little wistful.</p>

      <p>“But I’m not good with sports, so... I’ll probably just get in your way.”</p>

      <p>“That’s fine. It doesn’t matter.” Koutarou shook his head. “Actually, I made a bet with some friends over the race. The first one to reach the goal gets to order the others around. But since it requires groups of two, I can’t just enter it on my own.”</p>

      <p>“With your friends...?”</p>

      <p>“Besides, even though you work in pairs, they only take the best time of the two. So even if you retire right after the race starts, I won’t mind. All I need is for you to participate.”</p>

      <p>The obstacle marathon for clubs required two representatives from every participating club, but only one of them actually had to cross the finish line. Koutarou wouldn’t be able to enter the race on his own, but he could run it on his own as long as Harumi entered with him.</p>

      <p>“Now that you mention it, I do remember that in the rules... I understand. If that’s how it is, I’ll gladly accompany you.”</p>

      <p>“Thank you very much, Senpai.”</p>

      <p>“Don’t mention it.”</p>

      <p>In the end, Harumi accepted Koutarou’s request with a smile. Harumi had only hesitated because she didn’t want to hold Koutarou back. But if that wasn’t a problem, she had no qualms about entering.<br/><br/></p>

      <p>Koutarou and Sanae didn’t leave Harukaze High until 4:30 PM.</p>

      <p>“The knitting society sure is a bore...”</p>

      <p>“Just leave it be.”</p>

      <p>The hour was still relatively early for concluding club activities, but Harumi had an appointment at the hospital today. Whenever she did, the knitting society would either adjourn early or just postpone their club activities.</p>

      <p>“But is it really okay to partner up with that weak looking girl? If you have to retire too, we’ll get last place, you know...”</p>

      <p>“But it’s all good if I win. Heh heh, fortunately for you, I’ve always been the star of the sports festival.”</p>

      <p>“I’m starting to get uneasy all of a sudden...”</p>

      <p>The two were joking around as they headed for the school’s front gate. Other people couldn’t see Sanae, so Koutarou would stay silent in crowded places. That held true even now. Passing through the gate, he didn’t say a word back to Sanae. Sanae understood and didn’t really seem to mind, but they began talking again once they had gotten through the crowd.</p>

      <p>“...Don’t play around, Koutarou. We’re in the same boat this time.”</p>

      <p>“Just leave it to me.”</p>

      <p>“I’m starting to get really worried...”</p>

      <p>“Just wait and see. I’m going to start practicing tomorrow. I’m gonna blow you away, Sanae.”</p>

      <p>“I sure hope so.”</p>

      <p>“...”</p>

      <p>At that point Koutarou stopped talking again, but it wasn’t because there were people nearby. Koutarou was just normally walking along the fence around the school. When Sanae followed his line of sight, she realized that he was staring into the schoolyard.</p>

      <p>“What are you looking at?”</p>

      <p>“Hmm? Oh, nothing much.”</p>

      <p>Koutarou was watching the baseball club practicing. The field was equipped with stadium lighting, so they’d keep going well after the sun went down. Their practice had only just begun.</p>

      <p>“The baseball club, huh? You were in the baseball club too, weren’t you?”</p>

      <p>“Hmm? Yeah. I was until I graduated middle school.”</p>

      <p>“You have lots of stuff like that at home.”</p>

      <p>Sanae remembered the day she had met Koutarou. Back then, there were baseballs, bats, and gloves lying around. Koutarou had even chased her around with a bat.</p>

      <p>“But now I’m loyal to the knitting society.”</p>

      <p>“That’s because that girl is your type.”</p>

      <p>“More so than you guys.”</p>

      <p>“What’s with that?! You don’t have to be like that!”</p>

      <p>Sanae puffed out her cheeks and pouted in response to Koutarou’s retort. He smirked as he looked at her, but just as he was about to say something, he quickly turned to look behind him.</p>

      <p>“Huh?”</p>

      <p>“What? What’s wrong?”</p>

      <p>Sanae was taken aback by Koutarou’s unexpected behavior and her puffed-up cheeks returned to their normal size.</p>

      <p>“I just had a feeling someone was watching...”</p>

      <p>“There’s nobody here.”</p>

      <p>“Must’ve just been my imagination.”</p>

      <p>“Well, aren’t you self-conscious? That’s not good, you know. They say that’s the first stage of becoming a narcissist.”</p>

      <p>“Don’t lump me in with Mackenzie.”</p>

      <p>“Huh? Glasses-kun is a narcissist?”</p>

      <p>“Yeah. So much so that he joined the drama club.”</p>

      <p>“Hmm... So he’s just like he looks then.”</p>

      <p>“Right?”</p>

      <p>For better or worse, Sanae had forgotten the dissatisfaction she had felt earlier—although neither of them were aware of that as their now peaceful conversation continued.</p>

      <p>“Anyway, I can’t imagine anyone would enjoy watching me...” Koutarou said, shaking off the strange feeling from before.</p>

      <p>“I’m not so sure...”</p>

      <p>“Hmm? What was that?”</p>

      <p>“Nothiiing! Stop imagining things and just keep walking.”</p>

      <p>“Fine, fine.”</p>

      <p>After they passed through several intersections, a shadow came staggering out from a nearby alley.</p>

      <p>“S-Satomi-saaan!”</p>

      <p>The figure approaching them was none other than Yurika.</p>

      <p>“Yurika?!”</p>

      <p>“What happened to you?!”</p>

      <p>Yurika’s appearance was strange. She looked haggard and her cheeks were wet with tears. Moreover, her clothes were in complete disarray. Her scarf was crooked, her buttons were buttoned incorrectly, and her undergarments were peeping through. She was a absolute mess.</p>

      <p>“Help me please, Satomi-san! Some strange club is chasing me around and bothering me!”</p>

      <p>Yurika grabbed on to Koutarou and looked up at him with tears in her eyes, pleading for help.</p>

      <p>“They stripped me, measured me, and made me wear weird outfits! I can’t take it anymoreeeee!”</p>

      <p>“Th-That sounds terrible...”</p>

      <p>“I... I guess the clubs are getting desperate... Ha, hahaha...”</p>

      <p>The club chasing after Yurika was of course the cosplay society that Koutarou had enlisted. However, neither Koutarou nor Sanae could just tell her that, so they played it off with smiles and dry laughter.</p>

      <p>“They said that they’ll measure my underwear size tomorrow! I don’t want to show my everything to anyone except to the person I loveeeee!”</p>

      <p>“Aha... Ahahaha...”</p>

      <p>“Nyaha... Hahahaha...”</p>

      <p>Yurika was hysterical as Koutarou and Sanae frantically tried to play dumb.</p>

      <p><em>So it was her earlier...</em></p>

      <p>With the appearance of Yurika, Koutarou finally realized what he’d felt outside the school gate. However, unlike Koutarou, Yurika had no idea what was going on.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter3">
    <div class="main">
      <h1>Practice and a Sense of Distance</h1>

      <h2>Friday, May 1st</h2>

      <p>As the calendar flipped to May, many of Kisshouharukaze High School’s clubs started practicing for the obstacle marathon. Clubs were a big deal at Harukaze High to begin with, and their influence within the school was directly related to the size of the club. That was why events where clubs could directly compete against one another drew a lot of attention. As a result, there were already plenty of students in the schoolyard for various club training activities.<br/><br/></p>

      <p>One of those clubs was the girls’ track and field team that Kiriha joined. They were in the middle of timing themselves at a five kilometer race in order to choose their representatives for the obstacle marathon.</p>

      <p>“Hahh... Hahh... Hahh...”</p>

      <p>Kiriha was running on the track with proper form and breathing. That beautiful form and her unwavering pace stood out even among the track and field team. She had run from the starting line to just before the goal without faltering. However, there were two girls in front of Kiriha which put her in third place. Kiriha had excellent technique, but her lack of training meant she was wanting in stamina and experience. Moreover, her womanly body wasn’t well suited for long distance races. All considered, she was putting up quite a fight.</p>

      <p>“Kiri-chan, keep it up!”</p>

      <p>“Hahh... Hahh... Hahh...”</p>

      <p>Cheered on by one of the girls who had crossed the finished line before her, Kiriha ran through the goal, still in third place. Following Kiriha, the other team members crossed the finish line one after the other.</p>

      <p>“You’re quite fast, Kurano-san. It’s hard to believe you’re a rookie first-year.”</p>

      <p>“Mmhmm! Don’t compare my Kiri-chan to one of those average first-years.”</p>

      <p>“Th-Thank you very much. Haa... Haa...”</p>

      <p>As Kiriha tried to catch her breath, the two third-years who had finished before her approached.</p>

      <p>“Why are you the one boasting?”</p>

      <p>“Kiri-chan and I are bound together by fate! That’s all that matters.”</p>

      <p>While Kiriha was still breathing heavily, the other two girls seemed to be perfectly fine. They were trained marathon runners, so five kilometers was nothing to them.</p>

      <p>“But it’s unfair, Kiri-chan... You’re beautiful, you have big breasts, you’re smart, <em>and</em> you’re fast.”</p>

      <p>“B-But I can’t quite compare to you two, Senpai.”</p>

      <p>“Kyaaah! Even your personality is beautiful!”</p>

      <p>“Kyah?!”</p>

      <p>“Would you cut it out? We’re being serious here.”</p>

      <p>“Sorryyy, Kiri-chan!”</p>

      <p>“N-No, it’s nothing...”</p>

      <p>The high-spirited third-year was Takahashi, and the serious one was Kawashima. Their names were written across the chests of their gym uniforms. Kawashima was also the girls’ track and field captain.</p>

      <p>“But with this, we have our representatives for the obstacle marathon.”</p>

      <p>“Me and Kiri-chan!”</p>

      <p>“That’s right.”</p>

      <p>“What? Me?”</p>

      <p>Though things were proceeding as planned, Kiriha was still a little shocked. She thought she would have to talk her way into being chosen, so she was pleasantly surprised that things had worked out on their own.</p>

      <p>“That’s right. We’ve traditionally chosen one candidate for their smarts and the other for their fitness.”</p>

      <p>“Which means it’ll be you and me, Kiri-chan. There are times when it takes more than muscles to win, after all.”</p>

      <p>“Don’t make it sound like you’re bragging about it. Jeez...”</p>

      <p>Kawashima was amazed at Takahashi’s carefree attitude, but Kiriha was still thinking.</p>

      <p>“By the way, Senpai, what kind of obstacles does the marathon have?”</p>

      <p>“Kawa-chan, please explain.”</p>

      <p>“Jeez, you’re always like that...”</p>

      <p>Kawashima’s shoulders slumped when Takahashi gave up on explaining so easily. With a heavy sigh, Kawashima explained instead.</p>

      <p>“You see, Kurano-san, there are ten ‘obstacles’ in total. In the past it’s been everything from a curry eating contest to reading kanji. You know, standard sports festival challenges. The hitch is that the obstacles change every year, so we don’t know exactly what they’ll be this year. That’s why—”</p>

      <p>“An idiot like me can’t win on her own! If we have to read kanji or English for one of the challenges, I won’t stand a chance.”</p>

      <p>“I told you not to brag about that.”</p>

      <p>“Teehee, sorry!”</p>

      <p>The club obstacle marathon was a five kilometer long course with ten obstacles along the way. The racers would hit an obstacle roughly every four or five hundred meters. The obstacles came in all manner of challenges. Some required physical strength, some required dexterity, and some required intellect. Things like shot put, spoon races, and quizzes were all popular choices.</p>

      <p>The obstacles functionally served as handicaps depending on how quickly—or slowly—a participant could complete them. Just being a fast runner wasn’t enough to win, which was what made this race difficult. The clubs all had various strategies for the event, from sending out a well-balanced team, to sending out their fleetest competitors to make up for their lack of brains. The strategy the girls’ track and field team used was to send their fastest member with their smartest member as a pair.</p>

      <p>“I see. That makes sense.”</p>

      <p>“Let’s give it our all, Kiri-chan!”</p>

      <p>“Of course. I look forward to running with you, Takahashi-senpai.”</p>

      <p>“Great! Just leave it to me.”</p>

      <p>Kiriha smiled brightly. She was quite satisfied with this outcome.</p>

      <p><em>Everything is going just as I’d hoped.</em></p>

      <p>Takahashi was the fastest one on the team and she was also quite small. She was a perfect match for the kind of partner that Kiriha had in mind.</p>

      <p><em>All that’s left is...</em></p>

      <p>Kiriha gave an inconspicuous hand signal.</p>

      <p>“Ho! Did you call for us, Ane-san? Ho!”</p>

      <p>“What is it? Ho!”</p>

      <p>The two haniwas, Karama and Korama, responded immediately. They were using an advanced built-in stealth system to stay hidden as they followed Kiriha.</p>

      <p>“I’ve been chosen as a representative according to plan. I want you two to focus on gathering information as we discussed.”</p>

      <p>“Understood! Ho!”</p>

      <p>“Right away! Ho!”</p>

      <p>“Take note of anyone in the courtyard who’s more fit than I am. And don’t forget to record data on their physique as well.”</p>

      <p>“Ho! Leave it to us, ho!”</p>

      <p>“Ane-san can practice at ease, ho!”</p>

      <p>“Good. And after you’ve done that, I want you to prepare some funds. We still have the gold I was planning on handing over to Koutarou, right?”</p>

      <p>“Ho, ho! Understood, ho!”</p>

      <p>“Roger that, ho! We’ll bring it over, ho!”</p>

      <p>Kiriha grinned as she felt the presence of the two haniwas departing.</p>

      <p>“If you think I’ll just play by the rules, you’re mistaken, Theia-dono...”</p>

      <p>Kiriha flashed a fearless smile. She was confident that she wouldn’t lose to Theia.</p>

      <p>“What are you doing, Kiri-chan? Practice is starting.”</p>

      <p>“Sorry, I’ll be right there!”</p>

      <p>Kiriha put on her honors student act again and ran over to her club mates.<br/><br/></p>

      <p>Meanwhile, Theia was also fanning the flames of her rivalry with Kiriha as she was steadily preparing for the sports festival. Having assumed complete control of the cheerleading squad, she was shouting at them again today.</p>

      <p>“Maggots, what is your specialty?”</p>

      <p>“Unity! Cheering! Victory!”</p>

      <p>“Who is your master?”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>“I can’t hear you!”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>As they answered to Theia, the cheerleading squad was running in formation around the school building. Theia was in the back, waving around a bamboo sword and pushing them forward.</p>

      <p>“Would you die for my sake?”</p>

      <p>“As you wish, my princess!”</p>

      <p>“Shed your blood for me! Devote your lives to victory for the royal families!”</p>

      <p>“All in! All in! All in!”</p>

      <p>The sight of powerful men dressed in jet black uniforms being ordered around by a young girl in her gym clothes was quite surreal, but they were all dead serious about it. Also, anyone who objected to Theia had already been purged.</p>

      <p>“Good! Now sing, you maggots! After me!”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>“One, two, three, go! We’re the wonderful cheerleading squad!”</p>

      <p>“We’re the wonderful cheerleading squad!”</p>

      <p>Theia’s high-pitched, clear singing voice rang out, followed by the low, manly voices of the cheerleaders. Their voices were carried by the wind over the entire schoolyard. She continued to lead them in song.</p>

      <p>“Believe in your comrades and protect the princess!”</p>

      <p>“Believe in your comrades and protect the princess!”</p>

      <p>“It’s pretty great!”</p>

      <p>“It’s pretty great!”</p>

      <p>“It’s pretty great!”</p>

      <p>“It’s pretty great!”</p>

      <p>“We’ll work until we retire!”</p>

      <p>“We’ll work until we retire!”</p>

      <p>Just as Theia and the reformed cheerleading squad had finished the first of their songs, Theia’s bracelet emitted a beeping sound. It was an incoming call from Ruth.</p>

      <p>“Oh, it’s Ruth. But we just got to the good part... Okay, you people keep on running!”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>Theia shouted after the boys as they continued to run. They cheered loudly in response, but they didn’t so much as break formation once out from under the immediate control of their diminutive leader. Theia watched as they disappeared around the corner of the school building, then ordered her bracelet to accept the call from Ruth with a slightly annoyed expression.</p>

      <p>“Blue Knight, open communications with Ruth.”</p>

      <p>“As you wish, my princess.”</p>

      <p>“Ruth, it’s me.”</p>

      <p>“Your Highness!”</p>

      <p>“What is it? Did something happen?”</p>

      <p>The urgency in Ruth’s voice overrode her normally gentle tone. Realizing that this was serious, Theia’s annoyed expression disappeared.</p>

      <p>“I have discovered two unidentified flying objects above Kisshouharukaze High School.”</p>

      <p>“Unidentified flying objects?”</p>

      <p>“Yes. They’re hiding using thermo-optic electromagnetic camouflage, so it took a while before I discovered them. But they seem to be on standby about a hundred meters in the air, gathering information from the schoolyard.”</p>

      <p>“Gathering information...? Do you have any idea who it is?”</p>

      <p>“If a presumption will suffice.”</p>

      <p>“Let’s hear it.”</p>

      <p>“When Blue Knight’s main computer analyzed the slight energy leaking from their camouflage, it calculated that there was a 63 percent chance that it’s those two haniwas.”</p>

      <p>“The haniwas, huh? I don’t know what she’s investigating, but it seems Kiriha is planning on doing something at the sports festival...”</p>

      <p>At first Theia was in a bad mood because her practice had been interrupted, but upon learning that her rival was taking action, she looked up to the sky with a dauntless smile. It was the grin of a ferocious animal.</p>

      <p>“I won’t just let Kiriha do as she pleases. Blue Knight, jam the area above the schoolyard. Send out an unmanned attack craft and destroy the flying objects when you find them.”</p>

      <p>“As you wish, my princess.”</p>

      <p>“Your Highness, fighting with Kiriha-sama goes against the convention!”</p>

      <p>Ruth was talking about the Corona Convention that Theia and the others had signed. One of its articles clearly stated that fighting outside of room 106 was forbidden. While Ruth was worried about Shizuka intervening, Theia’s smile didn’t waver.</p>

      <p>“Heh heh heh. If they really belong to Kiriha, that would be true.”</p>

      <p>“Your Highness?”</p>

      <p>“However, they’re unidentified flying objects. It’s not certain that they belong to Kiriha. Just taking care of some peeper doesn’t count as fighting with Kiriha.”</p>

      <p>“Are you trying to feign ignorance?”</p>

      <p>“The other 37 percent saved me, Kurano Kiriha! Wahahaha!”</p>

      <p>Theia was using the uncertainty regarding the flying objects to her advantage. If she was going up against Kiriha, it would be a violation of the Corona Convention, but she was still allowed to attack anyone else. She was going to claim that she had thought it was some peeper rather than Kiriha’s haniwas.</p>

      <p>“Please stop, Your Highness! If you do something like that, who knows what will—”</p>

      <p>“It seems you’re planning something, but it stops here, Kurano Kiriha! I won’t let you have your way!”</p>

      <p>Ruth’s plea fell on deaf ears. Theia roared with excitement as she stared up at the sky where an unmanned attack craft came out from a black disk.<br/><br/></p>

      <p>Theia’s attack vessel was about a meter long and had the shape of a stocky airplane. It seemed to be a mix between a fighter jet and a commercial aircraft. However, the unmanned attack vessel was much faster than one would imagine from its bulky frame. It was able to continuously dodge the electric attacks from Korama.</p>

      <p>“It’s fast! Ho!”</p>

      <p>With Korama caught off guard, the attack craft opened the ports for its laser. Seeing this, Karama rushed to get between Korama and the vessel. The attack craft fired off its laser attack, but it was blocked by Karama’s yellow spiritual energy barrier.</p>

      <p>“Are you okay, Brother?!”</p>

      <p>“Karama! You saved me, ho!”</p>

      <p>“Be careful, ho! Don’t put yourself in a position where it can go all out! Ho!”</p>

      <p>The attack craft had only been attacking with its laser since it couldn’t use missiles, live rounds, or anything else that would leave evidence behind. And since it couldn’t cause damage to the surrounding area, it wasn’t firing its lasers at full power and would only fire them when it was when parallel to the ground or while climbing.</p>

      <p>If Theia hadn’t specifically given the craft those orders, the haniwas would’ve had a much harder time blocking its attacks.</p>

      <p>“We can’t lose to some soulless machine! Ho!”</p>

      <p>“Let’s show it our guts! Ho!”</p>

      <p>The haniwas used their combined electricity and fire to fight the attack craft. The battle above Harukaze High was about to reach its climax. <br/><br/></p>

      <p>However none of the students were aware of the battle raging on above them. The only ones looking at the sky were the two involved: Kiriha and Theia. The others students were all focused on the commotion unfolding in the schoolyard.</p>

      <p>“Nooooo, I won’t strip! I definitely won’t strip!”</p>

      <p>“It’ll be all right. Just relax.”</p>

      <p>“Yurika-san, there’s nowhere left to run, so why don’t you just give up?”</p>

      <p>The center of the hubbub was a girl in her uniform on the verge of tears being chased by six girls in colorful outfits.</p>

      <p>“It’s our first time practicing after getting permission to wear these outfits, so you can’t be the only one in your school uniform, Yurika-san.”</p>

      <p>“No thank you! I won’t wear that outfit! I might as well be naked! Besides, I don’t remember joining the cosclub!”</p>

      <p>Those seven girls were Nijino Yurika and the six members of the cosplay society. It was tradition for club members to wear their specific uniform for the obstacle marathon. For the cosplay society, that would naturally be a cosplay outfit, but as that technically wasn’t a uniform, they had had to ask for special permission. And today was a special occasion. It was the first day they were able to train in their cosplays.</p>

      <p>“Be reasonable, Yurika-san. But if you really don’t like it, you can use your own costume.”</p>

      <p>“But that’s just my uniform. It’s not really cosplay...”</p>

      <p>“Really? What cosplay cafe’s uniform is it? The tailoring was really well done.”</p>

      <p>“Yeah, it’s not polyester or nylon, either. I’m so jealous!”</p>

      <p>“I keep telling you! You’re wrong about that!”</p>

      <p>The cosclub was trying to get Yurika into her outfit. It was a custom-made cosplay the girls had put together just for her. However, Yurika was running away because she refused to wear it. Unfortunately for her, her lack of stamina meant she couldn’t get away from them.</p>

      <p>“P-Please let me go! I’m not like that!”</p>

      <p>Too tired to run anymore, Yurika was cornered by the schoolyard fence. The six girls circled Yurika as she looked around for an escape path. It was no use.</p>

      <p>“Wh-Why does this always happen to me?! I’m not a cosplayer! I’m trying my best and yet no one listens to a word I say!”</p>

      <p>“It’s okay. You don’t have to worry about a thing, Yurika-chan. Just open your mind and leave the rest to us.”</p>

      <p>“N-Noooooooo!”</p>

      <p>“Get her!”</p>

      <p>Sadly, it was true nobody listened to Yurika. Not even in this situation. When the cosclub president gave the order, the five other members grabbed Yurika at the same time.</p>

      <p>“L-Let go!”</p>

      <p>“Not gonna happen.”</p>

      <p>“We finally caught you. There’s no way we’ll let go!”</p>

      <p>The outfits she was forced to wear were often quite extreme, and even though she’d given it her all, she couldn’t outrun having to wear them again today either.</p>

      <p>“Bring her to the locker room and get her changed right away!”</p>

      <p>“Understood, President!”</p>

      <p>“I’m telling you I don’t want tooooo!”</p>

      <p>“Yurika-chan has long legs, so I think this Chinese dress with a high slit would be good.”</p>

      <p>“No, it’s too hard to give up the magical girl vibe. Especially when we think about what she wants.”</p>

      <p>“W-Wait just a minuteee!”</p>

      <p>Four of the club members carried Yurika away. The club president and vice president trailed behind them.</p>

      <p>“Hmm... Magical girl... Chinese dress...” the president mumbled to herself pensively.</p>

      <p>“Is something the matter, president?” the vice president asked her, a little worried.</p>

      <p>“Well I was just wondering what we could make Yurika-san wear to make Satomi-kun happy.”</p>

      <p>The president blushed and squirmed. Perhaps it was her flashy princess costume, but she seemed to be a bit over the top today.</p>

      <p>“It’s love!”</p>

      <p>When the president mentioned Satomi-kun, the vice president’s eyes began to sparkle. As she was wearing a flashy prince costume, she too seemed to be a little dramatic.</p>

      <p>“It’s because of the love he’s shown!”</p>

      <p>“You’re right. From now on we shouldn’t just cosplay based on what we want. We should also take the opinions of the general populace into consideration. We might find more people who understand us like Satomi-kun.”</p>

      <p>“Then should we go with the basics?”</p>

      <p>“Yes... All right, it’s decided! Put Yurika-san in a maid outfit!”</p>

      <p>“Okaaay.”</p>

      <p>“Noooooooo!”</p>

      <p>Yurika began struggling frantically, but she didn’t have the strength to shake off four girls. Try as she might, all she could manage was wriggling and flailing. She was no match for them. The cosclub was in high spirits after capturing Yurika.</p>

      <p>“Hmm? Are you training too?”</p>

      <p>That was when Koutarou and Harumi passed by. They were in their gym clothes and were planning on practicing for the marathon.</p>

      <p>“Oh, it’s Satomi-kun!”</p>

      <p>“Yoo-hoo, Koutarou-kun!”</p>

      <p>The cosclub girls each smiled and greeted Koutarou as they passed. Normally, they would have surrounded him, but today they were focused on Yurika.</p>

      <p>“Heehee, we’re on our way to get Yurika changed. We’ll start practicing after that!”</p>

      <p>“I see. Thanks for your hard work.”</p>

      <p>“Praise us more, Satomi-kun!”</p>

      <p>“Ahahaha!”</p>

      <p>“H-Help me, Satomi-san! I’ll be stripped and forced to put on strange outfits!”</p>

      <p>In stark contrast to the pleasantries between Koutarou and the cosclub, Yurika pleaded for help after being driven to her wit’s end. Koutarou was a little taken aback by it all, but he was distracted by the approach of the smiling club president to think too much of it</p>

      <p>“Jeez, Yurika-san, you don’t have to be that embarrassed just because Satomi-kun is here.”</p>

      <p>“Is Yurika always like that?”</p>

      <p>“Yes, she’s quite the shy one.”</p>

      <p>The president smiled as if nothing was wrong. Koutarou was actually becoming more worried about the cosplay club than he was about Yurika.</p>

      <p>“I’m sorry. It seems I’ve caused you a good deal of trouble.”</p>

      <p>“It’s okay. It’s for none other than our dear Satomi-kun, after all. Just wait! You’ll be shocked after Yurika’s transformation.”</p>

      <p>The president gave Koutarou a wink and followed after the other club members.</p>

      <p>“N-No, wait! Save meeeeee, Satomi-saaaaan!”</p>

      <p>Of course, they were taking Yurika with them. She called out for help, but Koutarou showed no sign of giving in as the cosplay society dragged her away.</p>

      <p>“Jeez, she’s really giving them a hard time. She’s shy about the strangest things...”</p>

      <p>Koutarou let out a small sigh. Harumi, who had observed the entire encounter, tugged on Koutarou’s sleeve.</p>

      <p>“Satomi-kun, that girl was asking for help. Was it all right to just leave her like that?”</p>

      <p>“Yeah, she was just trying to hide her embarrassment.”</p>

      <p>“She was?”</p>

      <p>Harumi was surprised by Koutarou’s answer.</p>

      <p>“She loves cosplay, but she can’t bring herself to admit it. They’re just helping her with her hobby.”</p>

      <p>“I see...”</p>

      <p>Harumi nodded as she turned to look at Yurika.</p>

      <p><em>Hiding your embarrassment... That’s right. I was the same.</em></p>

      <p>Harumi knew what that was like. She was quite shaken up when Koutarou first joined the knitting society and she learned that he was serious about learning to knit.</p>

      <p><em>It can be embarrassing, but finding people that share your hobby is a wonderful thing...</em></p>

      <p>Harumi flashed a small smile as she continued to watch the cosplay club walk away.</p>

      <p>“It is quite a unique hobby...” she muttered as she watched them enter the club building.</p>

      <p>Harumi understood Yurika’s feelings, but not her hobby. Koutarou looked at Harumi and shrugged.</p>

      <p>“I don’t really get it either.”</p>

      <p>“I’m a little glad to hear that...”</p>

      <p>Harumi’s smile grew. She was genuinely relieved.</p>

      <p>“I don’t have any extreme hobbies like that.”</p>

      <p>“Heehee, I was actually a little worried. What would I do if Satomi-kun said he’d like me to wear outfits like that?”</p>

      <p>“What would you do if I said that?”</p>

      <p>“I would be troubled.”</p>

      <p>“Ahahaha, don’t worry. I won’t ask for something like that.”</p>

      <p>Koutarou laughed out loud and looked over the schoolyard. He could see plenty of other students practicing for the sports festival.</p>

      <p><em>We’ll have to work hard. Yurika and the others are training too...</em></p>

      <p>“Shall we go, Senpai? We have to practice as well.”</p>

      <p>“...B-But if it’s just the two of us, I wouldn’t mind wearing it...”</p>

      <p>Koutarou had only suggested practicing for the race, but for some reason, Harumi was blushing and mumbling to herself.</p>

      <p>“Is something wrong?”</p>

      <p>“I-It’s nothing! Nothing at all!”</p>

      <p>When Koutarou looked at her, Harumi’s face turned even redder and she waved her hands emphatically. As if trying to escape, she turned and made for the schoolyard at a good clip.</p>

      <p>“L-Let’s get to practicing...”</p>

      <p>“Okay...”</p>

      <p><em>I wonder what happened...</em></p>

      <p>Koutarou felt like something was wrong as he chased after Harumi, who was surprisingly taking the lead for once.<br/><br/></p>

      <p>Koutarou sat down with his legs spread out and leaned forward until he was almost touching the ground. Harumi, who was sitting next to him, looked on in amazement. She was stretching as well, but she couldn’t even bend half as far as Koutarou could.</p>

      <p>“Satomi-kun, you’re so flexible.”</p>

      <p>“That’s because I played baseball in middle school.”</p>

      <p>“Baseball?”</p>

      <p>Harumi tilted her head in confusion. Baseball and flexibility didn’t quite click in her mind. Koutarou sat back up and explained.</p>

      <p>“I was always the catcher. Did you know that you can’t play as a catcher if you’re not flexible?”</p>

      <p>Koutarou assumed a catcher’s stance and went through some of the motions. Reaching after a careless pitch, blocking the home base, a quick toss to second base... A catcher used their entire body and was constantly moving up and down. After seeing Koutarou demonstrate, Harumi nodded.</p>

      <p>“So baseball has some aspects that are similar to rhythmic gymnastics?”</p>

      <p>“That’s the first time I’ve heard someone say that.”</p>

      <p>“Personally, I’m not very active, so I’m rather stiff.”</p>

      <p>“Just give it a try.”</p>

      <p>“This is about all I can do. Hnnn...”</p>

      <p>Harumi made an adorable noise as she leaned her body forward and stretched out her arms as far as she could. However, true to her word, she couldn’t make it past a forty-five degree angle.</p>

      <p>“Is that as far as you can go?”</p>

      <p>“Yes.”</p>

      <p>“...All right. Do you mind if I help, Senpai? I can push you.”</p>

      <p>“What?!”</p>

      <p>Quick to action, Koutarou had already moved behind Harumi. He hadn’t noticed her hesitation at all.</p>

      <p>“It’s fine, um, you don’t have to...”</p>

      <p>“It’ll be fine. It won’t hurt that much.”</p>

      <p>Oblivious to her apparent distress, Koutarou put his hands on her back.</p>

      <p>“...”</p>

      <p>When he did, Harumi, who had been wriggling in panic, froze on the spot. Her face turned as red as a tomato.</p>

      <p>“I’m going to push now.”</p>

      <p>“O-O-O-Okay!”</p>

      <p>Harumi was completely bewildered. She was so used to being alone that she felt tense just being this close to someone. And on top of that, a man was now touching her. This kind of stimulation was too much for a late bloomer like Harumi. Her tension skyrocketed.</p>

      <p><em>Why am I this nervous? But...</em></p>

      <p>What confused Harumi the most was that, as tense as she was, she didn’t feel anything unpleasant when Koutarou touched her. Normally, physical contact with a boy frightened her. But there was no fear in her heart as Koutarou’s large hands pushed gently on her back. Instead, she felt a sense of security and warmth.</p>

      <p><em>“...I get it. You’re not dating, but you’re interested in him, right?”</em></p>

      <p><em>Ah...</em></p>

      <p>Harumi recalled what the young girl at the hospital had said to her.</p>

      <p><em>W-We’re not dating, but I’m... interested...</em></p>

      <p>Contemplating those words, Harumi became even more tense and her body stiffened.</p>

      <p>“Ahaha, you really are stiff, Senpai. It seems this is your limit.”</p>

      <p>However, Koutarou just laughed, cheerfully unaware of her complex feelings.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert6">
    <img alt="insert6" class="insert" src="../Images/Insert6.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter31">
    <div class="main">
      <p>As they moved on to running, Harumi’s poor stamina stood out more than her stiff body. She was giving it her all, but her weak constitution, lack of exercise, and low lung capacity meant she couldn’t even run half as fast as Koutarou. She fell behind him right from the start. Koutarou clocked two or more laps around the four hundred meter track for every lap Harumi ran. She was far behind on laps, and Koutarou closed in on Harumi as he was about to pass her again.</p>

      <p>“Koutarou, are you really gonna be okay with this girl?”</p>

      <p>It was only natural for Sanae to feel uneasy.</p>

      <p>“It’ll be fine. I’ll just work hard for the both of us.”</p>

      <p>“You know you’re gonna lose, right?”</p>

      <p>Sanae looked worried as she flew next to Koutarou. She’d been going around the track with him like that for a while. Since Sanae had bet on Koutarou, her rights to the room depended on how well the knitting society did in the race. She needed them to win.</p>

      <p>“We’ll win. Or rather, I want Senpai to win.”</p>

      <p>“Why?”</p>

      <p>“It’s difficult to explain, but if I had to try, I guess it’s as thanks.”</p>

      <p>At first Koutarou had just wanted Harumi to participate, but now he wanted her to be able to stand on the podium. He felt helping her get there was his duty after seeing her training so hard despite her condition.</p>

      <p>“Hmm... Well, either way, just win.”</p>

      <p>“Leave it to me.”</p>

      <p>Sanae didn’t know what Koutarou was thinking, but she could tell how sincere he was. She decided not to question him any further.</p>

      <p>“Huh?”</p>

      <p>That was when Koutarou suddenly stopped running.</p>

      <p>“What’s wrong?”</p>

      <p>In response, Sanae came to a halt as well. Several students ran past them after they stopped.</p>

      <p>“Nothing. I just felt like someone was watching us again.”</p>

      <p>Standing still on the track, Koutarou looked around, but he couldn’t see the cause.</p>

      <p>“Is that why?”</p>

      <p>“Hmm?”</p>

      <p>Koutarou looked in the direction Sanae was pointing and spotted Theia, Ruth, and Kiriha. They seemed to be in the middle of a break as they were wiping off sweat with their towels and drinking out of their water bottles. When the three of them noticed that Koutarou was looking at them, Ruth lightly bowed, Kiriha smiled, and Theia sulkily turned her face away.</p>

      <p>“I see, so it was just them...”</p>

      <p>Satisfied, Koutarou relaxed his shoulders.</p>

      <p>“I’ll go scout them out for a bit.”</p>

      <p>“Yeah, do that.”</p>

      <p>Seemingly bored with going around the track, or perhaps enticed by what fun the other girls might be having, Sanae left Koutarou behind and flew towards the other three. Harumi then came running up behind him, as if to replace Sanae.</p>

      <p>“Hahh, hahh, hahh... S-Satomi-kun, were you talking to somebody?” she asked Koutarou in a ragged voice between pauses.</p>

      <p>It seemed like she had overheard part of his conversation with Sanae.</p>

      <p>“Uh, n-no... I was talking to myself. I was thinking of strategies for the sports festival.”</p>

      <p>“Hahh, hahh... S-Sorry. I’m not very athletic... I’m just holding you back, aren’t I?”</p>

      <p>Harumi’s face clouded over at Koutarou’s words. She was hard to understand because she was breathing so heavily, but it was clear she was trying to apologize.</p>

      <p>“Not at all, Senpai. You just worry about getting in there and trying to have some fun along the way. They say it’s not the destination, but the journey there, right?”</p>

      <p>“Hahh, hahh... That’s right!”</p>

      <p>Koutarou’s encouragement put a smile on Harumi’s face.</p>

      <p>“You’re finally getting into to it, so it’d be a waste to not enjoy it. Besides, I said you could retire anytime, remember?”</p>

      <p>“Even so... I... I don’t want to get in your way...”</p>

      <p>Still panting, Harumi gave him a self-conscious smile. Seeing that stoked Koutarou’s desire to get her on the podium. Fortunately, the obstacle marathon for clubs was a team event, so only one member really needed to cross the finish line. Harumi could go at her own pace while Koutarou was fighting for a podium finish.</p>

      <p><em>I’ll definitely help her win!</em></p>

      <p>Before he knew it, that had become more important to him than his match with the invaders.<br/><br/></p>

      <p>“What’s with that woman?”</p>

      <p>As Koutarou began running with Harumi again, Theia frustratedly bit her lip. Seeing Koutarou slow down to match his speed with Harumi and Harumi smiling at Koutarou really bothered her.</p>

      <p>“She is the president of Koutarou’s club. That’s Sakuraba Harumi from class 2-A.”</p>

      <p>Kiriha, who was standing next to Theia, explained who Harumi was. She had already investigated everyone around Koutarou for herself.</p>

      <p><em>That girl will probably get in the way of getting Koutarou to hand over the room... What to do...?</em></p>

      <p>Kiriha had been particularly interested in Harumi too. Based on Koutarou’s behavior, some of the reason her use of sex appeal wasn’t working on Koutarou was undoubtedly Harumi’s influence. Indirectly, she was also the reason why Kiriha had changed her methods and was fighting fairly now.</p>

      <p>“In other words, that Harumi girl is Koutarou’s princess,” Sanae chimed in with a teasing expression as she flew up to Theia and the others.</p>

      <p>Her words were more aggressive than normal, probably spurred on by a sense of competitiveness over the sports festival. She was really just trying to put some pressure on them.</p>

      <p>“What?! Are you saying Koutarou has sworn his loyalty to that woman?!”</p>

      <p>“Yes, well... something like that.”</p>

      <p>“How could this be?!”</p>

      <p>Sanae’s claim enraged Theia. Satisfied that things were going according to plan, Sanae smiled on the inside. Theia raged on, seemingly unaware of what Sanae was scheming.</p>

      <p>“In what way is that woman better than me?! The fool! He’s sworn loyalty to the wrong person!”</p>

      <p>Theia couldn’t stand it. The boy that was supposed to swear unending loyalty to her had instead gone and pledged himself to some random country girl—one with no affluence or power to speak of. It was a devastating blow to Theia’s pride. She had absolute confidence in herself. She had faith in her capabilities, in her position as seventh princess, and even in her mental strength. Theia believed she was superior to Harumi in every way. And yet despite that, Koutarou had chosen the weak Harumi over her. He didn’t even treat her with respect. She just couldn’t accept any of that.</p>

      <p>“It’s got nothing to do with reason.”</p>

      <p>“What’s that supposed to mean?!”</p>

      <p><em>Nothing to do with reason?!</em></p>

      <p>Those words upset Theia even more.</p>

      <p><em>Surely even that pleb can recognize the insurmountable gap between me and that girl, yet he still favors her?</em></p>

      <p>“Impossible! Simply impossible!”</p>

      <p>Theia couldn’t accept it, much less handle it. It took wisdom, power, and courage to stand above others. The royal families of Forthorthe had prospered for over a millennia by that creed. That was why, as the seventh princess, Theia couldn’t accept it... no matter what.</p>

      <p>Ruth smiled at Theia.</p>

      <p>“Your Highness, I’m not following your reasoning either.”</p>

      <p>Ruth put her hands to her chest and smiled gently. She had always looked over Theia as an older sister with that smile. Wisdom, power, and courage were irrelevant.</p>

      <p>“Ruth is special! The Pardomshiha family has served the royal families since before the founding of Forthorthe!”</p>

      <p>“Your Highness...”</p>

      <p>Hearing Theia’s response, Ruth was both happy and sad at the same time. Theia didn’t fully understand Ruth’s feelings. Ruth would have sworn her loyalty to her even if she hadn’t been born into the Pardomshiha family. However, admitting Ruth had sworn loyalty to her because she wanted to would mean she was forced to reckon with the fact that Koutarou was the same. He hadn’t sworn himself to her because he didn’t want to. The young and prideful Theia just couldn’t do that.</p>

      <p>“Curse you, pleb. You’re always finding some way to provoke me!”</p>

      <p>Theia continued to bite her lip as she glared at Koutarou and Harumi.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter4">
    <div class="main">
      <h1>Invaders of the Sports Festival!?</h1>

      <h2>Sunday, May 10th</h2>

      <p>On the day of the sports festival, the sun was shining brightly. There were practically no clouds in the sky and the good weather continued well into the lunch break. The sun’s rays beamed down on the courtyard surrounded by the school building.</p>

      <p>“It looks like we picked a good spot, Senpai.”</p>

      <p>“The courtyard is quieter too, and there’s not as much dust...”</p>

      <p>After the morning events, everyone was taking a break for lunch. The schoolyard was full of people and dust that had been kicked up by the wind. Because of that, Koutarou and Harumi had snuck away to the courtyard. It seemed they were the only ones who had thought of it, because they had the place all to themselves.</p>

      <p>“The truth is that I’m embarrassed to take out my lunch in front of other people...”</p>

      <p>“There’s no need to be embarrassed. It looks delicious.”</p>

      <p>“Really?”</p>

      <p>Harumi covered her mouth with the colorful cloth she had wrapped her bentou in and stole a glance at Koutarou. She was unconfident and somewhat embarrassed. Today, Harumi had prepared lunch for both of them. She normally let her mother make her lunch, but she was absolutely determined to do it for herself and Koutarou on the special occasion of the school festival.</p>

      <p>“Yeah. This doesn’t look like something an amateur made.”</p>

      <p>“Thank god... I was a bit worried.”</p>

      <p>Hearing Koutarou’s response, Harumi stopped hiding behind the cloth and let out a sigh of relief. She had been truly worried that she might disappoint Koutarou.</p>

      <p>“You have nothing to be worried about. It looks really well made.”</p>

      <p>“Well... I don’t think I’ll be of much help in the obstacle marathon, so I at least wanted you to get something to eat... so I...”</p>

      <p>“Senpai, you worry too much. Men are simple. Any guy would be happy that a girl made him lunch, regardless of how well made it is.”</p>

      <p>“B-But I really wanted it to be good...”</p>

      <p>“It must be hard being a girl... Thank you for the food.”</p>

      <p>Koutarou quit chatting and started putting food in his mouth. He was starving after working hard all morning. But his hard work had paid off. Five blue ribbons were pinned on Koutarou’s gym uniform. The ribbons signified placing in an event, and blue meant first place. Koutarou had had sweeping success in all five events he had participated in. That was why his fuel reserves were so low now.</p>

      <p>“Oh, it’s delicious!”</p>

      <p>“Ah...”</p>

      <p>Harumi was elated at Koutarou’s simple praise. Getting a passing grade not just on looks, but taste too, she was so happy that she was ready to break out in dance. In reality, her lunch was splendid. Her omelet, Salisbury steak, and wiener along with basic side dishes might have been a little plain, but they were all made with care. It was good home cooking, and certainly worthy of praise for a beginner. Growing up without a mother and having to cook for himself, Koutarou could appreciate that quite well.</p>

      <p><em>What can I say? Having someone make food for you without any ulterior motives is a wonderful thing.</em></p>

      <p>Koutarou felt an honest gratitude as he ate one dish after another. Having lost his mother at a young age, it was rare for someone to cook for Koutarou simply out of kindness. Lately, Kiriha had been making him food, but that was because she was aiming to take over room 106. In the purest sense, this was the first lunch someone had made for him in a long time.</p>

      <p>“Is there anything you don’t like?”</p>

      <p>“Not really... Well, I can’t say there’s nothing.”</p>

      <p>At first Koutarou couldn’t think of anything, but he quickly regretted his words. The blushing Harumi became visibly nervous.</p>

      <p>“What was bad?”</p>

      <p>“There’s not enough.”</p>

      <p>“Wh-What is there not enough of?”</p>

      <p><em>Was it the seasoning? Is it not cooked enough? Or does he mean I’m not good enough?</em></p>

      <p>The anxiety kicked Harumi’s mind into high gear.</p>

      <p>“Everything. It’s so delicious, I could eat three times this much.”</p>

      <p>“E-Everything...?”</p>

      <p>Harumi was stunned at Koutarou’s unexpected answer.</p>

      <p>“Well, we still have the afternoon events, so this might be just right. If I eat till I’m full, it’ll be hard to move around.”</p>

      <p>“...”</p>

      <p>“But next time, I’d love to be able to eat until I’m stuffed.”</p>

      <p>“Next time...?”</p>

      <p>Koutarou smiled and kept eating. Watching him, Harumi’s smile grew bigger and bigger.</p>

      <p><em>Next time... Next time, he wants to eat more... He likes it...</em></p>

      <p>Harumi was so happy, she couldn’t speak.</p>

      <p><em>So this is what it’s like to have friends...</em></p>

      <p>Harumi had a weak constitution and was constantly in and out of the hospital. Though she considered the nurses and children there her friends, she didn’t have any other friends her age. Koutarou was the first. It was enough to make her want to cry tears of joy.</p>

      <p>“What’s wrong, Senpai?”</p>

      <p>Koutarou looked up from his lunch when he noticed that Harumi had fallen silent. Her cheeks were crimson and her eyes were moist. Seeing that she looked like she might cry at any moment, Koutarou started to panic.</p>

      <p>“A-Are you okay?! D-Did I say something stupid?!”</p>

      <p>Koutarou had no idea how Harumi felt. Ever since he was young, starting with Kenji, he’d always had a lot of friends. He couldn’t even begin to imagine what Harumi was going through. That was why he was so sure he must have done something wrong.</p>

      <p>“I’m fine... I just got some dirt in my eyes... I-I’m going to go rinse my face...”</p>

      <p>Harumi turned away to avoid Koutarou’s glance and hastily stood up. Her heart was beating so loudly that she was worried Koutarou might be able to hear it too.</p>

      <p><em>If I don’t calm down, I’m going to end up saying something strange to Satomi-kun...</em></p>

      <p>Harumi ran out from the courtyard, her heart throbbing and her head dizzy.</p>

      <p>“Senpai...?”</p>

      <p>Being left behind, Koutarou sat there looking confused. He couldn’t get his head around what had just happened. However, Sanae, who was clinging to Koutarou’s back, could faintly understand Harumi’s feelings.</p>

      <p>“...That kind of ticks me off.”</p>

      <p>And as revenge, she began choking Koutarou. It was an easy feat considering she was already hanging on to his neck.</p>

      <p>“Guh— Gwaaah?!”</p>

      <p>“Damn it! Aaah! It’s really getting on my nerves!”</p>

      <p>“Wh-What do you think you’re doing?!”</p>

      <p>“Think of the situation you’re in instead of getting carried away! Did you forget what happens if you lose today?!”</p>

      <p>“Guuuh... S-Sanae, d-don’t think the same trick will work over and over again...!”</p>

      <p>Koutarou desperately tried to keep himself from passing out and reached into his pocket with his right hand. He pulled out something and pressed it against Sanae’s forehead.</p>

      <p>“Ack!”</p>

      <p>As he did, there was a small explosion that blew Sanae backwards.</p>

      <p>“All right! Thanks, grandma!”</p>

      <p>There was a small charm embroidered with golden thread in his hand. It held quite a bit of power against ghosts like Sanae.</p>

      <p>The golden words “family safety” shone brilliantly in the sunlight.</p>

      <p>“Hey, what are you doing all of a sudden?!”</p>

      <p>Sanae returned with her right hand on her forehead. She floated in front of Koutarou and began complaining.</p>

      <p>“That’s my line! You’re always trying to choke me for some absurd reason! You try being the guy who passes out for no reason!”</p>

      <p>“What a whiner! You’re a man! Don’t get hung up on stuff like that! It’s perfectly natural for ghosts to attack people!”</p>

      <p>“Then it’s only natural for people defend themselves, you evil spirit!”</p>

      <p>“I can’t believe it! You can’t call someone this cute an evil spirit!”</p>

      <p>They butted heads and glared at each other. It seemed like their quarrel was just about to get out of hand, but a third party got in between them.</p>

      <p>“It seems you’re quite the star, Koutarou.”</p>

      <p>“Kiriha?!”</p>

      <p>It was indeed Kiriha, her long hair fluttering in the refreshing wind. She had snuck up on Koutarou and Sanae.</p>

      <p>“You seem to be quite the star yourself, Kiriha-san.”</p>

      <p>Several ribbons were pinned to Kiriha’s chest too: three blue and two yellow. She had taken first place in three events and second place in two.</p>

      <p>“What are you staring at her boobs for, Koutarou?! You really are a pervert!”</p>

      <p>“You’re wrong! Just look at that!”</p>

      <p>“Like I want to look at someone else’s boobs! Are you trying to tell me you can see her bra or something?!”</p>

      <p>“Of course not! I’m talking about the ribbons! I was looking at how well she’d done!”</p>

      <p>“Yeah, I’m sure you’d give Kiriha’s boobs a perfect score.”</p>

      <p>“Listen to me, you stupid ghost!”</p>

      <p>“What?! I have my pride too, you know!”</p>

      <p>“Is a ghost’s pride the kind you can see right through?!”</p>

      <p>Koutarou and Sanae got in each other’s faces again, but more people were coming in to the courtyard now.</p>

      <p>“It’s good to see you’re still full of vigor, pleb. Forcing you to crawl on the ground wouldn’t be as much fun otherwise!”</p>

      <p>It was Theia and Ruth, but they were followed by a group of rough looking boys. Theia had four ribbons on her chest, all of them blue. In reality, Theia had participated in six events that morning, but she had thrown away any ribbons from second place or lower. The cheerleading squad, who had been cheering for her all the while, were exhausted and covered in sweat. Ruth actually had a yellow and a green ribbon herself, one for second place and one for third.</p>

      <p>“Just be quiet, Tulip! I’m busy at the moment!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert7">
    <img alt="insert7" class="insert" src="../Images/Insert7.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter41">
    <div class="main">
      <p>“Yeah! There’s no place for you here, plateau boobs!”</p>

      <p>Koutarou and Sanae didn’t even bother to look over at Theia as they shouted. They just continued staring each other down. This, of course, infuriated Theia. It was bad enough that Koutarou wasn’t showing her any respect, but Sanae had brought up the subject she hated the most. Between the two of them, they pushed all of Theia’s buttons, and she immediately blew her top.</p>

      <p>“Are you picking a fight with me, you mongrels?! Shall I turn you into ashes this instant?!”</p>

      <p>“You can’t, Your Highness!”</p>

      <p>Even with Ruth trying to stop her, Theia wouldn’t back down. Theia marched over to Koutarou and Sanae and butted heads with both of them.</p>

      <p>“You just try it, Tulip!”</p>

      <p>“I’ll turn you into ashes after fixing your rotten character!”</p>

      <p>“Hey! Listen to me!”</p>

      <p>The showdown between the three of them was only getting started.</p>

      <p>“Aahh, Your Highness! Satomi-sama!”</p>

      <p>“Leave them be, Ruth. They don’t really hate each other as much as they say they do.”</p>

      <p>“Please don’t say something so disgusting, Kiriha-san! Of course I hate these things!”</p>

      <p>“How dare you call me a thing?! Address me as Your Highness Theia, you pleb!”</p>

      <p>“Take that back, Koutarou! How could you call pretty little Sanae-chan disgusting?”</p>

      <p>“I meant exactly what I said, you idiots!”</p>

      <p>Their quarrel escalated as they exchanged insults. Fortunately, there was a sudden interruption.</p>

      <p>“Satomi-kuuun!”</p>

      <p>“Hellooo!”</p>

      <p>“Hmm?”</p>

      <p>Koutarou recognized the voices of the cosplay society girls as they casually called out to him. He immediately calmed down, putting his spat with Sanae and Theia on hold</p>

      <p>“It looks like you’re having fun, Koutarou-kun.”</p>

      <p>They cosclub approached with the president pushing a handcart in the lead. They were all wearing their gym clothes rather than cosplaying. Intent on following the rules, they wouldn’t change until they had permission to do so.</p>

      <p><em>What are they doing?</em></p>

      <p>The handcart that the president was pushing caught Koutarou’s interest. There was a large sack inside of it that twitched from time to time.</p>

      <p>“...! ...!”</p>

      <p>It looked like the sack was alive.</p>

      <p>“Hello.”</p>

      <p>“Hello, Satomi-kun. And hello to your friends.”</p>

      <p>The president smiled and greeted everyone. Following suit, the other nine girls exchanged greetings too. Meanwhile, Theia’s cheerleading squad silently stood at attention. After the girls all greeted each other, the president looked at Koutarou again.</p>

      <p>“Look forward to the obstacle marathon, Koutarou-kun. Today’s outfit is a masterpiece.”</p>

      <p>“We stayed up all night to make it!”</p>

      <p>“That’s right. I lost count on how many times we stabbed our fingers on needles.”</p>

      <p>“...You mean how many times <em>you</em> did.”</p>

      <p>While they talked, the sack continued to move from time to time.</p>

      <p>“...! ...! ...!”</p>

      <p><em>Well, whatever...</em></p>

      <p>Koutarou was curious about the contents of the sack, but he decided to leave it be.</p>

      <p>It was around that time that Harumi returned to the courtyard.</p>

      <p>“Satomi-kun...?”</p>

      <p>Koutarou was now surrounded by people. In total there were over twenty people in the previously empty courtyard. Harumi recognized a few of them.</p>

      <p>“Oh, aren’t you quite a cutie?”</p>

      <p>“Hey, s-stop it! Don’t touch me!” Theia barked.</p>

      <p>“Hey, why don’t you join our society?”</p>

      <p>“I refuse! As if I’d join your shady club!”</p>

      <p>“What a shame.”</p>

      <p>“Well then, what about you two?”</p>

      <p>“If Theia-sama won’t join, I will have to decline as well.”</p>

      <p>“I’m sorry, Senpai. I’m already on the track and field team.”</p>

      <p>“Tulip, did you join the cheerleading squad?”</p>

      <p>“That’s right. Unlike you, you insolent fool, these men have unwavering loyalty to me. Isn’t that right?!”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>“They’ve been completely brainwashed...”</p>

      <p>“Ah, it seems the true cheerleading squad has disappeared.”</p>

      <p>Everyone was energetically talking and smiling. Koutarou was even showing expressions that Harumi had never seen him make before. It was like this was a Koutarou she didn’t know. This kind of interaction was totally foreign to her.</p>

      <p>“I... couldn’t possibly go over there...”</p>

      <p>Harumi stood perfectly still. The beat of her throbbing heart had slowed down, and before she knew it, her heated emotions had cooled down too. She stood their realizing that she only knew one side of Koutarou, and that saddened her.</p>

      <p>“I’m not really all that important...”</p>

      <p>Harumi couldn’t move. She felt frozen in place. She just couldn’t mingle with the others. They were a mere twenty meters away, but it felt like they were worlds apart.<br/><br/></p>

      <p>Suddenly there were fireworks bursting in the blue sky. In broad daylight, the flashes were hard to see, but so many were fired at the same time that they still stood out. It was the signal that the obstacle marathon for clubs was about to begin.</p>

      <p>The obstacle marathon was a five kilometer course with ten different obstacles to overcome. Since the event was coed, the girls were given easier obstacles as a handicap.</p>

      <p>The obstacles required more than just physical prowess, so the winning club was different almost every year. And since Kisshouharukaze High School had so many participating clubs, the marathon naturally turned into the main event of the sports festival.</p>

      <p>“Heh heh heh, finally the moment we’ve been waiting for has arrived...”</p>

      <p>Koutarou swung his arms to warm up and took a good look around. There were over a hundred people gathered at the starting line. Harukaze High had more than fifty clubs of varying sizes, and the majority of them were participating. The turnout for the race was big, but expected. About half of the participants were wearing their respective club uniforms. The remainder, mostly liberal arts clubs, were just wearing their gym clothes.</p>

      <p>“Kou, you seem awfully confident.”</p>

      <p>“Can you tell?”</p>

      <p>“I haven’t been your partner all these years just for show.”</p>

      <p>“As expected from my comrade, Mackenzie!”</p>

      <p>Having finished stretching, Koutarou slapped Kenji on the back with one of his big hands.</p>

      <p>“Ouch.”</p>

      <p>“Victory will be mine today.”</p>

      <p>“Don’t be ridiculous. You’re such a muscle head, there’s no way you’ll win. I’m not even sure if you can beat me.”</p>

      <p>“That’s some big talk, Mackenzie. Why don’t we bet on it?”</p>

      <p>“You’re on. Whoever crosses the finish line first wins.”</p>

      <p>“The loser owes the winner a meal, got it?”</p>

      <p>“Got it.”</p>

      <p>Kenji grinned. He was confident in himself. Koutarou had the upper hand when it came to physical strength, but Kenji had dexterity and intelligence going for him. That was why he was sure he could beat Koutarou in an event that challenged the well-roundedness of the competitors.</p>

      <p>“Hah, you’ve made a stupid bet, Kou. I hope you’re prepared to buy me a nice lunch.”</p>

      <p>“I don’t want to hear you calling me stupid in that outfit.”</p>

      <p>“Shut it. I’m in the drama club so I didn’t have a choice.”</p>

      <p>Kenji wasn’t in his gym uniform. He was wearing a pure white tuxedo complete with a crimson rose on his lapel. It was a stage outfit the drama club was using.</p>

      <p>“Oh, it sounds like you two are up to something interesting.”</p>

      <p>“Landlord-san.”</p>

      <p>Shizuka appeared as the two boys sealed the deal on their bet. She had been called in to help by the cooking society. Wearing an apron over her gym clothes, she looked almost as silly as Kenji. .</p>

      <p>“Mind if I join in on your friendly wager?”</p>

      <p>“You too, Kasagi-san? We’re both quite confident about this, you know.”</p>

      <p>“Well, I’m only asking because I’m quite confident myself.”</p>

      <p>“But—”</p>

      <p>Kenji tried to dissuade Shizuka, but Koutarou knew better.</p>

      <p>“What does it matter, Mackenzie? Let her join in too.”</p>

      <p>“Are you sure?”</p>

      <p>“Yeah.”</p>

      <p><em>After all, I don’t even know if I can beat Landlord-san...</em></p>

      <p>Unlike Kenji, Koutarou was fully aware of how strong Shizuka was. He couldn’t imagine Shizuka falling behind in this event after how he’d seen her take down four invaders with just her bare hands. She was also about as smart as Kenji was.</p>

      <p>“Then we’ll add in Kasagi-san and make it a three-way bet.”</p>

      <p>“I won’t lose, you two.”</p>

      <p>“Just bring it on, Landlord-san.”</p>

      <p><em>Heh heh, now Mackenzie will have to buy two meals...</em></p>

      <p>With Shizuka on board, Koutarou was secretly chuckling to himself. Shortly after, cheers for Kenji started coming from bleachers next to the starting area.</p>

      <p>“Kenji-kun! You’re so cool!”</p>

      <p>“Rosenkavalier-sama! Look this way!”</p>

      <p>Following the cheers were several camera flashes. This was Kenji’s fan club that had been growing since middle school.</p>

      <p>“Go on and wave to them, Rosenkavalier-sama. Your fans are calling for you.”</p>

      <p>“Shut it.”</p>

      <p>“Koutarou-kun! Point him this way!”</p>

      <p>“Sure, sure.”</p>

      <p>“H-Hey!”</p>

      <p>Koutarou grabbed ahold of Kenji’s head and forcefully turned it towards the bleachers. The camera flashes instantly started up again.</p>

      <p>“There’s no need to be shy. You’re only pissing off all the guys here. Me included, of course.”</p>

      <p>“Give me a rest, Kou!”</p>

      <p>“Oh right, sorry. You’ll make her sad, after all.”</p>

      <p>Next to Kenji was a girl wearing a red dress. She was also part of the drama club, dressed in a costume from an old play. Today she and Kenji were cast as the Crimson Maiden and the Rosenkavalier.</p>

      <p>“Excuse me, I’m the one that invited Matsudaira-san to the club. Just to clarify, I don’t think he has any interest in going out with me.”</p>

      <p>“You’re mistaken, miss. You’re just falling for his usual tricks!”</p>

      <p>The Crimson Maiden tried to cover for Kenji, but she was no match for Koutarou.</p>

      <p>“I’ll kill you, bastard!”</p>

      <p>“Kyaah! Save me, Sakuraba-senpai! Mackenzie is bullying me!”</p>

      <p>“Ah, um, S-Satomi-kun?”</p>

      <p>As Kenji actually started to get angry, Koutarou laughed and hid behind Harumi.</p>

      <p>“H-Hello, Sakuraba-senpai.”</p>

      <p>“Hello, Matsudaira-kun.”</p>

      <p>Ending up face to face, both Harumi and Kenji were oddly flustered.</p>

      <p>“Uh... Um...”</p>

      <p>“That’s playing dirty, Koutarou!”</p>

      <p>Though time had passed and she had gotten used to him somewhat, Harumi was still uncomfortable around Kenji. She was immediately reduced to mumbling. Kenji knew how she felt and didn’t pursue it any further.</p>

      <p>“Senpai, while we’re at it, say hello to Mackenzie’s club mate and Landlord-san.”</p>

      <p>“Y-Yes, hello!”</p>

      <p>“Hello, Sakuraba-san.”</p>

      <p>“Hello, Sakuraba-senpai.”</p>

      <p>Harumi bowed, and the Crimson Maiden and Shizuka followed suit.</p>

      <p>“L-Let’s all do out best today.”</p>

      <p>“I’m worried about reaching the goal in this outfit.”</p>

      <p>“Ahaha, but it’s a wonderful dress!”</p>

      <p>The three girls each had mild personalities, so the three of them talking went a long way to relaxing the atmosphere.</p>

      <p>“...”</p>

      <p>But Koutarou noticed Kenji giving him a stinging glare.</p>

      <p>“What’s with that look, Mackenzie?”</p>

      <p>“Kou, could you be more obvious about stuff like that?”</p>

      <p>“What are you talking about?”</p>

      <p>“...I give up.”</p>

      <p>Kenji’s shoulders slumped and he scratched his head. He had known Koutarou for a long time. Kenji understood that Koutarou had used him to forcibly pull Harumi into the group. He let out a small sigh and tried greeting Harumi again.</p>

      <p>“I’m sorry for before, Sakuraba-senpai.”</p>

      <p>“N-No, it was nothing.”</p>

      <p>“Sakuraba-senpai, according to Satomi-kun, Mackenzie-kun seems to be quite the ladykiller, so stay on your guard.”</p>

      <p>“...R-Really?”</p>

      <p>“That’s a lie! He was lying!”</p>

      <p><em>Good luck, Sakuraba-senpai...</em></p>

      <p>Koutarou turned away from the four that had begun chatting and looked around the starting area again. There were all kinds of people gathering around. The strong, the small, the agile, and the clever were all here to try their best at the race.</p>

      <p>“...It doesn’t look like they’ll just let me win.”</p>

      <p>In order to put Harumi on the podium, he needed to clear all the obstacles and reach the goal faster than all of them.</p>

      <p>“All right! Let’s do this!”</p>

      <p>Koutarou pumped himself up in order to keep from letting his guard down and getting the rug pulled out from under him.</p>

      <p>“Hey, Koutarou.”</p>

      <p>“Hmm?”</p>

      <p>Sanae, who had been floating next to him, decided to cling on to him. She wrapped her thin arms around his neck and smiled.</p>

      <p>“You know, you’re surprisingly...”</p>

      <p>“What?”</p>

      <p>“Nothing. Nyahaha...”</p>

      <p>In the end, Sanae didn’t say anything. She just smiled instead. Koutarou couldn’t see it since Sanae was behind him, but she herself wasn’t aware of it either.</p>

      <p><em>Huh?</em></p>

      <p>Looking over his shoulder now, she realized that Koutarou was watching some other students. It was two members of the baseball club in their uniforms.</p>

      <p>“...Koutarou, can I ask you something?”</p>

      <p>“What?”</p>

      <p>“If it bothers you that much, why don’t you just play baseball?”</p>

      <p>“Huh?”</p>

      <p>Surprised, Koutarou looked at Sanae.</p>

      <p><em>I knew it...</em></p>

      <p>Sanae picked up on his surprise and hesitation.</p>

      <p>“You’ve been watching the baseball club whenever you get a chance. I can tell.”</p>

      <p>“...Oh.”</p>

      <p>Koutarou took his eyes off Sanae and looked back at the baseball club members. He felt he had no need to hide it.</p>

      <p>“Well, I love baseball. But it’s not the kind of sport you can commit to while living on your own.”</p>

      <p>“Hmm...”</p>

      <p>Koutarou looked nostalgic and wistful. Seeing that, Sanae had an idea.</p>

      <p><em>If I helped with the housework or something, Koutarou might be able to play baseball again.</em></p>

      <p>Cooking, washing, cleaning, preparing his bath... If Sanae took over the household chores Koutarou was doing every day, he might get the free time he needed to play baseball. That was the idea that had popped into Sanae’s mind, but she quickly shook her head and snapped out of it.</p>

      <p>“J-Just what am I thinking?!”</p>

      <p><em>I’m chasing him out! I have to chase Koutarou out of that room no matter what! Why would I even think of helping with the housework?!</em></p>

      <p>Sanae was puzzled by her own feelings. She couldn’t believe she had considered helping someone that she was trying to chase out. The most confusing part was that, in the moment, she really did want to help him out.</p>

      <p>“What?”</p>

      <p>“It’s nothing! Absolutely nothing! Just leave it!”</p>

      <p>When Koutarou showed concern for her, Sanae felt even more perplexed.</p>

      <p><em>What is wrong with me?!</em></p>

      <p>This time, however, Sanae was perplexed about more than just Koutarou.<br/><br/></p>

      <p>Meanwhile, Theia had joined the crowd by the starting area. She stood by the bleachers, giving a speech to the cheerleading squad that was lined up before her.</p>

      <p>“Men, you’ve done well to endure until today! Although only one of you will participate with me today, it was thanks to your daily training! Cheer me on like you’re the one who’s participating with me!”</p>

      <p>She was wearing a gym uniform accented with the squad leader’s armband around her upper arm. She had both hands on her hips and stood tall. Her small stature was lost in the crowd, but there was no covering up her loud voice. In response, the squad members answered in full force.</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>Their deep, booming voices carried across the entire starting area and shook the ground.</p>

      <p>“It’s not a matter of who accompanies me! It is simply a matter of whether or not I win!”</p>

      <p>“Victory for Her Highness Theiamillis! Glory to the royal families of Forthorthe!”</p>

      <p>The cheerleading squad’s morale was high. The harsh training they had endured for this day had strengthened their team spirit. Their goal was Theia’s victory, not their own. That was what they had trained so hard for. For victory. And for Theia. If she ordered them to die, they were prepared to lay down their lives. That was the kind of loyalty that Theia demanded.</p>

      <p>“Good luck, Your Highness.”</p>

      <p>“Leave it to me, Ruth. I’ll be sure to win.”</p>

      <p>Instead of Ruth, Theia had chosen the strongest and fastest member of the cheerleading squad to be her partner. Because of that, Ruth was sitting with the remaining members in the bleachers.</p>

      <p>“Your Highness, it’s almost time.”</p>

      <p>“Very well then. Let’s go.”</p>

      <p>“Hail to the princess! Hail to the princess!”</p>

      <p>“Let’s see what you’ve got, Kurano Kiriha...”</p>

      <p>Theia grinned as she headed to the starting line.<br/><br/></p>

      <p>Meanwhile, Kiriha was already at the starting line. Considering the competition, she wanted the best possible starting position.</p>

      <p>“We’ll be starting soon, Kiri-chan. Let’s give it our all!”</p>

      <p>“Of course, Takahashi-senpai.”</p>

      <p>With Kiriha was her track and field senior, Takahashi. Kiriha made small talk with her as she secretly prepared for the battle to come.</p>

      <p>“...Karama, how is it going?”</p>

      <p>“Everyone is in position, ho! Korama confirmed it from above, ho!”</p>

      <p>Kiriha discreetly whispered to the camouflaged haniwa that was floating next to her.</p>

      <p>“It seems there are no traitors, ho! Just leave the rest to us, ho!”</p>

      <p>“All right, I’m counting on you.”</p>

      <p>“Understood.”</p>

      <p><em>Then all that’s left is waiting for the start...</em></p>

      <p>After finishing her final check, Kiriha flashed a small smile. Takahashi couldn’t help but notice it.</p>

      <p>“Kiri-chan, what are you smiling for?”</p>

      <p>“Actually, I made a bet with my friends.”</p>

      <p>Despite the sudden question, Kiriha didn’t so much as flinch as she gave a canned response. Not knowing what Kiriha was actually thinking, Takahashi’s eyes sparkled as she leaned in.</p>

      <p>“A bet? Was it with a boy?!”</p>

      <p>“Yes.”</p>

      <p>“What did you bet?”</p>

      <p>“The loser has to hand over something precious to the winner.”</p>

      <p>Kiriha was honest in part. She had made a bet with Koutarou and the rest, and the loser had to hand over part of their territory to the winner.</p>

      <p>“Kyaah! How bold! But won’t the outcome be the same regardless of who wins?”</p>

      <p>Of course, Takahashi completely misunderstood the situation. She had no idea Kiriha was deadlocked in a territorial dispute.<br/><br/></p>

      <p>Speaking of misunderstandings, the biggest misunderstanding of all concerned the cosplay society positioned on the rear lines of the starting area. All six members, even the ones not participating in the race, were cosplaying. Today they were in matching maid costumes. The only one wearing a different design was the president—her outfit included an armband and a headpiece as the head maid. After checking her watch, she called out to the vice president next to her.</p>

      <p>“It’ll be starting soon. Vice president, get Yurika ready.”</p>

      <p>“Very well. Right away.”</p>

      <p>Representing the cosplay society in the obstacle marathon would be Yurika and the president. The new member and the president were pairing up for the sake of their club. But oddly enough, Yurika was nowhere to be seen.</p>

      <p>“Everyone, bring Yurika over!”</p>

      <p>“Okaaay!”</p>

      <p>When the vice president gave the signal, the other members came over, pushing a handcart. It was loaded with the sack Koutarou had taken notice of before. However, unlike during lunch, the sack wasn’t moving at all now.</p>

      <p>“And now, open it up!”</p>

      <p>“Okaaay!”</p>

      <p>The girls loosened the rope around the sack and turned it upside down. As they did, Yurika in a maid outfit came tumbling out. She was gagged and bound with more rope. The cosplay club had forcibly stripped her and put her in the maid costume. Since she was cosplaying against her will, they had kept her restrained until now, but the cosclub girls quickly loosened her bonds.</p>

      <p>“Uuuhhh... I-I’m finally free...”</p>

      <p>Though freed, Yurika had toppled to the ground and remained motionless. Curled up in the fetal position, tears were streaming down from her large eyes.</p>

      <p>“Wh-Why do I have to go through something like this...?”</p>

      <p>Nobody listened to Yurika when she said she hated cosplaying. They were all under the impression that Yurika loved cosplay but just couldn’t admit it.</p>

      <p>“I... I can never get married now...”</p>

      <p>“You look beautiful, Yurika-chan!”</p>

      <p>“Give it everything you’ve got!”</p>

      <p>“Forget getting married! You can be a part of the cosplay society forever!”</p>

      <p>“I don’t want thaaaaat!”</p>

      <p>Yurika aside, the cosplay society was in high spirits. That was especially true of the president, whose eyes were sparkling.</p>

      <p>“Would you stop it, Yurika-chan? You’ll ruin your makeup.”</p>

      <p>“Waah haa haa...”</p>

      <p>The president wiped away Yurika’s tears and pulled out her makeup kit for a touch-up. The president was no professional, but she had a certain talent with cosmetics. When she was done, Yurika looked even more lovely than before.</p>

      <p>“Let’s surprise Koutarou-kun during the race, okay?”</p>

      <p>“I don’t want to surprise him wearing this outfit! Waaaaah...”</p>

      <p>As always, nobody listened to Yurika. As she continued to cry, she ironically looked more beautiful than anyone else.<br/><br/></p>

      <p>The principal stepped up on an improvised platform that had been set up next to the starting area. It was the principal’s job to give the starting signal for the main event, and everyone watched as the principal got into position. The schoolyard fell silent with anticipation. The principal pointed the starting pistol up at the sky, and the commentator’s voice echoed out from the loudspeakers.</p>

      <p>“On your marks. Get set...”</p>

      <p>At the commentator’s cue, the principal squeezed the trigger.</p>

      <p>Bang!</p>

      <p>The sharp crack of the starting pistol rang out across the schoolyard. The obstacle marathon had officially begun. Following the signal, the previously quiet crowd broke out into a clamor. As expected from the main event of the day, the excitement instantly peaked.</p>

      <p>“Let’s go, Kiri-chan!”</p>

      <p>“Yes, Takahashi-senpai!”</p>

      <p>The two members of the girls’ track and field team dashed into the lead straight away. With beautiful form, they continued to accelerate. It was an excellent start that only the track and field team could manage.</p>

      <p>“We’re falling behind?!”</p>

      <p>“Damn it! After them!”</p>

      <p>“Don’t let the girls’ track team get ahead of us!”</p>

      <p>As everyone tried to chase after Kiriha and Takahashi, there was unexpected chaos at the starting line. Several club members at the front had fallen. It seemed like their legs had gotten tangled and they had all tripped over each other in the confusion at the start.</p>

      <p>“Ouch, don’t step on me! Get away, you guys!”</p>

      <p>“Owowow, it hurts!”</p>

      <p>“That’s my leg! Stop bending it like that!”</p>

      <p>“Hey, don’t touch me in weird places!”</p>

      <p>Most of the lead group collapsing caused quite a commotion. Even those who hadn’t fallen were unable to move forward because of the bottleneck. The starting line had turned into a standstill.</p>

      <p>“We got lucky! I don’t know what happened, but now’s our chance, Kiri-chan!”</p>

      <p>“Yes, Senpai!”</p>

      <p>It put the girls’ track and field team at a huge advantage. Having dashed ahead before the commotion, they left their competitors in the dust. Kiriha and Takahashi ran next to each other and swiftly turned the corner. After half a lap around the school’s track, the race course left the school grounds. The two girls had already made their way around the track before the confusion at the starting line started to clear up.</p>

      <p>“Heh...”</p>

      <p>Just before they made it to the school gates, Kiriha looked back and flashed a smile in the direction of the starting line. Kiriha then sprinted through the gate and was out of sight.</p>

      <p>“We’ve been had! Damn Kiriha! So this is what she was planning!” Theia’s shrill voice screamed.</p>

      <p>A large man in an old-fashioned uniform stood up in the crowd. Below him was Theia, looking quite irritated. Theia had also gotten caught up in the incident, but she didn’t seem be hurt. In the midst of everything, she’d had her partner protect her.</p>

      <p>“Did she seduce them or did she bribe them...? Either way, I’ve been totally had! Damn it!”</p>

      <p>Once she was up, Theia grit her teeth in frustration. She was certain this was Kiriha’s doing. The collapse occurred immediately after the girls’ track and field team had stolen the lead. Theia couldn’t believe that was just a coincidence.</p>

      <p>“As I suspected, I can’t let my guard down around that woman!”</p>

      <p>And Theia was right on the money. Kiriha had bribed several influential clubs to get them to fall at the start of the race. Doing so reduced the number of potential rivals while also giving her a substantial lead. It was a splendid strategy, killing two birds with one stone.</p>

      <p>“I won’t just let that woman have her way! Hey, throw me over to the other side of the crowd!”</p>

      <p>“Hail to the princess!”</p>

      <p>The large man immediately took action upon hearing Theia’s orders. He easily lifted her up and threw her so effortlessly it looked like he was tossing a basketball. It was a feat only made possibly because of Theia’s small size and the man’s strength.</p>

      <p>“I will go on ahead! Meet up with me later!”</p>

      <p>“Hail to the princess!”</p>

      <p>Theia sailed right over the human traffic jam and landed with both of her feet on the track. She then sprinted off without even looking back. She was a quick runner for her small size.</p>

      <p>“A-Are you okay, Sakuraba-senpai?!”</p>

      <p>“Thank you, Satomi-kun. I’m fine, but what happened?”</p>

      <p>“I don’t know. It looks like almost everyone in the front group fell over at the same time.”</p>

      <p>A few seconds after Theia had made a run for it, Koutarou lifted up Harumi and was now carrying her in his arms.</p>

      <p>When the front group collapsed, Koutarou and Harumi were in the middle of the pack. They had been trapped between the people who had fallen and the people who were pushing forward from behind. Even now, they were just picking themselves back up.</p>

      <p>“Huh?!”</p>

      <p>That was when Koutarou saw Theia running. She was already finished with the track and heading for the school gates.</p>

      <p><em>Not good! We’re already behind!</em></p>

      <p>Koutarou looked ahead to the starting line, but it was still in an uproar.</p>

      <p>“What to do...? Even if I try to pass through there...”</p>

      <p>People were clustered up and it didn’t look like they were going to disperse any time soon. But Koutarou had to do something. He knew that Kiriha and Theia had taken the lead.</p>

      <p>“Koutarou, over there! Those three!”</p>

      <p>“Oh?”</p>

      <p>Sanae, who was clinging on to Koutarou in her typical fashion, pointed to the front of the crowd. There he saw three robust boys trying to stand up. They were members of the rugby club, the judo club, and the sumo club, each clearly distinguishable by their outfit.</p>

      <p>“Now’s our chance!”</p>

      <p>The moment he saw them, he smiled and made a break for it.</p>

      <p>“Here we go, Sakuraba-senpai!”</p>

      <p>“Satomi-kun?!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert8">
    <img alt="insert8" class="insert" src="../Images/Insert8.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter42">
    <div class="main">
      <p>Before Harumi could even respond, Koutarou was running straight for them and gradually speeding up.</p>

      <p>“Hold on, Sakuraba-senpai!”</p>

      <p>“Kyaaaaaaaah!”</p>

      <p>“Juuuuump!”</p>

      <p>Koutarou deftly trampled the members of the rugby, judo, and sumo clubs in turn, making a daring leap off of the last one. Their backs made the perfect stepping stones as they were trying to stand up.</p>

      <p>“Sorry! Excuse me!”</p>

      <p>“Who’s stepping on me?!”</p>

      <p>“I’m being used as a stepping stone?!”</p>

      <p id="note">“Gottsan desu?!”<sup><a href="../Text/chapter1.xhtml">1</a></sup></p>

      <p>Koutarou and Harumi seemed to hang in the air as they soared over the group crowding the starting line. It was all so sudden that Harumi was desperately holding on to Koutarou, afraid of falling. Their combined weight was over a hundred kilograms, so there was quite a sound as they hit the ground. But Koutarou landed with both feet firmly planted on the track.</p>

      <p>“Kyaah!”</p>

      <p>“Are you okay, Sakuraba-senpai?!”</p>

      <p>Before Harumi could recover from the shock of landing, Koutarou was already running again.</p>

      <p>“That’s my line! Are you okay, Satomi-kun?!”</p>

      <p>“I’m fine! I’m well trained, after all!”</p>

      <p>Collecting herself, Harumi was worried about Koutarou’s well-being, but he was smiling confidently. As a catcher in his middle school baseball days, Koutarou was used to wearing protective gear weighing several kilos including the glove. In order to train his mobility, he would practice while wearing the heavy gear or run around while dragging a tire along behind him. After all that, his lower body was very robust.</p>

      <p>“...Really?”</p>

      <p>“Please save that line until you’ve gotten fatter, Sakuraba-senpai.”</p>

      <p>Koutarou smiled as he ran around the track while carrying Harumi.</p>

      <p><em>He seems fine... You’re amazing, Satomi-kun...</em></p>

      <p>Harumi was a frail girl, so Koutarou’s strength made quite an impression on her.</p>

      <p><em>Oh?</em></p>

      <p>After letting out a sigh of relief, Harumi realized something felt odd. There was still a fuss at the starting area and there weren’t many people on the track, so the spectators had their eyes on her and Koutarou. After looking around, she still couldn’t put her finger on it.</p>

      <p>“What’s the matter?”</p>

      <p>“Um, Satomi-k—”</p>

      <p>Just as she was about to respond to Koutarou, Harumi realized exactly what was so strange.</p>

      <p>“Senpai?”</p>

      <p>“Uh, uhh...”</p>

      <p>Harumi was at a loss for words and her eyes were wide open. Koutarou was much too close. She could feel his breath on her cheeks, his arms across her back and legs, and his chest against her side as he carried her. Worst of all, she had wrapped her arms around Koutarou’s neck.</p>

      <p>“Oh, Senpai, please keep tensing up like that. It makes it easier to run.”</p>

      <p>“Um, S-Satomi-kun— Whaaat?!”</p>

      <p>Koutarou sped up, oblivious to Harumi’s stupor. As she tensed up and her body got stiffer, it became easier for Koutarou to balance and run faster. At the same time, he put more force into his arms and pulled her closer to him. In turn, Harumi tensed up even more.</p>

      <p>“L-Let me down! I can run on my own!”</p>

      <p>“It’s okay! We’ll gain a bit of a lead this way.”</p>

      <p>Flustered, Harumi tried to get down on her own, but Koutarou shook his head. It would be faster for him to carry her for a while instead of her running on her own. Koutarou wanted Harumi to finish the race, so he was planning on making it as far as he could like this.</p>

      <p>“Th-This is troubling me!”</p>

      <p>“Why is that?”</p>

      <p>“...”</p>

      <p>Harumi was unable to respond. Instead, she started blushing furiously. She couldn’t say that being carried like this was embarrassing. Moreover, she didn’t actually dislike her current situation. All she could do was look down. Her heart was throbbing, she began to feel lightheaded, and she was having trouble breathing. It might have actually been easier for her to run on her own.</p>

      <p>“Just keep holding on tight like that.”</p>

      <p>“Um... Excuse me!”</p>

      <p>“Yes?”</p>

      <p>“N-Never mind!”</p>

      <p>As usual, Koutarou was ignorant of Harumi’s feelings. He just kept running. They were the only two on the track still, so the crowd naturally kept watching Koutarou and Harumi.</p>

      <p>“Ah, ahh... Auuugh...”</p>

      <p>Harumi tried not to think about the people looking at her. Otherwise, she felt like her heart would explode.</p>

      <p>“All right! I’m in top form today!”</p>

      <p>“...I feel like I’m going to lose my mind...”</p>

      <p>Eventually, they finished their run on the track, passed through the school gate, and made it out onto the road.<br/><br/></p>

      <p>As Koutarou left the schoolyard, the commotion at the starting area finally started to die down as the competitors started taking off.</p>

      <p>“Damn it! That first-year brat won’t get away with this!”</p>

      <p>“You want a piece of him too, judo club?”</p>

      <p>“Damn right! What about you, rugby club? Sumo club?”</p>

      <p>“You don’t even need to ask! I’ll show him!”</p>

      <p>“Gottsan desu!”</p>

      <p>“I hate him for stepping on me, but even more so for having a girl!”</p>

      <p>“That’s right! Unforgivable! Damn enviable!”</p>

      <p>“Gottsan desu!”</p>

      <p>While some were wrestling with their emotions, most students had now left the starting line behind them. However, there was one participant in particular who hadn’t even thought about starting.</p>

      <p>“Uh... Uuuuuhh...”</p>

      <p>She was lying on the ground and staring up at the sky. Her partner had vanished in the commotion and she was left all alone.</p>

      <p>“Wh-Why does this always happen to me...?”</p>

      <p>She was wearing a black dress with an apron over it and a white headpiece. The once beautiful ensemble was now covered with dirt and footprints, complementary to the one smack in the middle of her face. When she’d gotten caught up in the chaos, the other competitors had trampled her.</p>

      <p>“But I need to go, or I’ll lose even more points... Uuuhh...”</p>

      <p>The girl slowly stood up. She then tried to brush the dirt off of her outfit, but try as she might, nothing would get rid of the footprints.</p>

      <p>“F-Fight! Y-Yurika, fight! Fight!”</p>

      <p>It was Nijino Yurika, the girl known for her over the top cosplay hobby. Eventually Yurika dragged herself forward and began shakily running.</p>

      <p>“I at least wanted someone to see it before it got dirty...”</p>

      <p>Just a few moments ago, she was in tears because she was forced into the outfit and makeup, but now that it was dirty and ruined, she felt like crying all over again. However, even Yurika’s tears seemed like some sort of joke with that footprint on her face.<br/><br/></p>

      <p>The first obstacle was five hundred meters from the starting line. After running half of the four hundred meter track, it was roughly three hundred meters outside the school gate. It was next to a playground by the foot of the small hill that the school was situated on.</p>

      <p>After passing the first obstacle, the course continued on to a promenade through the coastal area, and then down the road that followed the coastline. The other obstacles were placed at parks and rest areas along the way.</p>

      <p>Koutarou reached the first obstacle just as Theia had finished it. She flashed him a provocative smile as they crossed paths.</p>

      <p>“Hahaha, you’re finally here, pleb! But at this rate, you have no chance of beating me! It would be best for you to just give up now!”</p>

      <p>“Shut up, Tulip! As if I’d lose to the likes of you!”</p>

      <p>“Your mouth sure flaps a lot! I’d like to teach you a lesson, but I don’t have time to play with you now! I’m going after Kiriha!” Theia shouted as she ran off. Once she got going, she didn’t turn back to look at Koutarou.</p>

      <p>“Crap, Kiriha is already up ahead? Senpai...”</p>

      <p>“Yes?”</p>

      <p>Koutarou put Harumi down and quickly approached the first obstacle. Harumi followed after him. Sanae, who had been clinging to Koutarou up until this point, watched Theia as she ran off into the distance for a while before chasing after Koutarou.</p>

      <p>The first obstacle was a math quiz. Several desks had been prepared in the playground, and there they had to solve ten easy math problems. Participants had to get all ten answers right before moving on. There was also the option of giving up, but that meant the competitor would be forced to wait one minute for each problem they were unable to solve. It was a rule put in place to prevent competitors from getting stuck on a single obstacle for too long.</p>

      <p>“Ahh, I don’t get it. Help meeee, Kiri-chan!”</p>

      <p>There was already someone sitting at one of the desks. It was Kiriha’s partner, Takahashi. Since she was less intelligent, Kiriha had left her behind. She was desperately toiling away at the problems, but she had only solved half of them so far. At this rate, she would probably be forced to give up and wait it out.</p>

      <p>Koutarou took a seat next to her, picked up a pencil, and got to work on solving the problems. Harumi did the same.</p>

      <p>“Come on, Koutarou, don’t space out! Hurry up and solve them! Theia’s already gone!” Sanae barked.</p>

      <p>“Let’s see here... ‘What is 5,682 plus 7,940?’ Wow, what a pain...”</p>

      <p>All ten problems were elementary school level arithmetic, but the numbers were large enough to make them a pain to calculate.</p>

      <p>“Damn, I wish I had a calculator... Two, then four and eight... Carry the one into nine and six, then...”</p>

      <p>Koutarou was so bad at math that he slowly counted it up using his fingers.</p>

      <p>“That’s so easy! Just hurry up and solve it!”</p>

      <p>“Don’t shout at me like that! I’ll lose track of where I am!”</p>

      <p>“Jeez...”</p>

      <p>Sanae floated in front of Koutarou, crossed her arms, and puffed up her cheeks. She was getting frustrated that Koutarou couldn’t solve a problem even she could handle easily. Her points were riding on Koutarou’s success, so she couldn’t stay out of it.</p>

      <p>“All right, next is...”</p>

      <p>By the time Koutarou had solved his third problem, Harumi put down her pencil.</p>

      <p>“I’m done.”</p>

      <p>“Huh? Already?!”</p>

      <p>“Yes. What about you, Satomi-kun?”</p>

      <p>“I still have a ways to go. Please go on ahead, Senpai.”</p>

      <p>“But...”</p>

      <p>Harumi peeked at Koutarou’s answer sheet and furrowed her brow. She didn’t want to leave him behind. Koutarou realized that and smiled at her.</p>

      <p>“Really, go on without me. I’ll catch up with you in no time.”</p>

      <p>“Satomi-kun...”</p>

      <p>“You’re going to reach the goal, right, Sakuraba-senpai? If you bother too much with me, you might not be able to finish.”</p>

      <p>Though Harumi was hesitating, as soon as Koutarou mentioned finishing the race, she nodded her head.</p>

      <p>“I understand. I’ll go on ahead. But in return, promise me this...”</p>

      <p>“Yes?”</p>

      <p>“When I get stuck, leave me behind too.”</p>

      <p>“I understand. I promise.”</p>

      <p>Koutarou agreed without hesitation. He wanted her to run at her own pace while he worked his hardest to put her up on the podium. In order to do that, he would need to leave her on her own as well. If Harumi was forced to run at Koutarou’s pace, she would eventually collapse. They needed to split up at some point.</p>

      <p>“Then we’ll meet up again later.”</p>

      <p>“Just focus on finishing, Senpai.”</p>

      <p>“Of course, Satomi-kun.”</p>

      <p>Harumi left with a smile and handed her paper to the committee member in charge of the obstacle.</p>

      <p>“Senpai...”</p>

      <p>Her smile was more positive and powerful than normal. It made Koutarou want to put her on the podium even more. But in order to do that, he needed to make sure he caught up to Theia and Kiriha no matter what.</p>

      <p>“Hey, was that your girlfriend?”</p>

      <p>That was when Takahashi, who was sitting next to Koutarou, tugged on his shirt.</p>

      <p>“Ahaha, that would be nice.” Koutarou smiled a little and shrugged.</p>

      <p>“You don’t see that type a lot nowadays. You should get her while you can,” whispered Takahashi as she watched Harumi running out of the playground.</p>

      <p>“I’d love to, but I’d feel bad for her getting stuck with someone crude like me.”</p>

      <p>“Ahaha, you don’t see a lot of your type either.”</p>

      <p>“You think?”</p>

      <p>Koutarou and Takahashi laughed as they got back to solving the problems.<br/><br/></p>

      <p>As Koutarou began working on the final problem, Sanae couldn’t keep quiet anymore.</p>

      <p>“You know, you really are stupid...”</p>

      <p>“Just leave me alone!”</p>

      <p>“Why do you need this much time on problems like that? Good grief!”</p>

      <p>It was only natural for Sanae to be so dumbfounded. She’d watched several participants come and go while Koutarou was still struggling with basic calculations. Even Takahashi from the girls’ track and field team had just completed the obstacle just a few moments ago.</p>

      <p>“I’ll be going on ahead, Satomi-kun!”</p>

      <p>“Wahaha, eat my dust, Kou! I’m looking forward to my lunch!”</p>

      <p>Before Koutarou could finish solving the last problem, Shizuka and Kenji got up from their desks too. Although Koutarou had a head start on them, neither of them had any trouble with math. They were done in a flash.</p>

      <p>“You’re both done already?!”</p>

      <p>“You’re just too slow!”</p>

      <p>“See ya!”</p>

      <p>“Uwah, Kasagi-san, wait for me!”</p>

      <p>“Jeez, just let me tell you the answer already!”</p>

      <p>“You can’t, Sanae.”</p>

      <p>Sanae started feeling rushed as Kenji and Shizuka left. She tried to give Koutarou the answer anyway, but he swiftly covered her mouth.</p>

      <p>“Mrrmmph! Hrrmmph?!”</p>

      <p><em>What does it matter?! We’ll lose at this rate!</em></p>

      <p>Sanae protested with her eyes, but Koutarou simply shook his head.</p>

      <p>“You can’t. This isn’t just between you and me.”</p>

      <p>If this had just been about Koutarou and the invaders, he might have listened to Sanae. However, Koutarou wanted Harumi to win, and he wanted to do it fair and square. She wouldn’t be satisfied with cheating either. On top of that, there was his bet with Kenji and Shizuka. He couldn’t simply let Sanae answer for him. As Sanae listened to Koutarou’s response, she pulled his hand away from her mouth.</p>

      <p>“Then hurry up already!”</p>

      <p>“I know, I know. Don’t rush me.”</p>

      <p>Koutarou smiled dryly as he continued on solving the last problem.</p>

      <p>“God, you’re stubborn on top of stupid!” Sanae cried, both exasperated and amazed.</p>

      <p><em>But... friends, huh? I want friends too...</em></p>

      <p>But even so, she was jealous of what Koutarou had.<br/><br/></p>

      <p>“You can do it, Koutarou. There’s probably no more than ten people in front of you!”</p>

      <p>“Yeah!”</p>

      <p>Koutarou dashed across the road with Sanae cheering for him. With hedges on the coastal side and a neatly arranged line of trees on the inland side, it was actually quite scenic. The area was clean and well maintained, which also made it rather charming. Around this time in the middle of May, the sunlight was strong and the temperature rose as the afternoon came. However, the gentle sea breeze alleviated the heat. Running down the coastal boulevard, Koutarou was relatively comfortable.</p>

      <p>“We might win if we keep going at this pace!”</p>

      <p>“I sure hope so.”</p>

      <p>Koutarou had fallen behind because of the first obstacle, but things had gone smoothly after that. The second obstacle was throwing a ball a certain distance, and the third was carrying a ping pong ball with a spoon. Koutarou had completed both obstacles on the first try, and he was gradually gaining on the other competitors.</p>

      <p>“Koutarou, look! It’s Theia! We’ve caught up!”</p>

      <p>“Great, we’ll get past her on the next obstacle!”</p>

      <p>Koutarou finally managed to catch up to Theia just before the fourth obstacle. She was also doing well, but she had fallen behind on the third obstacle. In reality, being brought up as a princess and having others do things for her meant that she was actually rather clumsy. Moreover, being an alien put her at a disadvantage. She was pretty bad at events she had never done before.</p>

      <p>“Is that you, pleb? Tch, to think you’ve already caught up!”</p>

      <p>“Wahahaha, you’d be better off if you had longer legs!”</p>

      <p>Upon noticing Koutarou, Theia slightly increased her pace. Koutarou followed suit and pursued her. With the fourth obstacle ahead, they both lightly sprinted forward.</p>

      <p>“Even though you’re my vassal, you’re always like this! Why are you always so insolent with me?”</p>

      <p>“Because I don’t want to be your vassal! Isn’t that obvious?!”</p>

      <p>“Why don’t you learn from the cheerleading squad, you incompetent?! They became my vassals well after you did, but they’re already dedicated to me!”</p>

      <p>“I refuse, you spoiled princess!”</p>

      <p>“Whaaat?!”</p>

      <p>“You two never change...” Sanae sighed.</p>

      <p>“As if I would! Koutarou and I are in the middle of an important discussion!”</p>

      <p>“Yeah, this is critical! I’m going to teach this idiot a real lesson!”</p>

      <p>They were cursing at each other, but when Sanae objected, they replied in perfect harmony.</p>

      <p>“...But wouldn’t it be easier to run if you weren’t talking?”</p>

      <p>“I couldn’t run a single step if I threw away my pride!”</p>

      <p>“That’s right! How could I just let this idiot keep blabbering?!”</p>

      <p>“You two really are...”</p>

      <p><em>Are you sure you don’t get along...?</em></p>

      <p>If Sanae had said it out loud, they would have both denied it in a heartbeat, but she couldn’t help thinking it.<br/><br/></p>

      <p>“Wahahaha! I win, Tulip!”</p>

      <p>As they reached the fourth obstacle at the ballpark, Koutarou declared his victory.</p>

      <p>“What was that? This can still go either way!”</p>

      <p>“Not this time! Fortune is smiling on me!”</p>

      <p>There was a reason for Koutarou’s bold declaration. The fourth obstacle was speed eating jam-filled bread. Koutarou’s huge appetite gave him the upper hand.</p>

      <p>“Koutarou has an endless stomach after all. This’ll be easy.” Sanae scoffed.</p>

      <p>“So this was an event designed for greedy lower class citizens?!”</p>

      <p>“Shut it!”</p>

      <p>“You are my vassal, right?! I beg you to eat with grace! If you just stuff your mouth, you’ll make me look bad! I don’t mind even waiting here for you while you do if you’d like!”</p>

      <p>“What I do is none of your business!”</p>

      <p>As they entered the ballpark, Koutarou and Theia were each given a jam filled bun. Compared to Koutarou’s, Theia’s was slightly smaller. That was a handicap for the girls.</p>

      <p>“Aaahh! Don’t just stuff it into your mouth! Take smaller bites and eat it graciously!”</p>

      <p>“Are you stupid? As if I’d waste time on that in the middle of a race!”</p>

      <p>Koutarou ignored Theia’s complaints and stuffed his face.</p>

      <p>“Waaah! Would you think of my position for one moment, pleb?! I’m ashamed to have such a barbaric vassal!”</p>

      <p><em>As if I care...</em></p>

      <p>And as Koutarou was still chewing, a different voice called out to him.</p>

      <p>“Satomi-kun!”</p>

      <p>“Safurafahmmpai!”</p>

      <p>It was Harumi. She was tearing off small bits of the bread and putting them in her mouth.</p>

      <p>“Like that! Such delicacy is how the upper class— Hey, I’m not done talking to you, pleb!”</p>

      <p>“Fmmphpai!”</p>

      <p>The moment Koutarou saw Harumi, he ran over to her and left Theia behind.</p>

      <p>“Ugh! That woman again? Curse you, Sakuraba Harumi! That man is my vassal!”</p>

      <p>Theia angrily stomped her feet and grit her teeth.</p>

      <p>“There’s no need to be so jealous”</p>

      <p>“Who are you calling jealous? That pleb belongs to me! I’m just angry he’s been taken away!”</p>

      <p>“Yeah, that’s what they call jealousy.”</p>

      <p>“You’re wrong!”</p>

      <p>Theia got so worked up that her face turned bright red and she clenched her fist, accidentally crushing her bread. Insensible to Theia’s feelings, Koutarou made his way to Harumi.</p>

      <p>“Mghm!” He swallowed the bread he was chewing on before talking to Harumi. “Senpai, it looks like you’re putting up quite the fight.”</p>

      <p>“I had a hard time throwing the ball, but I’ve managed so far...”</p>

      <p>Though Harumi was weak, she was able to clear the third obstacle without any problems thanks to her dexterous, careful, and deliberate hands. The lead she had gained there made up for her slow speed, and she had reached the fourth obstacle before Theia.</p>

      <p>“But I’m not very good at this one...”</p>

      <p>“Yeah, you look like you’d be bad with this kind of thing, Senpai.”</p>

      <p>While things had been going well for Harumi, the speed eating had stopped her in her tracks. On top of having a weak constitution and being slow to eat, she had no appetite after running for so long. Because of that, despite having arrived at the fourth obstacle some time ago, she still had more than half of her bread left.</p>

      <p>“How about you, Satomi-kun?”</p>

      <p>“I just finished mine.”</p>

      <p>“Boys really are amazing...”</p>

      <p>“It is my only good point...”</p>

      <p>“Heehee, I’m quite envious.”</p>

      <p>Harumi gave him a small smile and showed her remaining bread to Koutarou.</p>

      <p>“Satomi-kun, don’t mind me and go on ahead. It’s going to take me a while yet.”</p>

      <p>“But—”</p>

      <p>“That was our promise, Satomi-kun.”</p>

      <p>That was indeed what Koutarou had promised when he made Harumi go ahead of him at the first obstacle.</p>

      <p><em>That’s right. I should let Senpai go at her own pace. If I rush her, she might not be able to finish.</em></p>

      <p>“Got it, Senpai. Please make sure you catch up later, okay?”</p>

      <p>“I promise.”</p>

      <p>Harumi gave an emphatic nod and continued eating her bread.</p>

      <p>“Then I’m off.”</p>

      <p>“Good luck, Satomi-kun.”</p>

      <p>“You too, Senpai.”</p>

      <p>“Ah, wait up, Koutarou,” Sanae called after him.</p>

      <p>“Don’t leave me behind, pleb!”</p>

      <p>And so Koutarou left Harumi and the fourth obstacle behind.<br/><br/></p>

      <p>Harumi didn’t leave the fourth obstacle until several minutes after Koutarou did. During that time, she watched as several other participants moved on and she fell further and further behind.</p>

      <p>“I figured this would happen...”</p>

      <p>Even after she began running along the promenade again, several more participants passed her. By the time she had cleared the fifth obstacle, she was in last place.</p>

      <p>“But I decided that I would finish the race, so I need to give it my all! I promised Koutarou too!”</p>

      <p>However, Harumi was still cheerful and she steadily ran along at her own pace.</p>

      <p>“Only half of the course left! I can do this!”</p>

      <p>While she had fallen in rankings, she was still in high spirits.</p>

      <p><em>Satomi-kun will be waiting for me at the goal!</em></p>

      <p>The newest member of the knitting society would be waiting for her. With that thought in her mind, Harumi felt like she would be able to complete the second half of the race as well.</p>

      <p>“Hhnnn... I... I can’t run anymore...”</p>

      <p>Unlike Harumi, who was brimming with willpower, the person next to her looked like she was about to give up any moment now. She was overcome with gloom, and her body was teetering as she trudged along. Despite sharing last place, they were complete opposites.</p>

      <p>“R-Retire... That’s right... I just need to bow out and this will all be over...! B-But if I do that, my points will...! But there’s no way I can catch up now! I can just drop out and rest, right? I did my best...”</p>

      <p>This girl had only experienced misfortune since the starting line. She had fallen over and several participants had trampled her. She had struggled with the calculations at the first obstacle. She had set a new low record of two meters at the second obstacle. She had dropped the ping pong ball five times at the third obstacle. She had dropped her bread in the dirt at the fourth obstacle. And at the fifth obstacle, vaulting, she had flubbed her landing and planted her face right into the ground.</p>

      <p>“I’m at my limit... It’s just not possible... Aha, ahahaha...”</p>

      <p>It was Nijino Yurika, the self-proclaimed magical girl. She was doing her best on her own, but Yurika was wobbling so much that she was unable to run straight. Her sweat had messed up her makeup and her maid outfit was covered in dirt. None of her initial beauty had survived. She was at her limit both physically and mentally. She looked like she might fall apart at any moment.</p>

      <p>“I can’t...”</p>

      <p>“Hang in there.”</p>

      <p>“...?”</p>

      <p>As Yurika was about to fall over, Harumi gently held her up.</p>

      <p>“Th-Thank you very much. B-But it’s fine. I’ll just retire here...”</p>

      <p>“Please don’t give up. You’ve already completed half of the course.”</p>

      <p>Harumi desperately tried to encourage Yurika while keeping her from falling over. She had to help her last place comrade.</p>

      <p>“I can’t win. Besides, nobody is cheering for me and no one is going to care...”</p>

      <p>“But you can’t. If you give up here, you will have lost to yourself too. Even if nobody else is rooting for you, you have to root for yourself... Besides, I’m here with you. If you stop, I’ll be sad.”</p>

      <p>“Ah...”</p>

      <p>After hearing those powerful and kind words, Yurika began to see a small glimmer of hope. Having gone for so long without anyone listening to her, Harumi’s gentle voice worked wonders.</p>

      <p>“Now, please stand up! If you give up here, you’ll lose to yourself in the future too.”</p>

      <p><em>I’ll lose to myself again...? I can’t have that!</em></p>

      <p>Yurika clenched her jaw and poured power into her body. Doing that, she began to feel light again.</p>

      <p>“I-I...?!”</p>

      <p>It was a mysterious feeling for Yurika. Harumi hadn’t used any magic, and yet Yurika’s strength had returned.</p>

      <p>“Hang in there. Now put power into your legs!”</p>

      <p>“Y-Yes!”</p>

      <p>With Harumi’s voice in her ears and Harumi’s hand on her back, Yurika was able to pick herself up. She was ready to give up before, but now she felt like she could try for a little while longer.</p>

      <p>“Um, thank you very much.”</p>

      <p>Yurika deeply bowed to Harumi. She was grateful from the bottom of her heart. She was only able to continue thanks to Harumi.</p>

      <p>“That’s okay. When we’re in trouble, we’ll help each other out.”</p>

      <p>To Harumi, who had a weak constitution, this kind of setback was normal for her. Since she knew how painful it could be better than anyone, she wasn’t going to leave Yurika alone.</p>

      <p><em>She’s so strong... She’s probably several times stronger than me...</em></p>

      <p>That was how Yurika felt as she looked at the smiling Harumi. Although Harumi had no power, Yurika felt she would lose to her right now. She admired Harumi. She wanted to be like her.</p>

      <p>“I’m Sakuraba Harumi. May I ask your name?”</p>

      <p>“I-I’m Yurika! Nijino Yurika!”</p>

      <p>And so Harumi and Yurika met. Though they had barely missed each other a couple of times before, this was the first chance they had to introduce themselves.<br/><br/></p>

      <p>As Harumi and Yurika were meeting, the lead group was reaching the eighth obstacle. The first one there was Kiriha. She had managed to preserve the lead she’d gained at the start for the whole race so far. Being so well-rounded, this event played to her strengths.</p>

      <p>“The eighth obstacle is...”</p>

      <p>But as Kiriha looked around the eighth obstacle, a few other students came running up.</p>

      <p>“There she is! That girl is the frontrunner!”</p>

      <p>“We finally caught up!”</p>

      <p>“Not good. They’ve finally closed the gap...”</p>

      <p>As the race reached the final stages, Kiriha had lost steam and her speed had dropped. That was why the participants with stamina to spare had been able to catch up to her. The soccer club, the boys’ track and field team, and other clubs that required endurance were on her heels now.</p>

      <p>“Oh, it’s Kurano-san.”</p>

      <p>“Kurano-san? Ah, you’re right.”</p>

      <p>But Shizuka and Kenji were also among the participants that had caught up. The two of them seemed to have struggled quite a bit along the way. Kenji’s stage outfit and Shizuka’s apron were both dirtied, but they approached Kiriha with smiles nonetheless.</p>

      <p>“Welcome, you two.”</p>

      <p>“I finally caught up to you, Kurano-san.”</p>

      <p>“To think I’m almost losing to girls... Kurano-san, Kasagi-san, you two are amazing.”</p>

      <p>Kenji found himself impressed with the two girls. He was confident in his stamina since he had been in the baseball club together with Koutarou. But in spite of that, two of his female classmates had consistently kept in front of him.</p>

      <p>“Heh, but you did catch up.”</p>

      <p>Kiriha smiled at Kenji, but she was actually relieved.</p>

      <p><em>As I thought, Kasagi Shizuka is not normal. I’m glad she’s not my opponent...</em></p>

      <p>Unaware of how Kiriha felt about her, Shizuka happily looked over the obstacle.</p>

      <p>At the halfway point of the marathon course, it had looped back around towards the start. Because of that, the eighth obstacle was in a vacant lot not too far from the school.</p>

      <p>“So this one is balance beams, huh? But it seems pretty long...”</p>

      <p>The eighth obstacle was a row of five balance beams. They were on average thirty meters long, but they were all specially made for the event. From here, the participants needed to select one of the beams and cross over, but that choice was a difficult one.</p>

      <p>The five beams varied in thickness. The middle was considered standard, and there were two thicker and two thinner beams. It went without saying that the thinner the beam, the harder it would be to cross. But the choice wasn’t as simple as that. There was an additional catch depending on the thickness of the beam. The thicker the beam, the longer the detour. If a participant fell off a beam, they would be covered in white powder and forced to run a track longer than the thickest beam.</p>

      <p>Ultimately, choosing the right balance beam was a critical decision. Would the racers pick a thinner beam to try and gain a lead, or play it safe and pick a thicker beam? Their choices would influence the outcome of the marathon.</p>

      <p>“I’m at a loss. Mackenzie-kun, which beam will you cross?”</p>

      <p>“Hmm... I’m thinking of the middle one. It’s not too hard and it’s not too long.”</p>

      <p>“You’re quite the careful one, Matsudaira-san.”</p>

      <p>“Well—”</p>

      <p>As Kenji flashed an embarrassed smile, loud and energetic voices could be heard in the distance. Hearing those voices, the three participants who were already on the way to their chosen balance beams stopped.</p>

      <p>“Why would you swear loyalty to that weak woman over me?!”</p>

      <p>“It’s because of your lack of humanity! How about you show a bit of self-awareness, Tulip?”</p>

      <p>“What? Try saying that again, you stupid vassal with nothing but muscles to show for yourself!”</p>

      <p>“I’ll say it as many times as I have to! Your height, breasts, and humanity are all lacking! You useless princess!”</p>

      <p>“My height and breasts have nothing to do with it! Take back those insults!”</p>

      <p>“I’m so sorry, you useless princess! The only thing you’re missing is humanity! There! Are you satisfied now?!”</p>

      <p>“You’re not putting any feeling into it! It doesn’t sound like an apology at all!”</p>

      <p>“Of course it doesn’t! I have no intention of actually apologizing!”</p>

      <p>“You... You always have something to say, you hateful vassal! Take this! And that!”</p>

      <p>“Ow! Owowow! You wanna fight?!”</p>

      <p>Koutarou and Theia came around the corner in the middle of screaming at each other. Sanae was with them too, but Kenji and Shizuka were unable to see her. Koutarou and Theia bumped shoulders and kicked at each other as they ran.</p>

      <p>It was clear that they could go faster if they didn’t do that, but being as stubborn as they were, they continued nonetheless. Despite that, however, they were both going at a good clip. With an enemy putting up such a fight, they completely forgot about their exhaustion.</p>

      <p>“Kou? That idiot’s already caught up! And Theia-san is with him?!”</p>

      <p>“Hah, as expected from Satomi-kun.”</p>

      <p>“All he’s got is strength and stamina, after all...”</p>

      <p>The moment he saw Koutarou, Kenji decided to pick a different beam.</p>

      <p><em>Koutarou is just reckless. He’ll definitely pick the thinnest beam! So I’ll pick the second thinnest one! So much for playing it safe!</em></p>

      <p>Kenji had planned on taking the middle beam, but with Koutarou’s arrival, he didn’t have the time to waste on that. Instead, he decided to take the balance beam next to the one Koutarou would chose and cross it as fast as he could.</p>

      <p>“I’ll be going on ahead, Mackenzie-kun.”</p>

      <p>“Kasagi-san?!”</p>

      <p>However, Shizuka got on it before he could. She was thinking the same thing he was, and Kenji hurriedly followed after her. However, Kiriha had something else in mind.</p>

      <p>“All right.”</p>

      <p><em>Instead of crossing a beam with others on it, I’ll pick one I can get right across! With no one in my way, I can easily make up for the time lost on the detour! Even if it doesn’t work out, there are still the ninth and tenth obstacles!</em></p>

      <p>Kiriha began crossing the middle beam that Kenji had abandoned. The beams were single file, so she avoided getting on the same beam as Shizuka and Kenji. Even if she hurried, she wouldn’t be able to get past the two of them. That was why Kiriha had picked the middle beam no one else was crossing. She was planning on dashing through it. The beam was longer, but she figured that she would be able to cross it faster with nobody in the way.</p>

      <p>“It’s a balance beam! This must be hard for you since you’re so unbalanced, Tulip!”</p>

      <p>“Just keep barking, pleb! I’ll show you the difference between us!”</p>

      <p>That was when Koutarou and Theia arrived at the obstacle. And just as Kenji had predicted, Koutarou went for the narrowest beam. He wasn’t one for tactics, so he went straight for the shortest path.</p>

      <p>“Cross it, Koutarou! We’re close the goal now!” Sanae cheered.</p>

      <p>“Leave it to me!”</p>

      <p>Based on the situation, it seemed like Theia would follow after Koutarou, but instead she went for the thickest beam.</p>

      <p>“Hey, Koutarou.”</p>

      <p>“Hmm?”</p>

      <p>“Theia went that way.”</p>

      <p>“...You’re right. How awfully timid of you, Princess Tulip!”</p>

      <p>Even though Koutarou tried provoking her with as much malice as he could, Theia showed no sign of anger.</p>

      <p>“Heh heh heh, slow and steady wins the race. I’ve always abided by that wisdom. Impatience is unbecoming of royalty!”</p>

      <p>As Theia declared her strategy with a smile, she began crossing the beam. Because of the thickness of the beam, there was next to no chance of losing her balance. With that, she was able to move several times faster than Koutarou.</p>

      <p>Out of everyone on the balance beams, Kiriha was the first to pass the middle, keeping up her first place lead. Following her were Theia, Shizuka, and Kenji in that order. Koutarou was behind all of them. Not only had he arrived last, he’d chosen the most difficult beam to cross.</p>

      <p>And while it seemed like this obstacle would be a simple matter of crossing the balance beams, there was an unexpected ambush awaiting.</p>

      <p>“There they are! It’s the leaders!”</p>

      <p>“We’ve finally caught up! Now where is that first-year brat?!”</p>

      <p>“Gottsan desu!”</p>

      <p>The ambushers were the three upperclassmen Koutarou had stepped on at the start from the rugby club, the judo club, and the sumo club. The three boys approached the balance beams with an angry fire in their eyes.</p>

      <p>“Uwah! Those guys are...”</p>

      <p>Sensing something threatening from behind, Koutarou looked back and spotted the three giants. Though Koutarou was usually quick to forget, he clearly remembered those distinct uniforms he had used as stepping stones at the start of the marathon.</p>

      <p>“Koutarou, it’s those three! It looks like they’re looking for you! What are you going to do?!”</p>

      <p>“Even if you say that...”</p>

      <p><em>Not good!</em></p>

      <p>Koutarou looked away and kept his head down, doing his best not to stand out. He was hoping to cross the beam before they spotted him.</p>

      <p>“Damn! Where is that brat?!”</p>

      <p>“You don’t remember, rugby club?!”</p>

      <p>“It was just for an instant, so not clearly...”</p>

      <p>Fortunately, the three boys were even quicker to forget than Koutarou was, and none of them remembered his face.</p>

      <p>“All right! Luck is on our side!”</p>

      <p><em>What luck!</em></p>

      <p>Sanae cheered out loud, but Koutarou was still trying to keep a low profile and kept his celebrating to himself.</p>

      <p>“Gottsan desu!”</p>

      <p>“Hmm? What is it, sumo club?”</p>

      <p>“Gottsan desu!”</p>

      <p>“What? He was with a woman at the time? That’s right! Good thing the sumo club doesn’t admit girls! You picked up on just the right thing!”</p>

      <p>“Rugby club, over there! That guy’s got a girl with him! We’ve finally found him!”</p>

      <p>“Good work! It’s time for revenge!”</p>

      <p>“Gottsan desu!”</p>

      <p>The three set their eyes on a certain male student crossing the balance beams.</p>

      <p>“Mackenzie-kun, something strange is happening behind us...”</p>

      <p>“Huh...?”</p>

      <p>Of course, the person they had mistakenly set their sights on was Kenji for being with Shizuka.</p>

      <p>“Hey, first-year brat! How dare you use us as stepping stones?!”</p>

      <p>“And you’ve got a girl! I’m so jealous!”</p>

      <p>“Gottsan desu!”</p>

      <p>The earth shook as the three giant men barreled towards the beam Kenji was on. The other students planning on crossing the beams quickly got out of their way.</p>

      <p>“You can’t run away anymore!”</p>

      <p>“Wh-What’s wrong, Senpais?! Just what is going on?!”</p>

      <p>Having no idea what was going on, Kenji was thoroughly confused. The beam he was on shook as the three boys approached.</p>

      <p><em>Why are they so angry? And why are they closing in on me?!</em></p>

      <p>He had no way of knowing that he was just taking a bullet for Koutarou.</p>

      <p>“Are you trying to play dumb?! Don’t tell me you forgot about stepping on us at the starting line!”</p>

      <p>“That alone is enough to execute you, but what’s with you?! You’re even with such a cute girl! I’m so envious!”</p>

      <p>“Gottsan desu!”</p>

      <p>“This must be a misunderstanding... I haven’t stepped on anyone!”</p>

      <p>“You’re the only one here with a woman! You can’t fool us!”</p>

      <p>“You heard him! Introduce us, you bastard!”</p>

      <p>“Gottsan desu!”</p>

      <p>Kenji desperately tried to persuade the three of them, but they wouldn’t listen to a word he said as they climbed up on the balance beam.</p>

      <p>“Th-They’re coming!”</p>

      <p>“Kyahaha, stop touching me in strange places, Mackenzie-kun!”</p>

      <p>“S-Sorry!”</p>

      <p>Kenji tried to run forward, but with Shizuka in the way, he was trapped.</p>

      <p>“Damn it, you first-year brat! What kind of enviable things are you doing in this situation?!”</p>

      <p>“That’s it! I’ve had it! What makes you think you can act like that just because you have good looks?! We’re just three guys!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert9">
    <img alt="insert9" class="insert" src="../Images/Insert9.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter43">
    <div class="main">
      <p>“Gottsan desu!”</p>

      <p>All the while, they were gradually gaining on Kenji. To the three of them, capturing Kenji had a higher priority than winning the race, so they weren’t concerned about falling off the balance beam. That’s why they were crossing the beam much faster than Kenji and Shizuka. At this rate, it was only a matter of time before they caught up to Kenji.</p>

      <p>“Oh dear. Sorry, Mackenzie...”</p>

      <p>As Koutarou watched the three men close in on Kenji, he put his hands together and apologized from afar.</p>

      <p>“...Koutarou, you really are sly.”</p>

      <p>“You think so?”</p>

      <p>“Ha, I see how it is! This is your fault, isn’t it, Kou?!”</p>

      <p>Seeing Koutarou with his hands together, it hit him. They were chasing after a boy and girl team that had gotten an early lead. The only team who fit into that description was Koutarou and Harumi.</p>

      <p>“Don’t involve innocent bystanders, Mackenzie-kun!”</p>

      <p>“Like you’ve got any room to talk. You’re the one who got him involved...”</p>

      <p>“Apples and oranges. Surely you don’t want to lose, Sanae-kun.”</p>

      <p>“Well, that’s true. Now that I think about it, you’ve always been an awful person...”</p>

      <p>“You think so?”</p>

      <p>Sanae gave Koutarou a dirty look while floating next to him, but Koutarou was completely indifferent.</p>

      <p>“He’s right! Don’t be so uncouth, you first-year brat!”</p>

      <p>“You’re wrong! That guy, Kou, is the true culprit!”</p>

      <p>“That brat’s all by himself! Besides, he just looks like the kind of guy that’d never be popular! You’re a terrible liar too, you ladykiller bastard!”</p>

      <p>“Gottsan desu!”</p>

      <p>Kenji had figured out the truth and was doing his utmost to convince the upperclassmen, but it was all for naught. They continued to pursue him and were just a few meters away now. Kenji steeled himself.</p>

      <p>“...At this point I’ll get caught and fall off the balance beam! I’m going to take you with me, Kou!”</p>

      <p>“What are you trying to do?!”</p>

      <p>“This!”</p>

      <p>The next moment, Kenji jumped off the beam and kicked at Koutarou who was crossing next to him. It was his attempt at recovering from a hopeless situation. Rather than being thrown off by the three men, he would kick Koutarou off of his beam and then lose the upperclassmen by escaping through the mandatory track. Though he might lose to Shizuka, as long as he didn’t lose to Koutarou, he was willing to take what he could get. This was the only plan he could come up with to cut his losses.</p>

      <p>“Take this!”</p>

      <p>“Look out, Koutarou! Dodge it!”</p>

      <p>“As if, Mackenzie!”</p>

      <p>Being childhood friends, Koutarou and Kenji were no strangers to fighting each other. That was why, despite his initial shock, Koutarou was prepared to intercept Kenji as soon as he jumped.</p>

      <p><em>I’m on top of a balance beam with poor footing, and my opponent is coming at me with a flying kick... I have no way of blocking it!</em></p>

      <p>“In that case, I’ll just do this!”</p>

      <p>Koutarou swung his right arm and hit Kenji’s extended right ankle.</p>

      <p>“Nuaaaah?!”</p>

      <p>It was enough to throw Kenji off, and he fell towards the mat covered in white powder.</p>

      <p>“Uwaahhh?!”</p>

      <p>Meanwhile, Koutarou had warded off Kenji’s attack, but he’d lost his balance and was now desperately waving his arms trying to regain it.</p>

      <p>“Don’t think you’ve won just yet!”</p>

      <p>And just before Kenji fell onto the mat, he reached out his hand. He was planning on grabbing Koutarou’s flailing arm and pulling him over.</p>

      <p>“Koutarou, watch out for his hand!”</p>

      <p>“Damn you, Mackenzie!”</p>

      <p>“Wahahaha, Kou, I’m taking you down wi—”</p>

      <p>Kenji’s foot touched the mat first, but he didn’t care as long as he could still grab Koutarou’s arm. Really, Kenji’s strategy was flawless. His quick decision-making when cornered, the following flying kick, and even reaching out his hand at the last moment were all according to plan. If the situation had been normal, things would have worked out just as he wanted.</p>

      <p>BOOM!</p>

      <p>However, regardless of how amazing Kenji was, there was nothing he could have done to be prepared for the sudden explosion at his feet.<br/><br/></p>

      <p>Kenji vanished in the explosion of smoke and white powder. Koutarou, who was on the verge of losing his footing, was fortunately pushed by the following shockwave and regained his balance.</p>

      <p>“Wh-What?! What just happened?!”</p>

      <p>However, despite having regained his balance, he was still in shock from the sudden explosion.</p>

      <p>“Wh-Wh-Wha?”</p>

      <p>“Koutarou, are you okay?!”</p>

      <p>“Satomi-kun, how’s Mackenzie-kun?!”</p>

      <p>Of course, Koutarou wasn’t the only one who was shocked. Sanae, Kiriha, and Shizuka were equally surprised. Caught in the explosion, however, Kenji had no time to be surprised as he rolled along the mat the same way his eyes rolled into the back of his head.</p>

      <p>And then there were the students who were surprised at the sudden calamity, but for different reasons.</p>

      <p>“Hey, the drama club member with the girl just exploded!”</p>

      <p>“What?! You mean the guy who looks like he’d live a charmed life off of his looks blew up?!”</p>

      <p>“Gottsan desu!”</p>

      <p>“Did you hear that?! The playboy bastard in the glasses just self-destructed!”</p>

      <p>“What?! Did he fail at seducing a woman?!”</p>

      <p>“That’s what I like to hear!”</p>

      <p>They were mostly the unpopular male students that had made it to the obstacle, including the three upperclassmen that had been following Kenji.</p>

      <p>“Hooray! Hooray! Hooray!”</p>

      <p>They all rejoiced, cheering and smiling.</p>

      <p>“Ohohohoho!”</p>

      <p>But there was one student who wasn’t surprised at all.</p>

      <p>“My, how frightening! This is why barbarians at the fringe of the universe are so scary! To think they would bury landmines just to win at a sports festival! How truly frightening!”</p>

      <p>The person who was laughing loudly on the far beam was none other than the seventh princess of the Holy Forthorthe Galactic Empire, Theiamillis Gre Forthorthe.</p>

      <p>“Landmines? You mean this was your doing, Tulip?!”</p>

      <p>Hearing her high-pitched laugh, Koutarou was certain she was behind the explosion.</p>

      <p>“Ohohoho! I have no idea what you’re talking about! Keep your false accusations to yourself!”</p>

      <p>However, Theia was feigning ignorance. As there was no evidence, she was quite full of herself.</p>

      <p>“Quit lying! The only ones who would do something like this are you and Sanae!”</p>

      <p>“Wait just a minute! How did I get thrown in there?! You take that back and say you believe me more than anything!”</p>

      <p>“C-Calm down, I was just saying...”</p>

      <p>Being lumped in with Theia angered Sanae. She grabbed ahold of the nape of Koutarou’s neck and began shaking it. Since he was still on the beam, Koutarou desperately tried not to fall off.</p>

      <p>In the midst of his struggle, a famous foreign song began playing from Koutarou’s pocket. It was his cellphone. The song was the theme from an old, popular secret service movie that Koutarou had set as his ring tone whenever Ruth called.</p>

      <p>“Stop pegging me as a troublemaker!”</p>

      <p>“W-Wait! I’ve got a call from Ruth!”</p>

      <p>“Do you think you can fool me like that?!”</p>

      <p>“Just for a minute!”</p>

      <p>While being shaken by Sanae, Koutarou pulled his phone out and answered the call.</p>

      <p>“R-Ruth-san!”</p>

      <p>“Satomi-sama!”</p>

      <p>Ruth’s panicked voice came through the line. She was speaking rapidly and her voice was trembling.</p>

      <p>“Damn! Did Ruth catch on?”</p>

      <p>Realizing that Ruth was on the phone with Koutarou, Theia’s expression turned grim.</p>

      <p>“I have terrible news Satomi-sama! There are 128 neutralizing mines missing from the Blue Knight’s—”</p>

      <p>“Blue Knight, commence wide range jamming! Shut down all communication!”</p>

      <p>“As you wish, my princess.”</p>

      <p>And so Ruth’s voice was cut off mid-sentence.</p>

      <p>“Ruth-san, what was that about landmines?! Ruth-san!”</p>

      <p>Flustered, Koutarou called out to Ruth again, but the call ended with a beep. He tried to call her back up but he was unable to reach her. His phone displayed a “no signal” message.</p>

      <p>“No signal?! Impossible, why would—”</p>

      <p>“It’s Theia! She’s doing something again!”</p>

      <p>“Damn it, Tulip! What’s the meaning of this? What was she saying about 128 mines?!”</p>

      <p>“How terrifying. If 128 mines really are buried here, nobody would be able to escape. Terrorism truly is terrifying.”</p>

      <p>“You bastard! You think you can just spout barefaced lies?!”</p>

      <p>“Koutarou, I’m not sure you’re in any position to be saying that...”</p>

      <p>Koutarou grit his teeth, but Theia’s confident smile didn’t so much as waver. Considering the circumstances, it was clear that Theia was the culprit, but there was no real evidence.</p>

      <p>“What will you do now, pleb? Do you dare advance knowing there are landmines below you?!”</p>

      <p>“You bastard...”</p>

      <p>Theia boasted triumphantly. It was just as she said. Knowing that they would fall on mines, nobody could advance like before. It was especially true for the faster runners and the people on the thinner beams. Everybody stopped moving.</p>

      <p>“Princess!”</p>

      <p>“Ah, you finally caught up!”</p>

      <p>That was when Theia’s partner, a member of the cheerleading squad, arrived at the obstacle.</p>

      <p>“Hurry up and come to my side!”</p>

      <p>“Hail to the princess!”</p>

      <p>The cheerleader began crossing the thickest beam without hesitation, following right after Theia. They weren’t the steps of someone being cautious of landmines below them. They were powerful steps without any sign of fear.</p>

      <p>“I get it! Theia-dono, there are no mines under that beam, are there?”</p>

      <p>Kiriha wasn’t in a position to put on her usual act in this kind of situation. She simply pointed at the beam Theia was crossing and demanded an explanation in a strong tone.</p>

      <p>“S-So that’s why she went for the thickest beam?!”</p>

      <p>“It was that kind of trap?! That’s playing dirty, Tulip!”</p>

      <p>“Ohohoho! Enough with your baseless accusations! The cheerleading squad and I are merely crossing the beam with our unbreakable will, unwavering courage, and absolute loyalty! You can stay here lamenting your own weakness for as long as you’d like!” Theia boasted exultantly as her flunky met up with her. “Let’s go! You and I will finish first and second!”</p>

      <p>“Hail to the princess!”</p>

      <p>Theia had indeed taken 128 mines from the Blue Knight’s weapon storage, and each and every one had been buried at the eighth obstacle last night by the cheerleading squad. The only safe passage was the thickest beam. Everywhere else had been packed with mines.</p>

      <p><em>You were too naive, pleb! You too, Kiriha! Did you think I would fall into your trap without any of my own?!</em></p>

      <p>This minefield had been set up as a countermeasure due to Kiriha’s suspicious movements before the sports festival.</p>

      <p>“Hey! It looks like there’s nothing set up under that beam over there!”</p>

      <p>“So all we need to do is cross that one?”</p>

      <p>“That’s it! Let’s go!”</p>

      <p>“Cross it!”</p>

      <p>“Wh-What?!”</p>

      <p>However, there was something Theia hadn’t anticipated. When the other students realized that all of the other beams were trapped, they naturally flocked to the one she was on.</p>

      <p>“W-Waaah! H-Hey, cross it a little bit slower!”</p>

      <p>“P-Princess!”</p>

      <p>The beam started shaking as more and more people climbed up onto it. Since Theia was small, it didn’t affect her too much, but the same wasn’t true for the large cheerleading companion. Unable to control his high center of gravity due the shaking beam, he quickly lost his balance.</p>

      <p>“H-Hey, keep it together!”</p>

      <p>“But Prin— Uwaaah?!”</p>

      <p>“L-Let go of me, you fool! Ahhh!”</p>

      <p>The cheerleading squad member fell off the beam, taking Theia with him. Hitting the ground, they were both immediately covered in the pure white powder from the mat. Theia jumped up in a fluster and grabbed the cheerleading squad member by the collar and started shouting at him.</p>

      <p>“You idiot! Why did you take me with you?! If you were going to fall, you should have just fallen on your—”</p>

      <p>BOOM!</p>

      <p>However, Theia was unable to finish scolding her partner because a landmine exploded underneath them.</p>

      <p>“W-Why...?!”</p>

      <p>The blast knocked them both to the ground and covered them in the stark white powder once again.</p>

      <p>“I... I told you to keep the beam at the edge clear...”</p>

      <p>“P-Princess, so that’s what you meant... I... I was certain that you meant the other beam for the disabled...”</p>

      <p>At Harukaze High, almost all of the school clubs participated in the obstacle marathon. That included students who had been injured during their club activities and those who were in wheelchairs, so the volunteer work clubs had set up a special beam just for them. It was the only beam the cheerleading squad hadn’t planted any mines under. This was because Theia had told them to keep the rightmost beam clear of mines. The cheerleading squad was moved by her kindness, but sadly, that wasn’t at all what she had meant.</p>

      <p>“Y-You fool... It seems your loyalty and courage have backfired... Ugh...”</p>

      <p>“I am truly so... Ugh...”</p>

      <p>Theia and her flunky both stopped moving as their eyes rolled backward.</p>

      <p>“Uwaaah! There are bombs buried under this one too!”</p>

      <p>“Turn around! Run away!”</p>

      <p>“Don’t push! Stop pushing! I’ll fall!!”</p>

      <p>“The mines! The mines will...!”</p>

      <p>The remaining students panicked. They beam they’d clung to for safety turned out to be a lie. They no longer had anywhere to run. It wasn’t just Koutarou and the others now; all of the students were at a standstill on top of the beams. But with so many people pushing each other around, that didn’t last for long.</p>

      <p>“Waaaaah! I can’t keep it up!”</p>

      <p>“Kyaaaaaaaah!”</p>

      <p>“Mommyyyyy!”</p>

      <p>It was only a few moments before several students fell from the beams. In surprise, several more students lost their footing.</p>

      <p>“Why?! Wasn’t this supposed to be heavenly punishment for being too handsome?!”</p>

      <p>“I guess it’s always the same for ugly men no matter where they go!”</p>

      <p>“Gottsan desu!”</p>

      <p>Obstacle eight was alive with blinding flashes of light and the thunderous roar of explosion after explosion. Describing it as a warzone seemed fitting. The only saving grace was that the neutralizing mines didn’t actually harm anyone, although that was of little consolation to those actually caught up in the blasts.<br/><br/></p>

      <p>But none of commotion at the eighth obstacle concerned Harumi and Yurika, who had only just passed the sixth. They were still a good kilometer away from the fallout.</p>

      <p>“Whoops...”</p>

      <p>“Are you okay, Nijino-san?”</p>

      <p>“I’m okay, Sakuraba-senpai.”</p>

      <p>“We still have a long way to go, so hang in there.”</p>

      <p>“I’ll do my best. Thank you, Senpai.”</p>

      <p>They encouraged each other as they dragged their heavy, tired bodies towards the goal. The two girls making their way down the promenade together was a touching sight, quite the opposite of the grizzly disaster at the eighth obstacle.</p>

      <p>The two of them actually got along very well. Harumi, who was normally withdrawn, didn’t think much of it when she was with Yurika. She didn’t have a reason to feel self-conscious around struggling, childish Yurika. The fact that they were sharing last place gave them a sense of camaraderie. And because Harumi actually listened, Yurika quite liked her as well. In other words, it seemed like they would make good friends. They would be quite happy to reach the goal together.</p>

      <p>“Sakuraba-senpai, why are you trying so hard?”</p>

      <p>“Whoo... Hahh... Actually, I promised a friend in my society... that I’d finish the race.”</p>

      <p>Harumi answered Yurika’s question between gasps for air. Her breathing was so labored that her words grew further and further apart. It seemed like she was about to reach her limit. But even then, Harumi was smiling.</p>

      <p>“That’s why... I want to... reach the goal... It’s because... of a precious promise... I made with my friend...”</p>

      <p>Having missed a great deal of school when she was younger, Harumi had very few people she could truly call friends. That was why Koutarou was special to her. Although the promise to reach the goal might not have meant much to Koutarou, it meant the world to Harumi.</p>

      <p>“A friend... What is your friend like?” Yurika asked, not realizing she meant Koutarou. Even though her joints were aching, she felt a little at ease when she was talking.</p>

      <p>“That’s—”</p>

      <p>But Harumi suddenly stopped speaking and her legs stopped moving. Still doing her best to run, Yurika ended up a few steps ahead of Harumi before she realized something was wrong.</p>

      <p>“Sakuraba-senpai?”</p>

      <p>When she stopped to turn around, she saw Harumi starting to tip over.</p>

      <p>“...”</p>

      <p>Harumi’s face was pale and her eyes were quivering as if she was trying to say something, but no words left her lips. All she could do was give Yurika an apologetic look before falling towards the concrete pavement.</p>

      <p>“S-Sakuraba-senpai!”</p>

      <p>Fortunately, Harumi never hit the ground. Yurika demonstrated a surprising amount of agility for her usually clumsy self and caught Harumi mid-air.</p>

      <p>“Please hang in there, Sakuraba-senpai!”</p>

      <p>“...N-Nijino-san...”</p>

      <p>Blood drained from Harumi’s face. Her lips turned purple and her limbs went cold. Yurika felt a strange chill as she held on to her. Despite doing her best, the five kilometer marathon proved to be too much for Harumi.</p>

      <p>While she had trained a little bit, her body was aching and screaming now. If she hadn’t met Koutarou, Harumi might have retired halfway through. But she had given it everything she had in order to fulfill her promise with Koutarou.</p>

      <p>“I’m... sorry... I have... a weak body...”</p>

      <p>“P-Please wait! I’ll call for help right away!”</p>

      <p><em>I need to hurry or something terrible might happen!</em></p>

      <p>Yurika understood that Harumi was far from okay. Her face was pale and her breathing was uneven. Even though she felt cold to the touch, the pulse Yurika could feel with the tip of her fingers was stupidly fast. Yurika looked around in a panic, but there was no one else nearby. She decided to go find help, but Harumi’s weak voice and the grasp of her cold hand stopped her.</p>

      <p>“Nijino-san... Sorry I couldn’t... be with you... until the end...”</p>

      <p>And with those words, Harumi lost consciousness. The cold hand that had grabbed Yurika’s slowly let go and fell to the ground.</p>

      <p>“Sakuraba-senpai! Sakuraba-senpai!”</p>

      <p>Despite Yurika’s desperate cries, Harumi didn’t wake up.</p>

      <p><em>This is bad! There’s no time to spare! In that case...</em></p>

      <p>Yurika gently laid Harumi down on the ground and stood up with a determined expression.</p>

      <p>She then held out her right hand and loudly declared, “Come! Angel Halo!”</p>

      <p>A blue, spherical light appeared in front of Yurika’s extended hand. When the blue sphere of light vanished, an ornate, decorated staff was floating in its place. Yurika snatched the floating staff. She firmly grasped it with both of her hands and focused.</p>

      <p>“Next is... Costume Change! Modifier: Quicken! End: Permanent!”</p>

      <p>When she raised the staff above her head, a blue light covered her body and her outfit instantly changed. Suddenly, she was in her magical girl outfit instead of the maid uniform. It was the same outfit Yurika had been wearing when she first appeared in room 106.</p>

      <p>“Just hold on, Sakuraba-senpai! Magical Girl Rainbow Yurika will save you!”</p>

      <p>After changing her outfit, she tightened her grip on her staff and focused once more. This time, she pointed the tip of the staff at Harumi’s chest. Harumi’s eyes were closed and she wasn’t moving a muscle. Being unconscious, she was unaware of what was happening around her.</p>

      <p>“Remove Disease! Modifier: Maximize!”</p>

      <p>As Yurika shouted, blue light from her staff shrouded Harumi’s body. Depending on the type of spell Yurika cast, one of seven different lights would be used. The blue light was for when Yurika was trying to summon something. All three spells she had used today had the effect of a blue light: calling forth her staff, changing her clothes, and now trying restore Harumi’s vitality.</p>

      <p>This was Magical Girl Rainbow Yurika—the magical girl with the power to wield the seven colors of the rainbow. Unfortunately nobody was around to see her save the day, but Yurika didn’t care about that right now. The only thing she was concerned about was saving Harumi.</p>

      <p>“Wake up, Harumi-senpai!” Yurika shouted, grasping the staff as hard as she could.</p>

      <p>As she did, the blue light glowed brighter and covered Harumi several times over. Yurika desperately called out to Harumi in an attempt to wake her up.</p>

      <p>“You’re going to reach the goal, right?! You made a promise with your friend, right?!”</p>

      <p>“...”</p>

      <p>Even then, Harumi showed no sign of opening her eyes. She had been born with her sickness, and it wasn’t something that could be cured easily, even with magic.</p>

      <p>“I’ll run with you! So please...!”</p>

      <p>But that didn’t stop Yurika. She kept calling out to Harumi. Harumi was the one who had taught her not to give up.</p>

      <p>“Ah?!”</p>

      <p>But the surprises for the day weren’t over. As if responding to Yurika’s voice, the light flowing from the staff changed.</p>

      <p>“Huh?! Wh-What is this?! I’ve never heard of white magic!”</p>

      <p>Before she knew it, the light had turned from blue to pure white. On top of that, it was shining much brighter than before. It was almost as if a tiny sun had appeared. The brilliant white light surrounded Yurika and Harumi.</p>

      <p>“H-How?! It even healed me too?! The pain is gone!”</p>

      <p>The spell Yurika had used on Harumi had increased in power so dramatically that it started affecting her as well. Yurika had several wounds after being tramped, but when she was enveloped in the light, they vanished as if nothing had ever happened. Even the exhaustion weighing her body down disappeared.</p>

      <p>“What is this?!”</p>

      <p>The light took the shape of a pillar and extended up towards the sky. Yurika stood in the middle of it all with a blank look on her face.</p>

      <p>“What is this power?!”</p>

      <p>The spell Yurika had used on Harumi was only intended to cure a single person of an illness. It didn’t have the power to affect multiple people, and it definitely wasn’t meant to heal their wounds or remove exhaustion. Those were different spells entirely.</p>

      <p>“Could this be the power concentrated in room 106?!”</p>

      <p>Yurika herself wasn’t sure of the origin of the power, but she knew one thing for certain...</p>

      <p>“No, the reason doesn’t matter! With this much power, I can save Sakuraba-senpai!!”</p>

      <p>Harumi’s pained look disappeared and her complexion improved. Her body temperature returned to normal, and her pulse and breathing slowed down to a healthy rate. The only important thing was that Harumi was okay. Nothing else really mattered to Yurika at this point.<br/><br/></p>

      <p>“D-Damn it...! I can’t... lose here... I need to put Senpai... on the podium...!”</p>

      <p>“Hang in there, Koutarou! You’re almost there!”</p>

      <p>Returning to the schoolyard, Koutarou was a mess. He couldn’t walk straight, and he looked like he might collapse at any time. He was using a branch he picked up along the way as a walking staff, practically dragging himself through the gate.</p>

      <p>But as Koutarou entered the schoolyard, the crowd on the bleachers cheered. Even though he was visibly struggling, he was currently in first place. Since Harukaze High had so many clubs, the knitting society had never gotten first place in this event. Because of that, the tension in the audience was at an all-time high. However, even their loud cheers were lost on Koutarou as he trudged his way across the track.</p>

      <p>“Just a little bit more... The goal is so close...”</p>

      <p>“Look, it’s the tenth obstacle! It’s only thirty meters away!”</p>

      <p>All Koutarou could hear was Sanae’s voice. He was relying on only her words as he dragged his legs one in front of the other.</p>

      <p>The minefield at the eighth obstacle was responsible for Koutarou’s current miserable state, but the ninth obstacle and all the other running only made things worse. However, even in this condition, Koutarou refused to fall because he wanted Harumi to win and because Sanae kept cheering him on. Without that motivation, he would have collapsed long ago.</p>

      <p>“Once you do that, you’ve finished!”</p>

      <p>“Finished? I... I’ve already finished?”</p>

      <p>However, Koutarou made a grave mistake. He missed part of what Sanae said, and only heard, “You’ve finished.”</p>

      <p>“Waah! Koutarou, no! You can’t stop nooooow!”</p>

      <p>“I see, I finished...”</p>

      <p>Ordinarily, this kind of misunderstanding would be easy enough to correct, but for Koutarou who had already reached his limits, he was past the point of no return. His body shut down and he simply fell forward with a satisfied smile on his face</p>

      <p>“I... I did it! Yeaaah!”</p>

      <p>“You didn’t! Would you listen to meeeee?!”</p>

      <p>“Heh heh heh, you don’t have to praise me that much, Sanae...”</p>

      <p>“I’m not!”</p>

      <p>But Sanae’s screams were in vain as Koutarou closed his eyes. He was already out cold.</p>

      <p>“Zzzz...”</p>

      <p>Once he passed out, Koutarou appeared to be sleeping peacefully. Even asleep, he had the contended, triumphant grin of a man who had accomplished what he had set out to do.</p>

      <p>“How can you fall asleep with such a self-satisfied smile on your stupid face?! What are you going to do about my points?!”</p>

      <p>However, to Sanae, his peacefully sleeping face was truly an unpleasant sight.<br/><br/></p>

      <p>When Koutarou, who had dominated first place, collapsed, the schoolyard fell into a big stir.</p>

      <p>The commentator narrated, “Oh no! What a turn of events! The knitting society’s representative, Satomi Koutarou, went down just before the tenth obstacle! A nearby committee member is shaking his head! It seems like he’s completely passed out!”</p>

      <p>But before the female commentator could quite finish, the tension in the crowd rose once again as the second place and third place participants appeared.</p>

      <p>“There you are, Sanae! Koutarou is... Aha! After coming this far, he ran out of steam! Lucky for you as my vassal, when I win, you will be rewarded as well!”</p>

      <p>“This means that it’s just between you and me now...”</p>

      <p>Entering the schoolyard were Theia and Kiriha. There must have been quite a large gap between them and the rest of the participants as no one else could be seen behind them. As the two girls approached, cheers rallied from the bleachers.</p>

      <p>“Kurano-san! You can do it!”</p>

      <p>“Kiriha-chan! Win this and secure the funds for the culture festival!”</p>

      <p>“Hail to the princess! Hail to the princess! Victory for Her Highness Theiamillis! Glory to the royal families of Forthorthe!”</p>

      <p>But just like Koutarou, they were so exhausted that they were unable to respond to the cheers for them. They were covered in white powder and their clothes were scorched. Both of them had fallen off the balance beams.</p>

      <p>After that they had skirmished against one another and gradually lost their stamina. By the time they entered the schoolyard, they were barely able to move. A drop of sweat would slip down the white powder every time they took a shaky step.</p>

      <p>“It was quite the dramatic race, but it seems that you and I need to settle this.”</p>

      <p>“That was my intention from the start. Let’s settle this, Theia-dono.”</p>

      <p>Despite that, they both forced themselves forward as they ran down the track. How much control they had over room 106 depended on this obstacle race. There was no way they would simply back down. As the two got closer to Koutarou, they called out to Sanae next to him.</p>

      <p>“Sanae, is Koutarou all right?”</p>

      <p>“Yeah, he’s just sleeping.”</p>

      <p>“I see. That’s good.”</p>

      <p>“Heh heh, it seems you chose the wrong partner, Sanae!”</p>

      <p>“Shut up! Leave me alone!”</p>

      <p>“I think I’ll do just that! Fuahahahahaha!”</p>

      <p>They ran past Koutarou and reached the tenth obstacle positioned at the end of the track.</p>

      <p>“Welcome back, ladies! And welcome to the last stop—the tenth obstacle!”</p>

      <p>Welcoming Theia and Kiriha in sing-song fashion was none other than the cosplay society. The five members who weren’t participating in the race were serving as the staff for the final obstacle. Because of this, they were wearing maid outfits armbands that had ‘staff’ written on them.</p>

      <p>“I have no time to play! What do I need to do here?”</p>

      <p>“There’s no need to rush”</p>

      <p>The vice president, who was in charge of the obstacle, approached the girls carrying a box colorfully decorated with ribbons and flowers.</p>

      <p>“What’s with this box?”</p>

      <p>“I’m glad you asked. For the tenth obstacle, we’ll have you participate in a scavenger hunt. Draw a card from this box and find the thing written down on it. Once you have it, head for the goal.”</p>

      <p>“Got it!”</p>

      <p>“Then I’ll do the same.”</p>

      <p>Theia quickly thrust her hand into the hole at the top of the box, with Kiriha following right after her. They each pulled out a white piece of paper that had been folded twice over.</p>

      <p>“Well then, you two, please read your notes!”</p>

      <p>Following the vice president’s lead, they each took a look at the paper in their hands.</p>

      <p>“Th-This is...?!”</p>

      <p>“You’re telling me to bring this to the goal?!”</p>

      <p>Both girls were left astonished, but noticing one another’s surprise, they peeked at the other’s notes.</p>

      <p>“Hehehehehehe!”</p>

      <p>“Hahahahahaha!”</p>

      <p>They both laughed at was written on the other’s piece of paper. Despite their laughter, however, they were glaring at one another. They clenched their fists as they squared off. It looked like they were about to start a fight.</p>

      <p>“I thought it would come to this. The path to invasion is a bloody one...”</p>

      <p>Kiriha’s note read: “An A-cup or smaller bra.”</p>

      <p>“Hah! Bring it on, Kurano Kiriha!”</p>

      <p>And Theia’s note read: “A D-cup or bigger bra.”</p>

      <p>Kiriha was sad and Theia was excited. Though they felt the complete opposite about it, they were about to do the same thing. What they each needed was right in front of them. They were both planning on beating the other down and taking what they needed by force.<br/><br/></p>

      <p>Once they started running again, Harumi and Yurika began moving up in the rankings. That was in part due to the majority of the leading group retiring at the eighth obstacle, but they were also running much quicker than before.</p>

      <p>“I wonder what happened to me... Not only do I feel much better, but I feel faster than before I collapsed...”</p>

      <p>“You don’t need to worry about that at all, Sakuraba-senpai. It would be a different story if you weren’t feeling very good, but you’re fine now after all!”</p>

      <p>Although Yurika dismissed it, Harumi was right. They were both inexplicably moving at a faster pace than before. It was as if they had actually become trained marathon runners. No matter how quickly they ran, neither one felt out of breath or slightest bit of exhaustion. Anyone would have found it odd, especially Harumi.</p>

      <p>“But I really am curious...”</p>

      <p>“Then just think of it as a spell I cast. I’m not wearing this outfit just for show, you know!”</p>

      <p>“Nijino-san... Heehee, okay. I think I’ll do that. That would be more dreamlike wouldn’t, it?”</p>

      <p>Thanks to Yurika’s cheerful words, a smile returned to Harumi’s lips. Even though she knew there was no such thing as magic, it would be more fun to think there was. That was how Harumi began to think of it.</p>

      <p>“That’s right! I’m the magic girl of love and courage! Of hopes and dreams!”</p>

      <p><em>I’m glad. Sakuraba-senpai’s gotten a lot more energetic...</em></p>

      <p>Seeing Harumi so animated in both mind and body, Yurika couldn’t help but feel happy. Harumi was now convinced that Yurika was a cosplayer, but Yurika had no intention of correcting her despite her daily struggle to do so with everyone else.</p>

      <p><em>This wasn’t magic. This was good luck brought about by Sakuraba-senpai’s hard work...</em></p>

      <p>In reality, it <em>was</em> the white magic that Yurika had used. But if she convinced Harumi of that, it would feel like denying all of her hard work to get here. That was why Yurika insisted that it was a stroke of luck in Harumi’s favor.</p>

      <p><em>If it’s for her, I’m fine with being called a cosplayer. I just want Sakuraba-senpai to believe in herself.</em></p>

      <p>Yurika had hated the obstacle marathon just a few minutes ago, but now she really was enjoying it. She wasn’t even quite sure herself why that was.</p>

      <p>“L-Look, Nijino-san! We can see the school gate from here!”</p>

      <p>“You’re right! We’re almost there!”</p>

      <p>The two girls could see the Kisshouharukaze High School gates from the road now. Their long-sought goal was just ahead of them.<br/><br/></p>

      <p>“Gwahh?!”</p>

      <p>“Gwhah!”</p>

      <p>As Harumi and Yurika ran through the school gates, Theia and Kiriha’s fists connected with each other’s faces.</p>

      <p>“Did that settle it?! As Kurano went for a right jab, Theia went for a cross-counter! But Kurano saw through it and readjusted her aim! It looks like they both landed a heavy blow and have taken each other out!”</p>

      <p>It was true. They’d both taken the full power of a punch to the face, leaving their heads turned in very odd directions. It seemed as though they were frozen like that.</p>

      <p>“Let’s hear a breakdown from the boxing club advisor, Tange-sensei! Sensei, what do you think?”</p>

      <p>“So, so close! If Theia just had a little bit more reach, it would’ve ended up just like she had planned! This was not her fault! If only she had a little bit more reach!”</p>

      <p>The excited voices of the commentators echoed through the schoolyard. Meanwhile, Theia and Kiriha remained motionless, but they eventually ran out of power and both collapsed at the same time.</p>

      <p>“It’s a double KO!”</p>

      <p>“Well done, Theia! The match may have been a draw, but you were the real boxing champion here!”</p>

      <p>The crowd in bleachers stood up. Their cheers of joy and applause flooded the schoolyard. However, neither Theia nor Kiriha heard any of it. They had indeed knocked each other out.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert10">
    <img alt="insert10" class="insert" src="../Images/Insert10.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter44">
    <div class="main">
      <p>“B-Boxing...?”</p>

      <p>“Is the tenth obstacle a fist fight?!”</p>

      <p>Harumi and Yurika anxiously ran past Theia and Kiriha who were collapsed on the track. They both disliked fighting, so the prospect of tenth obstacle like that truly troubled them.</p>

      <p>“S-Satomi-kun? Even Satomi-kun was...!”</p>

      <p>“Wh-Who did this to him?! I don’t want a fist fight!”</p>

      <p>Koutarou was on the ground not too far from Theia and Kiriha. Seeing that, Harumi and Yurika got even more anxious.</p>

      <p>“It’s not really that hard of an obstacle,” Sanae, still floating over Koutarou, scoffed.</p>

      <p>“...R-Really?” Yurika let out a small sigh of relief.</p>

      <p>“Koutarou collapsed because he was tired. And those two were just fighting each other because they had the chance.”</p>

      <p>“I see. Th-Thank god...”</p>

      <p>Normally Yurika would be terrified of Sanae, but right now she was surprised by too much else to let it get to her. She flashed Sanae a big, relieved grin. However, Sanae herself was still in a foul mood. She was angry at Koutarou, who still hadn’t woke up.</p>

      <p>“Nijino-san, are you talking to someone?”</p>

      <p>“N-Not at all! I’m just talking to myself!”</p>

      <p>Harumi couldn’t see Sanae, much less hear her. Seeing Yurika talk to Sanae while wearing the outfit she was in did look a bit... strange. Even to Harumi.</p>

      <p>“I see. That’s good...”</p>

      <p>Harumi was honestly relieved. Cosplaying was one thing, but talking to someone who wasn’t there was a little scary. Surely just talking to herself was fine though.</p>

      <p>“Welcome back, ladies!”</p>

      <p>Shortly thereafter, Harumi and Yurika arrived at the tenth obstacle. Greeting them was of course the cosplay society.</p>

      <p>“Vice president!”</p>

      <p>“You’re finally here, Yurika-chan!”</p>

      <p>“Um, what is the tenth obstacle?”</p>

      <p>“It’s a scavenger hunt! Hurry up you two and draw your items from this box! There are some people ahead of you, but if you hurry, you can still make it!”</p>

      <p>The vice president quickly explained the situation and presented the box to them. The cosplay society members obviously wanted Yurika to win, so they all cheered her on.</p>

      <p>Currently, Yurika and Harumi were in seventh and eighth place. Although technically with Koutarou, Theia, and Kiriha all passed out, they were actually fourth and fifth. That meant there were only three people ahead of them. They had already dashed into the crowd to find what they needed for the scavenger hunt, so Harumi and Yurika did still stand a chance if they hurried.</p>

      <p>“Let’s do this, Sakuraba-senpai!”</p>

      <p>“All right!”</p>

      <p>They put their hands in the box and drew their cards together. Unlike Theia and Kiriha, they did so calmly. Yurika and Harumi were bonding through friendship, not bloodlust.</p>

      <p>“Ah...”</p>

      <p>“Auugh...”</p>

      <p>As they opened their notes, Harumi’s expression lit up while Yurika’s turned gloomy.</p>

      <p>“I got this. What did you get, Nijino-san?”</p>

      <p>“I got this...”</p>

      <p>They revealed their cards to each other. Harumi’s read: “A junior in your club.” Yurika’s read: “A friend.”</p>

      <p>“All right! Let’s go, Nijino-san!”</p>

      <p>“Auugh... Go on ahead, Sakuraba-senpai. I have to retire here.”</p>

      <p>Yurika’s shoulders slumped as she looked down despondently. Her eyes were dim and she let out a heavy sigh.</p>

      <p>“Why?”</p>

      <p>“I don’t have any friends.”</p>

      <p>Harumi only needed a junior in her club, so she just had to bring Koutarou with her. But Yurika needed a friend. Being new in town, that was a tall order for her.</p>

      <p>“So just go on ahead without me.”</p>

      <p>“It’ll be okay, Yurika-san.” However, Harumi gave her a gentle smile. “Your friend is right here.”</p>

      <p>“Huh...?”</p>

      <p>Harumi held her hands in front of her chest and lightly tilted her head.</p>

      <p>“Or am I not sufficient?”</p>

      <p>“N-No, it’s not that at all! I-It’s an honor, Sakuraba-senpai!”</p>

      <p>Yurika’s mood instantly changed. Tears welled in her eyes, a sign of the joy she felt.</p>

      <p>“But in exchange, I would like you to ask you for a favor.”</p>

      <p>“A favor?”</p>

      <p>Yurika stared blankly at Harumi and blinked a few times. Seeing that, Harumi happily winked at her and put on a special smile she rarely showed anyone.</p>

      <p>“Could you help me carry Satomi-kun?”</p>

      <p>“Ah... O-Of course! For as long as you like!”</p>

      <p>“Thank you, Nijino-san,”</p>

      <p>“No, I should be the one thanking you.”</p>

      <p>The two of them laughed together and ran over to Koutarou, who laid collapsed by the tenth obstacle.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter5">
    <div class="main">
      <h1>Winners, Losers, and Overtime</h1>

      <h2>Sunday, May 10th</h2>

      <p>“H-Huh...?”</p>

      <p>Koutarou woke up as the victory ceremony for the obstacle marathon was beginning. Some time had passed since he’d passed out, and the scenery was now dyed orange by the evening sun.</p>

      <p>“You’re finally awake...”</p>

      <p>As Koutarou fully opened his eyes, he saw a pouting Sanae. She was in a bad mood after waiting for him to wake up for so long.</p>

      <p>“Sanae... Huh? Wait, what happened to the obstacle marathon?! Where am I?!”</p>

      <p>Koutarou jumped up and looked around. He was in the emergency medical tent next to the sports festivals headquarters. Despite its name, it wasn’t outfitted like a hospital and its “medical” value was pretty limited. It was just a standard outdoor tent with a blue vinyl sheet laid out so people could rest. Apart from Koutarou, there were two others lying in the tent: Theia and Kiriha. The staff had left the three of them there on their own when they were called to the eighth obstacle.</p>

      <p>“It was over a long time ago. You passed out and retired just before the tenth obstacle.”</p>

      <p>“Th-Then who won?! Was it Theia?! Or Kiriha-san?! Who was it?!”</p>

      <p>Koutarou pointed at the two unconscious girls as he demanded to know the results of the competition. He wasn’t asking for the results of the obstacle marathon so much as he was the rankings for the residents of room 106.</p>

      <p>“Neither. It was us and Yurika.”</p>

      <p>“What...?”</p>

      <p>Sanae’s answer left Koutarou dumbfounded. It was an outcome he never could’ve imagined.</p>

      <p><em>Me, Sanae, and Yurika won...?! But how?! I dropped out of the race!</em></p>

      <p>“Wh-What does this mean? How did it come to me and Yurika winning?”</p>

      <p>Unable to comprehend the situation, Koutarou shook Sanae’s shoulders.</p>

      <p>“C-C-Calm down!”</p>

      <p>“How could I possibly calm down?!”</p>

      <p>Koutarou kept shaking Sanae. Having given up on running away, Sanae tried her best to answer him.</p>

      <p>“Th-Theia and Kiriha knocked each other out in a fist fight. Though they got a special award from the judges, th-they were unconscious and counted as out of the race. After that, Harumi and Yurika tied. So you, me, and Yurika will end up taking points from Theia and Kiriha.”</p>

      <p>“W-Wait a minute, Sanae! You’re saying that Sakuraba-senpai and Yurika won?!”</p>

      <p>Koutarou was so surprised that he stopped shaking Sanae for a moment, but he soon started shaking her at twice the speed. He simply couldn’t believe that Harumi and Yurika had won.</p>

      <p>“Heee-eeey, K-Koooutaaaroouuu, stoooop...!”</p>

      <p>“What do you mean?! Explain yourself right now!”</p>

      <p>“If you want to me explain then stop shaking me, you idiot!”</p>

      <p>A first aid kit fell on Koutarou. It was Sanae’s Poltergeist powers at work.</p>

      <p>“O-Oooooww!”</p>

      <p>The corner of the first aid kit hit him square in the head. Because of the impact, he let go of Sanae to hold on to his head.</p>

      <p>“Phew, jeez...”</p>

      <p>“D-Don’t be so reckless...”</p>

      <p>“You’re the one being reckless! Seriously...”</p>

      <p>Finally free from Koutarou, Sanae floated up into the air, put both of her hands on her hips, and puffed up her cheeks indignantly. Only then did she take it upon herself to explain everything.</p>

      <p>“Well, everyone was slowed down by the minefield, right? And most of the leaders had to retire.”</p>

      <p>“Yeah.”</p>

      <p>“During that time, Harumi and Yurika caught up and won the race.”</p>

      <p>Thanks to the minefield at the eighth obstacle, the pace of the majority of the competitors slowed down to a crawl. Lots of participants tried to rush through it, but the most of them failed and had to drop out.</p>

      <p>But by the time Harumi and Yurika got there, most of the mines had already been detonated and they were able to cross without any problems. As a result, the minefield ended up helping them out quite a bit.</p>

      <p>“B-But even then, those two making that kind of comeback is just...”</p>

      <p>“Instead of doubting me, why don’t you just watch the victory ceremony?”</p>

      <p>Sanae pointed out of the tent, but Koutarou was still in disbelief. Beyond the exit was a podium surrounded by a crowd. In order to get a better look, he jumped out of the tent.</p>

      <p>“Oh...”</p>

      <p>On top of the podium were Harumi and Yurika, just as Sanae had said.</p>

      <p>“And the winners are the knitting society and cosplay society, despite both being liberal arts interest societies! Congratulations! Well done!”</p>

      <p>The principal’s excited voice boomed through the speakers. Harumi and Yurika blushed as they were being praised by the people around them. As they were both rather introverted, they were unused to this kind of thing. But as the principal handed them the trophy, they both smiled at each other.</p>

      <p>“Th-They really won...”</p>

      <p>“See? I told you so.”</p>

      <p>“I can’t believe it...”</p>

      <p>“Yeah, you and everyone else.”</p>

      <p>Sanae shrugged. It didn’t matter how little Koutarou believed the principal congratulating the two girls on top of the podium. It didn’t make the least bit of difference whether he actually believed it or not. Those two girls really won.</p>

      <p>“...Oh well, in the end it all worked out.”</p>

      <p>“You could say that.”</p>

      <p>Harumi was on the podium and Koutarou had won against the invaders. It was the perfect outcome for him.</p>

      <p><em>I wonder if god noticed how hard she was working for it... Isn’t that great, Senpai?</em></p>

      <p>Thinking of it like that made the results a little easier to accept. Koutarou stared at the two standing on top of the podium with a smile. They were proudly holding on to the trophy and smiling themselves.</p>

      <p>“...I-It didn’t all work out...”</p>

      <p>“Landlord-san?!”</p>

      <p>That was when Shizuka suddenly appeared in front of Koutarou, blocking his view of the podium. Her whole body was covered in black powder and her hairstyle now looked like an afro.</p>

      <p>“Where’s the idiot who planted mines at the eighth obstacle?!”</p>

      <p>The reason she looked like that was of course because she had been caught up in several of the explosions at the eighth obstacle. Even though the mines didn’t actually harm anyone, getting caught in the blasts had left her sooty and singed. She looked like she’d just barely escaped a fire. It was so bad that Koutarou couldn’t tell it was Shizuka until he heard her voice.</p>

      <p>“Satomi-kun! Nothing good will come from hiding it from me!”</p>

      <p>Shizuka was worse for wear, but her eyes were burning with rage. Her anger was fierce, and she approached Koutarou menacingly, breathing heavily with each step.</p>

      <p>“O-Over there! She’s sleeping in the emergency medical tent!”</p>

      <p>Overwhelmed by Shizuka’s looming aura, Koutarou told her where Theia was. He didn’t have any intention of hiding the truth from Shizuka, and he wasn’t confident he could hide it from her even if he wanted to.</p>

      <p>“So she’s over there?!”</p>

      <p>Shizuka cracked her knuckles.</p>

      <p><em>She’s dead. Theia is so dead...</em></p>

      <p>Koutarou could hear Theia’s lifespan shorten with every knuckle Shizuka cracked. Shizuka left the frightened Koutarou behind and approached the tent with slow, heavy footsteps.</p>

      <p>“Forgive me, Tulip.”</p>

      <p>Even though he knew Theia was in danger, Koutarou found himself unable to move. That was just how scary Shizuka was. Besides, he was still angry at her too.</p>

      <p>“No, I won’t forgive you.”</p>

      <p>As Koutarou was apologizing, someone else appeared in front of him.</p>

      <p>“Mackenzie?”</p>

      <p>“And it’s not just me.”</p>

      <p>Kenji stood before Koutarou, followed by three large guys. He wasn’t in much better shape than Shizuka. His face and pure white tuxedo were now pitch black. His hair was a mess too.</p>

      <p>“Hey, first-year brat!”</p>

      <p>“I’ve been dying to meet you...”</p>

      <p>“Gottsan desu!”</p>

      <p>It was none other than the upperclassmen from the rugby, judo, and sumo clubs. Like Shizuka and Kenji, they too were pitch black and could only be told apart by their distinct uniforms. If they had been wearing gym clothes like everyone else, they would have been indiscernible from each other.</p>

      <p>“Well, you see, Kou. These upperclassmen wanted to talk to you.”</p>

      <p>Kenji grinned as he cleaned his glasses with a handkerchief. They were about as dark as the smile on his face.</p>

      <p>“Uhhhhh... Wh-What can I help you with, Senpais?”</p>

      <p><em>They couldn’t have...</em></p>

      <p>A cold shiver ran down Koutarou’s back. Kenji appearing with these guys could only mean one thing.</p>

      <p>“We wanted to thank you for what you did back at the start.”</p>

      <p>“Since we’ve already thanked Glasses-kun who had nothing to do with it, it’d be unfair if we didn’t thank you too, right?”</p>

      <p>“Gottsan desu!”</p>

      <p>“I... I knew it!”</p>

      <p>Koutarou panicked.</p>

      <p><em>To think Mackenzie would reconcile with these people to work together...</em></p>

      <p>The reason Kenji and the three upperclassmen had been able to come to an understanding was because of the minefield. In order to escape, they had no choice but to work together, so the four of them developed a sense of solidarity.</p>

      <p>“S-Save me, pleb! Use everything in your might to protect me!”</p>

      <p>“Tulip?!”</p>

      <p>At that moment, Theia, on the verge of crying, jumped at Koutarou. He was startled, but was somehow able to catch her small body. The frightened Theia escaped from Koutarou’s arms and swiftly hid behind him.</p>

      <p>“Sh-She’s coming! Shizuka is coming! Fight her, Koutarou! My life is in danger!”</p>

      <p>“What?!”</p>

      <p>Koutarou turned to look at the tent just as Shizuka was coming out from it. Her eyes were still burning with anger, and she approached Koutarou and Theia, one slow step at a time.</p>

      <p>“I see... Satomi-kun, in the end you’re covering for that girl...”</p>

      <p>“Wh-What’s with this pressure?!”</p>

      <p>Shizuka’s eyes narrowed. Throwing daggers was an understatement. Theia had hidden behind Koutarou by her own accord, but Shizuka now considered Koutarou an enemy.</p>

      <p>“Go on and fight, pleb! I’ll turn you into nobility! So die for my sake!”</p>

      <p>“I refuse! Don’t involve me in this!”</p>

      <p>“No! I don’t want to suffer alone! It’s only natural for a vassal to live and die with his master!”</p>

      <p>“I’m not your vassal!”</p>

      <p>“At this point it doesn’t matter if you are or not! Let’s suffer together!”</p>

      <p>“C-Curse you, Tulip!”</p>

      <p>“Ohohoho...”</p>

      <p>Koutarou and Theia were desperate. They knew just how scary Shizuka really was when she was angry. They had a better chance of winning a fist fight against a tank. Because of that, Koutarou didn’t want to get involved no matter what, but Theia didn’t want to go down alone.</p>

      <p>“...As you can tell, this is what he’s like, Senpais.”</p>

      <p>“I see. I get it, Glasses-kun. Let me apologize for misunderstanding you.”</p>

      <p>“Curse you! Why are you pretending like you aren’t popular after all? That hurts our pride more than anything!”</p>

      <p>“Gottsan desu!”</p>

      <p>Staring at Koutarou and Theia arguing, the three upperclassmen rekindled their solidarity and their eyes gleamed as they got ready to fight. They too acknowledged that Koutarou and Theia were enemies. Like Shizuka, they approached, one purposeful step at a time.</p>

      <p>“We’ve been unfair to you, Glasses-kun. We’ll let you get even later, but right now we’re going to punish the insolent brat right in front of us!”</p>

      <p>“I’ll help you.”</p>

      <p>“Well said, Glasses-brat! To think there was someone like you among the good looking people...”</p>

      <p>“Right now we’re all pitch black. Good looks don’t matter.”</p>

      <p>“Gottsan desu!”</p>

      <p>“Well said, Glasses-brat! I like you after all!”</p>

      <p>“Prepare yourselves, Satomi-kun, Theia-san! We’ll have you pay for all the trouble you’ve caused!”</p>

      <p>Kenji, Shizuka, and the three large upperclassmen circled around Koutarou and Theia. They were beyond the point of pleading or negotiation.</p>

      <p><em>So this is it... Looks like I have no choice!</em></p>

      <p>As the five of them closed in, Koutarou finally made up his mind.</p>

      <p>“We’re running, Tulip!”</p>

      <p>“Y-Yeah!”</p>

      <p>Koutarou pulled on Theia’s hand and took off.</p>

      <p>“Kou! Wait right there!”</p>

      <p>“After them! Don’t let them get away again!”</p>

      <p>“Gottsan desu!”</p>

      <p>“Mackenzie-kun, cut off their escape path!”</p>

      <p>Of course, the others were hot on their heels.</p>

      <p>“Pleb, become my decoy! In return I’ll make sure not to step on you starting tomorrow!”</p>

      <p>“No way! I don’t care if you step on me, so you be the decoy!”</p>

      <p>With the two of them running and the other five chasing right after, the obstacle marathon entered overtime.</p>

      <p>“What idiots...”</p>

      <p>“Don’t say that. It was Theia-dono’s way of trying to be considerate.”</p>

      <p>Sanae and Kiriha stood by the medical tent, watching Koutarou and the rest still running.</p>

      <p>“Trying to be considerate? That’s a lie.”</p>

      <p>“No one was injured or killed, right?”</p>

      <p>“That’s true, but... it was obvious Shizuka would get angry if she did something like that. How could she not get that?”</p>

      <p>“That princess hates losing. She did it despite knowing what would happen.”</p>

      <p>The mines Theia had used were essentially flashbangs meant to disorient, so injuries rarely happened. A light burn or an afro was the worst that could happen. On top of that, Yurika had used her healing magic as she passed by the eighth obstacle, reducing the injuries even more. Of course, nobody noticed Yurika helping.</p>

      <p>“She should have just been more clever about it, like you.”</p>

      <p>“What on earth do you mean?”</p>

      <p>“Don’t play dumb. I already know. Everyone falling at the start was your doing, right?”</p>

      <p>“Why, I have no idea what you’re talking about...”</p>

      <p>Based on what had happened, Sanae felt like Kiriha keeping a good lead for most of the race was the most suspicious thing of all. However, Kiriha warded off those doubts with a smile. If Kiriha was the culprit, she wouldn’t leave any evidence behind.</p>

      <p>“...As I thought, you really are the most troublesome one.”</p>

      <p>“How rude. I only want to become Koutarou’s lover. We’ll be able to create a happy family together.”</p>

      <p>“You barefaced liar, that’s not what you’re thinking at all... Jeez, what’s with everyone today?”</p>

      <p>Koutarou and Theia were being chased around, Kiriha was looking on with a smile, and Yurika and Harumi were still on top of the podium. So many strange things happened today that the ghost, Sanae, looked the most normal one there.</p>

      <p>“Heehee, that really hurts.”</p>

      <p>“I wish you could understand why I’m concerned as the rational person here. I swear...”</p>

      <p>As Sanae complained, Koutarou and Theia ran past in front of her.</p>

      <p>“H-Hey, pleb! I actually still have one more mine!”</p>

      <p>“Stop it, Tulip! If you use that, you’ll definitely be killed!”</p>

      <p>“It’s better than being caught right now!”</p>

      <p>“Stooooop! Use your head!”</p>

      <p><em>Why is Koutarou hogging all the fun?</em></p>

      <p>Sanae was going on about being the responsible one, yet she was also unhappy about being left out. <br/><br/></p>

      <p>But even as Sanae was pouting about being left out, there were those who had a keen eye on her.</p>

      <p>“Take a look at that! I can’t believe it! I’ve never seen a ghost this dense and stable before!”</p>

      <p>“Do you’ll think she’ll fetch a high price if we catch her?!”</p>

      <p>They were two figures in the corner of the schoolyard, pointing a strange device that looked like a speed gun at Sanae. They seemed to be taking some kind of readings, but they were jumping for joy at the results.</p>

      <p>“Yeah, we’ll be billionaires! We can kiss being poor goodbye!”</p>

      <p>“We did it, Aniki!”</p>

      <p>They had been following Sanae around ever since they’d learned of her existence a few days ago. In other words, the glances Koutarou had felt the past few days wasn’t someone watching him, but someone watching Sanae.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert11">
    <img alt="insert11" class="insert" src="../Images/Insert11.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="afterword">
    <div class="main">
      <h1>Afterword</h1>

      <p>Long time no see. It’s the author, Takehaya.</p>

      <p>It’s been four months since the first volume, and I’ve finally finished the second one. This is all thanks to the readers who bought the first volume, so I would like to start off by thanking you all.</p>

      <p>Now let’s talk about the book. The invaders aren’t satisfied with just room 106, and they’ve now begun their invasion of Koutarou’s oasis—Kisshouharukaze High School. Will their conquest end up involving the whole school? That’s the kind of story this volume has.</p>

      <p>Something else we get to see this volume is that Mackenzie-kun has finally gotten his design. With that, he also has more of a part to play in this one than the first volume.</p>

      <p>Actually, as I was writing this afterword I got a call from my friend who just got married. He said his child will be born in September. This left me a bit mortified, so I decided to write it down here.</p>

      <p>You bastard! Who do you think you are, finding happiness? You’re making me envious, you bastard. You called to tell me because you know I’m a bachelor, didn’t you, you bastard? You better show me pictures of your baby, you bastard...</p>

      <p>But seriously, congratulations!</p>

      <p>Anyways, I’m just about out of space for the afterword, so I’ll leave it at this. Finally, I would like to thank everyone at the editorial department; my illustrator, Poco-san; my friends who give me advice; and everyone who bought this novel.</p>

      <p>Let us meet again.</p>

      <p>Hopefully in the afterword of the third volume.</p>

      <p class="signature">June, 2009</p>

      <p class="signature">Takehaya</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="notes">
    <div class="main">
      <h1>Notes</h1>

      <ol>
        <li id="note1">Gottsan desu - “Thank you very much” in traditional Sumo lingo. <a href="../Text/chapter1.xhtml#note">→</a></li>
      </ol>
    </div>
  </section>
</body>
</html>