<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="default-style"/>
  <title>Invaders of the Rokujouma!? Volume 1</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css"/>
  <meta content="urn:uuid:5363d469-4dba-4e5b-9bdb-c3f1717eb6b1" name="Adept.expected.resource"/>
</head>

<body class="nomargin center">
  <section epub:type="bodymatter chapter" id="chapter1title">
    <img alt="chapter1title" class="insert" src="../Images/ChapterTitle1.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter1">
    <div class="main">
      <h1>Setting Up Camp</h1>

      <h2>Saturday, April 4th</h2>

      <p>Just 5,000 yen.</p>

      <p>That was the monthly rent for Corona House room 106.</p>

      <p id="note1">Corona House was a wooden, two story apartment building built twenty-five years ago. Being all the way on the outskirts of the city meant the rent would be cheap to begin with, but even then, 5,000 yen a month for a six tatami<sup><a href="../Text/chapter1title.xhtml#note1">1</a></sup> mat room with a kitchen, bathroom and toilet was exceptionally low. In fact, the rent for the other rooms at Corona House was at least ten times higher. On top of that, room 106 was completely deposit free.</p>

      <p>However, there was a reason for its extreme cheapness. Every single person who had moved in had, without exception, moved out just as quickly. The record was just three hours, but even the longest tenant had only stayed three months. About three days was the average. As a result, the going rent continued to get slashed, and the 10,000 yen rent had already been cut in half before spring.</p>

      <p>“Don’t treat that box carelessly, Mackenzie. Its contents are more valuable than your life.”</p>

      <p>“That’s rich coming from you, Kou. Compared to you, I’m always careful.”</p>

      <p>“As long as you understand. Now keep up the hard work, Mackenzie-kun.”</p>

      <p>“Yeah, yeah. Who’s helping who move again? Jeez.”</p>

      <p>Today—Saturday, April 4th—a new tenant was moving in to that super cheap residence. His name was Satomi Koutarou, but his childhood friend, Matsudaira Kenji, called him Kou. In return, Koutarou called him Mackenzie. The two fifteen year old boys would both officially be high school students as of the school’s opening ceremony on Monday.<br/><br/></p>

      <p>Because of his father’s sudden job transfer, Koutarou would be living alone starting this spring. Having grown up with just his father, Koutarou didn’t want to burden him now. When the real estate agent introduced Koutarou to Corona House’s room 106, he’d jumped on the offer before even hearing the reason why the rent was so low.</p>

      <p>“Anyways, Kou, it’s a good thing you managed to find such a great place with this kind of timing, huh?”</p>

      <p>“I was lucky. When my old man told me about his transfer the other day, I seriously panicked.”</p>

      <p>His father’s relocation was decided in late February, just as Koutarou had finished his high school entrance exams and was waiting for the results.</p>

      <p>“That said, there wasn’t anything we could do about it. I mean, his coworker that was supposed to get the transfer got hurt and couldn’t do it anymore.”</p>

      <p>“Yeah, that’s true.”</p>

      <p>Originally, the transfer was intended for a colleague of Koutarou’s father. When he was seriously injured in an accident, however, Koutarou’s father ended up having to go instead.</p>

      <p>“I was surprised by the suddenness of it all, but I figured it was as good a chance as any for me to become independent. I’m a high school student now, after all.”</p>

      <p>“How positive of you.”</p>

      <p>“Yeah, so how about you celebrate the start of my journey into manhood?”</p>

      <p>“What are you going on about?”</p>

      <p>Koutarou and Kenji were working together to carry a suitcase full of clothes. They’d been carrying luggage back and forth between the apartment and the moving van for a while now.</p>

      <p>“Should I put the fridge next to the sink?” asked a middle-aged man in work clothes as he poked his head out of room 106. He was the driver of the moving van that had been helping out Koutarou and Kenji.</p>

      <p>“Yes, please!”</p>

      <p>“Got it.”</p>

      <p>Hearing Koutarou’s answer, the man went back inside, and Koutarou and Kenji soon followed suit.</p>

      <p>“So this place is really 5,000 yen a month? It’s just too good to be true...”</p>

      <p>The boys passed through the open doorway, and Kenji let out yet another sigh.</p>

      <p>“Jealous, aren’t you?”</p>

      <p>“If I had known it was just 5,000 yen, I would have rented it myself.”</p>

      <p>The room was of a somewhat older Japanese style. Entering through the front door, there was a boarded floor hallway leading into the inner, six tatami mat room. On the left side of the hall was the kitchen unit, and to the right was the bath and toilet. While it looked old-fashioned, the apartment was clean and well maintained.</p>

      <p>“Look out, Kou. The suitcase is about to hit the wall.”</p>

      <p>“I know, I know.”</p>

      <p>“I wonder sometimes... We’re coming through, mister.”</p>

      <p>“Oh, sorry about that, Glasses-kun.”</p>

      <p>Passing behind the man installing the kitchenette, Koutarou and Kenji headed to the inner room. They weaved past the boxes and furniture scattered about.</p>

      <p>“So what do we do with this suitcase?”</p>

      <p>“Hmm... Let’s put it in the wardrobe.”</p>

      <p>“Okay.”</p>

      <p>The boys worked together to cram the suitcase inside the wardrobe. As they finished, the mover entered the room.</p>

      <p>“That was the last of the luggage, wasn’t it?”</p>

      <p>“Yeah, that was all of it.”</p>

      <p>“Okay, then I’ll be taking my leave.”</p>

      <p>“Thank you very much.”</p>

      <p>Koutarou was raised to be respectful of his elders, so he naturally bowed to the man.</p>

      <p>“I’m the one that should be bowing. Thank you for your patronage.”</p>

      <p>The man flashed a gentle smile and deeply bowed in return. Leaving some papers behind, he exited the room.<br/><br/></p>

      <p>“All right, the first part’s over with,” said Kenji.</p>

      <p>“Mackenzie, catch.”</p>

      <p>Just as Kenji was adjusting his glasses, Koutarou threw a plastic bottle of tea to him.</p>

      <p>“Whoa, thanks.”</p>

      <p>Kenji caught the bottle without difficulty. Having known each other for a long time, he was used to this kind of surprise.</p>

      <p>“It’s lukewarm, but you’ll have to give me a break for that one. The fridge was only just installed,” Koutarou said as he reached into a plastic bag for his own bottle. He’d gotten the drinks a little while ago from the nearby convenience store.</p>

      <p>“I know.”</p>

      <p>The two boys opened their bottles at the same time and both took a sip.</p>

      <p>“Ahh... I feel alive again.”</p>

      <p>Koutarou sat down on a stack of cardboard boxes while drinking his tea, and Kenji leaned against the doorframe to the inner room. Kenji looked at the calendar hanging on the wall.</p>

      <p>“Time sure flies... The entrance ceremony is the day after tomorrow.”</p>

      <p>“That’s right. I have to unpack everything I need today.”</p>

      <p>Koutarou looked at the calendar with Kenji, then glanced at the clock he’d put up alongside it.</p>

      <p>“Hmm? Can’t you just do that tomorrow?”</p>

      <p>“I’ve got my part-time job tomorrow.”</p>

      <p>“You actually signed up for that shift? You could’ve at least taken off a couple of days to move.”</p>

      <p>Kenji’s eyes opened wide behind his glasses as he looked at Koutarou in surprise.</p>

      <p>“There are a lot of necessities in early spring. Don’t lump me in with someone living off their parents like you.”</p>

      <p>“Your old man left you some money for that, didn’t he?”</p>

      <p>“I’m trying my best not to go into it. That’s what living for yourself is all about.”</p>

      <p>“I don’t care what you’re calling it, but don’t come crying to me if you collapse.”</p>

      <p>“Unlike you intelligent types, I’m confident in my physical strength.”</p>

      <p>“Yeah, yeah. I’m sure you are.”</p>

      <p>Kenji shrugged at Koutarou, who was puffing out his chest proudly.</p>

      <p>“So, Kou, what time do you start tomorrow?”</p>

      <p>“In the morning like always.”</p>

      <p>“All right, then I’ll pick you up as usual.”</p>

      <p>“I’m counting on you.”</p>

      <p>The truth was that the two boys actually worked at the same place. After they had been accepted into high school, they applied for the job at the same time. As luck would have it, they were both hired on and began work last month.</p>

      <p>“...Hey, Kou, will you be able to wake up in time for school when it starts?”</p>

      <p>“Shouldn’t be a problem.”</p>

      <p>“That doesn’t sound very convincing when I have to get you up every weekend to go to work.”</p>

      <p>“Shut it.”</p>

      <p>Weekend shifts started early, so it had become a regular occurrence for Kenji to come wake up Koutarou.</p>

      <p>“Starting with living on my own, I’m going to join society as a functioning adult. I can’t act like a kid forever.”</p>

      <p>“So I don’t have to come pick you up tomorrow?”</p>

      <p>“Apples and oranges, Mackenzie-kun. You should still swing by in the morning.”</p>

      <p>“This is what I get...”</p>

      <p>Kenji’s shoulders slumped in amazement.</p>

      <p>“Thanks as always, grandpa.”</p>

      <p>“...I’ve suddenly lost all of my motivation.”</p>

      <p>“Don’t be like that. You’re young.”</p>

      <p>Their conversation was interrupted by the chime of the doorbell.</p>

      <p>“Hmm?”</p>

      <p>“A guest?”</p>

      <p>But before Koutarou could answer, the visitor opened the door and stepped inside.</p>

      <p>“Hello! Is Satomi-san here?” a girl’s voice asked from the doorway.</p>

      <p><em>That voice...</em></p>

      <p>Koutarou had heard that voice before.</p>

      <p>“It’s the landlord.”</p>

      <p>“Landlord?”</p>

      <p>“Ah, yes, coming!” Koutarou called out as he jumped off the cardboard boxes he was sitting on. Likewise, Kenji stood up from leaning on the doorframe.</p>

      <p>“Sounds pretty young,” Kenji said skeptically.</p>

      <p>“Come on, Mackenzie, you’re in for a surprise.”</p>

      <p>“All right...”</p>

      <p>The boys headed towards the front door together.<br/><br/></p>

      <p>“Hello, Landlord-san.”</p>

      <p>“Hello, Satomi-san.”</p>

      <p>Standing in the doorway was a girl about Koutarou and Kenji’s age, wearing an apron over her normal clothes. As she greeted the boys, she bowed gracefully. Her face retained a youthful charm, and her long hair was tied up with a large ribbon. By all appearances, she was a bright and healthy girl.</p>

      <p>“Huh? Landlord? This girl?”</p>

      <p>“Yeah. This is Corona House’s landlord. Surprised, aren’t you, Mackenzie?”</p>

      <p>“Y-Yeah...”</p>

      <p>Eyes wide open in surprise, Kenji nodded. The young girl in front of him didn’t exactly fit his mental image of landlord. He simply stared in astonishment.</p>

      <p>“I was surprised too.”</p>

      <p>“Everyone is at first. Teehee...” The girl smiled and turned to Kenji. “Nice to meet you. I’m the landlord of Corona House, Kasagi Shizuka.”</p>

      <p>“P-Pleased to meet you. I’m Matsudaira Kenji.”</p>

      <p>“I hope we’ll get along, Matsudaira-san.”</p>

      <p>“Yeah, likewise.”</p>

      <p>Kenji and Shizuka bowed to each other.</p>

      <p>“Landlord-san, this guy’s a childhood friend of mine.”</p>

      <p>“My, is that so?”</p>

      <p>“I’m sure you’ll see him around from time to time, so feel free to just call him Mackenzie.”</p>

      <p>Shizuka blinked a couple of times as she stared at Kenji.</p>

      <p>“You’re Japanese, aren’t you? With a name like Matsudaira...”</p>

      <p>“Oh, yeah, he’s definitely Japanese. Mackenzie is just an abbreviation of his full name, Matsudaira Kenji.”</p>

      <p>“Oh, I see. ‘Ma’ and ‘Kenji’ together becomes ‘Mackenzie.’”</p>

      <p>Satisfied, Shizuka put her hand over her mouth and giggled.</p>

      <p>“That’s just what Kou calls me.”</p>

      <p>“Then would you prefer it if I call you Matsudaira-san?”</p>

      <p>“Mackenzie is fine. I’m already used to it.”</p>

      <p>“All right then, Mackenzie-san.”</p>

      <p>Seeing Kenji shrug his shoulders, Shizuka giggled again, causing her ribbon and long ponytail to bounce.</p>

      <p>“Landlord-san is starting at Kisshouharukaze High School this year as well.”</p>

      <p>“Oh, what a coincidence.”</p>

      <p>“With a bit of luck, we could all end up in the same class.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert1">
    <img alt="insert1" class="insert" src="../Images/Insert1.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter11">
    <div class="main">
      <p>“Heehee, I hope we can be friends at school too,” Shizuka said, bowing politely again.</p>

      <p>“So, Landlord-san, did you need something?”</p>

      <p>“Oh, right, I almost forgot.” Shizuka clapped her hands together, then pointed to the window behind Koutarou and Kenji. “I actually happened to see the moving van leave a little while ago and figured it was about time to help.”</p>

      <p>“From the window?”</p>

      <p>“Yes, Mackenzie-san. I actually happen to live in the room above this one.”</p>

      <p>“Jealous yet? I’m sharing a roof with a cute landlord.”</p>

      <p>“Oh my...” Shizuka’s eyes opened wide for a moment before she smiled. “You flatter me, Satomi-san.”</p>

      <p>“Of course you’re sharing the same roof. This is an apartment building.”</p>

      <p>“It’s a matter of perspective.”</p>

      <p>“Teehee, the two of you sure get along well... Oh, that’s right, I came to lend a hand. With all the heavy lifting done, I should be able to help now.”</p>

      <p>“That would be great, Landlord-san. Kou’s good at breaking stuff and making a mess, but he’s bad at putting things together and cleaning up.”</p>

      <p>“Hey, Mackenzie! Don’t talk about me like that!”</p>

      <p>“It’s the truth, isn’t it? Do you have any idea how much trouble you cause me?” Kenji let out a heavy sigh as he pushed up his glasses.</p>

      <p>“Then you’re always the one stuck cleaning up, Mackenzie-san?”</p>

      <p>“Yes, I have a terrible time of it.”</p>

      <p>“But I’m grateful for it.”</p>

      <p>“...Not that I’d ever know. Oh, but there’s something I wanted to ask you, Landlord-san.”</p>

      <p>“Oh? What is it?” Still smiling, Shizuka nodded her head.</p>

      <p>“Why is the rent for this room only 5,000 yen?”</p>

      <p>“H-Hey, Mackenzie! Don’t just ask something like that all of a sudden!”</p>

      <p>Koutarou, who was already aware of the circumstances, began panicking.</p>

      <p>“But I want to know. With a great room like this and a reliable landlord, I don’t see anything wrong with the place.”</p>

      <p>“This apartment was left behind by her parents and—”</p>

      <p>“I don’t mind, Satomi-san.”</p>

      <p>Koutarou was worried about angering Shizuka, but she simply smiled calmly and shook her head.</p>

      <p>“Mackenzie-san’s right. Besides... Heehee, can’t you tell that he’s worried about you, Satomi-san?”</p>

      <p>“Landlord-san...”</p>

      <p>“It’s not like there’s anything I can do about it anyway.”</p>

      <p>“Y-Yeah...”</p>

      <p>Koutarou nodded apologetically as Shizuka turned back towards Kenji.</p>

      <p>“Actually, it appears in this room.”</p>

      <p>“Appear? What does?”</p>

      <p>“The rumors say it’s a ghost.”</p>

      <p>“A gh-ghost?!” Startled, Kenji hastily looked around the room in paranoia.</p>

      <p>“I’ve never seen it myself, but every tenant that’s moved in here has... Because of that, no one ever stays for long.”</p>

      <p>“A ghost, huh? I find that hard to believe...”</p>

      <p>“I did too. But every tenant has said the same thing when they moved out, so it must be the truth.” Shizuka smiled weakly and drooped her shoulders as she looked at the perplexed Kenji.</p>

      <p>“Leave it to me, Landlord-san. I’m not going to let some ghost scare me off.”</p>

      <p>“I’m counting on you. Please stay long enough to get rid of any rumors about ghosts.”</p>

      <p>“You bet!”</p>

      <p>“But to think there’s a ghost in here...” Still unconvinced, Kenji took another look around the room.</p>

      <p>“Nothing will come from thinking too hard about it, Mackenzie. Landlord-san’s here to help out, so let’s start unpacking.”</p>

      <p>“...Y-Yeah, let’s.” At Koutarou’s behest, Kenji vigorously shook his head to snap himself out of it. “I’m sure you’d be fine even if a ghost showed up, considering how thickheaded you are.”</p>

      <p>“That sounds awfully spiteful, Mackenzie.”</p>

      <p>“That was intentional.”</p>

      <p>“Figures... Well, let’s get started, Landlord-san.”</p>

      <p>“Sure thing, Satomi-san... But you two really do get along well.” Shizuka started laughing as she looked at Koutarou and Kenji.</p>

      <p>“You think so?”</p>

      <p>“Landlord-san, please don’t say such revolting things.”</p>

      <p>“Mackenzie, you really don’t have to put it like that, do you?”</p>

      <p>Koutarou and the others began milling about, unpacking the boxes one at a time. With Kenji and Shizuka’s help, room 106 was cleaned up enough to be perfectly livable before dinnertime.</p>

      <p>“I’m going home now, but don’t forget about work tomorrow. Keep the unpacking to a minimum and get to bed early, okay?”</p>

      <p>“I know, I know. I can’t afford to oversleep, right?”</p>

      <p>“You saying ‘I know’ like that is the least convincing thing ever.”</p>

      <p>Kenji sighed as he put on his shoes that had been tossed to the side of the front door.</p>

      <p>“Then I’ll take my leave now as well, Satomi-san.”</p>

      <p>“Landlord-san, you don’t have to call me Satomi-san. We’ll be classmates the day after tomorrow.”</p>

      <p>“Okay, then... Satomi-kun.”</p>

      <p>“That sounds better.”</p>

      <p>“Okay, Satomi-kun it is then.”</p>

      <p>Shizuka flashed a radiant smile as she put on her shoes that she’d left neatly arranged by the entrance. Kenji opened the front door for both of them.</p>

      <p>“Thanks a lot for today, Landlord-san,” Koutarou said, watching Shizuka and Kenji step outside.</p>

      <p>“Don’t even mention it. I was happy to help.”</p>

      <p>“What? No thanks for me?”</p>

      <p>“You’re more of a give and take kind of guy.”</p>

      <p>“That’s not how I see it...”</p>

      <p>“Well, goodbye for now, Satomi-kun.”</p>

      <p>“Goodbye, Landlord-san.”</p>

      <p>“Hurry up and get to sleep.”</p>

      <p>“I know, I know.”</p>

      <p>Kenji and Shizuka departed room 106 as the door shut behind them.<br/><br/></p>

      <p>Being left alone, Koutarou continued unpacking after he finished eating the bento he’d bought at the convenience store.</p>

      <p>“Hmm... What to do with this bat...? I can’t treat it like any old bat after all, and I can’t just leave it in the umbrella stand either...”</p>

      <p>Koutarou was holding a bat in his hand, trying to think of a place to put it. This was no ordinary bat, you see. It was one of Koutarou’s prized possessions: a bat used and signed by a legendary slugger known as “the god of batting.”</p>

      <p>“All right, I’ll get a stand for it. The corner will have to do for now.”</p>

      <p>Koutarou put the bat down and got to opening up another box.</p>

      <p>“What was in this one?”</p>

      <p>Peeling back the tape on the box, Koutarou peeked inside.</p>

      <p>“Ah, more memorabilia...”</p>

      <p>Trophies, certificates, commemorative plaques, and his beloved glove. They were all keepsakes from Koutarou’s middle school days.</p>

      <p>“Whoops. I put this in here too?”</p>

      <p>There was one thing in the box that didn’t fit in with the rest of his baseball treasures.</p>

      <p>“I better set this aside...”</p>

      <p>Koutarou held in his hands a half-knit sweater. He neatly wrapped some packing paper around it, and carefully tucked it inside the suitcase in the wardrobe.</p>

      <p>“And that’s that.”</p>

      <p>Koutarou clapped his hands together as he stepped away from the wardrobe. That was when the cellphone he had left charging in the corner of the room started ringing.</p>

      <p>“Hmm? My old man?”</p>

      <p>There was only one person with that ringtone among Koutarou’s contacts: Satomi Yuichirou.</p>

      <p>The name of his father flashed on the small screen. Koutarou picked up the phone, answered the call, and put it against his ear.</p>

      <p>“Hey, old man.”</p>

      <p>“Oh, there you are, Koutarou.”</p>

      <p>As expected, the voice coming from the other side was none other than Koutarou’s father, Yuichirou.</p>

      <p>“How is it going over there? Have you unpacked all your luggage?”</p>

      <p>“It’s going slowly but surely. Mackenzie and the landlord gave me a hand, so I can at least settle in.”</p>

      <p>“I see. Make sure you thank them properly.”</p>

      <p>“Of course. How is it going for you?”</p>

      <p>“I’m living in a dormitory for singles, you know. Even if I don’t lift a finger, I still get dinner and a hot bath. As long as I put my clothes out for cleaning, there’s nothing for me to worry about.”</p>

      <p>“That’s good to hear. You’re even more helpless than I am, so I was a little worried myself.”</p>

      <p>“Hahaha, that hurts to hear.”</p>

      <p>The Satomi family consisted of just father and son, and Koutarou had been the one to do most of the housework. Of course, being as rough as he was, he wasn’t necessarily good at it. But if he hadn’t stepped up, Yuichirou surely would have starved to death. His father was a terrible homemaker.</p>

      <p>“Living apart should be a good opportunity for you, so make sure you find a good partner.”</p>

      <p>Koutarou wanted his father to remarry as quickly as possible. Until he did, Koutarou would worry that he might actually starve or that he would just let dirty clothes pile up in his room.</p>

      <p>“Gwahahaha, finding someone is a bit...”</p>

      <p>As hopeful as Koutarou was, it didn’t seem likely to happen anytime soon. Yuichirou was still in love with his late wife. And knowing how he felt, Koutarou couldn’t really complain.</p>

      <p>“Hmm, well, it seems everything is going well.”</p>

      <p>“You too, old man. Don’t forget to take out the trash.”</p>

      <p>“I know, I know.”</p>

      <p>“I wonder sometimes...”</p>

      <p>It was at times like these that Koutarou understood how Kenji must feel.</p>

      <p>“Well, I won’t hold you up anymore. I’ve still got some more unpacking to do myself.”</p>

      <p>“Same here. Talk to you later, old man.”</p>

      <p>“Yeah. Goodnight, Koutarou.”</p>

      <p>“Goodnight.”</p>

      <p>Their conversation had gone smoothly.</p>

      <p>“I was wondering what would happen when that transfer suddenly came up, but...”</p>

      <p>Koutarou set his phone down and plugged it back in.</p>

      <p>“It seems to be going well for now.”</p>

      <p>Koutarou smiled to himself and took a quick breather before starting up again on getting his room in order.<br/><br/></p>

      <p>“Eleven o’clock already...”</p>

      <p>Koutarou finally stopped cleaning up as it neared 11 PM.</p>

      <p>“Guess I’ll get to bed early tonight. I’ll never hear the end of it from Mackenzie if I oversleep.”</p>

      <p>The past few days, Koutarou had had his hands full with moving. And now on top of that he had work in the morning, so turning in early seemed like a good idea.</p>

      <p>“All right, time to hit the hay.”</p>

      <p>Koutarou slid open the wardrobe door and pulled out a futon and a cover with an uncharacteristically floral pattern on it. Shizuka had been kind enough to prepare it for him.</p>

      <p>With some grunting, Koutarou pushed aside a few boxes and threw down the futon in the space he’d managed to clear. As he was about to casually throw himself into the bed as well, the floral cover caught his eye.</p>

      <p>“...I guess I should lay it down the right way.”</p>

      <p>After a change of heart, Koutarou properly spread out the futon. Since Shizuka had taken the time to prepare the duvet for him, he’d feel guilty if he treated it roughly like he usually did.</p>

      <p>“There we go.”</p>

      <p>After neatly laying down his futon, Koutarou turned off the light and crawled into bed.</p>

      <p>“Goodnight.”</p>

      <p>After saying goodnight to an empty room, Koutarou closed his eyes. He normally had a horrible time waking up in the morning, but he was quick to go to sleep. After just a few minutes, he was already fast asleep.</p>

      <p>“Zzzzz...”</p>

      <p>With everything still in room 106, only the sounds of Koutarou breathing and the ticking of the clock on the wall could be heard. They were so quiet, however, that they were eventually drowned out by the TV that was turned on next door in room 105, and then again by Shizuka opening and shutting her door in room 206 above. The noise didn’t keep up much past midnight, however. By 2 AM, everything was quiet enough for the gentle sound of Koutarou breathing to be heard again.</p>

      <p>But that wasn’t the only noise in room 106 now. There was small rattling sound, and it wasn’t coming from Koutarou. Being in deep sleep, he wasn’t moving a muscle.</p>

      <p>The sound seemed to be coming from the window, but it wasn’t like it was poorly constructed or the wind was blowing. The window just continued mysteriously rattling as it gradually grew noisier. After a few minutes, it was irritatingly loud.</p>

      <p>“Zzzzzzzz...”</p>

      <p>But Koutarou showed no sign of waking up.</p>

      <p>“Mmm... Mackenzie, just apologize to McKinley already.”</p>

      <p>In fact, Koutarou began talking loudly in his sleep. If his own voice wasn’t going to wake him up, the window surely wouldn’t. Almost as if in response to Koutarou’s voice, the strange sounds suddenly stopped dead.</p>

      <p>“Gweh heh heh...”</p>

      <p>However, as soon as Koutarou began to mumble in his sleep again, the window began to rattle again too. While it couldn’t be possible, it was almost as if it had been startled. After laughing to himself, Koutarou’s sleep talking seemed to stop. Then there was silence. But while nothing happened for several minutes, the abnormality was far from over.</p>

      <p>Suddenly, a high pitched sound rang out like a small glass bottle breaking. Strangely, however, there was no apparent cause for the noise. It had certainly come from inside the room, but there was nothing there that could produce it.</p>

      <p>The sound of breaking glass continued, and a baseball inexplicably rolled across the tatami floor. The odd noise sounded as if it was coming from roughly the same area the ball had rolled, but neither the source of the sound nor the cause for the ball rolling could be seen.</p>

      <p>The new sound persisted with increasing intensity. It was now several times louder than the rattling of the window.</p>

      <p>“Heh heh... What, Mackenzie? You can’t handle Landlord-san? She sure is cute, isn’t she?”</p>

      <p>Despite the commotion, Koutarou still wasn’t waking up. He only began sleep talking even more.</p>

      <p>“You’ve got good looks, but no guts.”</p>

      <p>As if trying to drown out Koutarou’s mumbling, the mysterious sounds grew louder still. As if urged on by that, other objects in the room began rattling too. The room was falling into chaos as the furniture and moving boxes started to shake and clatter, and the tumult grew louder and louder.</p>

      <p>The sound even passed right over him, but Koutarou simply refused to wake up. Even Kenji, who had known Koutarou for a long time, had trouble waking him up, so something like this was nothing to Koutarou.</p>

      <p>“Weh heh heh...”</p>

      <p>Once again, the racket stopped when Koutarou made a sound.</p>

      <p>If this mysterious phenomenon was caused by someone...</p>

      <p>“Enough with the rattling, Mackenzie!”</p>

      <p>That someone must have been amazed at Koutarou’s thickheadedness.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter2title">
    <img alt="chapter2title" class="insert" src="../Images/ChapterTitle2.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter2">
    <div class="main">
      <h1>Part-time Job</h1>

      <h2>Sunday, April 5th</h2>

      <p>“Haaahh...!”</p>

      <p>“Color me surprised, Kou. You managed to wake up on your own.”</p>

      <p>“I did turn in early, after all. I got plenty of sleep.”</p>

      <p>Dressed for work, Koutarou and Kenji were walking side by side up the road. Being an early Sunday morning, there were very few other people or cars around. The two boys were the only ones out on the street at this hour.</p>

      <p>“Like I said before, I’m already a self-sufficient adult living on my own, Mackenzie-kun.”</p>

      <p>“And I hope it stays that way.”</p>

      <p>“Of course it will.”</p>

      <p>“We’ll see about that... By the way, did anything happen in regards to you-know-what?”</p>

      <p>“What?”</p>

      <p>Kenji’s expression and tone turned serious. Noticing that, Koutarou furrowed his brow a little.</p>

      <p>“You know... About it appearing in that room?”</p>

      <p>“‘It’? ...Oh yeah, right, the ghost!” Realizing what Kenji was worried about, Koutarou smiled and slapped his fist into his palm. “I didn’t see anything like that.”</p>

      <p>“You didn’t?”</p>

      <p>“Nope. Nothing happened before I went to bed, and things were quiet while I slept. Just think about it. If there really had been a ghost, do you think I’d have woken up in the morning?”</p>

      <p>“That’s true. Knowing your sleeping habits, there’s no way you’d wake up before getting enough sleep.”</p>

      <p>Feeling relieved, Kenji loosened up a little.</p>

      <p>“Hahaha. But still, I didn’t think you believed in ghosts, Mackenzie.”</p>

      <p>“Huh?”</p>

      <p>“It’s always science and logic with you. So to think that you’re worried about ghosts...”</p>

      <p>Koutarou began poking at Kenji’s cheek with a wicked grin on his face.</p>

      <p>“So what? Can’t a man of science hate ghosts?” Kenji snapped back.</p>

      <p>“If you’re scared, just say so. You’re not being honest.”</p>

      <p>“Yeah, I’m scared. It’s scary. Ghosts or not, freaky things happen all the time.”</p>

      <p>“You’ve got it bad, huh?”</p>

      <p>As Koutarou shrugged his shoulders, the boys passed by Kisshouharukaze High School where they both would be students starting tomorrow.<br/><br/></p>

      <p>Kisshouharukaze High was about a twenty minute walk from the closest station, Harukaze Station. It was also twenty minutes away from Corona House. On a map, Corona House, Harukaze Station and Kisshouharukaze High School formed a equilateral triangle with almost every urban convenience concentrated within it.</p>

      <p>Kisshouharukaze High School was established a few years ago, immediately following the merging of the neighboring municipalities. As Kisshou City and Harukaze City came together, a new high school was needed to accommodate the children of both cities.</p>

      <p>Since there were already plans for construction in the area, they simply decided to increase the scale of what would become known as Kisshouharukaze High School While it wasn’t as big as schools in the major cities, it was the largest school in the suburban area.</p>

      <p>“Fight, fight, fight! Harukaze, fight!”</p>

      <p>And because of that, despite it being spring break, there were already plenty of students participating in club activities in the Kisshouharukaze schoolyard.</p>

      <p>“The baseball club, huh? The spring tournament just ended, so the third-years must have handed the club over to the next generation by now...”</p>

      <p>“They seem quite lively. They’ll get even more lively when the first-years join, I imagine.”</p>

      <p>Watching the students in their uniforms, Koutarou and Kenji walked by the school’s front gate. Their worksite was just a little farther ahead.</p>

      <p>“...”</p>

      <p>Even after they passed the school, Koutarou was still glancing back at the schoolyard. Balls were being pitched, bats swung, and balls caught. It wasn’t that long ago that Koutarou had been doing the same thing.</p>

      <p>“Hey, Kou... Are you sure about not joining the baseball club?” Kenji asked in a serious tone as he watched the way Koutarou was acting.</p>

      <p>“It’s fine. I can’t live on my own, work part-time, and play baseball all at the same time.”</p>

      <p>Koutarou finally took his eyes off of the schoolyard and gave Kenji a smile.</p>

      <p>“Kou...”</p>

      <p>Kenji could see the wistfulness in Koutarou’s smile.</p>

      <p>“Besides, there’s the knitting society. So there’s no reason to be so pessimistic.”</p>

      <p>“What’s with that anyways? The knitting society, I mean.”</p>

      <p>“Hmm?”</p>

      <p>“Are you serious about joining that club?”</p>

      <p>“Yeah. I’m as serious as I can be.”</p>

      <p>On the day the results of the high school exams were announced, Koutarou had been recruited into the knitting society and was earnest about joining it.</p>

      <p>“You’re kidding, right? No matter how you look at it, it just doesn’t suit you...”</p>

      <p>Kenji looked Koutarou up and down as he spoke. He had a large body, stocky physique, and big hands. Kenji couldn’t imagine that knitting and handicraft were in any way suited for Koutarou. If anything, he would be better at tearing things up than making them.</p>

      <p>“How rude. Just you wait. I’ll knit you a handmade muffler one day.”</p>

      <p>“Stop it. You’re making me feel ill... I’m getting chills down my spine just imagining it.”</p>

      <p>“Yeah, I feel the exact same way now that you mention it. I’ll just knit one for myself.”</p>

      <p>The boys smirked at each other.</p>

      <p>“Admit it. Your real goal is the beautiful club president that recruited you.”</p>

      <p>“I won’t deny it.”</p>

      <p><em>Oh... I didn’t expect that reaction. I was certain that he was after the club president. Did I read him wrong?</em></p>

      <p>Being childhood friends, Kenji could see through Koutarou’s reaction.</p>

      <p>“Anyways, I’ll be spending my high school days with Sakuraba-senpai in the knitting society.”</p>

      <p>“Hmm, that does sound fun. Maybe I should join too.”</p>

      <p>“Don’t you dare. A ladykiller like you would taint Sakuraba-senpai just by getting too close to her.”</p>

      <p>“What’s that supposed to mean? Don’t treat me like some kind of bacteria.”</p>

      <p>“Just think about it. Remember Valentine’s Day? You monopolized all of the class’ chocolate. The other boys cried tears of blood.”</p>

      <p>“That wasn’t my fault.” Kenji sighed to hear the same argument brought up for the umpteenth time.</p>

      <p>“It was definitely your fault. Don’t underestimate a grudge held over food.”</p>

      <p>“But in the end, you ate most of the chocolate anyways. And it really wasn’t my fault. Giving chocolate to me was easy, so it would indirectly be given to you—” Kenji stopped himself mid-sentence.</p>

      <p>“Hmm? What was that?”</p>

      <p>“No, it’s nothing. In fact, I’m not going to tell you.”</p>

      <p>“What’s that supposed to mean?”</p>

      <p>“Come on, we’re going to be late.”</p>

      <p>“Hey, wait up. Why are you in a hurry all of a sudden?”</p>

      <p>The two arrived on the job shortly after.<br/><br/></p>

      <p>“Haaa!” Koutarou shouted as he pushed a large stone out of the way.</p>

      <p>“My, you sure are strong, Koutarou-chan.”</p>

      <p>Watching the rock rolling away, the elderly woman next to Koutarou called out to him. She was dressed in farmer’s clothes and was holding a small, metal trowel.</p>

      <p>“I’m still young, after all. But it also means I’m not as good at detailed work like you.”</p>

      <p>“Ohohoho, that certainly might be true. Thank you for the help, Koutarou-chan.”</p>

      <p>“You’re always giving me sweets, so don’t mention it.”</p>

      <p>“‘Give and take,’ was it?”</p>

      <p>“Haha, that’s right... Anyways, I’ll head back to my post now. See you later.”</p>

      <p>“Thank you again.”</p>

      <p>Koutarou parted ways with the elderly lady and returned to his assigned land division a few dozen meters away.</p>

      <p>“Now then...”</p>

      <p>As Koutarou looked back towards the elderly lady, he saw her squatting down and shaving away layers of soil by her feet with the trowel.</p>

      <p>“Heh... I guess I should get back to work too. I have to work hard so I don’t lose out to that lady and the others.”</p>

      <p>Koutarou rolled up his sleeves and began digging at the ground with tool in hand.<br/><br/></p>

      <p>Koutarou was working with excavating ruins, and the elderly lady was one of his coworkers. She had helped him out a great deal when he first started. Kenji worked with them as well, but the worksite was so vast that his station couldn’t be seen from where Koutarou was stationed.</p>

      <p>Koutarou and the others were currently excavating what had become known as the Kisshouharukaze ruins. They were first uncovered by chance when plans for expanding the Kisshouharukaze High School facilities were brought up. As one could guess from the circumstances of their discovery, the ruins were quite close to the school. They were just a few minutes’ walk apart. The Kisshouharukaze ruins sat atop a small hill, and Kisshouharukaze High School was about halfway down the hill, which is why the boys passed it on their way to work.</p>

      <p id="note2">At the time they were discovered, it was believed that the ruins were from the late Yayoi<sup><a href="../Text/chapter1title.xhtml#note2">2</a></sup> period and that nothing of worth would be found. Only commonplace items were unearthed at the site.</p>

      <p id="note3">However, when the items were tested for their age at the start of this year, it was determined that they were priceless. The ruins were actually over ten thousand years old. While only common items had been found, their sheer age made an astronomical difference in their value. Artifacts that old dated them to the early stages of the Jōmon<sup><a href="../Text/chapter1title.xhtml#note3">3</a></sup> period.</p>

      <p>As earthenware and bronzeware typical of the Yayoi period were also found, these ruins had the potential to revolutionize the field of archeology. The budget was quickly increased to fund a large-scale excavation. As the scale of the project increased, so did the amount of labor required. Recruitment posters were printed and distributed wholesale. Koutarou and Kenji, who were looking for work at the time, had jumped at the offer. Its close proximity to school made it an obvious pick.<br/><br/></p>

      <p>Squatting while slowly scraping away at the soil was rather tiring work. But having spent his middle school years as a catcher, it wasn’t too demanding for Koutarou. While he had struggled at first, now that he was over a month into the job, he was completely used to it.</p>

      <p>“All I find is dirt, no matter how much I dig...”</p>

      <p>According to the archeologists, a building used for religious ceremonies was buried somewhere in the area Koutarou was in charge of. But even with a dozen or so workers digging there, they hadn’t found anything that fit the bill.</p>

      <p>“Are we the only group that’s digging somewhere so extraneous?”</p>

      <p>Koutarou had found nothing but dirt since the day he started.</p>

      <p>“Mackenzie’s area seems more fun. They find stuff all the time.”</p>

      <p>Koutarou was getting bored with the tedious, monotonous labor.</p>

      <p>“Koutarou...”</p>

      <p>“Hmm?”</p>

      <p>It was just then that Koutarou felt like he heard a voice.</p>

      <p>“I thought I just heard someone... Was it the old lady?”</p>

      <p>Koutarou paused and stood up to look around, but didn’t see anyone who looked like they had called out to him. He was the only one in the immediate area, and the elderly lady from before had her back turned to him.</p>

      <p>“Was I just imagining it?”</p>

      <p>Koutarou cocked his head to the side in confusion. As he did, however, he could hear the voice once again.</p>

      <p>“Koutarou...”</p>

      <p>“That isn’t that old lady’s voice. It sounds much younger. And it sounds so familiar... No, surely this is the first time I’ve heard it, right?”</p>

      <p>“This way...”</p>

      <p>“That way?”</p>

      <p>Hearing the voice for the third time, Koutarou thought he could identify the source. It sounded like it was coming from a grove a few dozen meters away.</p>

      <p>“All right, fine.”</p>

      <p>Koutarou put down his excavation tool and approached the trees.</p>

      <p>“Is this one of Mackenzie’s pranks, or is it someone else?”</p>

      <p>Koutarou was pretty sure it had to be Kenji trying to pull one over on him, so he didn’t feel any danger whatsoever. However, he decided to go take a look just in case that it wasn’t him.</p>

      <p>“Really? We’re about to be high school students, and he’s wasting time playing pranks... When I catch him, I’ll make him fess up whose voice he recorded.”</p>

      <p>Koutarou couldn’t place the voice, so he assumed that it was the voice of yet another girl Kenji had hooked up with.</p>

      <p>“Hmm, it’s pretty thick...”</p>

      <p>Koutarou pushed the brush aside and entered the grove. The tall trees and overgrown weeds left him with a terrible view of the area. Even worse, the weeds were prickling his skin, making the entire area a pain to traverse.</p>

      <p>“Hey, Mackenzie, I know you’re here! Come out and show yourself!”</p>

      <p>Koutarou wanted to find Kenji quickly so he could get out of here.</p>

      <p>“Get out here and tell me about this new girl.”</p>

      <p>That was when the sensation of solid ground suddenly vanished from underneath Koutarou’s feet.</p>

      <p>“Huh?”</p>

      <p><em>Oh crap, a hole in the ground?!</em></p>

      <p>By the time Koutarou caught on, he had already been swallowed up by the earth.<br/><br/></p>

      <p>“Ow!”</p>

      <p>Slamming into the ground below knocked the wind out of Koutarou. An acute pain shot through the back of his head.</p>

      <p>Having fallen into a hole, there was good and bad news. The good news was that the hole wasn’t all that deep. The bad news was that Koutarou had hit his head on a rock when he fell.</p>

      <p>“Owowow, that hurts... This is all Mackenzie’s fault.”</p>

      <p>Koutarou put his hand on his aching head and sat up. Fortunately, Koutarou was born tough. Apart from the bump on his head, he hadn’t sustained any real injuries.</p>

      <p>“Huh? Where am I?”</p>

      <p>Once he sat upright, Koutarou finally got a view of his surroundings. It should have been pitch black considering he was at the bottom of a hole, but the area was strangely illuminated. While there was sunlight coming down from where he’d fallen in, the ambient light was too bright for it to be just from that. It was similar to an emergency exit sign in a dark hallway.</p>

      <p>“There’s something here. Some sort of stand and several pillars... Even the floor is paved.”</p>

      <p>It was a mysterious space, spreading roughly ten meters in every direction. The area was lined with flat slabs, forming a sturdy floor. Standing on that floor were several pillars about the height of a person, and on top of each pillar was a glowing sphere. The glow from these spheres was what lit up the room. In the middle of everything, surrounded by the pillars, was a single stand. And on top of that stand was a human statue, looking down on Koutarou still sitting there.</p>

      <p>“Could these be the ruins of that religious building?”</p>

      <p>The statue on the stand looked like some kind of god. Moreover, it was being illuminated by the surrounding pillars. Had someone told Koutarou this was a temple, he would have believed them without a second thought.</p>

      <p>“Koutarou...”</p>

      <p>The voice that had been calling out to Koutarou all this time could be heard once more.</p>

      <p>“That voice... Hey, is someone there?! Why are you calling my name?!”</p>

      <p>Surprised, Koutarou looked around. But the only thing moving in the room was him.</p>

      <p>“Koutarou, I’ve been waiting for you all this time...”</p>

      <p>“What? Waiting? Where are you?! <em>Who</em> are you?!”</p>

      <p>At this point, not even Koutarou would think this was one of Kenji’s pranks. He shouted out his doubts to the mysterious speaker. But he didn’t get an answer in words.</p>

      <p>“Uwah! Wh-What?!”</p>

      <p>All of a sudden, the statue on the stand began glowing. But it wasn’t because of the light from the pillars. The light was coming from the statue itself. While it was only a dim glow at first, by the time Koutarou had taken a few breaths, the statue was shining brightly.</p>

      <p>“Just how many times have I dreamed of this moment during the countless days and nights that have passed...?”</p>

      <p>“The statue...? Are you the one talking?”</p>

      <p>The light emitted from the statue seemed like normal light at first, but as the light began shining brighter, it slowly began taking shape.</p>

      <p>“I am not a statue. This statue is but one of the prayers offered to me. Because of its purity, it allows me to unleash my powers, but I am not the statue itself.”</p>

      <p>Eventually the mysterious light formed into the shape of a human. It was as if the very statue had transformed into a person.</p>

      <p>“...Koutarou, we finally meet...”</p>

      <p>“A girl...?”</p>

      <p>The figure of light overlapped with the statue, revealing what looked like a young girl with calm and gentle eyes.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter3title">
    <img alt="chapter3title" class="insert" src="../Images/ChapterTitle3.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter3">
    <div class="main">
      <h1>Commence Invasion</h1>

      <h2>Sunday, April 5th</h2>

      <p>White light rained down. But it was only an artificial light that was easy on the eyes.</p>

      <p>“...H-Huh?”</p>

      <p>Coming to, Koutarou found himself lying down and staring up at the fluorescent light in the ceiling.</p>

      <p>“Why am I lying down? And where am I...?”</p>

      <p>“So you’re finally awake now.”</p>

      <p>Koutarou blinked a couple of times, unable to understand the situation. Kenji standing there was the next thing he saw.</p>

      <p>“Mackenzie?”</p>

      <p>“Don’t give me that. You gave me quite the shock when you just collapsed at the worksite like that.”</p>

      <p>“Collapsed? I did?”</p>

      <p>“Yeah. In the middle of your shift, too. It looked like you slipped and fell. Supposedly that’s how you got that bump on the back of your head.”</p>

      <p>“Ouch, there really is a bump...”</p>

      <p>Koutarou sat up as he rubbed his head. Looking around, he finally realized that he was on a bed in a hospital room.</p>

      <p>“Umm... First there was a big rock where the old lady was digging...”</p>

      <p>Koutarou began recalling what had happened.</p>

      <p>“Yeah, she was worried about you too.”</p>

      <p>“I’ll be sure to let her know that I’m fine later... But I moved that rock for her and went back to my station.” Then Koutarou went silent. “...What happened after that?”</p>

      <p>“Why are you asking me? Wouldn’t that be when you slipped and fell? They found you in the middle of your assigned area, after all.”</p>

      <p>“Hmm...”</p>

      <p>Koutarou tilted his head in thought.</p>

      <p>“What?”</p>

      <p>“It’s just... I feel like something else happened too.”</p>

      <p>Something didn’t sound right to Koutarou. There was a bump on the back of his head and he had been found in the middle of his assigned area, sure, so what Kenji was saying made a certain amount of sense. But it still felt off to Koutarou.</p>

      <p>“Don’t be stupid. Maybe you were just dreaming?”</p>

      <p>“Hmm...”</p>

      <p>Koutarou crossed his arms and continued pondering as the nurse on duty entered the room, pushing a cart ahead of her.</p>

      <p>“I see you’re awake now.”</p>

      <p>“Oh, yes.”</p>

      <p>Kenji, who had met with the nurse before, gave her a slight bow.</p>

      <p>“Heehee. You should be grateful for your partner here.”</p>

      <p>The nurse flashed Koutarou a smile.</p>

      <p>“Grateful?”</p>

      <p>“Yes. Kenji-kun stayed by your side the entire time. He looked so worried too. It was kind of cool.”</p>

      <p>“M-Miss!”</p>

      <p>“There’s no need to be embarrassed, Kenji-kun. You have a cute side to you too... Or could it be that the two of you swing that way?”</p>

      <p>“Not at all!”</p>

      <p>Kenji flat out denied it.</p>

      <p>“Actually, we do.”</p>

      <p>But Koutarou grinned and played along.</p>

      <p>“Aha, I thought so! So which one of you is the bottom?”</p>

      <p>“Well...”</p>

      <p>“You idiot!”</p>

      <p>Kenji threw a sharp hook at Koutarou to shut him up.</p>

      <p>“Ouch!”</p>

      <p>“Hey, you can’t just punch your lover in the head like that, Kenji-kun!”</p>

      <p>“Please stop saying such horrifying things.”</p>

      <p>Satisfied with Kenji’s reaction, the nurse pointed to the bandages wrapped around Koutarou’s head.</p>

      <p>“Heehee. I know, and I’m sorry. But as you can see, Satomi-kun is injured, so don’t be too rough with him.”</p>

      <p>“...I-I’m sorry. My bad, Kou.”</p>

      <p>“Don’t worry about it.”</p>

      <p>“Now that that’s settled, here you go, Satomi-kun.”</p>

      <p>The nurse smiled again, then pulled a thermometer from the cart and handed it to Koutarou.</p>

      <p>“Could you take your temperature for me? Head injuries often come with complications, so this is just to be safe.”</p>

      <p>“Yes, of course.”</p>

      <p>“Once you’re done with that, you can go home for today. But if you notice anything strange, you should come straight back here. Got it?”</p>

      <p>“Yes.”</p>

      <p>“Good. Then I’ll leave the rest to you, Kenji-kun. Please hand this file over to the cashier on your way out.”</p>

      <p>“Got it. Thank you very much.”</p>

      <p>“Goodbye then, you two.”</p>

      <p>The nurse smiled and waved to the boys before heading off to her next patient.</p>

      <p>“Hey, Mackenzie.”</p>

      <p>“Hmm?”</p>

      <p>As Koutarou called his name, Kenji looked up from flipping through the file.</p>

      <p>“Are you aiming for that nurse this time?”</p>

      <p>“You idiot!”</p>

      <p>Kenji raised his fist to hit Koutarou again, but remembering the nurse’s words made him hold back.</p>

      <p>“Seriously, you really are...”</p>

      <p>Kenji just sighed instead.</p>

      <p>“Sorry, sorry.”</p>

      <p>Koutarou grinned and put the thermometer under his arm.</p>

      <p>“Pharmacy, pharmacy...”</p>

      <p>After getting out of bed, Koutarou left the cashier to Kenji and headed for the hospital’s pharmacy. His injuries were minor apart from his bump, but he decided to get medicine he might need just in case.</p>

      <p>“So it’s this way...”</p>

      <p>Following the directional signs hung on the wall, Koutarou turned the next corner. The pharmacy was just ahead now, but Koutarou stopped short for some reason. He could see a familiar face on the other side of the window.</p>

      <p>“That’s Sakuraba-senpai. What is she doing here?”</p>

      <p>Koutarou had spotted the figure of the knitting society’s club president. She was sitting down on a bench in the hospital’s courtyard.</p>

      <p>“Hmm...”</p>

      <p>As Harumi caught his interest, Koutarou decided to leave the pharmacy for later and went through the glass door leading outside.<br/><br/></p>

      <p>The early spring sun shone down on the courtyard, lighting it up. Enclosed by hospital walls, there was next to no wind either. Thanks to that, it felt much more comfortable than the hospital hallways, making it the perfect place for the hospitalized children to play.</p>

      <p>However, when Koutarou walked up, the children were all completely silent, sitting in the grass and listening intently to the person on the bench.</p>

      <p>Sitting on the bench was a young girl with long hair, wearing a cardigan over her hospital pajamas. She was one year older than Koutarou, but her pale skin and delicate figure made her look younger. Her name was Sakuraba Harumi. She was the club president of the knitting society that Koutarou would be joining.</p>

      <p>“Then the North Wind said, ‘With my power, I’ll blow the clothes right off that traveler. I’ll teach the Sun that I’m stronger!’”</p>

      <p>Harumi was in the middle of reading out loud to the children around her. With the open book in her lap, she continued reading with a calm and gentle expression.</p>

      <p>“‘However, the Sun wasn’t about to give up. It said to the North Wind’— Oh? Goodness, who was it that scribbled on this page?”</p>

      <p>“Hiromi, wasn’t it you?”</p>

      <p>“It wasn’t me!”</p>

      <p>“It was Saya-chan. I saw her!”</p>

      <p>“Is that true, Saya-chan?”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert2">
    <img alt="insert2" class="insert" src="../Images/Insert2.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter31">
    <div class="main">
      <p>“...Y-Yes...”</p>

      <p>“I see... You shouldn’t have done that, Saya-chan. This book belongs to everyone.”</p>

      <p>“I know... I’m sorry.”</p>

      <p>“As long as you understand. I won’t get mad if you know what you did was wrong.”</p>

      <p>Harumi and the children all seemed cheerful. Koutarou found the sight of the quiet Harumi smiling and talking to the children to be quite refreshing.</p>

      <p><em>I shouldn’t disturb her. All right...</em></p>

      <p>Koutarou decided not to interrupt, and took a seat behind the rows of children. Fortunately, Harumi didn’t notice him.</p>

      <p>“Onee-chan, keep reading!”</p>

      <p>“Okay, I will.”</p>

      <p>“I’m sure this is where the Sun fights back!”</p>

      <p>“What was it they said on the TV the other day?”</p>

      <p>“Beat him to a pulp!”</p>

      <p>“That’s it!”</p>

      <p>“Everyone, you shouldn’t be watching that kind of channel yet. Wait until you’re older.”</p>

      <p>“Huh? Why not? They’re all strange and funny.”</p>

      <p>“There aren’t any adults like that around anymore.”</p>

      <p>“Goodness... Listen, everyone. Don’t become adults like that, okay?”</p>

      <p>“Okaaay.”</p>

      <p><em>Ha, I’ve never seen Sakuraba-senpai make that face before...</em></p>

      <p>Watching Harumi happily play with the children, Koutarou thought back to when he first met her.<br/><br/></p>

      <p>Koutarou and Harumi first met about a month ago on March 1st. Koutarou was visiting the school as the results of the exam were announced. Unfortunately, it was a cloudy, cold day for March, and bad weather had made it even colder.</p>

      <p>“The soccer club is recruiting! We’re looking for fresh meat!”</p>

      <p>“The choral club is recruiting! We placed second in the tournament last year, and we’re aiming for first this year! Come help us out!”</p>

      <p>“We’re not just fat people; we’re fat people that can really move! If you’re concerned about your weight, we want you! Welcome to the sumo club! Feel free to visit!”</p>

      <p>“Back off! The karate club is the only club for real men! Get lost and take your bellies with you!”</p>

      <p>“What was that?! Just try saying that again!”</p>

      <p>However, even in early spring, things were heating up in the Kisshouharukaze High schoolyard because of hot-blooded club members engaged in a recruiting battle over the newly accepted students. At Kisshouharukaze, club activities were an active part of high school life. And with plenty of club events at such a large school, the club life was far more prevalent here than most others. As a result, the more members a club had, the more power they held within the school.</p>

      <p>That’s why every club wanted as many members as they could get their hands on. Consequently, the recruiting started earlier and earlier each year. It wasn’t long before the recruiting battles began on the day the entrance exam results were announced. They wouldn’t be able to secure any members if they just casually waited until the entrance ceremony.</p>

      <p>And so the schoolyard was filled with recruiters from every club looking to snatch up the newly accepted students that day.</p>

      <p>“Th-The knitting society is recruiting, um... Would you like to join the knitting society?”</p>

      <p>Harumi was one of those recruiters.</p>

      <p>“Um... Please, at least just listen...! I, u-um...”</p>

      <p>However, her recruiting wasn’t going well.</p>

      <p>The knitting society wasn’t very popular, and the shy, timid Harumi was acting as the face of the club. Because her voice was so quiet, it was easily drowned out by the surrounding commotion.</p>

      <p>“Hey, if I join the knitting society, will you go out with me?”</p>

      <p>“I, um... I’m sorry. Y-You’re making me uncomfortable...”</p>

      <p>The only people that approached her were good-for-nothing boys that were attracted by her looks. She was at a loss trying to find the kind of club members she was hoping for.</p>

      <p>“...Hmm?”</p>

      <p>Koutarou noticed her by chance. As he was passing through nearby, he happened to hear Harumi’s small cry for help. If she had been recruiting like normal, Koutarou probably wouldn’t have noticed her at all.</p>

      <p>“P-Please stop! Let go!”</p>

      <p>“It’s fine, right? You want members, and I want to go out with you. It’s win-win, don’t you think?”</p>

      <p>“That’s not what this society is for!”</p>

      <p>“But you don’t have enough members, right? Time to face facts.”</p>

      <p>“No! Let go of me!”</p>

      <p>A powerless, delicate girl was trying to escape the grasp of a persistent, sleazy guy. She seemed to be recruiting for some club, but the boy was just there to hit on her. Koutarou had picked up on the situation just by watching them, and casually approached.</p>

      <p><em>Jeez, could you at least think twice about where you pull this kind of stunt?</em></p>

      <p>Seeing someone be so selfish irritated Koutarou.</p>

      <p>“Welcome! Oh my, aren’t you a cutie?”</p>

      <p>Koutarou spoke in a flamboyantly feminine voice like something out of a TV show, and threw his arms around the boy.</p>

      <p>“Wh-What?!”</p>

      <p>“You’re joining our club, aren’t you? That’s great! You’re just my type!”</p>

      <p>“L-Let go! Who the hell are you?!”</p>

      <p>Surprised by Koutarou’s sudden hug, the boy let go of the girl’s hand. Seeing that, Koutarou kept talking while forcibly separating the boy from the girl.</p>

      <p>“Oh, I thought you wanted someone to go out with?”</p>

      <p>“Wh-Who would want to go out with you?!”</p>

      <p>“You want to go out with someone, and I want to go out with a boy. It’s win-win, don’t you think?”</p>

      <p>“The hell it is! Let go of me, you freak!”</p>

      <p>“Oh, don’t be so shy!” Koutarou spun around and let go of the boy. “You’ll join, won’t you?”</p>

      <p>“Who the hell would join a boring club like this with a freak like you in it?”</p>

      <p>“Oh, you’re breaking my heart...”</p>

      <p>“Ugh, disgusting!”</p>

      <p>The boy spat out those words and ran off. Since he was only there for the cute girl, he left as easily as he had come.</p>

      <p>“Phew. There are so many idiots this time of year... I sure hope he’s not in my class.”</p>

      <p>While he was relieved that he’d been able to resolve things safely, Koutarou still let out an irritated sigh. Even after the boy was long gone, Koutarou continued staring in that direction for a while.</p>

      <p>“Um... Thank you very much.”</p>

      <p>“Wha?!” Koutarou let out a strange yelp in surprise at the sudden voice.</p>

      <p>“Ah, I’m sorry for startling you!”</p>

      <p>The voice belonged to the girl who the boy was pestering. Seeing Koutarou’s surprise, she frantically bowed her head.</p>

      <p>“Oh, no, I’m sorry. I forgot you were here too.”</p>

      <p>Koutarou had been so irritated at the boy that he had completely forgotten the girl was there at all.</p>

      <p>“He was pretty relentless, so you really helped me out...”</p>

      <p>“I was out of line. I even chased away a potential member when you’re out here recruiting.”</p>

      <p>“No, that’s okay. He wasn’t interested in knitting anyway...”</p>

      <p>The girl’s expression finally relaxed.</p>

      <p><em>She has such serene eyes...</em></p>

      <p>The girl had a mild, soothing aura about her. Just looking at her made Koutarou feel at ease.</p>

      <p>“Knitting?”</p>

      <p>“Yes, I’m the president of the knitting society.”</p>

      <p>“The knitting society, huh?”</p>

      <p>Behind the girl was a desk bannered with the words “knitting society.”</p>

      <p>“...I’m sure it’s not very interesting for boys.”</p>

      <p>The girl’s face turned slightly gloomy and she lowered her head. Seeing that, Koutarou realized that her club lacking members was a big problem.</p>

      <p>“That’s true, even I—”</p>

      <p>Koutarou was about to agree when he suddenly remembered the half-finished sweater that he was keeping safely wrapped up at home.</p>

      <p><em>If I join this club...</em></p>

      <p>“Um, Senpai...”</p>

      <p>“Yes?”</p>

      <p>“If I join this club, would I get better at knitting?”</p>

      <p>“Of course. That’s exactly what we’re here for.”</p>

      <p>The girl nodded her head.</p>

      <p>“Would it be possible for even a complete amateur to knit a sweater?”</p>

      <p>“I’m sure it would be impossible at first, but if you keep at it...”</p>

      <p>“Even if I’m not very good with my hands?”</p>

      <p>Koutarou showed the girl his large, manly fingers. Looking at his hands, she nodded.</p>

      <p>“You’ll be fine. In the end, training and effort are more important than dexterity.”</p>

      <p>“That’s my specialty. I’m an athlete, after all.”</p>

      <p>After talking for this long, Koutarou made up his mind. Knowing that he wouldn’t be able to continue with baseball because of his father’s sudden job transfer, it didn’t bother him too much.</p>

      <p>“Um, c-could it be that you would like to join?”</p>

      <p>The girl’s expression brightened up. She had realized from their conversation that Koutarou was interested.</p>

      <p>“Yeah, if it’s not a bother, I would like to join. Do you mind?”</p>

      <p>“Not at all! W-Welcome!”</p>

      <p>Seemingly very happy, the girl spoke quickly as she welcomed Koutarou.</p>

      <p>“Please come this way! Th-There’s an application form to fill out!”</p>

      <p>“Sure.”</p>

      <p>Led by the girl, Koutarou started walking.</p>

      <p>“I’m Satomi Koutarou. It’s nice to meet you.”</p>

      <p>“Oh my goodness, that’s right...”</p>

      <p>The girl gave a small, embarrassed smile that soon turned into a large grin.</p>

      <p>“I’m Harumi. Sakuraba Harumi. I’m the president of the knitting society.”</p>

      <p>And that was how Koutarou and Sakuraba Harumi met.<br/><br/></p>

      <p>“Satomi-kun, if you were here, you should have just said so...”</p>

      <p>“Hahaha, you looked like you were having so much fun with the children that I would’ve felt bad about butting in, Senpai.”</p>

      <p>Koutarou and Harumi were now sitting on the bench together. As they talked, they watched over the children in the hospital courtyard. The kids had split into groups and were running around playing.</p>

      <p>“Are you here often, Sakuraba-senpai?”</p>

      <p>“Yes. I’ve had a weak constitution ever since I was a child, so I have regular checkups. Since school starts tomorrow, the doctors wanted to make sure there was nothing wrong.”</p>

      <p>“And do you play with the children every time you come to the hospital?”</p>

      <p>“...Yes.” Harumi blushed slightly as she nodded.</p>

      <p>“Onee-chan!”</p>

      <p>“Is he bullying you? Should we get him?!”</p>

      <p>The children adored Harumi. Koutarou could tell from just this short exchange. That’s why he figured that they had known each other for a long time.</p>

      <p>“It’s okay! This boy is my friend.”</p>

      <p>“I see.”</p>

      <p>“Why don’t you take a hint?”</p>

      <p>“How adult.”</p>

      <p>“It’s an adult!”</p>

      <p>Seemingly satisfied with her answer, the children began playing again.</p>

      <p>“I’m sorry, Satomi-kun. It’s rare for young people to come here.”</p>

      <p>“It’s okay. I don’t mind. They’re your friends, right?”</p>

      <p>“...Yes. Very precious friends.” Harumi nodded firmly in response as she looked back up at the children with a loving gaze. Harumi adored the children too.</p>

      <p>“So why are you in the hospital, Satomi-kun?”</p>

      <p>“Is it that surprising?”</p>

      <p>“Yes. You look so healthy.”</p>

      <p>“I’m not sick, just a little banged up. Here, look.”</p>

      <p>Koutarou turned his back to Harumi and showed her the back of his head. The wrap had been removed, but he still had a bandage over the bump.</p>

      <p>“Are you okay?”</p>

      <p>When Koutarou turned to face Harumi again, she looked quite worried.</p>

      <p>“It’s just a bump and some small scratches. It’s nothing serious.”</p>

      <p>“Oh, good... But how did you get hurt?”</p>

      <p>Harumi let out a sigh of relief, but then curiously tilted her head.</p>

      <p>“Actually, I tripped and hit my head on the job. That’s all it was. Hahaha, I guess I’m too energetic.”</p>

      <p>Koutarou smiled and shrugged, but Harumi still had a worried look on her face.</p>

      <p>“...You really are okay, aren’t you?”</p>

      <p>“I’m fine. I can’t get any dumber than I already am.”</p>

      <p>“Then I suppose it’s all right.”</p>

      <p>“Heh, don’t worry so much, Sakuraba-senpai.”</p>

      <p>“Head injuries can be pretty scary, you know? Besides, you’re a member of the society after all.”</p>

      <p>“I see. So it’s a very calculated worry.”</p>

      <p>“Calculated?! I would never...”</p>

      <p>Harumi’s face turned red as Koutarou laughed to himself.</p>

      <p>“Pfft... Ahahaha!”</p>

      <p>“Oh you, Satomi-kun...”</p>

      <p>As Harumi’s lips pursed into a small frown, one of the children thrust her face between Koutarou’s and Harumi’s.</p>

      <p>“Uwah!”</p>

      <p>“Kyaah!”</p>

      <p>The child that had appeared was one of the older girls. She had climbed over the back of the bench to surprise Koutarou and Harumi.</p>

      <p>“Did I scare you? Hey, are you Onee-chan’s boyfriend?”</p>

      <p>“B-Boyfriend?!”</p>

      <p>Unaccustomed to this kind of question, Harumi’s eyes shot wide open and she was left speechless.</p>

      <p>“Haha, I wish. I’m not her boyfriend. Just her apprentice.”</p>

      <p>“Apprentice? Of what?”</p>

      <p>“Of knitting. She’ll be teaching me starting the day after tomorrow.”</p>

      <p>Club activities would begin on Tuesday, the day after the school’s commencement ceremony.</p>

      <p>“I see. Onee-chan is a good knitter.”</p>

      <p>Satisfied, the girl smiled. Even among the children, Harumi’s knitting skills were famous.</p>

      <p>“Hey! Kou! Where are you?!”</p>

      <p>That was when Kenji appeared at the entrance to the courtyard.</p>

      <p>“Ah...”</p>

      <p>Spotting him, Harumi’s expression became more strained.</p>

      <p>“Mackenzie! Over here!”</p>

      <p>Koutarou didn’t notice the change, and waved over Kenji.</p>

      <p>“You idiot! What about the medicine?!”</p>

      <p>“Oh shoot, I forgot!”</p>

      <p>Koutarou jumped off the bench and ran towards Kenji.</p>

      <p>“Hey, Onee-chan.”</p>

      <p>The young girl was looking at Koutarou’s back and leaned over to whisper to Harumi, who was doing the same thing.</p>

      <p>“Yes?”</p>

      <p>“Is he really not your boyfriend?”</p>

      <p>“He’s not. He’s a friend from school who I promised to teach to knit.”</p>

      <p>“You’re lying. He’s the only adult man you’ve talked to without getting flustered.”</p>

      <p>“Th-That’s not...”</p>

      <p>Harumi was quick to deny it, but the young girl was right. Harumi had only met with Koutarou a few times in the days after the results were announced. She’d come across him by chance in town, but they weren’t particularly close. Even so, Harumi wouldn’t ordinarily be able to speak to a man under those circumstances.</p>

      <p>“I... um...”</p>

      <p>Yet for some reason, Harumi didn’t feel like she needed to keep her guard up around Koutarou. This was something unexpected even to her, so she couldn’t help but feel a little puzzled.</p>

      <p>“S-Satomi-kun and I aren’t...”</p>

      <p>As Harumi muttered his name, Koutarou finally met up with Kenji and turned back towards Harumi.</p>

      <p>“Senpai! I know it’s sudden, but I have to go now! I’ll see you the day after tomorrow!”</p>

      <p>“Y-Yes! The day after tomorrow, then! Goodbye, Satomi-kun!”</p>

      <p>Despite being caught off guard by Koutarou’s timing, Harumi was still somehow able to answer.</p>

      <p>“Goodbye!”</p>

      <p>Koutarou bowed his head and left the courtyard with Kenji.</p>

      <p>“...”</p>

      <p>Harumi clasped her hands to her chest and watched Koutarou as he walked away.</p>

      <p>“...I get it. You’re not dating, but you’re interested in him, right?”</p>

      <p>Studying Harumi’s behavior, that was the conclusion the young girl reached.</p>

      <p>“Wh-Wh-Whaaat?!”</p>

      <p>Harumi’s face turned bright red. She was absolutely speechless. She desperately searched for the words to deny it, but nothing came to her.</p>

      <p>“It’s okay, I’ll keep it a secret.”</p>

      <p>“...”</p>

      <p>In the end, Harumi was unable to say anything back to the young, smiling girl. She simply stayed quiet.<br/><br/></p>

      <p>“Does your club president hate me or something?”</p>

      <p>“Huh?”</p>

      <p>“When I called out while you guys were talking, she got really nervous all of a sudden, remember?”</p>

      <p>“Really?”</p>

      <p>“...You could at least notice something that obvious.”</p>

      <p>Kenji smiled wryly at Koutarou as he got on his bike, which he had left at Corona House. In the morning, Kenji would take the train to Harukaze Station and use his bike to get to Corona House from there. And once he met up with Koutarou, they would walk to Harukaze High together.</p>

      <p>“I don’t know if she hates you or not, but if a scumbag like you approached her, she’d be tainted. Don’t get near her. Shoo, shoo!”</p>

      <p>“Come on now...”</p>

      <p>Koutarou smirked at Kenji’s reaction, but his expression soon turned more serious.</p>

      <p>“Well, to be honest, it does seem like she is a bit shy.”</p>

      <p>While they had only spoken a few times, Koutarou had at least picked up on that.</p>

      <p>“Hmm, she seems pretty fine with you though.”</p>

      <p>“A lot happened when we first met, you know.”</p>

      <p>“Ah, you mean that time with a real scumbag.”</p>

      <p>“Right. She was grateful back then, but we’ve bumped into each other a couple of times since. That’s probably why.”</p>

      <p>Harumi was normally meek and bashful. If they hadn’t met under such circumstances, she probably would have been nervous around Koutarou as well. At least, that’s what Koutarou figured.</p>

      <p>“That’s how it is. So leave her be until she gets used to you, scumbag.”</p>

      <p>“Would you stop calling me that?”</p>

      <p>Normally, Kenji was the one who was popular with women.</p>

      <p>“Just understand that it’s not a laughing matter, Mackenzie-kun.”</p>

      <p>“Yeah, yeah.”</p>

      <p>Kenji knew he was mostly joking. He smiled and shook his head as he turned his bike around.</p>

      <p>“Well then, Kou, tomorrow’s the entrance ceremony, so make sure you get to bed early.”</p>

      <p>“I know, I know. You don’t have to worry. I got up just fine today, right?”</p>

      <p>“Right. Well, see you.”</p>

      <p>“Yeah. Be safe.”</p>

      <p>Kenji got to pedaling, and Koutarou returned to Corona House. Neither of them looked back. It was how they usually parted ways.</p>

      <p>The door to room 106 unlocked with a click. While the door looked old, the landlord, Shizuka, made sure to change the locks every time a tenant changed. Thanks to that, it didn’t give of the impression of a worn out apartment. The door didn’t even creak as it opened, a sign that it had been well maintained.</p>

      <p>“I’m back,” Koutarou muttered to himself as he entered the empty room.</p>

      <p><em>As expected, coming home to an empty house is boring...</em></p>

      <p>The image of his mother flashed through Koutarou’s mind. He recalled the sight of her welcoming him home. Until just a few years ago, that was a daily occurrence.</p>

      <p>“You’re finally back, you thickheaded jerk!”</p>

      <p>However, a voice rang out from the back of the room, interrupting his nostalgic moment.</p>

      <p>“What?!”</p>

      <p>Surprised, Koutarou hurriedly threw off his shoes and ran to the inner room.</p>

      <p>“In the end, you never noticed anything last night, but I’ll chase you out today for sure!”</p>

      <p>Koutarou was met with the sight of a small girl in a summer dress as he entered the room. She looked several years younger than him. With her slender body and short stature, she looked to be in elementary school. But her strong eyebrows, large eyes, and frowning mouth left quite an impression.</p>

      <p>“Plan number one! Start up with the noises even though it’s still evening!”</p>

      <p>Koutarou wasn’t sure if the girl had noticed him or not, but she began loudly clapping her hands in the middle of the room.</p>

      <p>“What...?”</p>

      <p>The sight of this girl clapping and running through the room left Koutarou astonished.</p>

      <p>“What is she doing...?”</p>

      <p>Koutarou was too distracted by what the girl was doing to worry about how she had gotten into his room in the first place.</p>

      <p>“It was a mistake to wait until night to try and wake up this thickheaded dweeb with a scare! I’m so on top of my game today! I’m a genius to think of starting up with the racket while he’s still awake!”</p>

      <p>The girl continued running around the room while happily clapping her hands.</p>

      <p>“Now get scared and leave, you dimwit! This place is haunted!”</p>

      <p>The girl finally turned towards Koutarou. As she did, she saw him staring at her.</p>

      <p>“...”</p>

      <p>“Surely you’ll leave now!”</p>

      <p>The girl stopped moving.</p>

      <p>“Huh?”</p>

      <p>She hesitantly clapped one final time. And the two simply stared at each other.</p>

      <p>“...”</p>

      <p>“...”</p>

      <p>“...What are you doing here?”</p>

      <p>Koutarou was the one to break the silence. He pointed to the girl’s hands, still pressed together, and called her out in a dumbfounded tone. It was only reasonable he’d feel that way upon returning home after a long day, only to find a girl going mad in his apartment.</p>

      <p>“Whaaaaat?!”</p>

      <p>In response, the girl opened her eyes wide in surprise. Her already large eyes became completely round.</p>

      <p>“H-Hey, you! You can see me?!”</p>

      <p>The girl leaned forward and brought her face closer to Koutarou’s.</p>

      <p>“Of course I can see you. What are you talking about...?”</p>

      <p>“Y-You can’t just see me, but you can hear me too?!”</p>

      <p>“What are you talking about...?”</p>

      <p>Koutarou had no idea what the girl was trying to say, and tilted his head to the side in confusion.</p>

      <p>“B-But, you couldn’t see me yesterday. You couldn’t hear my voice either!”</p>

      <p>“Huh?”</p>

      <p>The girl wasn’t making any sense to Koutarou, and his confusion reached its peak.</p>

      <p>“Just like I said! You didn’t notice me at all yesterday! So why can you see and hear me today all of a sudden?!”</p>

      <p>“Wait, wait, wait! Explain yourself properly! I’m not following you at all! More importantly, who are you? And how did you get in here?!”</p>

      <p>“I’m Higashihongan Sanae, and I’m the resident of this room! I live here! You’re the one who’s barging in!”</p>

      <p>“What? You live here? ...Wait a minute.”</p>

      <p>“Wh-What now?”</p>

      <p>Leaving the now confused girl behind, Koutarou opened the front door and peeked at the door plate: “Room 106, Satomi Koutarou.”</p>

      <p>“So I am in the right room...”</p>

      <p>Having confirmed that much, Koutarou quickly returned to the inner room. At first, he had been worried that he’d entered the wrong apartment.</p>

      <p>“This is my place. I’m the one renting it from the landlord.”</p>

      <p>“It’s my room! I’ve always lived here! So get out!”</p>

      <p>“I’m the one paying for it, so why should I get out?!”</p>

      <p>“Shut up, shut up, shut up! If I’m not here, mama and papa will get worried!”</p>

      <p>Their discussion wasn’t going anywhere.</p>

      <p>“Hmm...”</p>

      <p>Troubled, Koutarou decided to piece together the situation. He crossed his arms and began thinking.</p>

      <p><em>When I came home, there was a girl I don’t know in my room. She’s insisting that this is her room, but she was nowhere to be seen when I moved in yesterday. And there’s no way that Landlord-san would rent this room out to two people at the same time.</em></p>

      <p>“Which means this girl is...”</p>

      <p>“What? D-Don’t just stare at me like that.”</p>

      <p>To Koutarou, this girl was just a stranger who had entered his apartment without permission. She was spouting some nonsense about why, but Koutarou had never seen her before, so he figured that she was making it up.</p>

      <p>She was probably just a kid from the neighborhood who had found the door unlocked and decided to come in to play. In the end, that was the conclusion Koutarou reached.</p>

      <p>“All right.”</p>

      <p>Having made up his mind, Koutarou swiftly took action.</p>

      <p>“No problem, no problem.”</p>

      <p>“Kyaah! What are you doing now?!”</p>

      <p>Koutarou grabbed the nape of the girl’s dress and lifted her up, heading for the front door as she dangled in the air.</p>

      <p>“It’s time for kids to go home, so stop playing around here and scram.”</p>

      <p>“Let go! Just because I’m a kid doesn’t mean you can— Hey, wait! You’re touching me! But how?!”</p>

      <p>The girl struggled to break free, but the difference in their strengths meant her efforts were to no avail.</p>

      <p>“No ifs, ands, or buts! Just go home!”</p>

      <p>“But you couldn’t even touch me this morning! You just passed through!”</p>

      <p>“You’re not making any sense. Seriously, just go home. I’ve been through a lot today, so I’m tired.”</p>

      <p>Koutarou threw the girl outside and promptly closed the door.</p>

      <p>“Jeez, for someone to just break in like that... I’ll need to make sure I lock the door from now on.”</p>

      <p>With a click, Koutarou locked the door and sighed to himself as he returned to the inner room.</p>

      <p>“What did you do that for?!”</p>

      <p>“Huh?”</p>

      <p>However, as he entered, he found the girl he had just thrown out. Her face was beet red with anger as she glared at Koutarou. But because of her short stature, she looked more cute than anything.</p>

      <p>“How did you get in here again?”</p>

      <p>Koutarou took a quick look at the window, but it was still locked. Besides, there wasn’t enough time for her to run around the building to get there.</p>

      <p>“I passed through the wall, obviously.”</p>

      <p>“You passed through the wall?”</p>

      <p>Koutarou stared at the wall behind the girl, but all he saw was the newly replaced white wallpaper.</p>

      <p>“I don’t see any holes.”</p>

      <p>“Of course not! I’m a gho—”</p>

      <p>“Oh, I get it! It’s one of those magic tricks, right?!”</p>

      <p>Koutarou’s eyes started sparkling. He had seen magicians pass through walls on TV, so he was now completely under the impression this young girl was a magician.</p>

      <p>“Huh?”</p>

      <p>“Do it again! Show me again!”</p>

      <p>“Whaaat?! A-Again?! How can you touch me? No one’s been able to do that before!”</p>

      <p>“Come on, don’t be so stingy! Do it one more time.”</p>

      <p>And so the girl was thrown out again.</p>

      <p>“Kyaah! H-Hey you! Just listen for a minute!”</p>

      <p>“Come on, just do it!”</p>

      <p>Plead as she might, Koutarou wasn’t listening to her at all. He was thoroughly convinced she was some genius child magician.</p>

      <p>“Kyaaaaah!”</p>

      <p>“I’m begging you!”</p>

      <p>Koutarou slammed the door shut and locked it. He couldn’t wait to see how the girl would get back inside. But that was when the most unexpected thing of all happened.</p>

      <p>“Would you give it a break?!”</p>

      <p>“Whoa!”</p>

      <p>Suddenly the girl’s face popped out from the closed door, as if a hole just for her head had appeared.</p>

      <p>“You often get told you don’t listen very well, don’t you?!”</p>

      <p>“Wh-What are you— How did you...?!”</p>

      <p>And as Koutarou looked on, the girl’s entire body passed through the door.</p>

      <p>“Move out of the way.”</p>

      <p>“Kyaah! Again?!”</p>

      <p>Koutarou forcibly pushed the girl aside and examined the door, yet there wasn’t so much as a scratch on it. He couldn’t find anything that would have let her get through.</p>

      <p>“How did you do that?!”</p>

      <p>“All right! You’re surprised! That’s what I’ve been waiting for!”</p>

      <p>Koutarou finally reacted the way the girl had been hoping for. This pleased her greatly, and a smile crept across her lips.</p>

      <p>“...Oh, right. I’m supposed to get happy.”</p>

      <p>“Just who are you? How did you get in?”</p>

      <p>The girl just grinned.</p>

      <p>“I told you already. I passed through the wall. And I’m Sanae. Higashihongan Sanae”</p>

      <p>“Sanae...?”</p>

      <p>“I’m the ghost that’s been living in this room.”</p>

      <p>Hearing the girl say that surprised Koutarou even more than when she had passed through the door.</p>

      <p>“Whaaaaat?! A gh-ghost?!”</p>

      <p>“You can’t believe it? But a normal person couldn’t do this, right?”</p>

      <p>“Y-You can fly?!”</p>

      <p>“Of course I can. I’m a ghost.”</p>

      <p>Sanae floated up towards the ceiling and grinned as she looked down at the astonished Koutarou. As Koutarou hadn’t noticed her at all before, she was quite happy now.</p>

      <p>“A ghost... I heard the stories from Landlord-san, but to think there really was one...”</p>

      <p>In contrast, Koutarou was rather surprised. While he had heard the stories from Shizuka, he didn’t think he’d see anything for himself. However, with Sanae before his very eyes, he had no choice but to believe it. A normal person couldn’t pass through walls or float in the air.</p>

      <p>“So you’re the ghost that’s been haunting this room?”</p>

      <p>“It looks like you finally get it. That’s right! I’m the true master of this room.”</p>

      <p>“Which means you’re the one that chased out all the previous tenants?”</p>

      <p>“Yeah. This is my home after all.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert3">
    <img alt="insert3" class="insert" src="../Images/Insert3.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter32">
    <div class="main">
      <p>Sanae gently landed on the floor as she spoke.</p>

      <p>“...If you’re a ghost, then why do you have legs?”</p>

      <p>“What does it matter? Forget that! That’s not what should be surprising you!”</p>

      <p>“Even if you say that... I can clearly see, hear and touch you, you know? I thought you were just some normal kid until I saw you go through the door.”</p>

      <p>Because of that, Koutarou was able to stand before Sanae without panicking. She just looked like a normal girl to him.</p>

      <p>“Th-That’s right! Why can you sense me all of a sudden?”</p>

      <p>“What are you talking about?”</p>

      <p>“You didn’t notice me yesterday even when I stood right in front of you or screamed into your ear! You even passed right through me!”</p>

      <p>“Even if you ask me...”</p>

      <p>The short of it was that Sanae had been around Koutarou since yesterday, watching him constantly.</p>

      <p>“I don’t really get it either. The only thing out of the ordinary that happened today was that I slipped and hit my head,” Koutarou continued, turning around to point to the bump on the back of his head.</p>

      <p>“You hit your head and now you can see ghosts?! Enough with the nonsense.”</p>

      <p>“Look who’s talking, you paranormal anomaly!”</p>

      <p>“Ugh...” Sanae flinched a little as she realized the position she was in. “S-So what? Now that you can hear me, we can get down to business!”</p>

      <p>“You’re the one who brought it up!”</p>

      <p>“Shut up! Shut up!”</p>

      <p>“So, what business?”</p>

      <p>Sanae regained her cool at Koutarou’s question and began grinning again.</p>

      <p>“That’s obvious. This is my home, so get out.”</p>

      <p>“Well now that’s a bold declaration.”</p>

      <p>“It’s not bold. It’s perfectly normal.”</p>

      <p>As Sanae spoke, strange energy began crackling around her as if she was discharging small bolts of lightning.</p>

      <p>“And if I say no?”</p>

      <p>“Nothing really... I’ll just do what I always do.”</p>

      <p>Sanae pointed her hand at Koutarou and a suspicious light wavered at the tips of her fingers. It was what one would call a will-o’-wisp, but Koutarou had no knowledge of that.</p>

      <p><em>This girl wants to fight...</em></p>

      <p>However, sensing that Sanae was ready to throw down, he readied himself.</p>

      <p>“But for some reason, I’m in top form today, so hitting you with this will do more than just surprise you!”</p>

      <p>The light at Sanae’s fingers grew larger. It went from the size of a firefly to nearly the size of a baseball.</p>

      <p><em>Getting hit by that would be bad...</em></p>

      <p>He didn’t know what the light was, but his intuition told him it was dangerous. He gulped at the realization.</p>

      <p><em>Even though she’s a ghost, I can touch her, so it’s not like I can’t fight back.</em></p>

      <p>As Koutarou was normally quick to pick a fight, he clenched his fists as he resolved himself.</p>

      <p>“What a coincidence. I’m in top form today too.”</p>

      <p>“Heh, then bring it on... Wahahaha!”</p>

      <p>“Bwahahaha!”</p>

      <p>As laughter and tension filled the room, things were about to get serious.<br/><br/></p>

      <p>The sound of a delivery truck passing Corona House served as the gong for the fight.</p>

      <p>“Eat thiiiiis!”</p>

      <p>Sanae threw the ball of light at Koutarou.</p>

      <p>“Whoa!”</p>

      <p>But Koutarou was quick to drop low, and the ball passed by right where his face had been. It flew straight into the wall and disappeared with a sound like a heavy clap.</p>

      <p>“You’re surprisingly fast!”</p>

      <p>“And that’s not all!”</p>

      <p>Koutarou charged at Sanae. Being a small room, he quickly reached her.</p>

      <p>“Haaaaah!”</p>

      <p>Using his momentum, Koutarou swung his right hand forward.</p>

      <p>“Kyaaaaah!”</p>

      <p>But Sanae was on her toes too, dodging by passing through the wall behind her—a fitting maneuver for a ghost. Koutarou’s fist just grazed the ends of her hair.</p>

      <p>“That’s right, she is a ghost. But I can hit her. I’ve got this.”</p>

      <p>As Koutarou processed what had happened, Sanae entered the room once more.</p>

      <p>“That was dangerous!”</p>

      <p>“I don’t want to hear that from you!”</p>

      <p>“It’s a given for ghosts to attack residents! Counterattacking is against the rules!”</p>

      <p>“Like I care about those rules!”</p>

      <p>“Either get wrecked or get out!”</p>

      <p>“Not a chance! I’ve finally found this place to live!”</p>

      <p>Koutarou didn’t want to burden his father who had finished raising him on his own. A room with a monthly rent of 5,000 yen was something Koutarou could afford on his own with just the money from his part-time job. The only problem was the ghost after him right now. Koutarou wasn’t going to leave just because of that.</p>

      <p>“As if I’d leave because of some ghost! This place is critical to enjoying my high school life!”</p>

      <p>“I don’t care about that! Get out! This is my home!”</p>

      <p>Sanae’s hands began glowing as balls of light formed in either one. She was going to throw both of them at Koutarou.</p>

      <p>“So you’re finally getting serious...”</p>

      <p>Koutarou took a stance.</p>

      <p>“These aren’t the same as before.”</p>

      <p>Sanae meant the two balls of light in her hands. They were indeed slightly larger than before. Not only would dodging them be harder, they now had more power. As Sanae implied, they were more dangerous.</p>

      <p>“As if I’d let you try that!”</p>

      <p><em>In that case, I just have to keep her from attacking!</em></p>

      <p>Koutarou made a snap decision and rushed towards Sanae with an outstretched hand.</p>

      <p>“Kyaah?!”</p>

      <p>“I’ve got youuuuu!”</p>

      <p>Koutarou grabbed ahold of Sanae’s left arm with his right hand, causing her to drop one of the balls onto the tatami mat. Like before, the ball hit the floor and disappeared with a loud clap.</p>

      <p>“These can be used for more than just throwing!”</p>

      <p>“Uwah!”</p>

      <p>Not missing the opening created while Koutarou was distracted by the falling ball, Sanae thrust the ball of light in her right hand at Koutarou. Koutarou tried to dodge it, but it wasn’t enough.</p>

      <p>“Guwah!”</p>

      <p>Again, the ball made a loud clapping noise as it disappeared, but this time it slammed hard into Koutarou. It was like receiving an electric shock.</p>

      <p>“I did it! I dunno why, but I really am in top form today!”</p>

      <p>“Guh...”</p>

      <p>Koutarou fell back and landed on his rear from the impact.</p>

      <p>“And now for the finisher!”</p>

      <p>Sanae formed two more balls of light in front of Koutarou, who was still on the ground.</p>

      <p>“You’ll be sent to the hospital, and I’ll take back my room!”</p>

      <p>“Y-You selfish...!”</p>

      <p>Koutarou had been hit pretty hard and he could barely move. As he watched on helplessly, Sanae merged the two balls into a single large one.</p>

      <p>“If you had just left to begin with, you wouldn’t have to suffer like this!”</p>

      <p>The orb that Sanae was holding overhead grew bigger still, to roughly the size of a dodgeball.</p>

      <p>If the ball from before was enough to leave Koutarou stunned, the power of this required no explanation.</p>

      <p>“Not good! I’ll be killed!”</p>

      <p>Koutarou braced himself. It was all he could do to prepare for the incoming damage.</p>

      <p>“Nyahahahaha—”</p>

      <p>However, Sanae’s triumphant laughter was interrupted by a small explosion at her feet.</p>

      <p>“Kyaah!”</p>

      <p>The explosion sent her flying and put her head through the wall. At the same time, the ball of light that Sanae had created collided with the wall, causing a loud bang that was powerful enough to send a chill down Koutarou’s spine.</p>

      <p>“Owowow!”</p>

      <p>Sanae pulled her head out of the wall and shook it a little. This time, it was her turn to be staggered.</p>

      <p>“...What did she step on?”</p>

      <p>Koutarou had seen the explosion at Sanae’s feet. Trying to find the source, Koutarou crawled over to the spot where the explosion had taken place.</p>

      <p>“I see! So this is what she stepped on!”</p>

      <p>“Safe delivery.” “Academic success.” “Traffic safety.”</p>

      <p>Koutarou discovered the protective charms he had gotten from his grandmother. He had taken them out of a moving box, but left them lying on the floor. Sanae just happened to walk over them.</p>

      <p>“That’s right! You’re a ghost after all! You’re weak to protective charms!” Koutarou snatched up the charms.</p>

      <p>“Haha! The tables have turned!”</p>

      <p>“Feh...”</p>

      <p>Sanae got up and sneered at the charms in Koutarou’s hand.</p>

      <p>“T-To think you’d have something like that...”</p>

      <p id="note4">“And that’s not all! From charms to maneki nekos<sup><a href="../Text/chapter1title.xhtml#note4">4</a></sup>, there’s no shortage of protective goods in this room!”</p>

      <p>It wasn’t just charms he’d gotten from his grandmother. In hopes of Koutarou passing his high school entrance exams, she had sent in bulk all kinds of blessed items thought to bring good luck.</p>

      <p>“Feh, just how virtuous are you?!”</p>

      <p>“Hahaha! It’s because of all my good deeds! God is watching over me!”</p>

      <p>Koutarou slowly approached Sanae with the charms thrust out towards her.</p>

      <p>Sanae, who had been on the offensive all this time, was now gradually being pushed towards the entrance with a bitter look on her face.</p>

      <p>“Hyah!”</p>

      <p>Sanae threw three will-o’-wisps at Koutarou.</p>

      <p>“It’s no use!”</p>

      <p>But as soon as they touched the charms in Koutarou’s hand, they seemingly melted away.</p>

      <p>“It’s not working?!”</p>

      <p>“Stupid! As if there’s a charm that couldn’t block a ghost’s attack! Don’t underestimate the ‘family safety’ charm!”</p>

      <p>Koutarou grinned at Sanae and took a step closer.</p>

      <p>“Now it’s your turn to get out, ghost!”</p>

      <p>“There’s no way I’m leaving! I have to wait here no matter what!”</p>

      <p>“Too bad I’m calling the shots now!”</p>

      <p>“This isn’t over yet!”</p>

      <p>As Sanae shouted, objects from around the room started floating in the air around her. Cardboard boxes, a dictionary, a case filled with personal effects... All kinds of things rose up into the air.</p>

      <p>“Take this! Poltergeist Attack!”</p>

      <p>“Gah!”</p>

      <p>The random objects floating around Sanae were sent flying towards Koutarou all at once, and the charms had no effect against them. Despite Koutarou’s attempt to flee, several objects crashed into him.</p>

      <p>“Owowow! What are you doing?!”</p>

      <p>“Nyahahaha! It looks like these work just fine!”</p>

      <p>“You’re going to kill me hitting me straight on like that!”</p>

      <p>“Stupid! That’s exactly what I’m planning on!”</p>

      <p>“Damn it!”</p>

      <p>“Here’s another!”</p>

      <p>Sanae began lifting nearby articles from Koutarou’s luggage into the air once more.</p>

      <p>“As if I’ll just lie down and take a beating!”</p>

      <p>Koutarou picked up his treasured bat that was lying right in front of him. He was going to use that to protect himself against the airborne objects.</p>

      <p>“In a room this small, just how long do you think you’ll last against my attacks with that?”</p>

      <p>Sanae quickly sent several objects flying at Koutarou.</p>

      <p>“Hmph!”</p>

      <p>Koutarou swung his bat vertically to knock them out of the air.</p>

      <p>“Too slow, ghost! They might as well be flying in slow-motion!”</p>

      <p>“Curse you!”</p>

      <p>Sanae made several more objects float.</p>

      <p><em>Five more again, huh?</em></p>

      <p>In total, there were five objects floating in the air now. Her previous attacks had also consisted of five objects.</p>

      <p><em>It looks like her limit is five at a time...</em></p>

      <p>Without lowering his guard, Koutarou readied his bat to fend off the next attack.</p>

      <p>“Hmm?”</p>

      <p>That was when the dictionary floating to the right of Sanae fell to the floor.</p>

      <p>“That’s...”</p>

      <p>Next to the dictionary was the maneki neko. Koutarou suspected that the dictionary had become inert when it got too close to it.</p>

      <p><em>I guess I should give it a try.</em></p>

      <p>As Koutarou made up his mind, he grabbed one of the charms he was holding together with the bat. It read “safe delivery.”</p>

      <p>“Hyah!”</p>

      <p>Koutarou then threw it towards Sanae.</p>

      <p>“Uwah?!”</p>

      <p>Seeing that, Sanae quickly brought the floating objects together in front of her to protect herself. The charm hit the makeshift shield and fell to the tatami mat.</p>

      <p>“Don’t scare me like that!”</p>

      <p>“This will scare you even more!”</p>

      <p>By the time Sanae recovered, Koutarou had already picked up the maneki neko.</p>

      <p>“Wh-What will...?”</p>

      <p>“This guy!”</p>

      <p>Koutarou thrust the maneki neko out towards Sanae, and their eyes met.</p>

      <p>“A cat?”</p>

      <p>“Look around you.”</p>

      <p>“Huh?!”</p>

      <p>The objects circling around Sanae fell to the floor one after another.</p>

      <p>“It looks like you can’t make things fly next to this guy.”</p>

      <p>“You and your stupid blessed items!”</p>

      <p>Sanae grit her teeth in frustration and hurriedly escaped towards the entrance. As she did, she lifted more of Koutarou’s belongings into the air around her.</p>

      <p>“Then I’ll just attack you from a distance!”</p>

      <p>Sanae flung a plastic tissue box at Koutarou. Only throwing one object this time, it had terrific momentum behind it.</p>

      <p>“It’s no use!”</p>

      <p>As the tissue box got close to Koutarou, it stalled and fell to the floor.</p>

      <p>“How?!”</p>

      <p>Once it got close enough to the maneki neko, the tissue box lost the power supporting it. It made it as far as Koutarou’s feet with the momentum it had behind it, but it lacked the power to do any damage.</p>

      <p>“It looks like the tables have turned again, ghost!”</p>

      <p>Koutarou laughed, full of confidence.</p>

      <p>“S-So what? I still haven’t lost!”</p>

      <p>“None of your attacks can reach me. But I can still attack you!”</p>

      <p>Koutarou brandished the maneki neko and protective charms as he boasted.</p>

      <p>“Hmph! They’re no big deal as long as I don’t get close.”</p>

      <p>“But that means you won’t be able to chase me out. That’s why I win, ghostie!” Koutarou triumphantly declared his victory. “You don’t stand a chance now, so just give up and leave. Or better yet, pass on!”</p>

      <p>“No way! Why should I have to? You leave!”</p>

      <p>With the boost to Koutarou’s defenses thanks to the maneki neko, the battle had reached a standstill. Both Koutarou and Sanae lacked a decisive measure to defeat the other.</p>

      <p>All of Sanae’s attacks were blocked by the maneki neko. While smaller, lighter objects might reach Koutarou with her Poltergeist Attack, they would hardly deal any damage. And the larger, heavier objects would be deflected by the maneki neko before they ever reached him. Moreover, Sanae couldn’t get near the maneki neko herself, so she couldn’t attack Koutarou directly either.</p>

      <p>At the same time, Koutarou was unable to defeat Sanae. He could touch and grab her, or throw his charms to knock her back. However, Sanae could freely move through walls, making his attacks ineffective. The problem was exacerbated by Sanae keeping her distance in order to avoid the maneki neko. And most troubling of all was that Koutarou didn’t have any way of exorcising her. Even if he were to throw her out of the room or oust her with the charms, she’d be back right away.</p>

      <p>“What is your obsession with this room anyway?”</p>

      <p>“What does it matter?! Either way, I have no intention of leaving! This is my home!”</p>

      <p>Sanae hurled some crumpled up paper at Koutarou, but he easily caught it and threw it right back at her.</p>

      <p>“Jeez, you’re such a child.”</p>

      <p>“I couldn’t act like a ghost if I wasn’t childish!”</p>

      <p>“Ain’t that the truth...”</p>

      <p>“Don’t treat me like some idiot!”</p>

      <p>“You’re the one who suggested it!”</p>

      <p>Thus, having lost any practical means of attack, the room was decisively split in half as the two continued their quarrel despite the stalemate. While someone would throw crumpled paper at the other from time to time, the actual attacks had stopped.</p>

      <p>“In that case, it’s a test of spirit! I won’t stop until you give up. And don’t think for a minute that I’ll let you get any sleep, either!”</p>

      <p>“Do your worst! My iron will was forged by baseball. When it comes to spirit, I’m unbeatable. Besides, not being able to sleep will go both ways!”</p>

      <p>“You’re not cute at all!”</p>

      <p>“Neither are you!”</p>

      <p>And so they stared each other down for hours, well into the morning. It wasn’t long before the doorbell rang.</p>

      <p>“Hmm? Huh?”</p>

      <p>“Who would bother us at a time like this?!”</p>

      <p>Following the doorbell was loud knocking.</p>

      <p>“Get up, Kou! You’ll be late for the entrance ceremony!”</p>

      <p>Finally, Koutarou recognized the voice of his childhood friend, Kenji, coming from the other side of the door.</p>

      <p>“It’s Mackenzie.”</p>

      <p>“Mackenzie? Oh, the cute boy with the glasses.”</p>

      <p>“Crap! It’s already morning?”</p>

      <p>Looking at the clock on the wall, Koutarou’s eyes shot open wide. It was already 7:30 AM. As the school was twenty minutes away, Koutarou had to leave by 8 AM to make it on time. And since today was the entrance ceremony, getting there earlier would be for the best.</p>

      <p>“I can’t just sit around here!”</p>

      <p>“Ah, hey, wait!”</p>

      <p>“We’ll continue this when I get back! I have to go to school to first!”</p>

      <p>Koutarou slid open the wardrobe and pulled out his uniform and school bag.</p>

      <p>“Hey, Kou! Are you awake?”</p>

      <p>“I’m up, I’m up! I’ll be right there!”</p>

      <p>“Oh, you really were awake.”</p>

      <p>Koutarou shoved the maneki neko and various charms into his bag and hurriedly began changing.</p>

      <p>“Wait! Shouldn’t we settle this before you go to school?”</p>

      <p>“I don’t have the time for that! We’ll do it later! I’m living here so I can go to school! Besides, who would believe me if I told them I didn’t show up for the first day of school because of a ghost?”</p>

      <p>“Whaaaaat?!”</p>

      <p>Sanae started sulking. She puffed out her cheeks and glared at Koutarou.</p>

      <p>“Don’t start acting up when I’m gone, okay? We’ll settle this when I get back.”</p>

      <p>“I got it. I don’t want to start trouble here either.”</p>

      <p>“...You <em>are</em> the trouble though.”</p>

      <p>“You’re the one who’s trouble! I didn’t have any problems before this!”</p>

      <p>“Yeah, yeah. Sure. Just sit tight until I get back, okay?”</p>

      <p>Sanae reluctantly nodded.</p>

      <p>“Fine. Just don’t waste any time and hurry back.”</p>

      <p>“Yeah.”</p>

      <p>Thus they entered into a temporary truce until that evening.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter4title">
    <img alt="chapter4title" class="insert" src="../Images/ChapterTitle4.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter4">
    <div class="main">
      <h1>Hmm... Commence Invasion?</h1>

      <h2>Monday, April 6th</h2>

      <p>“Haaahh...”</p>

      <p>Koutarou let out an audible yawn.</p>

      <p>“You look sleepy, Satomi-kun.”</p>

      <p>“I didn’t get much sleep last night.”</p>

      <p>“That’s awfully rare for you, Kou.”</p>

      <p>Koutarou, Kenji, and Shizuka were walking to school together. They were all wearing their brand new uniforms and carrying brand new bags. Soon enough, they would be attending Kisshouharukaze High School’s entrance ceremony.</p>

      <p>“Yeah, just some stuff, you know?”</p>

      <p>“Did something happen, Satomi-kun?”</p>

      <p>Shizuka was asking, not as a landlord, but as a concerned friend. The day before yesterday, her tone had changed with Koutarou when she went from calling him Satomi-san to Satomi-kun. Koutarou, who wasn’t good with formal speech, welcomed this development.</p>

      <p>“Actually, Landlord-san, the you-know-what appeared.”</p>

      <p>“What?! You don’t mean...?!”</p>

      <p>“The ghost?!” Kenji clamored.</p>

      <p>“Yes. I couldn’t believe it at first either, but that was definitely a ghost.”</p>

      <p>Shizuka and Kenji were shocked by Koutarou’s answer.</p>

      <p>“So that’s why it was a bit noisy yesterday...”</p>

      <p>“Are... Are you okay, Kou?!”</p>

      <p>“Calm down, Mackenzie. It’s not that big of a deal. A ghost appeared and some weird paranormal stuff happened. That’s all.”</p>

      <p>“O-Okay... If you say so.”</p>

      <p>Kenji was relieved to see that Koutarou was his usual self. The truth was that he didn’t do well with scary stories.</p>

      <p>“But are you okay, Satomi-kun? Do you think you’ll be able to keep living there?”</p>

      <p>Being the landlord of Corona House, Shizuka shared Kenji’s worries and then some. If Koutarou moved out now, Corona House’s reputation would sink even further.</p>

      <p>“It’s okay, Landlord-san. Like I said, it’s not a big deal. I’ll settle things tonight.”</p>

      <p>“I see. You’re so dependable, Satomi-kun.”</p>

      <p>“Leave it to me. I’ll take care of it.”</p>

      <p>As Koutarou pounded his chest and boasted, Shizuka flashed a smile. She looked both relieved and happy, which reaffirmed Koutarou’s decision not to back down.</p>

      <p>“But to think there really was a ghost...”</p>

      <p>“I was surpri— Huh?”</p>

      <p>As Koutarou smiled wryly at Kenji, he noticed the shadow of someone peeping at them from a nearby utility pole.</p>

      <p>“What’s wrong?”</p>

      <p>“Look. Over there. There’s a girl, and she’s staring right at us.”</p>

      <p>“You’re right. What’s with that outfit? It’s really flashy...”</p>

      <p>“It might be rude to say, but... How is she not embarrassed to walk around in that?”</p>

      <p>The girl peeping at the three friends appeared to be about their age. Most of her body was concealed by the utility pole, but they could tell how ostentatious her outfit was just from the parts sticking out from behind the pole. She was wearing a colorful, frilly dress that looked like it came straight out of an anime.</p>

      <p>“Ah...”</p>

      <p>Although they couldn’t hear her voice, the way her mouth moved made it obvious what she had said. Immediately after that, she turned tail and ran, vanishing around a nearby corner.</p>

      <p>“What was that?”</p>

      <p>“Who knows...?”</p>

      <p>As Koutarou and Kenji looked on in confusion, they could hear the sound of a collision coming from around the same corner the girl had just turned.</p>

      <p>“Kyaaah!”</p>

      <p>“You idiot! Don’t just jump in front of a bike like that!”</p>

      <p>“I’m sorry! I’m so sorry! It wasn’t on purpose!”</p>

      <p>“And what’s with that outfit? If you’re gonna play, do it somewhere else!”</p>

      <p>“I’m sorry! I’m so sorry! I’m not playing! This is part of my job!”</p>

      <p>The next thing they heard was a quarrel breaking out.</p>

      <p>“What was that?”</p>

      <p>“Who knows...?”</p>

      <p>“I wonder if it was that girl.”</p>

      <p>The three classmates kept walking, approaching the nearby corner.</p>

      <p>“Sheesh, who knows what kids are thinking nowadays...?”</p>

      <p>However, by the time they peeked around the corner, all they could see was a middle-aged man picking his bike back up. The girl from before was nowhere to be seen.</p>

      <p>“It had to have been that girl that jumped out and got hit by the bike,” Kenji concluded as they walked past.</p>

      <p>“I see! As expected from Mackenzie! ...I wonder if she’s all right though.”</p>

      <p>Koutarou took a glance back at the corner they had passed.</p>

      <p>“I’m sure she’s fine, Satomi-kun. If not, she would have probably still been lying on the ground.”</p>

      <p>“You have a point there.”</p>

      <p>Koutarou had been worried, but smiled at Shizuka’s reassurance.</p>

      <p>“But still, that girl sure was strange...”</p>

      <p>“It’s spring, you know?”</p>

      <p>“Now that you mention it, the strange ones do seem to come out in droves this time of year, don’t they?”</p>

      <p>And so they continued to school as if nothing had happened.<br/><br/></p>

      <p>After getting through the entrance ceremony and their first homeroom class, Koutarou dragged his feet to his part-time job. He then worked roughly a seven hour shift into the evening. After that, both Koutarou and Kenji were exhausted by the time they reached Corona House.</p>

      <p>“I’m just going to jump into bed for today.”</p>

      <p>“I wish I could do the same.”</p>

      <p>Koutarou sighed as Kenji got on his bike.</p>

      <p>“Make sure you get some sleep. You fell asleep in the middle of the entrance ceremony after all.”</p>

      <p>“Yeah, I will. See you, Mackenzie.”</p>

      <p>“Later.”</p>

      <p>Koutarou and Kenji waved at each other before they both departed. Koutarou was headed for his own room, and Kenji was headed to the station.</p>

      <p>“...Well then, it’s time to get down to business.”</p>

      <p>Koutarou glanced over his shoulder at Kenji and slapped his cheeks to pump himself up.</p>

      <p>“What the—?!”</p>

      <p>As Koutarou opened the door, he found his belongings piled up by the front door. Most of the furniture he’d put in the inner room had been moved to the door too.</p>

      <p>“It’s to prepare you for moving out, and to serve as a barricade to protect from intruders.”</p>

      <p>Sanae grinned as she poked her head through the pile of luggage.</p>

      <p>“Yeah, sure. Just move, will ya?”</p>

      <p>“Oh come on!”</p>

      <p>But as Koutarou brandished his bag, Sanae disappeared into the inner room. His bag was still stuffed with the charms and the maneki neko.</p>

      <p>“Jeez, what a childish thing to do... Oh, right, you are a child.”</p>

      <p>Koutarou removed his shoes and climbed over the pile while complaining. Fortunately, he’d only moved in with enough stuff for the small apartment, so there wasn’t all that much, and getting over it wasn’t particularly difficult.</p>

      <p>“If you don’t want to put up with childish antics, then just hurry up and get out! Waiting around is boring! Besides, you said you were just attending the entrance ceremony, so why are you so late?!”</p>

      <p>“My bad. I had work after the entrance ceremony. Unlike you, I have to earn my keep. I don’t want to cause too much trouble for my old man.”</p>

      <p>Koutarou picked up the TV and followed after Sanae into the inner room.</p>

      <p>“Hmm, so you’re doing your best too...”</p>

      <p>“That’s why I refuse to walk away from a cheap room like this.”</p>

      <p>“But I’m going to make you leave.”</p>

      <p>As the inner room was completely empty now, Koutarou sighed and carried the TV over to the antenna outlet.</p>

      <p>“All right, next is...”</p>

      <p>After setting down the TV, Koutarou walked past Sanae and headed back to the front door to get the next piece of furniture.</p>

      <p>“Hey, you can just do that later, right? What about our discussion? Besides, you might have to leave soon anyways!”</p>

      <p>“Listen, ghost, if you want to talk, help me put my stuff back. I’m not talking about anything until this room is back in order.”</p>

      <p>“Jeez, fine...”</p>

      <p>Sanae reluctantly followed after Koutarou.</p>

      <p><em>She can be quite obedient from time to time...</em></p>

      <p>Watching Sanae reluctantly helping him, Koutarou realized that she might not be all that bad.<br/><br/></p>

      <p>“Is there anything else?”</p>

      <p>“No, this is the last of it.”</p>

      <p>Sanae shook her head and answered Koutarou’s question as she levitated a cardboard box through the air.</p>

      <p>“I see.”</p>

      <p>Hearing that, Koutarou stopped moving towards the entrance.</p>

      <p>“All right, hand over that box, Sanae.”</p>

      <p>“‘Sanae’...?” she stammered.</p>

      <p>Koutarou reached out to take the box from Sanae, but for some reason, she was staring at Koutarou in amazement with tears starting to form in her eyes.</p>

      <p>“What’s wrong?” Koutarou asked as he noticed, but Sanae quickly wiped her eyes.</p>

      <p>“It’s nothing! I just got some dirt in my eyes!”</p>

      <p>“I see.”</p>

      <p>Being a ghost, there was no way she could actually get dirt in her eyes, but Koutarou didn’t give it so much as a second thought.</p>

      <p>“Come on, give it over, Sanae.”</p>

      <p>“O-Okay.”</p>

      <p>Sanae floated the cardboard box over to Koutarou, which he then carried over to the still open wardrobe.</p>

      <p>“He called me Sanae...” Sanae muttered sheepishly as she watched Koutarou walk away.</p>

      <p>Nobody had called Sanae by her name ever since she had become a ghost several years ago. The sentiment alone kept her from attacking Koutarou, despite how defenseless he was with both hands full, and with the charms and the maneki neko so far away. She simply gazed at his back with a mysterious emotion welling up in her heart.</p>

      <p>“That should do it.”</p>

      <p>Closing the wardrobe, Koutarou turned back to Sanae.</p>

      <p>“Hmm? What’s wrong?”</p>

      <p>Koutarou realized she hadn’t moved.</p>

      <p>“I-It’s nothing! Th-That’s right, we need to settle things!”</p>

      <p>“Oh, yeah, right.”</p>

      <p>Koutarou had been so focused on reorganizing the room that he’d almost forgotten.</p>

      <p>“I have no intention of leaving this—”</p>

      <p>As Koutarou was about to make his declaration, he was abruptly interrupted by his window breaking.</p>

      <p>“Kyaah!”</p>

      <p>“What?!”</p>

      <p>Surprised, both Koutarou and Sanae looked at the window as something shot through it and flew into the room.</p>

      <p>“Kyaaaaaaaaaaah!”</p>

      <p>That “something” fell flat on its face and rolled across the floor while screaming before finally coming to a stop as it crashed into the opposite wall face first.</p>

      <p>“Wh-What just happened?!”</p>

      <p>“I don’t even...”</p>

      <p>Koutarou and Sanae stared at each other briefly before looking at what had flown into the room.</p>

      <p>“Well, for starters, it’s a human.”</p>

      <p>“Yeah.”</p>

      <p>Lying there was a lone girl who looked to be about the same age as Koutarou. While she was pretty, her encounter with the wall had left a rather large bump on her forehead, making her appearance quite comical.</p>

      <p>“But what’s with this crazy outfit...?”</p>

      <p>“Isn’t she embarrassed to go out like that? You can almost see her breasts from here.”</p>

      <p>Koutarou and Sanae found the girl’s outfit odd. It was a colorful design with a lot of pink and primary colors. It was also quite revealing. Like Sanae said, the girl’s well-shaped breasts looked like they were about to spill out of her top. Moreover, the abundance of frills made her outfit look like a dress. But the strangest thing of all was the broom that she was straddling. While there was no doubt it was a broom, it certainly didn’t look like it was meant for cleaning. Just like the girl, it was brightly colored and ostentatiously decorated. It seemed to value design over function.</p>

      <p>“She looks like she’s from some kind of fairy tale, like the old witch with the poisoned apple... She’s just a lot younger.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert4">
    <img alt="insert4" class="insert" src="../Images/Insert4.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter41">
    <div class="main">
      <p>“She does have a witchy feel to her. But doesn’t that outfit look more like something an anime heroine would wear?”</p>

      <p>“So it’s cosplay?”</p>

      <p>“Gotta be.”</p>

      <p>And that was the agreement they came to. Surely this had to be an elaborate costume.</p>

      <p>“But why would a cosplayer come through the window?”</p>

      <p>“Who knows? Maybe because it’s spring?”</p>

      <p>“Spring... Oh yeah!” Courtesy of what Sanae said, Koutarou recalled the morning’s events. “Now that I think about it, she’s the girl I saw this morning!”</p>

      <p>“This morning?”</p>

      <p>“I saw her on the way to school. She was hiding behind a utility pole, so I can’t say for sure, but it’d be even weirder if there were multiple people walking around dressed like that. It’s gotta be her!”</p>

      <p>“So she’s been wearing that outfit all day?”</p>

      <p>“Definitely an oddball...”</p>

      <p>“Yeah...”</p>

      <p>The two looked at each other, completely amazed by the flamboyant girl before them.</p>

      <p>“So what do we do about this?”</p>

      <p>Sanae poked the girl lying unconscious by her feet, but she showed no response whatsoever. The lump on her forehead and her mouth hanging wide open made her look pretty miserable.</p>

      <p>“Well, we can’t just leave her like this. I’ll get out the futon. You go get some water.”</p>

      <p>“Yeah, sure.”</p>

      <p>And so Koutarou and Sanae put aside their differences to begin nursing the unconscious girl.<br/><br/></p>

      <p>The girl in question came to as Koutarou changed the cool washcloth on her forehead for the fourth time. Over three hours had passed, and it was now past 11 PM.</p>

      <p>“Mm, mmmm...”</p>

      <p>“Hey, it looks like she woke up.”</p>

      <p>“Really?”</p>

      <p>As Sanae called to him, Koutarou rushed back over to find the girl lying in his futon repeatedly blinking her eyes.</p>

      <p>“H-Huh...?”</p>

      <p>As her vision regained its focus, she was able to see Koutarou and Sanae standing there.</p>

      <p>“Yo.”</p>

      <p>“Good morning.”</p>

      <p>As Koutarou and Sanae greeted her, the girl blinked again.</p>

      <p>“Eh? Um... Huh?”</p>

      <p>She was unable to comprehend the situation.</p>

      <p>“Listen, you just flew through my window, hit the wall, and passed out a few hours ago,” Koutarou said, pointing at the window—which was now covered over with newspaper—and then at the wall.</p>

      <p>“We took care of you and cleaned up the shattered glass.”</p>

      <p>With Sanae’s addition to the explanation, the girl finally seemed to get her head around what was going on.</p>

      <p>“Auuugh! I-I’m sorry! I’m so sorry!” She hurriedly stood up and bowed repeatedly. “I didn’t mean tooooo!”</p>

      <p>Seeing her behavior, Koutarou was quite sure that this was the same girl from that morning. She had apologized the same way when she ran into the guy on the bike.</p>

      <p>“We would have thrown you out straight away if it had been on purpose... Whatever. But you’re paying for the repairs, okay?”</p>

      <p>“I’m sorry! I’m so sorry! I don’t have any money!”</p>

      <p>“Then come through the door! Why would you break through the window to get in?!”</p>

      <p>“I’m sorry! I was in a hurry!”</p>

      <p>Perhaps it was because she was being verbally assaulted by Sanae immediately after waking up, but the girl was on the verge of tears. Seeing that, and feeling badly for her, Koutarou decided to step in.</p>

      <p>“Don’t nag on her too hard, Sanae. There might have been a reason.”</p>

      <p>“But she broke my window!”</p>

      <p>“You can get angry later. Let’s start by hearing her out.”</p>

      <p>“But you never bothered to do that for me.”</p>

      <p>Sanae looked ready to erupt.</p>

      <p>“Ugh... A-Anyways... Let’s just listen to what she has to say.”</p>

      <p>“Fine, but don’t think this is over...”</p>

      <p>Sanae finally backed down after being dissuaded, and they both turned to the girl.</p>

      <p>“So what did you come to this apartment for? Or was it an accident or something?”</p>

      <p>“Uh, um...”</p>

      <p>The girl flinched as Koutarou and Sanae stared her down.</p>

      <p>“Isn’t this just part of her hobby?”</p>

      <p>“You just be quiet, Sanae.”</p>

      <p>“Hmph.”</p>

      <p>As Sanae turned away from Koutarou, the girl started slapping her cheeks.</p>

      <p>“Fight, Yurika! Fight!”</p>

      <p>After pumping herself up, her expression turned serious.</p>

      <p>“Actually, this room is in danger.”</p>

      <p>Her tone of voice and the look on her face were far more self-possessed than they had been before—a sign of how resolute she now was.</p>

      <p>“Danger? What danger?”</p>

      <p>“Explain already!”</p>

      <p>“There are people trying to steal this room for themselves.”</p>

      <p>“Steal it for themselves?”</p>

      <p>“Do you mean—”</p>

      <p>Koutarou and Sanae pointed at each other simultaneously.</p>

      <p>“Sanae?”</p>

      <p>“Koutarou?”</p>

      <p>“No, not me! This is my room after all!”</p>

      <p>“How rude! This is where I live!”</p>

      <p>The girl shook her head at the two who were now starting to argue.</p>

      <p>“No, I’m not talking about you two.”</p>

      <p>“Huh? You’re not?”</p>

      <p>“Waaait, you don’t mean Koutarou?”</p>

      <p>“That’s right. It’s a completely different group,” the girl clearly declared and nodded.</p>

      <p>“Who are they? Are they after this cheap room too?!”</p>

      <p>“O-Or are they just after this beautiful ghost?”</p>

      <p>“...Like that would ever happen.”</p>

      <p>“What do you know?! You are so rude!”</p>

      <p>“It’s neither one. These people are after the abnormal amounts of power concentrated in this room. So please hurry and escape! It’s dangerous here! They’ll surely be here in a few days!”</p>

      <p>“Power? Danger?”</p>

      <p>“What’s all that supposed to mean?”</p>

      <p>The girl’s alleged explanation left Sanae and Koutarou astonished. To them, it was nothing but nonsense.</p>

      <p>“Explain it in more detail. Even if you tell me to leave, I won’t agree to it just because you said so.”</p>

      <p>“Yeah. For starters, what’s this power you’re talking about?”</p>

      <p>“I want to know too.”</p>

      <p>As they demanded answers, the girl broke eye contact and tried to look elsewhere.</p>

      <p>“U-Um, you could call it naturally occurring power, or, um, a supernatural power...”</p>

      <p>The girl’s voice lost all sense of determination, and she began to stumble over her words. Beads of sweat formed on her forehead and she forced herself to smile nervously.</p>

      <p>“Aha, ha, ahahahaha...”</p>

      <p><em>What? Should I not have asked?</em></p>

      <p>That was the impression the girl’s fake laugh left on Koutarou.</p>

      <p>“That kind of explanation doesn’t help at all. Don’t use vague words like ‘power.’ Explain yourself properly!”</p>

      <p>“D-Do I have to?”</p>

      <p>“Yes. It might be hard to say, but I’m ready to accept just about anything after today.”</p>

      <p>“But you wouldn’t listen to me!” Sanae cried.</p>

      <p>“It’s <em>because</em> I believe you now that I want to hear what she has to say.”</p>

      <p>“D-Don’t think I’m crazy or that I’m kidding, okay?”</p>

      <p>The girl’s uneasy gaze shifted back and forth between Koutarou and Sanae.</p>

      <p>“Don’t worry.”</p>

      <p>“Fine, I promise.”</p>

      <p>“O-Okay. Then I’ll tell you.”</p>

      <p>The girl nodded and gulped. After looking at Koutarou and Sanae once more, she finally opened her mouth again.</p>

      <p>“Actually, the power in this room is...” The girl began her explanation, but her voice quickly grew smaller and smaller so that the essential part couldn’t be heard.</p>

      <p>“The power is what?”</p>

      <p>“We can’t hear you.”</p>

      <p>“L-Like I said, the power filling this room is ma...”</p>

      <p>She looked like she really didn’t want to say it. As she fell silent again, she blushed and looked down.</p>

      <p>“Don’t worry. We won’t laugh at you, so just tell us.”</p>

      <p>“Yeah. Nothing will happen until you do.”</p>

      <p>As Koutarou and Sanae encouraged the girl, she finally made up her mind.</p>

      <p>“Yurika, fight! Yurika, fight!”</p>

      <p>The girl gave herself another pep talk and raised her head, cheeks still blushing. She stared straight at Koutarou and Sanae, and with large and exaggerated gestures, she began her explanation over.</p>

      <p>“Please listen! Actually, there is a vast amount of magical power concentrated in this room!”</p>

      <p>“Huh?”</p>

      <p>“M-Magic?!”</p>

      <p>“If the mana here continues to increase, it will definitely catch the attention of magical girls who would use it for evil! If that happens, this room will become a battlefield! So please run away! If possible, right now!”</p>

      <p>The girl swung her broom around in her hand and loudly declared, “I’m the princess of love and courage, Magical Girl Rainbow Yurika! I will protect the peace of this town!”</p>

      <p>Koutarou and Sanae both spaced out for a moment as they beheld the girl’s oddly perfect pose and beautiful voice.</p>

      <p>“Well, what can you say...? Right, Sanae?”</p>

      <p>“I know exactly what you want to say. This must be the worst possible development we could have imagined.”</p>

      <p>“It is spring after all.”</p>

      <p>“Yeah, that must be it.”</p>

      <p>Having recovered from their stupor, the first thing Koutarou and Sanae did was look at each other and sigh.</p>

      <p>“H-Huh? What? What are you talking about?!”</p>

      <p>“No, it’s nothing. Nothing at all. We were just saying how much warmer it’s gotten now that it’s spring.”</p>

      <p>“That’s right.”</p>

      <p>As he said that, Koutarou grabbed ahold of Yurika, the girl in a flashy outfit.</p>

      <p>“What? Why are you grabbing me?!”</p>

      <p>“No reason. No reason at all.”</p>

      <p>Koutarou smiled at Yurika, then promptly lifted her up and headed straight for the front door.</p>

      <p>“That’s right. No reason at all.”</p>

      <p>Sanae smiled as well, using her Poltergeist power to carry Yurika’s broom.</p>

      <p>“Huh? Wait, where are we going?”</p>

      <p>“That’s for you to decide!”</p>

      <p>Reaching the entrance, Koutarou opened the door and threw Yurika out.</p>

      <p>“Kyaaaaah!”</p>

      <p>Yurika fell flat on her face and tumbled all the way to the concrete wall around the Corona House grounds before finally stopping.</p>

      <p>“Here! You forgot this.”</p>

      <p>Sanae followed up by throwing the broom at Yurika.</p>

      <p>“Kyah!”</p>

      <p>Unfortunately, the broom hit Yurika in the head, but Koutarou and Sanae acted as if they hadn’t seen anything.</p>

      <p>“Phew...”</p>

      <p>“Good grief.”</p>

      <p>Quickly shutting the door, both Koutarou and Sanae sighed.</p>

      <p>“It’s spring after all.”</p>

      <p>“Is it because this winter was so cold?”</p>

      <p>“Yeah. It did get warm all of a sudden and everything...”</p>

      <p>At this point, Koutarou and Sanae were convinced that Yurika was just a cosplayer with a good imagination. Courtesy of Sanae, they were both perfectly understanding of paranormal phenomena, but magic and magical girls were in a different league entirely. Koutarou and Sanae both had at least a minimum amount of common sense.</p>

      <p>“Excuse me, please open the door! Please listen to what I have to say! And why did you throw me outside all of a sudden?!”</p>

      <p>Vigorous protest and intense banging could be heard from the other side of the door. Yurika hadn’t left like Koutarou and Sanae had hoped she would.</p>

      <p>“Keep it down, cosplay woman! If you want to hold a cosplay party, do it somewhere else!”</p>

      <p>“You heard him! It’s because of people like you who are so inconsiderate of other people and their surroundings that all cosplayers get a bad rap! Why don’t you think about what you’ve done here?”</p>

      <p>With a final, weak knock, Yurika quieted down. But she was far from silent. Instead, she began speaking in a low, sobbing voice.</p>

      <p>“Waah... You don’t have to put it like that! You’re the ones who wanted me to tell you! You said you’d believe me, so I told you even though I didn’t want to! Please believe me! Waaaugh!”</p>

      <p>“Who would believe you when you’re running around in that kind of outfit and talking about magic?”</p>

      <p>“I... I already know that! I don’t like it either! Whenever I transform into this outfit, all the men stare at me! My chest and butt aren’t even fully covered!”</p>

      <p>Instead of a knock, there was something more like a scratching sound coming from the door now.</p>

      <p>“But the magical kingdom told me to wear this and act with confidence. Reception with civilians has been poor lately, so I have no choice!”</p>

      <p>As she got worked up, her voice gradually grew louder.</p>

      <p>“I already know that I’m not suited for this job and that nobody will believe me! But I’m not crazy! Waaah!”</p>

      <p>Her voice was now louder than it had ever been before as she started bawling.</p>

      <p>“Uwaaaaah! This is too cruel! Uwaah haaaaa! Open the door! It’s not fair! You have to believe meeeeeeee!”</p>

      <p>Despite the door between them, she was wailing so loudly that it sounded like she was right in the room with them.</p>

      <p>“Hahh...”</p>

      <p>Koutarou let out an exasperated sigh and put his hand on the doorknob. He was going to let Yurika back in.</p>

      <p>“Koutarou, do you really believe that idiot’s story?”</p>

      <p>“It doesn’t matter if I believe her or not. At this rate, it’ll bother the neighbors.”</p>

      <p>If Koutarou and Sanae could hear the crying this clearly, the other tenants probably could as well. Besides, it was already midnight. If this kept up, Koutarou would be the one getting thrown out.</p>

      <p>“I don’t agree to this at all.”</p>

      <p>“We don’t have much of a choice.”</p>

      <p>Koutarou let out one final sigh as he opened the door.<br/><br/></p>

      <p>“I-I’m not lying. I really am a magical girl. Waaah!”</p>

      <p>“I get it, so stop crying, okay?”</p>

      <p>“That’s right, Yurika. Your conviction is incredible. Not a lot of people can stay in character like that.”</p>

      <p>Even after returning to the inner room, Yurika was still crying. Koutarou and Sanae tried to comfort her, but it wasn’t going well.</p>

      <p>“So... So you believe me? That this place is in danger, and that magic is real?”</p>

      <p>“Th-That’s a little...”</p>

      <p>“I knew you didn’t believe me! You’re all talk! Uwaaaaah! You think I’m just some weirdo!”</p>

      <p>“Sanae, you idiot! It’s times like this that you should say you believe her, even if it’s a lie!”</p>

      <p>“Now hold on a minute! She’s talking about magic! No matter how far you stray from reality, magic isn’t real!”</p>

      <p>“Uwaaaaah! You’re telling her to lie to me! You really don’t believe me either! You’re just trying to trick me!”</p>

      <p>“Look! This is all because of your unnecessary remark!” Sanae shouted.</p>

      <p>“It’s not just my fault!”</p>

      <p>Yurika was crying her eyes out in the middle of the room while Koutarou and Sanae were getting flustered. The situation was getting more confusing by the minute.</p>

      <p>“Here, Yurika. Wipe your tears away with this, okay?”</p>

      <p>Sanae used her Poltergeist powers to float a nearby towel over to the crying Yurika. Seeing the towel right in front of her, however, Yurika suddenly stopped crying and her eyes opened wide.</p>

      <p>“M-Magic?! You can use magic too?!”</p>

      <p>“Huh? Me?”</p>

      <p>“Yes! This is magic, isn’t it?! Why don’t you believe me when you can use it too?!”</p>

      <p>Yurika’s expression brightened in an instant. She was thrilled to have found an unexpected comrade.</p>

      <p>“Oh, this? That’s because it isn’t magic.”</p>

      <p>However, Sanae bluntly denied it.</p>

      <p>“It’s not... magic?”</p>

      <p>Yurika repeatedly blinked in a surprised fashion. And as she did, the tears that had formed in her eyes started streaming down again.</p>

      <p>“This is just a supernatural phenomenon.”</p>

      <p>“A supernatural phenomenon?”</p>

      <p>“Yeah. I’m a ghost after all. Look.”</p>

      <p>Sanae stretched out the towel in mid-air and flew harmlessly through it.</p>

      <p>“Whaaaaat?!”</p>

      <p>Seeing that, Yurika was dumbstruck.</p>

      <p>“You’re r-really a gh-gh-ghost?!”</p>

      <p>“Yup. Just watch. Here, towel.”</p>

      <p>Sanae landed in front of Yurika, who watched on as the towel then passed through Sanae and floated right in front of her face.</p>

      <p>“...”</p>

      <p>“What?”</p>

      <p>Sanae stared at Yurika. She was holding stock still, but her eyes were open wide.</p>

      <p>“Ah, aah, auuugh...”</p>

      <p>Yurika blinked twice.</p>

      <p>“Hey, are you okay?”</p>

      <p>As Koutarou approached her with a worried look, Yurika suddenly began moving again.</p>

      <p>“Kyaaaaaaaah! Noooooooo! A gh-ghost! I can’t handle ghooooosts!”</p>

      <p>Yurika abruptly sprang up, grabbed ahold of her broom, and took a quick look around the room before making a mad dash for the wardrobe.</p>

      <p>“Wh-What?!”</p>

      <p>“H-Hey, what’s wrong?”</p>

      <p>“Please don’t possess me! I’m scared of ghosts! Possess him instead, pleeeeease!”</p>

      <p>Yurika jumped straight into the wardrobe and slammed the sliding door shut.</p>

      <p>“Don’t come near me! Don’t possess me! Nothing good will come from killing me! So please suck the life force out of that energetic boy over there instead!”</p>

      <p>The pitiful pleas continued from the wardrobe.</p>

      <p>“What’s up with that...?”</p>

      <p>“Wh-Who knows? She’s probably just scared of you.”</p>

      <p>Koutarou and Sanae just stood there staring at the wardrobe.</p>

      <p>“R-Right. That’s how people normally react when they meet a ghost. I had forgotten about that because of you.”</p>

      <p>“The previous tenants were like that too?”</p>

      <p>“Yeah, pretty much.” Sanae looked at Koutarou and nodded.</p>

      <p>“But is it really okay for the magical girl of love and courage to run away like that? She even tried to sacrifice you instead.”</p>

      <p>“Well, she is just a cosplayer after all. We can’t expect too much from her.”</p>

      <p>“Fair enough.”</p>

      <p>The two continued coldly staring at the wardrobe.</p>

      <p>“I’m sorry! I’m so sorry! You don’t have to believe in magic anymore! Please just don’t possess meeeee!”</p>

      <p>Unaware of how Koutarou and Sanae felt, Yurika desperately pleaded for her life.</p>

      <p>“What are we going to do about it?”</p>

      <p>“What else? We’ll just have to get her to come out.”</p>

      <p>“...Yeah.”</p>

      <p>Koutarou and Sanae both looked at each other and sighed heavily.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter5title">
    <img alt="chapter5title" class="insert" src="../Images/ChapterTitle5.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter5">
    <div class="main">
      <h1>Commence Invasion ♡</h1>

      <h2>Tuesday, April 7th</h2>

      <p>Tuesday, April 7th. The clock ticked passed 7:30 AM.</p>

      <p>“In the end, she never came out...”</p>

      <p>“Well, I doubt she’ll come out if you leave her alone with me.”</p>

      <p>Koutarou looked up from putting on his shoes, pausing to glance back at the inner room. Yurika hadn’t come out of the wardrobe once, despite repeated attempts to persuade her. She was scared and stubborn, and had flat out refused to budge. As the sun rose, Koutarou was willing to put his strange home problems on hold so he could go to school.</p>

      <p>“She’ll probably come out when she gets hungry.”</p>

      <p>“I hope so. But we’re not getting anywhere at this rate.”</p>

      <p>“You’re right about that.”</p>

      <p>Having finished putting on his shoes, Koutarou smiled and stood up. Sanae, who had been looking down at him, now had to look up.</p>

      <p>“Try to come home as fast as you can, okay?”</p>

      <p>“Yeah. I don’t have work today, so I’ll be home earlier than yesterday.”</p>

      <p>“Okay. Bye-bye.”</p>

      <p><em>I’m being seen off...</em></p>

      <p>“Yeah, see you later.”</p>

      <p><em>And saying goodbye...</em></p>

      <p>The two exchanged farewells despite fighting over control of the room. However, for some reason, it didn’t feel unnatural to either one of them. As Koutarou left the apartment, he spotted Kenji leaving his bike at the bike stall.</p>

      <p>“Sup, Mackenzie?”</p>

      <p>“Good morning, Kou.”</p>

      <p>After locking up his bike, Kenji walked over to Koutarou, who was in the middle of a yawn.</p>

      <p>“Huaaahh...!”</p>

      <p>“What? Not get enough sleep last night either?”</p>

      <p>“Something like that. It was just hard to sleep.”</p>

      <p>“The ghost again?”</p>

      <p>“That was part of it.”</p>

      <p>That was when Koutarou felt a minor shake.</p>

      <p>“Huh?”</p>

      <p>At first he thought it was because he was moving, but even after he stopped walking, he could still feel the shaking.</p>

      <p>“What’s wrong?”</p>

      <p>“Isn’t the ground shaking?”</p>

      <p>“Hmm? Oh, you’re right. It is shaking a little.”</p>

      <p>“An earthquake?”</p>

      <p>“Most likely. It’s probably not construction at this hour.”</p>

      <p>The boys looked down as they talked, but the shaking stopped after a few seconds.</p>

      <p>“Looks like it’s over.”</p>

      <p>“Well, that’s all there was to that, I guess.”</p>

      <p>“Good morning, Satomi-kun, Mackenzie-kun!” Shizuka’s voice joined in from above them.</p>

      <p>The boys looked up from the ground to see Shizuka. She was on the second floor of Corona House, in the middle of locking up her apartment.</p>

      <p>“Good morning, Landlord-san.”</p>

      <p>“Good morning, Kasagi-san.”</p>

      <p>“Lovely weather today, isn’t it?”</p>

      <p>Shizuka came down the stairs as they greeted her.</p>

      <p>“I’m sorry. Did I keep you waiting?”</p>

      <p>“Not at all, Landlord-san.”</p>

      <p>“I just got here too.”</p>

      <p>Today would be their first full day of classes at school. The three of them just happened to end up in the same class, so they decided to all walk to school together.</p>

      <p>“Oh good, then let’s go.”</p>

      <p>“Yeah.”</p>

      <p>“You got it. Still, Kou, you’re being awfully formal with Kasagi-san.”</p>

      <p>“You’re right, Mackenzie-kun. He insisted that I call him Satomi-kun, but he’s still calling me Landlord-san and speaking in such a stiff tone.”</p>

      <p>“It’s normal to hold your landlord in high regards.”</p>

      <p>“He was raised like that, so he’s always like this with anyone in authority.”</p>

      <p>“Oh my... Teehee!”</p>

      <p>And so the three of them headed to school together. <br/><br/></p>

      <p>Including the entrance ceremony, it was only the second day of school, so the classroom was still rather quiet. There was some talking here and there, but it was mostly students who had come from the same middle school. Overall, the class was practically silent. It would take a few more days before the new classmates got to know one another.</p>

      <p>“Satomi-kun!”</p>

      <p>But Shizuka’s voice rang out clearly in the quiet classroom. She was holding a small box and ran up to Koutarou and Kenji.</p>

      <p>“What’s the matter, Landlord-san?”</p>

      <p>“Teehee, please don’t call me Landlord-san at school, Satomi-kun. Oh, right! Here, this is for you.”</p>

      <p>“What is this?”</p>

      <p>Koutarou took the small box Shizuka handed him.</p>

      <p>“In middle school, I had a classmate who knew a lot about this kind of stuff. After I explained the situation to her, she gave me these.”</p>

      <p>Koutarou peeked inside the box to see notes, ropes, decorated sticks, and the like.</p>

      <p>“Tools for exorcism, huh?”</p>

      <p>Kenji, whose desk happened to be in front of Koutarou’s, snuck a peek too and piped up before Shizuka could.</p>

      <p>“Tools for exorcism?”</p>

      <p>Koutarou didn’t quite follow.</p>

      <p>“Yeah. Look at this. It has ‘evil spirits begone’ written on it, right?”</p>

      <p>“You’re right.”</p>

      <p>“Still, there’re tools from all kinds of religions here. Shinto, Buddhist, Christian, Islamic... Wow, there’s even voodoo stuff in here. It’s stuff from all over the world.”</p>

      <p>“Why would you give this to me, Landlord-san?”</p>

      <p>“Because you said the ghost appeared in your room. I thought this might help.”</p>

      <p>“Ah...”</p>

      <p>That was when Koutarou finally remembered that he was fighting with Sanae for control of the room.</p>

      <p><em>That’s right, we’re fighting over the apartment.</em></p>

      <p>With Yurika showing up, there hadn’t been any time to fight yesterday.</p>

      <p>“By the way, Kasagi-san, wouldn’t all of this be expensive?”</p>

      <p>“Well, Mackenzie-kun, these were close to their expiration dates, so I got them for free.”</p>

      <p>“Expiration dates? On exorcism tools?!”</p>

      <p>Hearing those bewildering words from Shizuka’s mouth, Kenji’s eyes opened wide in surprise.</p>

      <p>“Apparently. But since these are so close to expiring, I was told they should be used as soon as possible.”</p>

      <p>“To think the progress of civilization would even affect these kinds of things...”</p>

      <p>Kenji picked up a suspicious looking charm decorated with a dried reptile, and stared at the label attached to it. It read, “Expiration date: six months from the date of manufacture. For date of manufacture, please consult the packaging.”</p>

      <p>“We’re all done for...”</p>

      <p>That was Kenji’s honest impression.</p>

      <p>“This’ll help a lot, Landlord-san.”</p>

      <p>“I do hope it’ll be useful.”</p>

      <p>“Don’t worry. I’ll put it all to good use.”</p>

      <p>“Good luck, Kou. I’m rooting for you.”</p>

      <p>“You should help me out.”</p>

      <p>“No way. You know I hate that kind of stuff.”</p>

      <p>“Well, that’s true.”</p>

      <p>Kenji hated all things occult. Despite being knowledgeable, he was more scared of it than Koutarou. According to Kenji, he said his knowledge on the subject was what made him hate it so much.</p>

      <p>“All right, with this, I’ll...”</p>

      <p>That was when Koutarou realized it wasn’t just a ghost he needed to chase out of his room. There was also the self-proclaimed princess of love and courage, Magical Girl Rainbow Yurika—the girl who was way too into her cosplay hobby.</p>

      <p>“Hey, Mackenzie.”</p>

      <p>“I won’t help you no matter how many times you ask.”</p>

      <p>“No, not that. There’s something I want you to tell me.”</p>

      <p>“Hmm? What?”</p>

      <p>Seeing Kenji nod, Koutarou held up the box.</p>

      <p>“You’re supposed to exorcise ghosts with this stuff, right?”</p>

      <p>“Well, yeah.”</p>

      <p>“So what do you use to exorcise a cosplayer?”</p>

      <p>Koutarou was dead serious.</p>

      <p>“Are you stupid?! There’s nothing for that!”</p>

      <p>“Don’t say that. I’m being serious here.”</p>

      <p>Yesterday morning, his only problem had been a ghost. But today, there was a cosplayer added into the mix. This was an important question to Koutarou.</p>

      <p>“Good grief, cosplayers are just normal people. Don’t be stupid!”</p>

      <p>“Then you can just use force?”</p>

      <p>“Do whatever you want!”</p>

      <p>Kenji looked perturbed as he pushed up his glasses.</p>

      <p>“Hmm...”</p>

      <p>As Koutarou crossed his arms and began thinking, Shizuka, who had been watching them, started laughing.</p>

      <p>“Heeheehee! You two really do get along well.”</p>

      <p>“Only because we’ve known each other for so long.”</p>

      <p>“Don’t sound so disgusted by it, Mackenzie!”</p>

      <p>“Teehee. But the truth is that you don’t hate it at all, right, Mackenzie-kun?”</p>

      <p>“No, I definitely hate it.”</p>

      <p>“Oh, you’re not being honest, Mackenzie-kun!”</p>

      <p>“Landlord-san, this guy’s always trying to act tough.”</p>

      <p>“Kou! Are you picking a fight with me?!”</p>

      <p>“Ahahahahaha!”</p>

      <p>Shizuka’s happy laughter filled the classroom. But even while listening to it, Koutarou was thinking about something completely different.</p>

      <p><em>Do I really want to drive away Sanae?</em></p>

      <p>It was a sudden and completely unexpected hesitation.<br/><br/></p>

      <p>Once school was over and he finished up with classroom cleaning duty, Koutarou headed for the club building. There was a club or society assigned to each and every room. In fact, you could say it was an apartment building for the school’s clubs.</p>

      <p>“Well, it’s technically treated as a society, so...”</p>

      <p>The room Koutarou was headed for was in the south wing of the second floor. That was where the societies had been gathered.</p>

      <p>The area around the entrance to the building was busy since all of the sports clubs had their rooms there. However, as he walked further inside, there was little traffic and barely any noise. Koutarou’s footsteps could be heard from down the hallway.</p>

      <p>“Here it is.”</p>

      <p>Koutarou stopped in front of the room at the very back of the building. The knitting society. This was the society Koutarou had decided to join on the day the exam results were announced.</p>

      <p>Koutarou knocked on the door.</p>

      <p>“Hello?”</p>

      <p>The door was made from resin with an aluminum frame, so the sound carried through the entire hallway.</p>

      <p>“...C-Coming!” A slightly panicked voice replied.</p>

      <p>Shortly after that, the lock was undone and a girl popped her face out.</p>

      <p>“Who is— Oh!”</p>

      <p>The girl looked skeptical at first, but she relaxed after seeing Koutarou.</p>

      <p>“Hello, Senpai.”</p>

      <p>“Welcome, Satomi-kun.”</p>

      <p>It was Sakuraba Harumi, the president of the knitting society and the only member apart from Koutarou.<br/><br/></p>

      <p>To a complete beginner like Koutarou, even the most basic knitting technique was hard work. It involved using your fingers to wind yarn around the knitting needle in order to make loose knots. It was easy once you got the hang of it, but it was rather troublesome for Koutarou who was clumsy and bad at remembering things like this.</p>

      <p>“Senpai, what do I do here again?”</p>

      <p>“You pull to the right, and then loop it around here.”</p>

      <p>“Oh, right.”</p>

      <p>Koutarou would stop from time to time to look at how Harumi was doing before continuing. Despite his shaky technique and almost stabbing himself with the oversize needle a couple of times, Koutarou was actually knitting.</p>

      <p>“There’s no need to rush, Satomi-kun. You can do it slowly. Let’s just focus on practice for today.”</p>

      <p>“Y-Yes. I’m sorry I’m clumsy.”</p>

      <p>“Everyone’s like that at first. I don’t mind.”</p>

      <p>Harumi looked happy as she watched over Koutarou. She was normally shy and withdrawn, but she was able to come out of her shell a little while doing something she liked.</p>

      <p>“Was it the same for you too, Senpai?”</p>

      <p>“Yes. I’ve even stabbed my finger with the knitting needle before.”</p>

      <p>Harumi’s eyes partially closed as she reveled in nostalgia, but Koutarou wasn’t looking at her in that moment. If he had been, he probably wouldn’t have been able to get her smile out of his head for the rest of the day.</p>

      <p>“Do this like this, and... Haha, I feel more motivated after hearing that even you’ve failed, Senpai.”</p>

      <p>“Putting it like that sounds kind of mean. Heehee, but still, you haven’t stabbed your finger yet, so you might be better than I was back then.”</p>

      <p>“Ahaha, I’ll do my best.”</p>

      <p>Even while laughing, Koutarou was diligently moving the knitting needles without looking away from his hands.</p>

      <p><em>It sure is strange to think that someone like Satomi-kun would be this motivated to knit...</em></p>

      <p>Harumi, who was sitting next to Koutarou and watching over his progress, couldn’t help but feel it was odd. While Harumi herself enjoyed knitting, she knew that most people didn’t. She was under the impression that athletic types like Koutarou wouldn’t have any interest in it whatsoever.</p>

      <p>That’s why she thought Koutarou had only joined the knitting society to keep it from being disbanded, or worse. Although she scorned the thought, it was possible he had the same ulterior motives as the boy on recruitment day.</p>

      <p>“Senpai, when I pull the loops, is it all right to put some force into it?”</p>

      <p>“Oh, y-yes, that’s fine. But don’t pull it so hard that the sides become uneven. It’ll turn out poorly.”</p>

      <p>“I see. Got it.”</p>

      <p>“Good.”</p>

      <p><em>Why does he work so hard...?</em></p>

      <p>However, the reality was far from what she feared. Koutarou was earnestly toiling away, seriously trying to learn knitting. It was all just a bit mysterious to Harumi.</p>

      <p>“Um, Satomi-kun.”</p>

      <p>“Yes, what is it?”</p>

      <p>As Harumi said his name, Koutarou stopped moving his knitting needles and looked up at her. Meeting his gaze, Harumi’s normally shy and withdrawn personality started to show itself ever so slightly.</p>

      <p>“Do you mind if I ask you something?”</p>

      <p>“Of course not. Ask me anything.”</p>

      <p>“I-In that case...” Harumi steeled herself, took a deep gulp, and threw her question at Koutarou. “Satomi-kun, why did you decide to pick up knitting?”</p>

      <p>“Why?” Koutarou wasn’t sure what to say at first, so he just flashed an embarrassed smile and put his hand on his head. “It doesn’t suit me at all, right? Hahaha...”</p>

      <p>Koutarou was fully aware of how he must look to others.</p>

      <p>“Th-That’s not true! I was just wondering if this was boring for a boy...”</p>

      <p>Hearing Koutarou’s laughter, Harumi’s face turned red and she looked down. Looking at her like that, Koutarou decided to tell her a little bit about his circumstances. Harumi would surely understand. He also felt that it was only fair that she should know since she was teaching him.</p>

      <p>“I’ll tell you because you don’t look like the gossiping type.”</p>

      <p>“Satomi-kun...?”</p>

      <p>Harumi looked back up to see Koutarou with a much more serious expression than she had expected.</p>

      <p>“The truth is that I have a half-knit sweater at home.”</p>

      <p>“A sweater? I see...”</p>

      <p>When Koutarou said that, Harumi recalled what he had said when they first met.</p>

      <p><em>“Would it be possible for even a complete amateur to knit a sweater?”</em></p>

      <p>That was what Koutarou had asked her that day.</p>

      <p>“I want to finish it with my own hands one day. Hahaha, but who knows how long it’ll take before someone as clumsy as I am can do it?”</p>

      <p><em>That sweater must hold memories of someone important to him.</em></p>

      <p>That’s what Harumi felt as she looked at Koutarou’s smile. His embarrassed smile was oddly gentle.</p>

      <p><em>That’s why he’s working so hard. He wants to finish that sweater. I see, so that’s what it was...</em></p>

      <p>Upon learning his reason, Harumi was both relieved and truly happy.</p>

      <p>“I understand, Satomi-kun. I’ll make sure you’re able to finish that sweater.”</p>

      <p>“Really?!”</p>

      <p>“Of course!”</p>

      <p>Harumi was overjoyed that Koutarou was taking knitting seriously and, most of all, that she had found a true companion.</p>

      <p>“Let’s do our best together, Satomi-kun!”</p>

      <p>“Yeah!”</p>

      <p>Koutarou’s lack of skill was just a minor setback. That didn’t matter to Harumi at all.</p>

      <p><em>But I wonder who started that sweater...</em></p>

      <p>There was still a small, lingering doubt, but Harumi was quick to forget it.</p>

      <p><em>It doesn’t matter! Let’s do our best, Satomi-kun!</em></p>

      <p>She was satisfied just to have found a friend. To her, it was something truly worth celebrating.<br/><br/></p>

      <p>“I do this here, and...”</p>

      <p>Koutarou was reviewing what he had learned from Harumi while walking home. The sight of a boy strolling through the town while moving his hands suspiciously as the sun went down was surreal. However, Koutarou was serious. He moved his empty hands and continued his imaginary exercise.</p>

      <p>“Hmm?”</p>

      <p>As Koutarou returned to Corona House, he could hear a scraping sound coming from the garden.</p>

      <p>“I wonder what that is...”</p>

      <p>As Koutarou passed the concrete fence to the property, he spied Shizuka in her school uniform with an apron over top of it. She was also holding a large bamboo broom, apparently in the middle of cleaning up the garden.</p>

      <p>“Welcome back, Satomi-kun.”</p>

      <p>“Hello, Landlord-san.”</p>

      <p>Shizuka stopped what she was doing and smiled.</p>

      <p>“Taking care of the garden?”</p>

      <p>“Yes.”</p>

      <p>There was a pile of uprooted weeds at Shizuka’s feet. She had pulled them out and was currently gathering them with the broom.</p>

      <p>“I want to keep this place as beautiful as possible.”</p>

      <p>Shizuka smiled and wistfully looked up at the apartment building dyed red by the sunset. Corona House was beautiful. While the design was old-fashioned, the twenty-five year old building itself showed no signs of its age. That was all thanks to Shizuka, who never neglected its maintenance.</p>

      <p>“Landlord-san, you said that Corona House was a keepsake left behind by your parents, didn’t you?”</p>

      <p>Koutarou looked up at Corona House together with Shizuka.</p>

      <p>“Yeah, that’s right. That’s why I want it to stay like this for as long as possible, even though I’m sure that it will be demolished one day...”</p>

      <p>“Then I’ll make sure I do my part while I live here.”</p>

      <p>Koutarou understood how Shizuka felt. It was very similar to how he felt about finishing the sweater.</p>

      <p>“Thank you, Satomi-kun.”</p>

      <p>“Well, I do have to act cool from time to time.”</p>

      <p>“And it would have been quite moving, if only you hadn’t said that. Ahaha.”</p>

      <p>“Wahahaha.”</p>

      <p>As the two laughed, a small, blue light flew through the red sky.</p>

      <p>“Ah, a shooting star...”</p>

      <p>“You’re right.”</p>

      <p>The blue light was a shooting star with a long tail. The two of them just happened to be looking up as it passed by over Corona House.</p>

      <p>“...I hope that Satomi-kun doesn’t lose to the ghost.”</p>

      <p>Shizuka put her hands together and made a wish on the star. As Shizuka finished her wish, the shooting star disappeared.</p>

      <p>“I won’t lose to a ghost. Besides, I’ve gotten a bunch of exorcism tools from you.”</p>

      <p>“It’s just in case, Satomi-kun. Teehee.”</p>

      <p>“You don’t believe in me at all, do you...?”</p>

      <p>“I do believe in you.”</p>

      <p>“It sure doesn’t sound like it.”</p>

      <p>“My, my! Hahaha!”</p>

      <p>“Wahahaha!”</p>

      <p>But they were only able to carry on with each other so cheerfully because they were both blissfully unaware of what was about to happen.<br/><br/></p>

      <p>Standing in front of the door to room 106 and reaching into his pocket for his key, Koutarou heard voices coming from inside.</p>

      <p>“N-Noooooooo! Please don’t come any closer!”</p>

      <p>“Heh heh heh. It’s okay, isn’t it?”</p>

      <p>“I can’t stand ghosts!”</p>

      <p>“Come on! What’s the matter, Magical Girl Rainbow Yurika?”</p>

      <p>The voices belonged to a frightened Yurika and a gleeful Sanae.</p>

      <p>“...What are those two doing now?”</p>

      <p>Upon hearing them, Koutarou remembered that he’d left the door unlocked. He then put the key back into his pocket and opened the door.</p>

      <p>“P-Please save meeeee!”</p>

      <p>“Oh?”</p>

      <p>As he did, Yurika came flying out from the inner room. She immediately ran behind Koutarou and began trembling.</p>

      <p>“Gh-Ghost-san, i-if you’re going to possess someone, p-possess him instead!”</p>

      <p>“Hey, didn’t you introduce yourself as the magical girl of love and courage?”</p>

      <p>Koutarou was honestly astounded.</p>

      <p><em>Well, I guess she is just a cosplayer...</em></p>

      <p>As that thought ran through Koutarou’s mind, the other person in the room appeared.</p>

      <p>“Welcome home.”</p>

      <p>“Thanks.”</p>

      <p>Koutarou replied to Sanae as he stepped inside and removed his shoes. The trembling Yurika followed him in.</p>

      <p>“Sanae, don’t bully her too much. She’s got nothing to do with this, you know?”</p>

      <p>“B-But I do!”</p>

      <p>“I know she’s not involved, but I’m not gonna let her throw some cosplay party here!”</p>

      <p>“I’m not throwing a party! The evil magical girls... The enemy is coming!”</p>

      <p>“...I guess the party is soon?”</p>

      <p>“See? I’m doing us both a favor.”</p>

      <p>“Please listen to meeeee! I’m begging youuuuu!”</p>

      <p>“Sure, sure.”</p>

      <p>“We know, we know. Danger is approaching, right?”</p>

      <p>“It must be nice to get to play around all the time...”</p>

      <p>“It sure must be...”</p>

      <p>“Aaaaaahhh! You’re not listening at all!”</p>

      <p>Entering the inner room, Koutarou threw his bag into the corner of the room and turned to Sanae.</p>

      <p>“Sanae, let’s put this girl aside for now.”</p>

      <p>“Yeah, got it.”</p>

      <p>“Please don’t put me aside! I’m telling you that this is important!”</p>

      <p>“For starters, let’s settle things between you and me.”</p>

      <p>“Oh...” Sanae’s expression turned from a smile to a frown. “...Yeah. I have to throw you out of here too.”</p>

      <p>“Except since I’m not leaving, I have to exorcise you.”</p>

      <p>“That’s right. That’s what this was about.”</p>

      <p>Just yesterday, that was the only thing that had been on their minds. But for some reason, those feelings had faded quite a bit since then.</p>

      <p>“Please listen to me!”</p>

      <p>“Could you just be quiet? I don’t have time to play with you right now.”</p>

      <p>“Sorry, I’ll deal with you later.”</p>

      <p>“Nooooo! I don’t want to be dealt with by a ghost!”</p>

      <p>“...Do you want me to listen or not?”</p>

      <p>“Hey, Koutarou.”</p>

      <p>Sanae spoke in a soft, hushed voice. Since she was normally full of energy, it attracted Koutarou’s attention more than normal.</p>

      <p>“Yeah?”</p>

      <p>“Do you hate me?”</p>

      <p>“Huh?”</p>

      <p>“If you—”</p>

      <p>But just as Sanae was about to ask something...</p>

      <p>“Kyaaaaaaaah!”</p>

      <p>Yurika screamed as the tatami mat closest to the entrance of the inner room was sent flying. Naturally, as Yurika was standing on it, she went flying with it and landed face first on the other side of the room.</p>

      <p>“Why is it always meeeee?!”</p>

      <p>She then rolled...</p>

      <p>“Bwah!”</p>

      <p>...And she kept rolling until she slammed into the wall and stopped moving.</p>

      <p>“What?! What just happened?!”</p>

      <p>“Koutarou! Below the tatami mat! Somebody’s coming out!”</p>

      <p>“What?!”</p>

      <p>Koutarou, who had chased after the flying tatami mat with his eyes, looked back and saw a person crawling up from where the mat had been. In the floor boards underneath the mat, there was a round hole that was just large enough for a person to fit through.</p>

      <p>“It is a pleasure to meet you. My apologies for surprising you.”</p>

      <p>And now there was a girl crawling out of the hole. She appeared to be Koutarou’s age or slightly older. She was tall, with a proper and formal appearance. Her long, narrow eyes made her look rather composed.</p>

      <p>“My name is Kiriha. I am a descendant of the People of the Earth, born to the Kurano clan that presides over oracles and curses.”</p>

      <p>However, the strangest thing of all was the way she was dressed. She was wearing unusually old-fashioned clothing, complete with lots of adornments. It looked like an outfit the Ainu of old would wear, or something that might belong to a shrine maiden in ancient Japan.</p>

      <p>“Kiriha?”</p>

      <p>“What’s up with this one...?!”</p>

      <p>Koutarou, Sanae, Yurika, and now Kiriha. With that, there were now four people gathered in room 106.</p>

      <p><em>Why are people gathering in this room...?</em></p>

      <p>Koutarou was less concerned about Kiriha’s appearance, and more concerned with the increasing population of his apartment.</p>

      <p>Koutarou, Sanae, and Kiriha sat around the tea table set up in the middle of room. Yurika was still lying by the wall next to the window, unconscious and unmoving.</p>

      <p>“Allow me to introduce myself once more. My name is Kurano Kiriha. As Kurano is the name of my clan, I’d prefer it if you called me Kiriha.”</p>

      <p>“I’m Satomi Koutarou.”</p>

      <p>“I’m Sanae.”</p>

      <p>“Koutarou and Sanae is it. Although this will only be until I am done with my business here, it is nice to meet you.”</p>

      <p>Confirming their names, Kiriha politely bowed.</p>

      <p>“How courteous.”</p>

      <p>“N-Nice to meet you.”</p>

      <p>Urged on by Kiriha’s mannerly greeting, Koutarou and Sanae returned the bow.</p>

      <p>“First off, I would like to apologize. I am deeply sorry for appearing in such a way. However, as I didn’t want to raise any commotion, I had no choice but to do so.”</p>

      <p>“N-No, it’s all right. Please raise your head, Kiriha-san.”</p>

      <p>As Kiriha continued to bow politely, Koutarou started to feel like he should be the one apologizing.</p>

      <p>“I am grateful for your generosity. Thank you, Koutarou.”</p>

      <p>As Kiriha looked up, she had a smile on her lips. Her sincere attitude and amiable demeanor suppressed Koutarou’s wariness.</p>

      <p><em>Her clothes are strange and she’s being a bit formal, but it seems like I can hold a proper conversation with her...</em></p>

      <p>As his encounters with Yurika and Sanae had been nothing short of chaotic, Kiriha had so far left a very favorable impression on Koutarou.</p>

      <p>“Well, Kiriha-san, what kind of business do you have here? And why did you come from below—”</p>

      <p>“Hey, Koutarou!”</p>

      <p>“Whoa! Wh-What is it, Sanae?”</p>

      <p>Sanae suddenly stuck her dejected face in between the two of them and interrupted Koutarou mid-sentence.</p>

      <p>“Your attitude with her is completely different than how you deal with me or Yurika!”</p>

      <p>“Of course it is. The situation is totally different here.”</p>

      <p>“Aha! I can see right through you.”</p>

      <p>“Wh-Why are you looking at me like that?”</p>

      <p>“It’s because of those huge boobs, isn’t it?! You pervert!”</p>

      <p>“What? Kiriha-san’s breasts are large?!”</p>

      <p>“If you didn’t notice, you don’t have to look now!”</p>

      <p>An English-Japanese dictionary sent flying by Sanae’s Poltergeist powers hit Koutarou in the head.</p>

      <p>“...D-Don’t be so unreasonable.”</p>

      <p>“This is how we usually act!”</p>

      <p>“Then don’t get angry if I don’t hear you out!”</p>

      <p>“Grrrrr! I still feel like it’s unfair. Hmph! I don’t care anymore!”</p>

      <p>As Koutarou rebuffed Sanae, she looked away with a frown on her face.</p>

      <p>“...May I continue?”</p>

      <p>Kiriha had blankly watched the back and forth between Koutarou and Sanae with wide eyes, but when it appeared that they were done talking, she cleared her throat and straightened her posture.</p>

      <p>“I-I’m sorry, Kiriha-san.”</p>

      <p>“There is no need to be. I am the one being unreasonable, appearing at such a strange time and from such a strange place.”</p>

      <p>“I appreciate you saying that. But, Kiriha-san, let me ask again: What reason do you have for coming here? And why did you come from under the floor?”</p>

      <p>“In order for me to explain that, I’ll need to start by clarifying who I am.” Kiriha looked directly at Koutarou and began her explanation. “As you might guess from the name, the People of the Earth—my people—are people of this planet.”</p>

      <p>“Okay... But aren’t we all?”</p>

      <p>Koutarou didn’t understand what Kiriha was getting at and looked at her with a perplexed expression. Of course human beings came from Earth</p>

      <p>“I did not mean that we are from this planet. I meant that we live inside of it.”</p>

      <p>“What?! Are you saying your people live underground?”</p>

      <p>“That’s right. To make it easier for you to understand, calling us underground dwellers would be quite accurate. We live completely self-sufficiently under the surface of the earth.”</p>

      <p>“You can’t be...?!”</p>

      <p>“U-Underground dwellers?!”</p>

      <p>Sanae was just as taken aback as Koutarou. She turned back to stare at Kiriha.</p>

      <p>“What would someone like that want with us?!”</p>

      <p>Sanae slammed her hands down on the table and leaned forward towards Kiriha.</p>

      <p>“Calm down, Sanae. It’s still cramped in here because of all the luggage, so don’t move too much and make it worse.”</p>

      <p>“Ah, s-sorry.”</p>

      <p>Getting scolded by Koutarou, Sanae obediently sat back down.</p>

      <p>“Actually, my goal for coming here has nothing to do with you, but rather this building.”</p>

      <p>“What do you mean?”</p>

      <p>“Our tribe was originally native to the mountains of this region. However, as your ancestors started using metal in large quantities, they chased us out of the mountains so they could begin mining. We then had no choice but to live underground then.”</p>

      <p>“So that’s when you became underground dwellers?”</p>

      <p>“That seems to be the case. Apparently, those who initially went underground intended to return to the surface soon enough, but living underground was unexpectedly comfortable. About half of the people that took shelter underground decided to stay there. Those people would be my direct ancestors.”</p>

      <p>“Hmm...”</p>

      <p>Kiriha’s words were convincing considering she had literally come from underground. The hole in the floor seemed to be a passage that led further and further down.</p>

      <p>“Recently, we made a historical discovery.”</p>

      <p>“A historical discovery? What was that?”</p>

      <p>“A single book was discovered by chance. It contained a piece of information we have been looking for for many years. Specifically, the location of the altar where the souls of our ancestors are enshrined.”</p>

      <p>“So you came to the surface to search for that altar?”</p>

      <p>Kiriha responded to Koutarou’s question with a nod.</p>

      <p>“That’s right. However, as the location was precisely recorded, we already know where it is. There is not much searching to be done.”</p>

      <p>“Then your business is almost complete already?”</p>

      <p>“Good for you, Kiriha-san.”</p>

      <p>“It’s not that easy.”</p>

      <p>Kiriha sadly turned her gaze downward and shook her head.</p>

      <p>“We would love nothing more than to rebuild the altar. However, its location is a problem.”</p>

      <p>“Its location...?”</p>

      <p>“I have a bad feeling about this.” Sanae grimaced.</p>

      <p>“In fact, our altar would be the center of this very room.”</p>

      <p>What came out of Kiriha’s mouth was exactly what Sanae had been afraid of.</p>

      <p>“Which means, Kiriha-san...”</p>

      <p>“That’s right, Koutarou. Could you please relinquish this room to us? It is most important for the altar to be in this exact location.”</p>

      <p>“I knew it!”</p>

      <p>Sanae stood up in a hurry.</p>

      <p>“Of course I won’t give it to you! I won’t let you build some weird altar here!” she cried.</p>

      <p>She had no intention of letting anyone do anything of the sort.</p>

      <p>“I won’t forcibly evict you. Our tribe has its pride and traditions. We won’t just force our problems on you. We have prepared the necessary compensation for you to obtain another home... Karama, Korama, bring that over.”</p>

      <p>“Got it! Ho!”</p>

      <p>“Understood, Ane-san! Ho!”</p>

      <p>Two small figures appeared from the hole.</p>

      <p>“Wh-What are those?!”</p>

      <p id="note5">“H-Haniwa<sup><a href="../Text/chapter1title.xhtml#note5">5</a></sup>?”</p>

      <p>“Ho!”</p>

      <p>“Ho, ho!”</p>

      <p>There were two haniwas, each about thirty centimeters tall. They both had smooth surfaces and adorable faces. They were working together to carry a golden, glimmering lump of metal.</p>

      <p>“Hey!”</p>

      <p>“Ho!”</p>

      <p>“Hey!”</p>

      <p>“Ho!”</p>

      <p>Letting out strange cheers, they brought the lump of metal to the stunned Koutarou and Sanae.</p>

      <p>“Sooooo cuuuuute!”</p>

      <p>“Wh-What are they?!”</p>

      <p>“There’s no cause for alarm. These two are my servants. They are similar to the mechanical dolls your people use.”</p>

      <p>“Ho! I’m Karama, ho!”</p>

      <p>“Hello, ho! I’m Korama!”</p>

      <p>After setting down the metal lump in front of Koutarou, the two haniwas waved and greeted Koutarou and Sanae.</p>

      <p>“To think these are robots...”</p>

      <p>“Hello there, Karama-chan and Korama-chan!”</p>

      <p>Both Koutarou and Sanae were quite surprised. If Kiriha was telling the truth, the two haniwas were robots... but nothing about them seemed mechanical. Even though their bodies looked like pottery, their limbs moved freely. In contrast to their adorable appearance, they were apparently the byproduct of some extremely advanced science. Sanae, however, couldn’t see past their cuteness.</p>

      <p>“Mackenzie would fanboy over something like this.”</p>

      <p>“Koutarou, Sanae. That lump of metal is solid gold. Some platinum was mixed in during the casting process, though that shouldn’t lower its value. We offer you this as compensation if you are willing to leave this place.”</p>

      <p>“Th-This is incredible, Kiriha-san!”</p>

      <p>Koutarou was shocked to learn that the lump of metal in front of him was actually gold. Gold was worth a few thousand yen per gram, and this must have been at least ten kilos of it. In total, the hunk of metal before him was worth millions upon millions of yen. It was a staggering sum for just moving out of an apartment.</p>

      <p>“That is just how serious we are. If this causes you any inconvenience, we can exchange it to Japanese yen. How about it? Will you surrender this room to us?”</p>

      <p>“I’ve never seen such a big gold ingot... Wait, what am I doing? No way! Of course I won’t! This is my home after all! Koutarou, you say something too!”</p>

      <p>“Hmmm...”</p>

      <p>Sanae flat out refused, but Koutarou had his arms crossed and was in deep thought.</p>

      <p>“Hey! What are you thinking for?!”</p>

      <p>“Well, after hearing her circumstances, I was thinking that maybe I should cooperate with her.”</p>

      <p>“Koutarou! Are you sure?!”</p>

      <p>Kiriha’s expression lit up when she heard Koutarou’s response. She stood up, causing all the adornments attached to her clothes to jingle. Like the lump of metal, they were also made out of gold.</p>

      <p>“So now you’ve lost sight of yourself—not just because of her boobs, but because of money too?!”</p>

      <p>“You’re wrong! I can’t accept this kind of money! ...Well, if I move, I would need some cash. It would be pointless if I couldn’t afford living on my own after moving, after all.”</p>

      <p>“And you deserve to be compensated accordingly,” assured Kiriha.</p>

      <p>“When I told you to get out, you refused! Why are you listening to a woman with big boobs? Are big boobs that great?!”</p>

      <p>“Don’t make it sound like I’m some terrible person! It’s perfectly reasonable for me to think about cooperating with a perfectly reasonable person!”</p>

      <p>“What are you trying to say?!”</p>

      <p>Koutarou was genuinely starting to feel like it would be all right to cooperate with Kiriha. She had been very polite and had clearly explained herself. What’s more, she’d even offered him extremely generous compensation for moving. But on top of everything else, her reasons for wanting the room were completely rational. Reconstructing an altar like that, after all, was something similar to a grave. Koutarou had no reason to refuse someone who wanted to honor their ancestors.</p>

      <p>“Sanae, I know you want to stay in this room, but can’t you compromise somehow? An altar wouldn’t be an inconvenience even if you stayed here, right?”</p>

      <p>“Th-That’s... Well, I guess it wouldn’t, but...”</p>

      <p>Sanae peeked at Kiriha’s face. She had no reason to hate Kiriha apart from her large breasts. In fact, those were the only two reasons she was unhappy about Koutarou’s apparent persuasion.</p>

      <p>“So be more considerate. It’s not like she’s going to hold a cosplay party like Yurika.”</p>

      <p>“...Okay. I can deal with it.”</p>

      <p>Finally, Sanae gave in as well.</p>

      <p>“Oh?! So you’ll agree?! Koutarou, Sanae!”</p>

      <p>Kiriha’s expression grew even brighter.</p>

      <p>“Yes.”</p>

      <p>“I don’t really like it, but I don’t have a choice. It is what it is.”</p>

      <p>Sanae had decided that she could live with an altar.</p>

      <p>“Thank you! Both of you! With this, we’ll be able to move on to the second phase right away!”</p>

      <p>“Phase two?”</p>

      <p>“What’s that?”</p>

      <p>Koutarou and Sanae tilted their heads in confusion after hearing Kiriha’s words.</p>

      <p>“The surface invasion plan. Once we activate the altar, we’ll be able to effectively gather spiritual energy! And with that, we’ll be able to mass produce spiritual weapons like Karama and Korama.”</p>

      <p>“Wh-Whaaaaat?!”</p>

      <p>“A... A surface invasion?!”</p>

      <p>“Of course, you don’t have to worry. You two will be treated as guests, so there is nothing to fear.”</p>

      <p>Kiriha had interpreted Koutarou’s and Sanae’s surprise as worry for what would happen to them. Of course, that wasn’t the case.</p>

      <p>“Wait, what?! Hold on just a minute! You want to rebuild the altar where you ancestors have been enshrined so you can invade the surface?”</p>

      <p>“That’s right. What’s wrong all of a sudden, Koutarou?”</p>

      <p>Kiriha blinked repeatedly in confusion at Koutarou’s unexpected reaction.</p>

      <p>“No way, no how! I take it all back! I’ll never hand the room over to you!”</p>

      <p>“Well said, Koutarou!”</p>

      <p>“Koutarou! Why?! You were being so cooperative just a moment ago!”</p>

      <p>“I flat out refuse! I can’t shoulder the burden of cooperating with a surface invasion!”</p>

      <p>Just looking at Karama and Korama was enough for someone—even as ignorant of science as Koutarou was—to understand what a civilization with such advanced technology could do on the surface. He didn’t even want to imagine what would happen.</p>

      <p>“I thought that we could reach an understanding, but to hear you just casually say something so ridiculous...”</p>

      <p>“...I see. If you’re set in your ways, then I have another plan.”</p>

      <p>“What? Are you going to resort to using force?!”</p>

      <p>“Well, who knows?”</p>

      <p>Kiriha didn’t so much as flinch at Koutarou’s angry glare. Instead, her lips formed a suspicious smile.<br/><br/></p>

      <p>“Koutarou, the salt is in the red bottle on the shelf, right?”</p>

      <p>“Yeah.”</p>

      <p>“I thought so.”</p>

      <p>Koutarou was cutting up cabbage for dinner. Next to him was Kiriha, wearing an apron and skillfully shaking a frying pan while adding in salt.</p>

      <p>“Koutarou, do you prefer your food to be heavily salted or just lightly?”</p>

      <p>“Heavily, I guess.”</p>

      <p>“Heavily salted things are bad for your health. Let’s start gradually decreasing the amount starting today. You live on your own, so you have to take care of yourself.”</p>

      <p>Kiriha smiled placidly while stirring the frying pan. She was in the middle stir-frying vegetables. The cabbage Koutarou was cutting up would soon be added into the mix as well. Kiriha had washed the rice a little while ago, so the rice cooker was going in the inner room too. Koutarou’s dinner for today was rice and stir-fried vegetables with some meat mixed in.</p>

      <p>“Koutarou, is the cabbage done?”</p>

      <p>“Y-Yeah.”</p>

      <p>“In that case, put it in here.”</p>

      <p>Kiriha turned down the flame and beckoned Koutarou over. Carrying the bowl with the cabbage in it, he approached the gas stove.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert5">
    <img alt="insert5" class="insert" src="../Images/Insert5.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter51">
    <div class="main">
      <p>“I didn’t think you could cook, Koutarou.”</p>

      <p>“My old man couldn’t do anything on his own so...”</p>

      <p>Koutarou tossed the cabbage into the frying pan. It sizzled with a loud hiss as the moisture from the cabbage hit the hot oil. The unique sound made Koutarou a little nostalgic.</p>

      <p><em>How long has it been since I stood with someone in the kitchen like this?</em></p>

      <p>Koutarou was remembering being in the kitchen with his mother. She always smiled gently, much like how Kiriha was now.</p>

      <p>“Koutarou, next time you cut up the cabbage, you should make it thinner. It’ll be hard for you to eat it like this, right?”</p>

      <p>“...Yeah.”</p>

      <p>With the image of his mother still in his head, Kiriha’s smile had a profound impact on him. He obediently nodded his head.</p>

      <p>“Okay, Koutarou, prepare the plates. It’ll be ready soon.”</p>

      <p>“Okay.”</p>

      <p>Koutarou nodded once more and reached for the shelf.</p>

      <p>The sizzling of the frying pan and the clinking of tableware filled the room. The sound continued for a while longer before Kiriha turned off the gas stove. She then casually called out to Koutarou with a smile.</p>

      <p>“Koutarou, are the plates ready?”</p>

      <p>“They’re ready.”</p>

      <p>“Is the rice cooked?”</p>

      <p>“In another two minutes.”</p>

      <p>“I see. Koutarou, would you surrender this room?”</p>

      <p>“Su—”</p>

      <p>Asking in such a casual way, Koutarou almost nodded and agreed instinctively.</p>

      <p>“Whoa, that was close! Of course I won’t!”</p>

      <p>“I see. That’s a shame.”</p>

      <p>She mentioned taking over the room so nonchalantly that it was like it was completely normal. Because she skillfully timed her questions, Koutarou had accidentally almost agreed several times already.</p>

      <p>“I... I won’t fall for that kind of trick.”</p>

      <p>“You’re quite a tough opponent, Koutarou.”</p>

      <p>Although Kiriha had failed several times, she didn’t seem to mind.</p>

      <p>“Heh, it looks like this may be a drawn-out war.”</p>

      <p>It seemed that Kiriha was ready for a long battle.</p>

      <p>“What are you trying to do?”</p>

      <p>Koutarou was perplexed by her strange attacks. She wasn’t being unreasonable like Sanae, or repeating the same nonsense like Yurika. Her method of trying to get into Koutarou’s head and naturally push him to cooperate was more troublesome than both Sanae and Yurika.</p>

      <p>“I told you. We have our pride and traditions. Using force goes against both of those.”</p>

      <p>“Then why don’t you just give up on the surface invasion altogether?”</p>

      <p>“We’re just taking back what is rightfully ours. Like I said, we have our pride and traditions. We want to regain our territory, but we don’t hold a grudge against the people here. We know how painful it is to have something taken from you, so we won’t outright attack the people here. Our enemy is something much bigger.”</p>

      <p>“S-So what, do you think I’ll just agree to it?”</p>

      <p>The most troublesome thing of all was that Kiriha’s actions were very justifiable. It would have been much easier to resist if she were just a villain who tried to use force.</p>

      <p>“I’ll make you agree. We have plenty of time.”</p>

      <p>Kiriha pushed her well-endowed chest up against Koutarou and looked up at him provocatively.</p>

      <p>“Wh-Wha?!”</p>

      <p>Koutarou instinctively jumped back from her alluring gaze and the feeling of her large, soft breasts. His heart was pounding.</p>

      <p>“We have endured over a thousand years underground.”</p>

      <p>“S-So what?”</p>

      <p>“Heehee, it means that we have waited for a thousand years. But how long can you hold out? Half a year? Maybe a year? I will do whatever it takes to make you nod your head.”</p>

      <p>Kiriha nonchalantly blew a kiss at Koutarou.</p>

      <p>“Ugh...”</p>

      <p>Kurano Kiriha, the mysterious girl who had appeared from underground...</p>

      <p><em>She’s going to be tough...!</em></p>

      <p>At the current moment, she was Koutarou’s most dangerous enemy.<br/><br/></p>

      <p>“What’s with that? She’s just showing off her big boobs! And you, Koutarou! Why are you blushing at such an obvious ploy?”</p>

      <p>Sanae, who had peeked into the hallway to observe the situation, was furious. She also wanted to chase out Koutarou, but she had a strong, jealous dislike for Kiriha’s methods.</p>

      <p>“If you surrender the room over something like that, I will never forgive you!”</p>

      <p>In fact, Sanae was so focused on getting Koutarou to resist Kiriha that she’d already lost sight of her own objective.</p>

      <p>“U-Um, excuse me...” a voice suddenly called out to Sanae.</p>

      <p>“What?!”</p>

      <p>“Eeeeek! I-I’m sorry! I’m so sorry! It was my fault!” The meek voice belonged to Yurika, who had just woken up. She was frightened by Sanae’s aggressive attitude and began crying. “It was just on impulse! I just wanted to know what was happening!”</p>

      <p>“...Oh yeah, you’re here too.”</p>

      <p>“Noooooooo! My very existence has been forgotten!”</p>

      <p>“We’re in the middle of something important, so just stop crying... Jeez...”</p>

      <p>Sanae, who was floating in the air, landed in front of Yurika and did her frustrated best to explain the situation.</p>

      <p>“That woman came out from under the floor, but she’s trying to take over this room while leaving me out of it. She said something about making it a base for the underground people’s surface invasion.”</p>

      <p>“U-Underground people? Really?!”</p>

      <p>“You don’t have to be so surprised about people living underground. She’s much more proper than a weirdo like you.”</p>

      <p>“You’re wrong! That’s prejudice! Why won’t you guys believe me, even though you believe in underground people invading the surface?”</p>

      <p>“Try putting a hand on your chest and asking yourself that again.”</p>

      <p>“Chest...? Do you mean her breasts are the reason?”</p>

      <p>After looking down at herself, Yurika looked over at Kiriha and Sanae, then smiled in relief. She was happy she wasn’t in last place.</p>

      <p>“...Bring up boobs again and you won’t be around to see the sun rise tomorrow.” Sanae growled.</p>

      <p>“Kyaaaaah! I-I’m sorry! I’m so sorry! It’s all my fault!”</p>

      <p>Hearing Sanae’s threat, the frightened Yurika dove into the wardrobe and slammed the sliding door shut.</p>

      <p>“Jeez, everything’s becoming such a mess...”</p>

      <p>At first, Sanae thought all she had to do was chase out Koutarou. But the situation had gradually developed in unexpected directions.</p>

      <p>“Anyways, Koutarou, if you fall for that woman’s tricks, you’ll regret it!”</p>

      <p>Unexpected feelings began budding in her petite bosom. Still unaware of them herself, Sanae grit her teeth as she glared at Koutarou and Kiriha.<br/><br/></p>

      <p>Having finished laying out the dishes, Koutarou’s stomach growled.</p>

      <p>“Dinner at last...”</p>

      <p>It was only natural for his stomach to growl, considering it was now after 10 PM.</p>

      <p>“I’m sorry, Koutarou. It’s all because of me.”</p>

      <p>One of the reasons the dinner was late, Kiriha, sat down to the right of Koutarou.</p>

      <p>“If that’s what you think, get out.”</p>

      <p>“I can’t do that... By the way, Koutarou, why share the meal with me?”</p>

      <p>In front of Kiriha was a setting of stir-fried vegetables, meat, rice, and miso soup—just like in front of Koutarou.</p>

      <p>“I don’t like owing favors. I especially can’t afford to be careless around you.”</p>

      <p>“My, my, how harsh. It looks like I’ll have to start breaking you down from there.”</p>

      <p>Koutarou shared dinner with Kiriha because she had helped make it.</p>

      <p>“That woman only helped you so she could take the room from you, y’know? You don’t owe her anything for that. If anything, it’s the opposite.”</p>

      <p>Sanae sat across from Koutarou with a frown on her face. She didn’t like the sight of Koutarou and Kiriha getting along.</p>

      <p>“That’s not true. I only wish to deepen our friendshi—”</p>

      <p>“Hmph, we’ll see about that!” Sanae barked, cutting her off.</p>

      <p>Being a ghost, Sanae sat at the table without anything to eat.</p>

      <p>“Anyways, I think it’s better than instant noodles,” Yurika said as she poured hot water from the kettle into her instant noodles. With the high cost of living, even bargain sales on instant noodles still cost 98 yen. The pitiful sight of Yurika huddled over her dinner was enough to move one to tears.</p>

      <p>“...Do you want some too?”</p>

      <p>“Huh?!”</p>

      <p>It was even enough to make Koutarou feel a little more merciful.</p>

      <p>“A-Are you sure?!”</p>

      <p>“Y-Yurika! The water! The water is spilling!”</p>

      <p>“Kyaaaaah! I’m sorry! I’m so sorryyyyy!”</p>

      <p>Distracted by Koutarou’s offer, Yurika had let hot water overflow from her noodle cup. She put the kettle down on the tea table and hurriedly began wiping up the hot water with a dishcloth.</p>

      <p>“...You sure are hopeless...”</p>

      <p>“I’m sorry! I’m so sorry! I’m sorry for being clumsy and stupid!”</p>

      <p>“That doesn’t matter... But what are you going to do about dinner? Will you eat too?”</p>

      <p>“You’ll still share with me even after what I just did?!”</p>

      <p>The half-crying Yurika’s expression brightened and her hands moved at top speed to finish wiping up the water.</p>

      <p>“Yeah, you can have some.”</p>

      <p>“Thank you very much!”</p>

      <p>“Don’t thank me. Just leave after you’ve eaten.”</p>

      <p>Hearing that, Yurika’s smile vanished and her hands froze.</p>

      <p>“I-I can’t leave, so I’ll just have my noodles...”</p>

      <p>With a heavy sigh, Yurika’s shoulders drooped in disappointment. However, she continued staring at the meal in front of Koutarou like a hungry child.</p>

      <p>“...Looks like she’s regretting her decision.”</p>

      <p>“You don’t have to hold out. Go ahead and eat your fill, and then get out.”</p>

      <p>“Ah, aaaaahhh!” Yurika gulped hard. “Y-You can’t, Yurika! You can’t lose to this temptation! Yurika, fight!”</p>

      <p>Yurika desperately tried to persuade herself, but the smell of the delicious looking food continued to tempt her. Having only known the taste of the artificial seasoning of instant noodles recently, the temptation was unbearable. And so she continued staring at Koutarou’s food, almost to the point of drooling.</p>

      <p>“Just make it easy on yourself, Yurika. You only have to leave this apartment.”</p>

      <p>“Ah, aaaahhh! The rice and the miso soup are calling me! H-How cruel! This torture is just too much!”</p>

      <p>Yurika’s stomach growled loudly. Her body seemed to have already given in to the temptation.</p>

      <p>“Dinner, huh...?” Sanae, who had been watching the back and forth between Koutarou and Yurika, now looked at the food. “I haven’t eaten in years...”</p>

      <p>“What’s wrong, Sanae?”</p>

      <p>Koutarou noticed that something was off with Sanae, but she didn’t answer him right away. She only opened her mouth several seconds later.</p>

      <p>“Hey, Koutarou, Yurika... Either one of you is fine, but...”</p>

      <p>“What?”</p>

      <p>“Y-Yes? What is it?”</p>

      <p>Koutarou answered nonchalantly while Yurika answered nervously.</p>

      <p>“Would you let me possess you?”</p>

      <p>Sanae’s next words were unexpected.</p>

      <p>“Possess?”</p>

      <p>But the most unexpected part to Koutarou was how serious she seemed. That’s why he asked Sanae to explain herself.</p>

      <p>“N-Noooooooo!” However, Yurika didn’t share Koutarou’s feelings in the slightest. “I don’t want to be possessed by a ghost! If you’re going to possess someone, please possess Satomi-san!”</p>

      <p>Leaving her instant noodles behind, Yurika dove into the wardrobe and slammed the sliding door shut.</p>

      <p>“Well, you know, I’m a ghost, right?”</p>

      <p>“Yeah.”</p>

      <p>Neither Koutarou nor Sanae had expected anything from Yurika, so they carried on like nothing had happened.</p>

      <p>“That’s why even if I try, I can’t eat anything, right?”</p>

      <p>“Well, I guess offerings might be the best you could do.”</p>

      <p>“But if I possess someone, I can taste what that person eats.”</p>

      <p>“Sanae, that method works better between people whose auras have similar wavelengths. Wouldn’t it be better to possess me or Yurika instead?”</p>

      <p>Kiriha had been listening in and decided to interrupt.</p>

      <p>“That’s true, but you saw how Yurika is. And I refuse to do it with you, Kiriha!”</p>

      <p>“Why?”</p>

      <p>“If I become indebted to someone like you, I know I’ll regret it!”</p>

      <p>“Well, well. Aren’t I hated?” Kiriha drooped her shoulders and smiled wryly.</p>

      <p>“That’s how it is, so... Please, Koutarou!”</p>

      <p>“What’s in it for me if I do? Besides, I don’t want to get killed when you possess me.”</p>

      <p>“Please! I won’t kill you! I just want to be able to taste food again!”</p>

      <p>“...Really?”</p>

      <p>“Yeah!” Sanae looked up and intently nodded. “Okay, well, I think it might make your shoulders a little stiff too.”</p>

      <p>“Stiff shoulders? Now that you mention it, people possessed by ghosts do tend to say that, don’t they?”</p>

      <p>“Oh, and if you let me possess you during dinner, I wouldn’t mind a truce! It’s a good deal, right?! If your shoulders get stiff, I’ll even give you a massage!”</p>

      <p>“A truce, huh...?”</p>

      <p>That was an attractive proposition to Koutarou, as it meant that he would only need to chase out two people for the time being. It would also mean that the most aggressive of them all, Sanae, would stay calm for now.</p>

      <p><em>And all I have to do is put up with stiff shoulders... All right.</em></p>

      <p>“Okay. I’ll accept those conditions.”</p>

      <p>“Really?!”</p>

      <p>“Yeah. Come on, I’m ready.” Koutarou tapped on his shoulders.</p>

      <p>“Yay!” Sanae’s expression eased up as she jumped straight at Koutarou.</p>

      <p>“Whoa!”</p>

      <p>“Thanks, Koutarou!”</p>

      <p><em>Even if she calls herself a ghost, she’s almost like a kid. Well, I guess she is a kid...</em></p>

      <p>That was how Koutarou felt as he looked at Sanae.</p>

      <p>Shortly after, the wardrobe door slid open and Yurika appeared with a red face as she silently returned to the tea table.</p>

      <p>“...”</p>

      <p>Though she had come out because she sensed that the matter had been settled, she was ashamed of her own behavior.</p>

      <p>“So do I just eat like normal, Sanae?”</p>

      <p>“Oh, yeah. Just wait a minute! I’ll possess you now!”</p>

      <p>But as usual, neither Koutarou nor Sanae paid any attention to Yurika. Kiriha also only looked at the two of them, not giving so much as a glance in Yurika’s direction. Normally, she would have complained and told them not to ignore her, but this time she was actually grateful.</p>

      <p>“Hup!”</p>

      <p>Sanae moved around behind Koutarou and clung to him with her arms wrapped around his neck.</p>

      <p>“Go ahead, Koutarou.”</p>

      <p>“Is this what it looks like when you possess someone? It’s quite different from what I imagined.”</p>

      <p>Koutarou could feel Sanae’s small body against his back. She was warm, and he could feel her breath on his ear. She was weak to things like charms, she could pass through walls, and she had her Poltergeist Attack. There was no doubt that she was a ghost, but Koutarou was having a harder and harder time thinking of her as one.</p>

      <p>“Yeah! Eat up, Koutarou!”</p>

      <p>Unaware of Koutarou’s feelings, Sanae was in a cheerful mood.</p>

      <p>“All right. Thank you for the food.”</p>

      <p>“You’re welcome. Well, I guess that’s not something I should say.”</p>

      <p>“Hahaha, what does it matter?”</p>

      <p>With Sanae on his back, Koutarou began eating.</p>

      <p><em>I wonder why...?</em></p>

      <p>Strangely, he didn’t feel anything negative.</p>

      <p>“Ah, Koutarou, this is delicious!”</p>

      <p>“I am honored by your praise.”</p>

      <p>“Kiriha-san made that one.”</p>

      <p>“Hmm... For someone with such strange clothes, your cooking is pretty normal. But the taste is a bit too strong.”</p>

      <p>“You think so?”</p>

      <p>“See, Koutarou? Even Sanae agrees. We’ll start weakening the flavor starting tomorrow.”</p>

      <p>“Ugh...”</p>

      <p>Kiriha joined in as well, and they happily continued eating together.</p>

      <p>“...That looks delicious.” Yurika looked on in regret. “Compared to that, my instant noodles...”</p>

      <p>Yurika felt a sad emptiness as she peeled open the lid to her cup of instant noodles and the fragrance of artificial seasoning wafted up.</p>

      <p>“Ah...”</p>

      <p>Disappointed by the smell, Yurika’s hand twitched and she only tore the lid halfway off. She tried to remove the rest, but couldn’t manage to get the whole thing off. It only made her cup of instant noodles look even sadder.</p>

      <p>“Today has just been terrible...”</p>

      <p>As Yurika spoke, she snapped apart her disposable chopsticks in an uneven fashion, giving them different shapes.</p>

      <p>“Koutarou! Miso soup! Miso soup!”</p>

      <p>“I got it. Just calm down a little.”</p>

      <p>“Be careful, Koutarou. It’s hot.”</p>

      <p>Looking on at the three of them eating dinner so happily, Yurika reached into her instant noodles with her odd chopsticks.</p>

      <p>“Why is it always me?” While grieving, Yurika slurped up her cup of noodles alone. “They’re even soggy...”</p>

      <p>Today’s 98 yen instant noodles tasted saltier than usual.<br/><br/></p>

      <p>“Well then, now that we’ve eaten, let’s get back to business.”</p>

      <p>“Business?”</p>

      <p>Kiriha asked Koutarou what he meant as she poured some tea.</p>

      <p>“We’re talking about throwing you out.” Sanae chimed in.</p>

      <p>Even after eating, she was still clinging on to Koutarou. With her chin resting over his shoulder, she grinned at Kiriha.</p>

      <p>“Sanae, you want to keep living here, so you’re chasing everyone else out, right?” Koutarou asked.</p>

      <p>“Yeah. Well, you and I have a truce at the moment.”</p>

      <p>“All right. And Kiriha-san, you want this room so you can rebuild an altar.”</p>

      <p>“That’s right.”</p>

      <p>“And Yurika, you want to hold a cosplay party here with your friends.”</p>

      <p>“You’re wrong!”</p>

      <p>“Lastly, I live here, so I don’t want to move out. I can’t get a place like this anywhere else for just 5,000 yen. Besides, if I just hand this room over, there would be a lot of trouble.”</p>

      <p>If Koutarou moved out, rumors of there being a ghost would spread even further. Even worse, a surface invasion would begin or a cosplay party would be held.</p>

      <p>As Shizuka’s friend, Koutarou wanted to prevent that from happening. He understood why the place was so precious to her.</p>

      <p>“Please listen to me! There really is danger approaching!”</p>

      <p>“And not everyone wants to fight it out directly... even though I could hold my own in a fist fight.”</p>

      <p>“It’s not my intention to harm anyone.”</p>

      <p>“Yeah, and we have a truce.”</p>

      <p>“I’m not going to hold a cosplay party!”</p>

      <p>“And none of us have any intention of backing down.”</p>

      <p>“Of course not.”</p>

      <p>“This is my home!”</p>

      <p>“It’s dangerous! Everyone, please get out of here as fast as possible!”</p>

      <p>“That said, Koutarou, we need to settle this in some way. The prolonged negotiations with you aside, there are another two people here. At this rate, progress will come to a halt altogether. It’s clear the discussion isn’t getting us anywhere. That’s why we’ll need to resolve this swiftly with a method that everyone can agree on.”</p>

      <p>“Yeah, you’re right. But what should that method be?” Koutarou agreed with Kiriha and looked around.</p>

      <p><em>If only Mackenzie were here at a time like this...</em></p>

      <p>Thinking wasn’t one of Koutarou’s strong suits. In a situation like this, he’d love nothing more than to borrow Kenji’s brain. That said, he couldn’t just call the cops. If he brought up a ghost, the underground people, and cosplayers, they’d be more likely to take him to a mental institution. Koutarou couldn’t rely on outside help.</p>

      <p>“Please listen! I can’t accept this! Why am I the only one you won’t believe?! The magical power that’s gathering here is dangerous!”</p>

      <p>“Does anyone have a good idea? We need a method everyone can agree on.”</p>

      <p>“That’s a tough one...”</p>

      <p>“Hmm, a fair method, huh? Hey, Koutarou, how about this? We play some kind of game, and if you lose, you leave.”</p>

      <p>“Like I said, I can’t accept this! Please listen to meeeee!”</p>

      <p>“Deciding things fairly with a game is a good idea. There are many historical examples of competing over territory using games,” Kiriha agreed.</p>

      <p>“Wait up! I don’t want something this important to be decided by a game!”</p>

      <p>Kiriha was on board with Sanae’s idea, but the same could not be said about Koutarou. He knew that Kiriha was smart. And that he wasn’t.</p>

      <p>“So Koutarou, would you rather have us all fight it out? Or continue with an endless discussion?”</p>

      <p>“A fight... A discussion...”</p>

      <p>After looking at Sanae and Kiriha, Koutarou gave up the idea of a fight. And after looking at Yurika, he gave up on a discussion.</p>

      <p>“Guh, it looks like there’s no other way.”</p>

      <p>Despite having fought on the day they met, Koutarou didn’t want to hit Sanae now. Because of that, the exorcism tools he had gotten from Shizuka were still sitting in his bag. And while Kiriha was saying preposterous things, he felt the same about her. Finally, Koutarou simply didn’t think reasoning and discussion would work on Yurika.</p>

      <p>“A game, huh? A game...”</p>

      <p>Though Koutarou’s shoulders had drooped in discouragement, he soon shook his head to snap out of it and looked at Sanae.</p>

      <p>“All right, Sanae. Say we decide to play a game. What would it be?”</p>

      <p>“How about an easy one like rock-paper-scissors?”</p>

      <p>Sanae put up a finger and slightly tilted her head. However, Kiriha shook her head at Sanae’s suggestion.</p>

      <p>“Rock-paper-scissors wouldn’t be good. It’s too simple and it relies too much on luck. In order to convince everyone, it needs to be something that focuses on our skills.”</p>

      <p>“That said, we can’t just use shougi or chess, right? There are pros and cons to everything.”</p>

      <p>“I haven’t played either.”</p>

      <p>“So a game that even a beginner could play that has an element of luck, but where player ability would ultimately come out on top in repeated plays... It might be a classic, but how about card games?”</p>

      <p>“Card games?”</p>

      <p>“Well, it doesn’t just have to be card games.”</p>

      <p>“I’m fine with that. I played a lot with papa and mama.”</p>

      <p>“Fine, just fine... Call it cosplay or whatever you like. Anything is fine as long as you get out of this room.”</p>

      <p>Koutarou looked at the three girls and nodded.</p>

      <p>“All right, it seems like everyone agrees, so let’s go with that. My lifestyle is on the line here. I want to finish this ridiculousness as soon as possible.”</p>

      <p>Koutarou couldn’t hit Sanae, who was clinging to his back and smiling. That said, he didn’t have the confidence that he could last forever against Kiriha’s plans. Nor could he think of a way to convince Yurika to get out. This was a last resort to Koutarou.</p>

      <p>“No objections. So Koutarou, what kind of card games will we play?”</p>

      <p>“Well...”</p>

      <p>“Koutarou, how about all four of us take turns picking games? That way it’s more fair.”</p>

      <p>“In that case, we’ll need to have points for the placings.”</p>

      <p>“Indeed. We’ll need at least enough points for everyone to get a turn.”</p>

      <p>“Waaaaah... In the end, nobody would even listen to my opinion...”</p>

      <p>“Hey, Koutarou, since we have a truce, we should work together. It’ll be easier that way, and you and I can just work things out afterward.”</p>

      <p>“You’re on. If we just play normally, we’ll probably lose to Kiriha-san.”</p>

      <p>“Kiriha-san, those two are teaming up.”</p>

      <p>“That’s the kind of thing that happens in territory disputes. Heh, looks like I can’t underestimate them. How about we work together to defeat them?”</p>

      <p>“Y-Yes, please!”</p>

      <p>Thus the games to determine the owner of room 106 began.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter6title">
    <img alt="chapter6title" class="insert" src="../Images/ChapterTitle6.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter6">
    <div class="main">
      <h1>Commence Invasion <img src="../Images/skull.jpg"/></h1>

      <h2>Wednesday, April 8th</h2>

      <p>Birdsong came through the window with the floral curtain. The curtain was something else Shizuka had prepared alongside the futon cover when Koutarou moved in.</p>

      <p>“Uwah, it’s already morning, Koutarou...”</p>

      <p>Having finished up already, Sanae pulled the curtain aside and looked outside to see a clear blue sky and sunshine lighting up the neighborhood. On top of the utility poles were a couple of small birds singing. It was a normal, everyday morning.</p>

      <p>“It’s already past 7 AM, huh?”</p>

      <p>Koutarou rubbed his tired eyes and looked through the window. His eyes met the blue sky and clear sunlight. The sunlight passed through Sanae’s body as she stood in front of the window, and lit up the tatami mats. Koutarou thought of Sanae as a real person, but it was times like this that he was reminded that she was a ghost.</p>

      <p>“Another all-nighter...”</p>

      <p>It was now Wednesday, April 8th. And as of today, Koutarou had pulled three all-nighters in a row.</p>

      <p>“Sorry, Koutarou. With this card, I’m out too.”</p>

      <p>“Uwah, really?!”</p>

      <p>Kiriha pulled a card from Koutarou’s hand and then placed two cards on the tea table, emptying her hand. They were currently playing Sanae’s specialty, Old Maid, and Kiriha had just finished.</p>

      <p>“Ouch, just don’t end up in last place. Okay, Koutarou?”</p>

      <p>“I know.”</p>

      <p>While replying to Sanae, Koutarou reached out towards Yurika’s hand.</p>

      <p>“Ah! Auuuuugh...”</p>

      <p>As he did, Yurika shut her eyes and whined. Even if she hadn’t, Koutarou still would have been able to see right through her. She had a terrible poker face. If it weren’t for her alliance with Kiriha, Yurika would have run out of points long ago.</p>

      <p>“Hah!” Koutarou shouted as he selected his card.</p>

      <p>“U-Umm...” Yurika stammered. But hearing Koutarou’s voice and feeling a card pulled out of her hand, she timidly opened her eyes.</p>

      <p>“Waaauugh!”</p>

      <p>However, the only card remaining in her hand was the dreaded joker, laughing in her face.</p>

      <p>“All right! I’m out!” Koutarou completed his hand and threw his cards onto the table.</p>

      <p>“I...I looooost!”</p>

      <p>Koutarou rejoiced while Yurika sunk into gloom.</p>

      <p>“Which means I’m first, Kiriha is second, Koutarou is third, and Yurika is dead last.” Sanae recapped.</p>

      <p>“Indeed. With that, the points are back to where they started.” As Kiriha spoke, she wrote up the points on the score sheet now hanging on the wall.</p>

      <p>Like she said, everyone had twenty points each. According to the rules they had decided on, finishing in first place awarded three points, and finishing second awarded one point. Getting third place meant losing one point, and fourth place meant losing three. Functionally, there was a two point difference between each position. Everyone was given twenty points to start with, and once someone ran out of points, their punishment for losing would be having to leave the apartment.</p>

      <p>“No one even managed a single point lead.”</p>

      <p>“It seems our skills are well-matched.”</p>

      <p>Kiriha shrugged as Koutarou yawned.</p>

      <p>The card games had gone on for the entire night, but there was still no resolution in sight. The outcomes ended up cancelling each other out, so no one was ever able to gain the lead. At one point, Yurika was about to lose all of her points, but she’d made an incredible comeback with a lucky streak. After that, the points were simply traded back and forth.</p>

      <p>“What are you going to do, Koutarou? It’s time to go to school.”</p>

      <p>Still standing by the window, Sanae pointed at the clock hung up on the wall. It was already past 7:30 AM, and Kenji would show up at any moment.</p>

      <p>“Everyone, can we pick this up after I get back?”</p>

      <p>“In reality, there’s no time to spare... but I don’t think there will be any danger during the day.”</p>

      <p>“I don’t mind. I too feel like resting for a while.”</p>

      <p>As Yurika and Kiriha agreed, the doorbell rang.</p>

      <p>“Hey, Kou! Are you up?”</p>

      <p>And there was Kenji.</p>

      <p>“Yeah, I’ll be right there!” After shouting towards the front door, Koutarou spoke in a hushed tone. “Everyone, please make sure Mackenzie doesn’t see you when I leave.”</p>

      <p>“It’ll make things complicated, right? I already know that.” Sanae answered as she turned off the lights in the room to make it look like there was no one home after Koutarou left.</p>

      <p>“Yurika, come this way a little more. The front door is in plain view from over there.”</p>

      <p>“Oh, s-sure, Kiriha-san.”</p>

      <p>The three girls moved to positions where they couldn’t be seen from the entrance. As Koutarou watched them, he started to get a bad feeling. The day before yesterday, it was Sanae. Yesterday, it was Sanae and Yurika. And now today, it was Sanae, Yurika, and Kiriha.</p>

      <p><em>Surely... there won’t be four tomorrow, right?</em></p>

      <p>“Nah, there’s no way.”</p>

      <p>Koutarou shook his head and smiled wryly. He fought back a yawn as he turned away from the three girls. He couldn’t be too slow. Kenji was waiting for him just outside.</p>

      <p>“Are you tired, Koutarou?”</p>

      <p>“Something like that. I’ll sleep at school.”</p>

      <p>“That’d be good. If you force yourself too much, it’s bad for your body.”</p>

      <p>“Goodbye, Satomi-san.”</p>

      <p>“Bye-bye, Koutarou. Come back soon, okay? I’ll be waiting.”</p>

      <p>“Yeah... See you.”</p>

      <p>With a third ceasefire in place, Koutarou left his apartment.<br/><br/></p>

      <p>“School sure is great. Being at home is so chaotic...”</p>

      <p>Embraced by the early spring’s calm atmosphere and warm sunshine, time drifted by in the club room after school. Right now, school was the only place where Koutarou could rest. At home were three girls trying to steal his room. Compared to that, the time spent at school, especially in the club room, felt like heaven.</p>

      <p>“I just wish it was always like this. Huaaahh...”</p>

      <p>Relaxing, Koutarou let out a yawn as he knitted. After multiple all-nighters, he was exhausted. What little sleep he got during class was far from enough.</p>

      <p>“Not good. Gotta keep knitting...”</p>

      <p>“Are you okay, Satomi-kun?”</p>

      <p>Sitting next to Koutarou, Harumi didn’t miss the signs of fatigue on Koutarou’s face. She gave him a worried look. Being seriously concerned, her words sounded a little more assertive than usual.</p>

      <p>“I’m fine, Sakuraba-senpai.”</p>

      <p>“But you don’t look that way... You haven’t gotten enough sleep, have you?”</p>

      <p>Koutarou tried to play it off, but it didn’t work on Harumi. Instead, her apprehensive look grew even more serious and she leaned forward slightly. Because of her weak constitution, she took matters of health quite seriously.</p>

      <p>“Hahaha, I just moved out on my own and I haven’t quite gotten used to it yet. I’ll be back to normal soon, Sakuraba-senpai.”</p>

      <p>“...I hope so...”</p>

      <p>“That aside, Senpai, please show me that knitting technique one more time.”</p>

      <p>Koutarou smiled at Harumi, who still looked worried.</p>

      <p>With Harumi’s lesson, Koutarou was getting into the depths of knitting. Using the technique from yesterday as the foundation, he was now learning the basic garter stitch. Compared to the garter stitch, the stockinette stitch often used for sweaters was quite a bit harder. It would require a different motion. So rather than getting started on two motions, Harumi decided to have him master one at a time.</p>

      <p>“All right. I’ll do it once more slowly, so get a good look.”</p>

      <p>“Thank you.”</p>

      <p>Harumi still looked worried, but she began moving her hands again at Koutarou’s request.</p>

      <p><em>Satomi-kun, it’s fine to be enthusiastic, but are you really okay...?</em></p>

      <p>Harumi demonstrated the technique as she tried to think of a way to allow Koutarou to rest. After showing Koutarou an example a couple of times, she finally came up with an idea.</p>

      <p><em>That’s right, maybe if I leave him alone...</em></p>

      <p>Harumi decided to put her plan into action right away.</p>

      <p>“So you do it like this. Do you understand, Satomi-kun?”</p>

      <p>“Yes, that’s a big help. I’ll give it a try.”</p>

      <p>Koutarou began moving his knitting needles. Although awkward, he showed his determination.</p>

      <p><em>It’s because you’re working so hard...</em></p>

      <p>Harumi set her needles and yarn down on the desk and stood up.</p>

      <p>“Satomi-kun, can I ask you to keep an eye on the club room for a while?”</p>

      <p>“S-Sure... I don’t mind. But what are you going to do?”</p>

      <p>Koutarou stopped knitting and looked up at Harumi.</p>

      <p>“I forgot that the school committee asked to see me. I’ll be back soon.”</p>

      <p>“I see. Okay, I’ll keep watch while you’re away.”</p>

      <p>“Please do. Sorry about this.”</p>

      <p>Harumi lightly bowed and headed towards the door.</p>

      <p>“I just hope you’ll be able to get some rest this way, Satomi-kun...”</p>

      <p>“Did you say something, Senpai?”</p>

      <p>“Not at all. I’ll be back soon.”</p>

      <p>“Okay, see you then.”</p>

      <p>Harumi left the room with a small smile.<br/><br/></p>

      <p><em>Hm...? Huh?</em></p>

      <p>When Koutarou came to, the club room was dyed red by the evening sun.</p>

      <p>“Oh crap, I feel asleep...”</p>

      <p>The knitting needles that were in his hands had been put on top of the desk, and the jacket to a girl’s uniform had been laid over him.</p>

      <p>“Were you able to sleep well?”</p>

      <p>When Koutarou lifted his head to look in the direction of the voice, he saw Harumi smiling gently at him. She had taken off her jacket and was knitting in her blouse.</p>

      <p>“Senpai, I...”</p>

      <p>“I was just thinking about waking you up. It’s almost 6 PM.”</p>

      <p>Harumi stopped knitting and pointed to the clock. It was now 5:45 PM—almost time for the school to close for the day.</p>

      <p>“I’m sorry for falling asleep in the middle of club activities...”</p>

      <p>To Koutarou who had been raised to respect others, this was a big problem. He looked apologetic and bowed deeply.</p>

      <p>“It’s fine, Satomi-kun. I-It’s, um... Th-This society belongs to just the two of us, after all...”</p>

      <p>Harumi’s cheeks turned red with embarrassment, but he was bowed so low that he couldn’t see it.</p>

      <p>“That’s why, Senpai.”</p>

      <p>“No, that’s not quite right. It belongs to just the two of us, so it’s fine as long as we agree.”</p>

      <p>“Senpai...”</p>

      <p>“Satomi-kun, please take care of your body...”</p>

      <p><em>Oh, I see, Senpai is...</em></p>

      <p>When Koutarou saw how seriously she was looking at him, he finally remembered her weak constitution.</p>

      <p><em>That’s why she was so worried... </em></p>

      <p>Koutarou was grateful for her concern, but he also felt bad for making her worry.</p>

      <p>“I understand. I’ll be more careful.”</p>

      <p>“Good... Thank you, Satomi-kun.”</p>

      <p>Satisfied with Koutarou’s answer, Harumi happily thanked him.</p>

      <p><em>I should be the one worrying about her. I gotta keep it together...</em></p>

      <p>Thanks to the appearance of three strange people, Koutarou’s life had been non-stop trouble the past few days. Even so, he was able to take heart from Harumi’s kindness.<br/><br/></p>

      <p>“I’m home.”</p>

      <p>As Koutarou opened the front door, he found that it was still dark inside. And Sanae, who had welcomed him back right away yesterday, was nowhere to be found.</p>

      <p>“Huh?”</p>

      <p>Just as Koutarou began wondering why, Sanae poked her head out from the inner room.</p>

      <p>“Koutarou, over here! Come quick!”</p>

      <p>“What is it?”</p>

      <p>“It’ll be faster to see for yourself. Come this way, Koutarou.”</p>

      <p>“Something’s wrong!”</p>

      <p>After Sanae, both Kiriha and Yurika called out to him. As they all sounded serious, Koutarou tossed off his shoes by the entrance and hurried to the inner room.</p>

      <p>“What’s wrong, you three? The light’s still... Whoa!”</p>

      <p>As he dashed into the room, Koutarou’s eyes shot open wide.</p>

      <p>“Wh-What is that?!”</p>

      <p>Something strange was happening. For some reason, the wall the farthest away from the hallway was glowing dimly. The strangely glowing spot was almost two meters tall and one meter wide.</p>

      <p>“This was just a wall, right? What happened?!”</p>

      <p>“That’s what we want to know.”</p>

      <p>While responding to Koutarou’s question, Kiriha turned the lights on. With the room normally lit, the glowing wall became slightly less noticeable.</p>

      <p>“Sanae, did you do this?”</p>

      <p>“How rude! It wasn’t me! Don’t make everything out to be my fault. Besides, what’s the point in making the wall glow?”</p>

      <p>“Fair enough.”</p>

      <p>Koutarou first suspected Sanae after having seen some of the psychic phenomena she was capable of causing, but he relented after she made her case. Like she had said, she had nothing to gain from making the wall glow.</p>

      <p>“You’re always looking for a reason not to trust me! Jeez!”</p>

      <p>With a frown, Sanae puffed up her cheeks and sat with her legs crossed in mid-air.</p>

      <p>“It can’t be helped. You’re a ghost after all.”</p>

      <p>“Hmph! I don’t care about you either!”</p>

      <p>The sulking Sanae turned away from Koutarou.</p>

      <p>“Come on, don’t start pouting because I doubted you for a moment.”</p>

      <p>As Koutarou forced a smile for Sanae, someone tugged on the sleeve of his uniform.</p>

      <p>“Um, Satomi-san...”</p>

      <p>“Hmm? What? Oh, it’s just you, Yurika?”</p>

      <p>Yurika was the one that had pulled on his sleeve. Once she’d gotten his attention, she began speaking in a reserved tone.</p>

      <p>“The wall is glowing, isn’t it?”</p>

      <p>“So it is.”</p>

      <p>“Something strange is happening, isn’t it?”</p>

      <p>“Yes, it is.”</p>

      <p>“Haven’t you considered that it might be my magic?”</p>

      <p>“...Maybe.”</p>

      <p>After nodding for the third time, Koutarou turned to Kiriha.</p>

      <p>“So Kiriha-san, how long has the wall been like this?”</p>

      <p>He had already lost interest in Yurika.</p>

      <p>“Wh-Why?! Can’t you at least consider it? This is a supernatural phenomenon, you know! It’s a complete mystery! It might just be my magic!”</p>

      <p>“Not very long. It started about ten minutes before you returned.”</p>

      <p>“Ten minutes ago, huh?”</p>

      <p>“It’s not fair! Believing in ghosts but not magic is unfair! I demand a correction and an apology!”</p>

      <p>“Karama, Korama. Tell Koutarou about the results of your measurements as well.”</p>

      <p>“Got it! Ho!”</p>

      <p>“Leave it to us, Ane-san! Ho!”</p>

      <p>Responding to Kiriha’s request, the two haniwas ran up to Koutarou.</p>

      <p>“There is no sign of radiation, electromagnetic waves, heat, vibration, or spiritual energy, ho! We can only detect a trace amount of light! Ho!”</p>

      <p>“But we can’t measure the other side of the glow, ho! It’s almost as if there’s an invisible wall, ho! Where the light is coming from is still unknown! Ho!”</p>

      <p>The haniwas explained everything in detail while gesturing wildly, but it made no sense to Koutarou.</p>

      <p>“I don’t really get it. So what does this mean?”</p>

      <p>“Koutarou, it means that apart from not being able to see through to the other side of the glow, it’s a completely normal wall... However, that doesn’t eliminate the possibility of technology we don’t understand being involved.”</p>

      <p>“In other words, it’s a mysterious glowing wall?”</p>

      <p>Koutarou slowly approached the wall.</p>

      <p>“Aaaah, if only you’d just give me a fraction of that consideration...” Yurika started breaking into tears behind Koutarou. “Can’t you even consider it might be the doing of a girl with suspicious powers?! I’m trying so hard!”</p>

      <p>But Yurika’s pleading fell on deaf ears as Koutarou focused on the wall.</p>

      <p>“Koutarou, you shouldn’t carelessly touch it.”</p>

      <p>“...That’s actually pretty persuasive when <em>you</em> say it.”</p>

      <p>What did reach Koutarou’s ears was Sanae’s voice. She floated next to him and approached the wall with him.</p>

      <p>“What? Don’t treat me like I’m some sort of floating danger!”</p>

      <p>“That’s exactly what you are.”</p>

      <p>“What’s that supposed to mean?! I’ve had it! And here I was thinking of protecting you if something happened, but you just trample all over my kindness! You have a terrible personality!”</p>

      <p>Sanae began sulking again and returned to where Kiriha and Yurika were.</p>

      <p>“...Koutarou definitely won’t die a pretty death.”</p>

      <p>“He won’t even believe in magic either.”</p>

      <p>“It’s a common thing for people of our age. If you’re a fine woman, you’ll be able to overlook something like this.”</p>

      <p>“I’m just a kid, so I don’t care.”</p>

      <p><em>There’s no tension here whatsoever...</em></p>

      <p>Koutarou could feel his spirits droop as he listened to the voices from behind him.<br/><br/></p>

      <p>Standing about thirty centimeters away from it, Koutarou was still observing the glowing wall.</p>

      <p>“Apart from the glow, it looks just like a normal wall, but...”</p>

      <p>The glow was weak, so it wasn’t dazzling. It was brighter than fluorescent paint, but not to the degree of a fluorescent lamp. Because of that, he could still see the wall where it wasn’t glowing just fine. He could even clearly see the patterns of the recently changed wallpaper.</p>

      <p>“What is this...?”</p>

      <p>Koutarou reached out towards the wall. Even as his hand got close, it didn’t feel hot. It was just as Kiriha said. But he still didn’t know if touching it was safe or not.</p>

      <p>“Now then, what to do...?”</p>

      <p>While Koutarou was thinking it over, a change took place in the wall.</p>

      <p>“Oh?”</p>

      <p>At the center of the glowing spot, roughly one meter up from the ground, a blue disk fifteen centimeters in diameter appeared. White light ran through the blue disk, outlining a simple picture of a man in armor fighting against a large reptilian.</p>

      <p>“A knight and a dragon... Is it some kind of crest?”</p>

      <p>Koutarou brought his face closer to examine it. As he did, he realized that it wasn’t just a picture, but a three-dimensional sculpture. That strengthened his impression that it was indeed a crest.</p>

      <p>“But why is there a crest on a glowing wall?”</p>

      <p>Not sure what to think, Koutarou brought his face even closer to the crest. But suddenly, his vision was completely obscured.</p>

      <p>“H-Huh?! What?!”</p>

      <p>Koutarou was caught by surprise as his sight went dark, but he could feel something soft and warm pressed against his face. His body stiffened in response.</p>

      <p>“Huwah?!”</p>

      <p>A girl’s voice cried out from right in front of Koutarou.</p>

      <p>Everyone in the room was surprised. But the most surprised of them all was the girl who had surprised Koutarou and the others.</p>

      <p>“H-H-How rude! Burying your face in a princess’s chest is unforgivable even for a clueless Neanderthal!”</p>

      <p>“H-Huh? Wha?! What’s going on?!”</p>

      <p>As someone practically yelled right into his ear, Koutarou tried to pull his face away from whatever was obscuring his vision by lightly pushing against it with his hands.</p>

      <p>“Waaaaah! Y-You dare to touch a princess’s chest?! Grab it?! Fondle it?!?!”</p>

      <p>“Huh?!”</p>

      <p>Standing before the bewildered Koutarou was a girl with her back towards the glowing wall. She was short, but a little taller than Sanae. With her blonde hair and blue eyes, she was probably a foreigner. She was wearing a beautiful, brilliant white dress, and the ends of her spread skirt filled up a large part of the tiny room. But above all, she was wearing a silver tiara decorated with jewels on top of her golden hair.</p>

      <p>“...Who’s this girl?”</p>

      <p>“I am no mere ‘girl’! Remove your hands from me this instant, Neanderthal!”</p>

      <p>“Hands?”</p>

      <p>At the mention of his hands, Koutarou reflexively squeezed.</p>

      <p>“Waaaaah! D-Don’t fondle them more, idiot!”</p>

      <p>“W-Waaaaaaaah?!”</p>

      <p>That was when Koutarou finally realized that he had grabbed ahold of the breasts of the girl in front of him. Where he had put his hands to push away had been just where her chest was.</p>

      <p>“S-Sorry!”</p>

      <p>“A ‘sorry’ won’t cut it! You buried your face in my chest without warning and even dared to fondle it!” The girl’s face was crimson with anger and embarrassment. She covered her chest with her arms and continued to shout at Koutarou. “This noble chest that you played around with to fulfill your lust is not something the likes of you may touch! You should consider yourself lucky that you were not slain on the spot!”</p>

      <p>“Lust?! Th-That’s a misunderstanding! That wasn’t my intention at all! It was just an accident!”</p>

      <p>Flustered, Koutarou shook his head.</p>

      <p>“All criminals say the same thing!”</p>

      <p>“That’s not true! Who would want to fondle such a flat chest?! I have the right to choose which breasts I fondle, too!”</p>

      <p>“F-Flat...?”</p>

      <p>The girl’s expression froze.</p>

      <p>“You think I’d take that kind of risk over that washing board of a chest?! Give me a break!”</p>

      <p>“W-Washing board...?”</p>

      <p>The stunned girl looked up at Koutarou. Her eyes were wide open and her face was twitching.</p>

      <p>“Yeah, that’s right! Koutarou spent all yesterday fondling Kiriha’s breasts, so he doesn’t need yours!”</p>

      <p>That was where Sanae decided to chime in. She was still holding a grudge against Koutarou from before.</p>

      <p>“Don’t make it sound like I’m some sort of pervert!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert6">
    <img alt="insert6" class="insert" src="../Images/Insert6.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter61">
    <div class="main">
      <p>“There’s no need to deny it. You know you wanted to fondle them. You pervert!”</p>

      <p>“Koutarou, do you want to touch my breasts?”</p>

      <p>After what Sanae suggested, Kiriha turned to Koutarou and thrust her chest forward a little, making her breasts jiggle.</p>

      <p>“No! I’m not fondling anyone’s breasts!”</p>

      <p>“You don’t have to hold back.”</p>

      <p>“Like hell I’d be chased out of this room over something like that!”</p>

      <p>Yurika, who was silently watching on, pumped her fist into the air in a victorious pose.</p>

      <p>“You got a high rank! Good job, Yurika! Fight!”</p>

      <p>Sizing up the girls in the room, the order from largest breasts to smallest went: Kiriha, Yurika, Sanae, and lastly the mysterious girl. Yurika was glad that she was second.</p>

      <p>“...Anyways, you wouldn’t want to fondle those.” Sanae looked pityingly at the blonde girl’s chest.</p>

      <p>“Like I said, it was an accident! Who would go out of their way to touch those things?!”</p>

      <p>“Th-Things...? You called them flat, a washing board... and now ‘things’...”</p>

      <p>The girl looked down at the floor.</p>

      <p>“You don’t have to put it like that. She’s still young. She has plenty of time to grow.”</p>

      <p>“Uwaah, that’s a mean way to put it, Kiriha. The well-endowed sure have it easy...”</p>

      <p>“That wasn’t my intention.”</p>

      <p>“But she’s even losing to Sanae-chan, so they can’t possibly grow that much...”</p>

      <p>As Yurika spoke with pity in her voice, the girl’s shoulders began to tremble. Koutarou thought she was about to cry, but what he heard wasn’t a sob.</p>

      <p>“Heh... Heh heh... Hahaha... Ahahahahaha!”</p>

      <p>It was sad, dry laughter.</p>

      <p>“So you’d pity me? I see. You pity me, a princess!”</p>

      <p>It was then that Koutarou thought he could hear the sound of the girl’s patience snapping.</p>

      <p>“I’ll kill you! I’ll kill you all right now! I’ll make sure none of you will ever be able to speak again!”</p>

      <p>The girl screamed, swung her hands around, and stomped the ground with her feet.</p>

      <p>She had completely lost it.</p>

      <p>“...It looks like you made her angry, Koutarou. You should apologize.”</p>

      <p>“She’s right, Koutarou. You should do it while her wounds are still shallow.”</p>

      <p>“It’s because you bullied her, Satomi-san. There aren’t many girls that can handle being bullied as well as I do.”</p>

      <p>“Don’t try to put all of this on me! You’re the ones who dealt the finishing blow! Besides, just look at her! We’re well past the point of persuasion!”</p>

      <p>“Muahahahaha! You Neanderthals! I won’t even give you the time to realize your sins! You can regret ever going up against me once your bodies have been vaporized!”</p>

      <p>The girl who had lost herself in anger glared at Koutarou and the others while laughing loudly. It was clear to everyone in the room that she couldn’t be talked down now.</p>

      <p>“Blue Knight! Activate the Anti-Personnel Weapons System!”</p>

      <p>As the girl continued laughing maniacally, she shouted into the bracelet on her right wrist.</p>

      <p>“As you wish, my princess.”</p>

      <p>And strangely enough, the gem on the bracelet lit up and responded to her.</p>

      <p>“Hey, what’s that girl doing?”</p>

      <p>“Who knows...? She’s gotten so worked up that she’s talking to her bracelet. She’s kinda scary.”</p>

      <p>As Koutarou and Sanae looked on in confusion, two small black disks about twenty centimeters in diameter appeared one after the other above the girl’s shoulders. They were pitch-black, and oddly enough, had no thickness to them.</p>

      <p>“Select your weaponry.”</p>

      <p>“Anti-Personnel Pulse Laser! Sonic Impact Cannon! Fill them with holes and pulverize them!”</p>

      <p>“As you wish, my princess.”</p>

      <p>After the girl shouted out her orders, something metallic could be seen inside the black disks. Even though the disks had no apparent depth, the metallic objects inside of them looked very real. It was almost as if the black disks were some sort of window.</p>

      <p>“What the heck is that...?”</p>

      <p>As Koutarou started to think that the metallic objects looked like muzzles, they turned and pointed at him. A bluish white light began glowing in the hole of the left object. At the same time, the right one started emitting a low-pitched sound that made the room shake.</p>

      <p>“Hmm, I’m getting a bad feeling about this...”</p>

      <p>Koutarou was beginning to sense danger from the disks, but as he wasn’t sure what to do. He readied himself for anything for the time being.</p>

      <p>“Emergency alert, ho! Those things we can see from the black holes are probably weapons! Ho!”</p>

      <p>“Energy reaction, ho! The object on the left side is most likely an energy weapon, and the object on the right side is probably a shockwave cannon, ho! They will attack within a few seconds! Ho!”</p>

      <p>“Get down, Koutarou! She’s shooting!” Kiriha desperately called out to Koutarou.</p>

      <p>“Huh?!”</p>

      <p>“It’s too late now! Eliminate them, Blue Knight!”</p>

      <p>“As you wish, my princess.”</p>

      <p>The girl gave her bracelet the order to fire as she leered at the panicking Koutarou.</p>

      <p>“Koutarou!”</p>

      <p>“Oof!”</p>

      <p>In that moment, Koutarou fell down onto the tatami mat. Sanae had tackled him and forcibly pulled him down.</p>

      <p>And not a moment later, several blue beams passed through the spot where Koutarou had just been standing. Immediately after that, a white ball passed by as if chasing the blue beams.</p>

      <p>“Kyaaaaah!”</p>

      <p>The blue beam passed right by Yurika’s ear, singing a few strands of her hair. As she ducked in surprise, the white ball came next. It directly hit the broom she was holding, then exploded with a loud bang. The sound came with a powerful shockwave that assaulted the already off-balance Yurika.</p>

      <p>“Why is it always meeeee?!”</p>

      <p>Yurika tried her best to prevent it, but there was nothing she could do as she was sent rolling across the tatami mats yet again.</p>

      <p>“Bwah!”</p>

      <p>She rolled until she hit the wall, no longer conscious or moving.</p>

      <p>“Th-That was close! Those were weapons?!”</p>

      <p>It wasn’t until Koutarou saw what happened to Yurika that he realized the extent of the danger he was in. As it set in on him, a chill ran down his spine. Koutarou had no idea what weapons this girl was using, but after taking one look at Yurika, he could at least imagine what would happen if he took a direct hit.</p>

      <p>“Are you okay, Koutarou?! Get up right now! The next one’s coming!”</p>

      <p>“Y-Yeah!”</p>

      <p>“Tch, looks like one of them has good intuition,” the girl spat hatefully. She then turned to look at the fallen Koutarou. As she did, the visible muzzles pointed right at him. “But in this small room, the next one won’t miss! Blue Knight, continue firing in synchronous mode!”</p>

      <p>“As you wish, my princess.”</p>

      <p>“Don’t be like that, shorty!”</p>

      <p>“Neanderthal! First you insult my chest, now my height?!”</p>

      <p>“You big idiot!”</p>

      <p>“Grrrrr! And you dare to call me an idiot?!”</p>

      <p>“Of course, you hyper-sensitive, breastless weirdo!”</p>

      <p>As Koutarou said that, the girl’s weapons appeared to be preparing to fire again as the blue light and loud sound activated once more.</p>

      <p>“Koutarou, stop bickering with her and hurry up!”</p>

      <p>“Waaaaah! Oh crap!”</p>

      <p>Koutarou was still in the middle of getting up. Sanae was helping him out, but it didn’t look like he would make it in time before the next attack.</p>

      <p>“Ahahahaha! You’re too slow! It’s already over! You can regret the crime of making a fool of me after you’ve been turned to ashes!”</p>

      <p>“Karama, Korama! Spiritual energy field to maximum output!”</p>

      <p>“Got it! Ho!”</p>

      <p>“Understood! Ho!”</p>

      <p>As the haniwas responded in their silly, squeaking voices, they quickly stepped between Koutarou and the girl.</p>

      <p>“But we’ll lose in terms of power, ho! We’re not good at dealing with physical attacks, ho!”</p>

      <p>“I just need you to endure one attack! Block it somehow!”</p>

      <p>“Got it!”</p>

      <p>And then the blue beam and white ball struck them.</p>

      <p>In that moment, Koutarou and the others were enveloped by a spherical, yellow film of light. It was a shield generated by the two haniwas. There was an explosion as the blue beam came into contact with the shield of light. It dispersed the beam, but shattered the shield like glass. The haniwas’ shield was only able to block the blue beam, the Pulse Laser. As a result, the white ball that came shortly after flew unobstructed, straight towards Koutarou.</p>

      <p>“Waaaaah! This time it’s all over!”</p>

      <p>“Special Attack: Sanae-chan Bomber!”</p>

      <p>However, just before the ball could connect with Koutarou, Sanae blocked it by throwing a cushion using her poltergeist powers. The ball and cushion collided mid-air, and the explosive shockwave scattered cotton all over the room.</p>

      <p>“Aaaaahhh!”</p>

      <p>“Ugh!”</p>

      <p>“Ho!”</p>

      <p>“Ho, ho!”</p>

      <p>Other than Sanae, everyone else was thrown up against the wall because of the shockwave. It was enough to make the wooden foundation of Corona House creak and shake.</p>

      <p>“Is everyone okay?! You’re not dead, are you?!”</p>

      <p>“I’m neither! I’m fine for now, but I won’t be for long!”</p>

      <p>Koutarou shook his head, stood up, and grabbed the baseball bat that was leaning against the wall next to him.</p>

      <p>“What are you going to do?!”</p>

      <p>“The only way to survive is to strike before she can recover!”</p>

      <p>The girl in question had also lost her balance from the shockwave. The cushion Sanae threw had triggered the impact much closer to her than she had expected.</p>

      <p>“Tch, like I’ll let you hit me with something like that! Blue Knight, change the Sonic Impact Cannon to the Ion Blaster! This room is too small!”</p>

      <p>Noticing Koutarou approaching with a bat in hand, the girl ordered her bracelet to change weapons.</p>

      <p>“As you wish, my princess.”</p>

      <p>“You’re too slow!”</p>

      <p>However, Koutarou swung his bat down as hard as he could before she could finish switching weapons. His target was the Pulse Laser peeking out from the disk above her right shoulder.</p>

      <p>“It’s no use, Neanderthal!”</p>

      <p>However, the bat didn’t reach the laser. Just before it hit the barrel, the bat crashed into something he couldn’t see and bounced off.</p>

      <p>“What?!”</p>

      <p>“You thought you were the only one with a barrier? How foolish!”</p>

      <p>The girl stood up with a smile brimming with confidence. She was surrounded by a network of interlocking, transparent hexagons. Just like the shield of light the haniwas had used before, it was a wall that blocked attacks.</p>

      <p>“Not good, ho! Her barrier is on a completely different level! Ho!”</p>

      <p>“It’s a repulsion barrier, ho! It’s far superior to ours against anything but spiritual energy! Ho!”</p>

      <p>“Just who is this girl?!”</p>

      <p>Kiriha was aghast by the overwhelming difference in power. Their attacks barely had an effect, and they couldn’t even fully protect themselves against their opponent’s attacks.</p>

      <p>“Damn it! What’s with that hard shell? Unless we smash that open, we’re not going to get anywhere!”</p>

      <p>“Enough, Koutarou! There’s no way to break that!”</p>

      <p>“What? Is that true?!”</p>

      <p>“It’s true, Neanderthal! The difference in power between us is like that of heaven and earth! The likes of you can’t so much as lay a finger on me!”</p>

      <p>The girl paused her attack to boast. After everything that had been said about her chest, she was extraordinarily happy about this development.</p>

      <p>“...I’m not so sure about that.”</p>

      <p>Sanae floated up to the cocky girl and poked the tip of her nose.</p>

      <p>“Wh-What?! Wh-What did you just do?!”</p>

      <p>The girl’s face scrunched up as Sanae suddenly appeared directly in front of her.</p>

      <p>“What? I was just poking you. You’re overreacting.”</p>

      <p>Sanae had easily passed through the barrier the girl had been so proud of. Even the most advanced barrier was powerless against a ghost.</p>

      <p>“Good job, Sanae! Now restrain her!”</p>

      <p>“Okay, okay. You sure are bossy...”</p>

      <p>Taking advantage of the blonde girl’s surprise, Sanae moved in for the kill. Using her Poltergeist powers, she grabbed ahold of the edges of the girl’s skirt.</p>

      <p>“What are you doing?!”</p>

      <p>“Who knows what would happen if I let someone like you be! So take this! Special Attack: Sanae-chan Tulip!”</p>

      <p>Quick to action, Sanae lifted up the edges of the girl’s skirt.</p>

      <p>“Uwaah! Wh-What?!”</p>

      <p>“Just relax.”</p>

      <p>Sanae flipped the girl’s skirt all the way up and wrapped it around her head. With her underwear now exposed, the girl did look like a tulip, just as Sanae had promised.</p>

      <p>“Stop it, you ruffian! I can’t see a thing!”</p>

      <p>“No way. If I stop, you’ll just continue attacking.”</p>

      <p>The girl struggled to break free from her tulip form, but Sanae’s power was too strong. She was stuck.</p>

      <p>“Kiriha-san.”</p>

      <p>“What is it, Koutarou?”</p>

      <p>“I know my life is on the line, but she just looks like an idiot right now.”</p>

      <p>“Agreed. To think I’d see a bear here...”</p>

      <p>Tulip struggled, but made no progress. Just looking at her was enough to induce laughter. Moreover, emblazoned on the girl’s panties was an adorable bear.</p>

      <p>“If you give up, I’ll let you go.”</p>

      <p>“Don’t make a fool of me! There is no way a princess of the Holy Forthorthe Galactic Empire would lower her head to primitive barbarians!”</p>

      <p>“Then we’ll just leave you like this.”</p>

      <p>“Grrr, you’re just a Neanderthal!”</p>

      <p>The back and forth between Sanae and the girl was proceeding in Sanae’s favor. Seeing that, Koutarou let out a small sigh of relief.</p>

      <p>“It looks like we’ll finally be able to catch our breath for a moment.”</p>

      <p>“Well, about time, I’d say.”</p>

      <p>Kiriha smiled a little. Despite their hopes, however, the commotion wouldn’t end that easily.</p>

      <p>“Fine! If you want to play that way, I have plans of my own!”</p>

      <p>“What? You’re still going to do something?”</p>

      <p>“Blue Knight! Change battle mode to final attack mode! Fire a limited Genesis Buster! Reduce the area around me to photons!”</p>

      <p>“Authentication is required for activation of final attack mode and use of the Genesis Buster.”</p>

      <p>“My name is Theiamillis Gre Mastir Sagurada von Forthorthe!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert7">
    <img alt="insert7" class="insert" src="../Images/Insert7.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter62">
    <div class="main">
      <p>“Authentication complete. Identity of Princess Theiamillis confirmed. Order accepted. As you wish, my princess.”</p>

      <p>Unlike before, the girl gave a complicated order. Hearing it gave Koutarou a bad feeling again.</p>

      <p>“...What are you planning on doing?”</p>

      <p>“Don’t ask such foolish things, Neanderthal. I’m attacking, of course.”</p>

      <p>Tulip responded full of confidence once more. She was probably smiling, but Koutarou still couldn’t see her face.</p>

      <p>“Attacking?”</p>

      <p>Despite what she said, nothing seemed to be happening inside the room. The black holes floating near her remained motionless.</p>

      <p>“But nothing’s happening...”</p>

      <p>“Heh heh... Hahahahaha! This is why you’re Neanderthals! Don’t assume that what you see here is all there is!” Tulip shook with laughter.</p>

      <p>“Emergency alert! A super-high energy reaction detected! Fifty meters above us! Ho!”</p>

      <p>“What?!”</p>

      <p>Hearing Karama’s warning, Kiriha leaped over to the window and threw it open so she could lean out and look up. Koutarou followed suit.</p>

      <p>“So that’s it!”</p>

      <p>“What the heck is that...?”</p>

      <p>In the sky above Corona House was a black hole similar to the ones floating above the girl’s shoulders. Even though it was a starry night, the part of the sky it covered was completely dark. A large cylindrical object peeked out of the hole.</p>

      <p>“Confirmed the generation of antimatter, ho! Its mass is rapidly increasing, ho!”</p>

      <p>“Antimatter?! What is its mass?!”</p>

      <p>“It’s currently at fifty-eight grams, ho! And still increasing! Ho!”</p>

      <p>“Is that an antimatter cannon? Preposterous! Do you know what that kind of thing can do?!”</p>

      <p>Kiriha turned to Tulip and shouted at her. The fact that the normally calm Kiriha was acting this way was proof alone of how serious the situation was.</p>

      <p>“Of course I know! It means you Neanderthals will be reduced to photons!”</p>

      <p>Tulip laughed at the panicking Kiriha.</p>

      <p>“Hey, Koutarou, what’s antimatter?”</p>

      <p>“Don’t ask me. That’s Mackenzie’s field of expertise.”</p>

      <p>Koutarou and Sanae couldn’t keep up with the conversation, so they casually tilted their heads in anticipation of an explanation.</p>

      <p>“To put it simply, antimatter is like a superpowered nuclear weapon!”</p>

      <p>Strictly speaking, the nuclear fission used by nuclear weapons was completely different from antimatter. However, they both released energy on an atomic level, so it was an appropriate comparison for the two who didn’t understand at all.</p>

      <p>“N-Nuclear?!”</p>

      <p>“You mean <em>that</em> kind of nuclear?! Like what you see in movies and anime? Where terrible things happen if they explode?!”</p>

      <p>Thanks to that, Koutarou and Sanae finally understood the situation and started panicking too.</p>

      <p>“L-Let’s run away, Koutarou! The mushroom’s going to explode!”</p>

      <p>“Y-Yeah.”</p>

      <p>“It’s no use! The antimatter has already exceeded one hundred grams. No matter how far you go, you’ll never be able to outrun it! Too bad for you!”</p>

      <p>“...So it’s all over.”</p>

      <p>Kiriha sighed and her shoulders slumped. She clearly understood the power of that much antimatter.</p>

      <p>“Don’t give up! Do something, Kiriha!”</p>

      <p>“Wh-What do we do?! What should I do?!”</p>

      <p>Having grasped the power of the weapon, Koutarou and Sanae ran around in a panic.</p>

      <p>“Your petty tricks won’t work on this weapon! This will be my victory!”</p>

      <p>In contrast, Tulip was ecstatic. Releasing all of her resentment, she laughed loudly. Because of that, it looked like even the bear on her exposed panties was smiling to Koutarou.</p>

      <p>“There’s no longer anything we can do. Just give up, Koutarou, Sanae.”</p>

      <p>“Noooooooo! I don’t want to dieeeee!”</p>

      <p>“You’re already dead! Nuclear, antimatter, or whatever won’t hurt you!”</p>

      <p>“Oh yeah, you’re right.”</p>

      <p>The truth was that normal weapons wouldn’t work on Sanae, being a ghost. Being reminded of that, she was able to calm down again.</p>

      <p>“I’m sorry for your loss.”</p>

      <p>“Hearing that from you strangely pisses me off!”</p>

      <p>“It’s a perk of being a ghost.”</p>

      <p>Sanae turned to Koutarou and made a triumphant peace sign.</p>

      <p>“You can’t be so sure when it comes to antimatter. With this much mass, it could be so powerful that it might distort space itself. Even a ghost might not survive,” Kiriha explained.</p>

      <p>“Did you hear that, Sanae? Even ghosts can die!”</p>

      <p>“Don’t rejoice in that, idiot!”</p>

      <p>As Koutarou and the others fell into pandemonium, Tulip’s bracelet coldly reported the countdown to their demise.</p>

      <p>“The generation of antimatter is complete.”</p>

      <p>“Excellent! Start the firing procedure! Don’t forget to pick me up as you fire!”</p>

      <p>“As you wish. Initiating firing procedure.”</p>

      <p>“Waaaaah, it’s firing! It’s coming!”</p>

      <p>“Noooooooo! I don’t want to die young!”</p>

      <p>“An unexpected end for the surface invasion. Then again, I doubt there will be much of Japan left to invade after this...”</p>

      <p>The girl laughed. Koutarou was restless. Sanae was clinging to him. Kiriha had a distant look in her eyes. And Yurika was still unconscious. As the five of them each reacted in their own way, the time finally came.</p>

      <p>“The antimatter has finished loading. Safety device released. Awaiting order to fire, my princess.”</p>

      <p>“Heh heh heh! And with this, it’s over! Genesis Buster, fi—”</p>

      <p>However, as the girl was about to give the order, another voice rang out in the room, interrupting her.</p>

      <p>“Please wait, Your Highness!”</p>

      <p>“Ruth?!”</p>

      <p>The girl raised her voice in surprise as another person came jumping out from the glowing wall. It was a sight similar to how Sanae passed through walls, but the girl that came from the wall was wearing a military uniform with a short skirt. She was taller than Tulip, and roughly the same height as Yurika.</p>

      <p>“H-Hey, a person just came through the wall!”</p>

      <p>“What are you going on about now? That’s how Tulip showed up too.”</p>

      <p>“Really, Kiriha-san?”</p>

      <p>Koutarou hadn’t seen Tulip’s entrance. He was busy examining the crest when his sight was suddenly blocked out.</p>

      <p>“Y-Yeah. The first girl came out of the wall like this girl just did. She just immediately bumped into you.”</p>

      <p>Kiriha had already given up hope, but she was shaken by the appearance of this new girl.</p>

      <p>“Your Highness! What is the meaning of firing the Genesis Buster at the planet?!”</p>

      <p>And she immediately began shouting at Tulip.</p>

      <p>“B-But... They were making a fool of me!” Tulip tried to object, but her tone of voice had completely changed.</p>

      <p>“It looks like that girl came to stop Tulip.”</p>

      <p>“Do you think so?”</p>

      <p>Koutarou and Sanae blankly stared at the two quarreling girls. They were unable to comprehend this unexpected development.</p>

      <p>“That doesn’t mean you can destroy this entire planet! First of all, it violates the galactic treaty!”</p>

      <p>“...Hey, Sanae, it sounds like the weapon above us has enough power to destroy the planet.”</p>

      <p>“So Earth was on the brink of destruction...”</p>

      <p>“Knock on wood.”</p>

      <p>“But they called me flat, short, and stupid! There’s no way I could forgive them!”</p>

      <p>“Who would bring out a wide-area destructive weapon intended for space combat for a childish reason like that?”</p>

      <p>“B-But, Ruth!”</p>

      <p>“No buts!”</p>

      <p>The new girl was quickly gaining the upper hand in their dispute. Tulip gradually spoke less and less, until she was mostly silent.</p>

      <p>“Phew. Looks like everything will settle down...” Kiriha let out a big sigh and relaxed her shoulders.</p>

      <p>“Your Highness, please calm down. If you kill the residents of this room, you won’t be able to complete your trial. Are you planning on becoming the quickest to fail the trial in the history of Forthorthe? Will you bring shame to your mother?”</p>

      <p>“...”</p>

      <p>At the mention of her mother, Tulip stopped arguing.</p>

      <p>“Your Highness, please think about this. Forthorthe has no jurisdiction over this planet. We are the ones being unreasonable here.”</p>

      <p><em>This new girl has been quite reasonable, actually...</em></p>

      <p>The past few days had been a mess of unreasonable people forcing themselves into Koutarou’s apartment. So to hear someone be rational and levelheaded now was like music to Koutarou’s ears.</p>

      <p>“I understand... Blue Knight, release attack mode and return to guard mode. Cancel the use of the Genesis Buster.”</p>

      <p>“As you wish, my princess.”</p>

      <p>“Thank you very much, Your Highness.”</p>

      <p>The new girl flashed a relieved smile. And with that smile, the commotion in the room settled for the moment.<br/><br/></p>

      <p>There was a hole in the wall from the laser, and the wallpaper had been torn by the shockwaves. The once beautiful tatami mats were now heavily worn out and had scorch marks on them.</p>

      <p>“If Landlord-san sees this, she’ll probably cry...”</p>

      <p>After giving the room a look around, Koutarou started feeling guilty. Corona House was Shizuka’s treasure. It was a keepsake from her late parents. Finding it in this state would cause her a lot of grief, and Koutarou was painfully aware of that.</p>

      <p>“Koutarou, please sit down so we can start.”</p>

      <p>“Oh, right. Sorry.”</p>

      <p>As Kiriha called to him, Koutarou turned around to the five girls all sitting down around the tea table. Going clockwise, it was Sanae, Kiriha, Yurika, Tulip, and then the girl who came with her. And between Sanae and Kiriha was an open spot.</p>

      <p>“So I sit here.”</p>

      <p>Koutarou sat down in the only place left.</p>

      <p>“It’s kind of cramped.”</p>

      <p>“There are six of us now, after all.” Kiriha shrugged at Sanae’s words.</p>

      <p>Originally, neither the tea table nor the room was designed for this many people. Because of that, it felt even smaller with six people stuffed in it.</p>

      <p>“Once we deal with this problem, it’ll feel bigger again. It’s not like we’re trying to deepen our friendship.”</p>

      <p>“Well, that’s true, but...”</p>

      <p>The truth was that Sanae was a little sorry for that.</p>

      <p>“So, getting right to it, who are you two?”</p>

      <p>“Hmph.”</p>

      <p>Despite Koutarou asking her, Tulip—the first girl to come out of the wall—refused to answer. Acting like a spoiled child, she turned away from him.</p>

      <p>“I am sorry. It seems my master is in a bad mood, so I will explain in her place.”</p>

      <p>Instead, the girl in uniform began speaking. Compared to the girl in the dress, she had a mild and amiable aura about her. She politely bowed her head to Koutarou and the others in place of the sulking girl. Her courteous behavior left a favorable impression on him.</p>

      <p><em>But I learned my lesson with Kiriha. I should hear her out fully before I let my guard down...</em></p>

      <p>With everything that had happened, Koutarou couldn’t relax.</p>

      <p>“Allow me to introduce us. First is my master, Her Highness Theiamillis.”</p>

      <p>The girl in uniform indicated the girl sitting next to her.</p>

      <p>“‘Her Highness’?”</p>

      <p>It was a phrase the girl had used several times already. Koutarou knew that it indicated someone noble, but he didn’t think it suited the girl in front of him at all.</p>

      <p>“Yes. Her Highness’s name is Theiamillis Gre Forthorthe. She is a princess of the Holy Forthorthe Galactic Empire.”</p>

      <p>“Princess?! This brat is?!”</p>

      <p>Hearing Koutarou’s surprised words, the girl in the dress—Theia—glared at him. However, perhaps having learned how to show discretion, this time she said nothing.</p>

      <p>“Yes. Her Highness is the seventh princess, but she is the only child of the current empress.”</p>

      <p>“So she’s a princess? Really?”</p>

      <p>The girl explaining nodded at the amazed Sanae.</p>

      <p>“There is no mistaking it. However, it would be hard to show you proof right away...”</p>

      <p>“That won’t be necessary. I understand that the two you of you at least hold high positions.”</p>

      <p>“Oh?! You’ll believe us?!”</p>

      <p>“Yes. To a certain extent.”</p>

      <p>Surprisingly, Kiriha seemed to buy in to the girl’s claims.</p>

      <p>“What do you mean, Kiriha-san?”</p>

      <p>“Koutarou, just think about the power of their weapons.”</p>

      <p>“What about their weapons? Well, they were awfully dangerous...”</p>

      <p>“Do you think just anyone would be walking around with weapons like that? The antimatter least of all.”</p>

      <p>“Ah, so that’s what you mean.” Koutarou was beginning to understand what Kiriha was implying.</p>

      <p>“What does she mean?” Sanae asked, still confused.</p>

      <p>“You see, Sanae, which seems more logical to you: a normal person walking around with weapons like that, or someone very important?”</p>

      <p>“Well, it’d have to be the important person. She had a mushroom bomb after all.”</p>

      <p>“Right? That’s the point. It would be strange if those girls were normal.”</p>

      <p>The short of it was that it seemed way more likely for someone in a position of importance to be in possession of weapons that destructive.</p>

      <p>“I see. Now that you mention it, that makes sense.” Convinced, Sanae nodded before moving to make fun of Yurika. “Yurika, unlike a self-proclaimed princess like yourself, she’s the real deal.”</p>

      <p>“I... I’m a real one too!”</p>

      <p>“I know. You’re a real hardcore cosplayer, right?”</p>

      <p>“You’re wrong! Why does everyone bully me?!” Yurika grit her teeth in frustration, but no one was listening to her.</p>

      <p>“To show status, show power... It’s an old-fashioned method, but it was effective.”</p>

      <p>“I would like to apologize for the sudden display of force.” The girl bowed apologetically.</p>

      <p>“You don’t have to worry about that. We were both in the wrong.”</p>

      <p>“Thank you very much.”</p>

      <p>“You sure forgave her quickly didn’t you, Koutarou?”</p>

      <p>“Could you at least remember what you said?”</p>

      <p>Sanae flinched at Koutarou’s cold glance. She agreed that she may have said too much. Apart from his first remark about her chest, Koutarou felt he had said too much as well. The same was true for Kiriha and Yurika.</p>

      <p>“So what about you? Do you hold a high position as well?”</p>

      <p>“No, I am just an officer. I am in charge of guarding Her Highness and taking care of her. My name is Ruthkania Nye Pardomshiha. Please call me Ruth.”</p>

      <p>“...Ruth is my childhood friend.” Theia, who had been silent until now, added on to Ruth’s introduction. “She’s a reliable and talented guard.”</p>

      <p>“Your kind words are wasted on me, Your Highness.”</p>

      <p>Ruth smiled at Theia, and Theia blushed a little before turning away again.</p>

      <p>“Hmm, so this person was a soldier.”</p>

      <p>“Ruth-san, huh...? Oh crap, I almost forgot. I’m Koutarou. Satomi Koutarou. I live here.”</p>

      <p>“I’m Higashihongan Sanae. And this flashy one is Yurika. But the only flashy thing about her is her appearance, so don’t pay her too much attention.”</p>

      <p>“I’m Nijino Yurika. From the magical—”</p>

      <p>Yurika attempted to introduce herself, but...</p>

      <p>“Kurano Kiriha. Feel free to call me Kiriha.”</p>

      <p>Sadly, she was interrupted by Kiriha.</p>

      <p>“Wah... Waaah! D-Do you really hate magic—and me—that much? Waaah!”</p>

      <p>Yurika drooped her shoulders as she bit the corner of her handkerchief, tears streaming down her face. Ruth was surprised by Yurika’s sudden crying.</p>

      <p>“Did something happen to Yurika-sama?”</p>

      <p>“It’s fine. Just leave her be, Ruth-san.”</p>

      <p>“Okay, Satomi-sama.”</p>

      <p>“Waaaaaaaah!” Yurika continued to cry.</p>

      <p>“...?”</p>

      <p>Ruth was unable to fully comprehend the situation, but she decided to leave Yurika be for now.</p>

      <p>“By the way, Ruth, I believe you mentioned a galactic empire before. What did you mean by that?”</p>

      <p>“Koutarou, did she say something like that?” Sanae, who hadn’t been paying attention, tugged on Koutarou’s sleeve and asked.</p>

      <p>“She did. Holy something Galactic Empire. Theia over there seems to be a princess from that country.”</p>

      <p>“Oh, I know about the Empire in Ginza.”</p>

      <p id="note6">In Ginza<sup><a href="../Text/chapter1title.xhtml#note6">6</a></sup>, there was a famous hotel by the name of the Imperial Hotel.</p>

      <p>“That has nothing to do with this.”</p>

      <p>“I know that too...”</p>

      <p>“It is as you say.” Ruth nodded her head. “As you have surmised, we are from the Holy Forthorthe Galactic Empire.”</p>

      <p>“The Holy Forthorthe Galactic Empire... I’ve never heard of a country by that name.”</p>

      <p>“You haven’t heard of it either, Yurika?”</p>

      <p>“Why would you think I would know about it?”</p>

      <p>Yurika looked puzzled at Sanae’s sudden question.</p>

      <p>“Because it sounds like something right out of an anime.”</p>

      <p>“Wah... Waaaaah!”</p>

      <p>“Don’t make her cry for no reason, Sanae.”</p>

      <p>“Sorry, I couldn’t help it...”</p>

      <p>“So, Ruth-san, where is this country? In the Middle East? Or maybe in Europe?”</p>

      <p>“No.” Ruth simply shook her head. “It is in a different galaxy, about ten million light years away from here.”</p>

      <p>“So that really was the case?!” Kiriha instinctively stood up. She had suspected it when Theia brandished an antimatter weapon, but she was still very surprised.</p>

      <p>“Koutarou, is there a different Ginza? One outside of Tokyo?”</p>

      <p>“She said a different galaxy, Sanae.”</p>

      <p>Koutarou was perplexed. He understood what Ruth was saying, but that was because it sounded like something out of one of the movies he would watch with Kenji from time to time.</p>

      <p>“That can’t be right. If they came from a different galaxy, they would be—”</p>

      <p>“Yes, that’s correct. We came from a different planet. In other words, we are aliens.”</p>

      <p>The girls who introduced themselves as Theia and Ruth were the most extraordinary visitors yet.<br/><br/></p>

      <p>“A-Aliens...”</p>

      <p>Koutarou had to close his mouth after his jaw dropped.</p>

      <p>“After ghosts, cosplayers, and underground people, I thought nothing would really surprise me. But aliens...”</p>

      <p>“I’m not a cosplayer! I’m a magical girl!”</p>

      <p>“I believe it’s quite normal to be surprised. It is extremely rare to come into contact with another civilization, after all.” Ruth smiled apologetically.</p>

      <p>“But now that you mention it, it makes things make a lot more sense.”</p>

      <p>Lasers, barriers, and antimatter cannons... It was hard to imagine those kind of sci-fi weapons existed on Earth.</p>

      <p>If people really had things like that, surely technology on Earth would be far more advanced. Kiriha’s haniwas were quite surprising, but the technology Theia and Ruth had surprised even Kiriha.</p>

      <p>“There’s no doubt about it.”</p>

      <p>Kiriha wiped away the sweat from her brow. She couldn’t stop her cold sweat, knowing how much stronger the other party was.</p>

      <p>“...Karama, Korama, prepare those.”</p>

      <p>“Got it! Ho!”</p>

      <p>“We’ll bring them right away! Ho!”</p>

      <p>Being given orders, the haniwas sprang into action. They flipped up the tatami mat closest to the front door and jumped down the hole beneath it.</p>

      <p>“Koutarou, what do we do now?”</p>

      <p>“For starters, let’s continue as if what they’re saying is true.”</p>

      <p>“You believe them when they say they’re aliens?”</p>

      <p>“Yeah. They don’t look like they’re lying.”</p>

      <p>Koutarou brought his mouth closer to Sanae’s ear and whispered.</p>

      <p>“Besides... Even if it’s a lie, those weapons are real.”</p>

      <p>“...That’s true. They’re different from someone like Yurika.”</p>

      <p>Sanae whispered back to Koutarou and then looked at Theia and Ruth. As she did, something else crossed her mind.</p>

      <p>“Hey, Koutarou.”</p>

      <p>“Hmm?”</p>

      <p>“You don’t believe them just because that Ruth girl is your type, right?”</p>

      <p>“Of course not!”</p>

      <p>“Really?”</p>

      <p>“Really! ...Well, she is cute.”</p>

      <p>“C-Cute? I am honored, Satomi-sama...”</p>

      <p>Ruth always had a serious expression on her face, but hearing Koutarou call her cute, she blushed. When she did, she actually looked more like a girl her age.</p>

      <p>“She’s got a proper attitude, and she’s not saying anything ridiculous. There’s no reason to doubt her, right?”</p>

      <p>“You sound suspiciooous! Isn’t it just because obedient girls are your thing? Typical boy... You see a cute, docile girl and you’re all over her.”</p>

      <p>“Well, compared to the rest of you, any girl is docile!”</p>

      <p>“...A very good point.”</p>

      <p>Sanae, Yurika, Kiriha, and now Theia. The four of them were practically the opposite of docile.</p>

      <p>“Satomi-sama, thank you for believing us. I have always worried over how to make you believe this part.”</p>

      <p>“Always? So you two didn’t arrive today?”</p>

      <p>“Yes.” Ruth nodded. “Well, we actually arrived at this planet yesterday evening.”</p>

      <p>“So what were you doing until now?”</p>

      <p>“We were gathering data for the translation device by listening in on the discussions in this room and by picking up broadcasts from the planet.”</p>

      <p>As Ruth explained, she pulled out a small box and showed it to the group. It was the translation device that the two of them were using.</p>

      <p>“Now that you mention it, both of you are speaking Japanese.”</p>

      <p>“To think that small box could do that...”</p>

      <p>Koutarou and Sanae stared at the device. Ruth handed it over to them so they could get a better look at it.</p>

      <p>“Because of that, we also have a rough understanding of everybody’s circumstances. But I am deeply sorry, as what we did amounts to eavesdropping on you.”</p>

      <p>“Well, we wouldn’t get anywhere if we didn’t understand each other, so you don’t really have to worry about that, Ruth-san.”</p>

      <p>“Thank you very much, Satomi-sama.”</p>

      <p>Ruth had been prepared to get yelled at, so she felt a little relieved.</p>

      <p>“So what did you two come here for?”</p>

      <p>“That would be the problem.” Ruth’s expression turned more serious. It was time to get down to business. “Her Highness came here because of a certain ritual passed down through the royal families.”</p>

      <p>“Ritual?”</p>

      <p>Kiriha looked up. Ruth nodded and continued her explanation.</p>

      <p>“Yes. The succession of the throne works in such a way that all those born to the royal families are, without exception, given a trial when they turn sixteen.”</p>

      <p>“A trial? What kind of trial?”</p>

      <p>“There are all kinds of trials, depending on the person. It could be searching for something, investigating unexplored areas, fighting against a predetermined enemy, or something else altogether. The ones that clear their trial are deemed to have the right to succeed the throne.”</p>

      <p>“So it’s like a coming of age ritual?”</p>

      <p>“That’s correct, Kiriha-sama. Unless they clear the trial and prove their worth, they can’t succeed the throne. Not even as the empress’s child.”</p>

      <p>“So Ruth-san, if she clears her trial, does that mean she’ll become the empress?”</p>

      <p>“No, that is not quite the case. Those who clear their trial are recorded in order of completion on the list of candidates. After that, the throne is passed down to the ones on the list, starting from the top.”</p>

      <p>“In the order they clear it, huh? So that’s how they prove themselves.”</p>

      <p>“Yes. That’s correct, Satomi-sama.”</p>

      <p>“So that means you two—or rather, the princess over there—came here to clear that trial?”</p>

      <p>“That’s right.”</p>

      <p>That was where Theia finally opened her mouth again.</p>

      <p>“I have to show my power. To that end, I came here with just Ruth.”</p>

      <p>“Just the two of you?”</p>

      <p>Koutarou was a little surprised. In his head, royalty traveled with a grand company. Yet here, Theia only had Ruth with her.</p>

      <p>“That’s right. I’m supposed to demonstrate my capabilities in this trial. That wouldn’t be possible with a large retinue.”</p>

      <p>“I see. You have to do it on your own, or there wouldn’t be a point to it.”</p>

      <p>“Precisely.”</p>

      <p>“So, what’s the trial? Since you came all this way, are you exploring like you mentioned before?”</p>

      <p>“No. Her Highness’ trial is an invasion.”</p>

      <p>“Invasion?!”</p>

      <p>“Her Highness has to invade this room and become its ruler in both title and function.”</p>

      <p>“W-Wait a minute! Why does it have to be my room?!”</p>

      <p>Koutarou was taken aback as Ruth continued to explain.</p>

      <p>“As I believe you are now aware, the trial is to prove the capabilities of potential successors to the throne. A full-scale invasion wouldn’t be necessary. Her Highness was given coordinates to a small space, selected at random, for her to occupy and make into her own territory. It’s merely ceremonial.”</p>

      <p>“So that space just happens to be my room?!”</p>

      <p>“I know it’s hard to believe, but the coordinates the computer selected for the trial perfectly overlap with this room.”</p>

      <p>“What kind of a coincidence is that?!”</p>

      <p>“We are perplexed as well. Normally, the coordinates for this trial are in empty space. All you have to do is place your flag in that predetermined space and it’s over. What is primarily asked for in this trial is the courage to make a journey to the outskirts of known space, far, far away.”</p>

      <p>Ruth had a serious look on her face.</p>

      <p>If a computer really chose coordinates at random, there would have been a near guarantee that it selected empty space, considering the universe in all of its vastness is mostly empty space. The coincidence made this the first time that coordinates had indicated a habitable planet with intelligent life on it.</p>

      <p>“So what happens in this case?”</p>

      <p>“If intelligent life is found at the invasion point, not only is invasion required, but the lifeforms must be made to swear fealty. It’s a trial to demonstrate capacity for leadership, after all. Of course, taking their lives is absolutely out of the question”</p>

      <p>“Which means—”</p>

      <p>That was when Koutarou finally understood the circumstances.</p>

      <p>“Even someone as stupid as you can understand now! So swear your eternal loyalty and transfer the control of this room to me right now! If you do, you will become a citizen of our glorious empire and be able to enjoy a long, prosperous life!”</p>

      <p>The seventh princess of the Holy Forthorthe Galactic Empire, Theiamillis Gre Forthorthe wasn’t just trying to invade room 106. She was also after Koutarou’s heart.</p>

      <p>“I refuse!”</p>

      <p>As Theia demanded his room and his loyalty, Koutarou’s response was the same as always.</p>

      <p>“Who would swear loyalty to someone like you? Don’t make me laugh!”</p>

      <p>Since she had practically torn his room apart, Koutarou didn’t think very highly of Theia. Swearing loyalty to her was unthinkable.</p>

      <p>“Curse you, Neanderthal! I treat you gently, and this is how you repay me?!”</p>

      <p>“When did you ever treat me gently? The only one who showed any manners was Ruth!”</p>

      <p><em>Ouch...</em></p>

      <p>A dull pain ran through Koutarou’s head as he yelled at Theia.</p>

      <p><em>Did I get a little too excited?</em></p>

      <p>Koutarou shook his head in an attempt to get rid of the headache, but the pain remained along with a heavy feeling in the center of his head. He thought the headache was from getting too excited, but in reality he had been pushing his body past its limits for the past few days.</p>

      <p>“I don’t mind turning you into ashes on the spot, you know?!”</p>

      <p>“I already know that you won’t be able to clear your trial if you do that! Enough with your crappy empty threats!”</p>

      <p>But Koutarou quickly forgot about his headache. The girl in front of him was a much bigger problem.</p>

      <p>“Grrr, all because this Neanderthal picked up some unnecessary knowledge...!”</p>

      <p>“If you weren’t with Ruth, I would have kicked you out long ago!”</p>

      <p>“What?! Is that how you treat your master?!”</p>

      <p>“Who is the master here, huh?!”</p>

      <p>“It’s me, pleb! Do I have to explain every single thing for you to understand?!”</p>

      <p>“As if I’d ever understand you, Tulip!”</p>

      <p>Neither Koutarou nor Theia would back down as they glared at each other. As they continued scowling, they moved their faces closer and closer, to the point where their lips were almost touching.</p>

      <p>“Your Highness! Satomi-sama! Please, calm down! Fighting won’t help anyone!”</p>

      <p>“Even if it’s at Ruth-san’s request, I refuse to listen to this shorty!”</p>

      <p>“You heard him, Ruth! This pleb won’t understand unless we use force! He’s a Neanderthal who doesn’t even understand the glory of being a Forthorthian citizen!”</p>

      <p>Ruth’s earnest attempts at persuasion had no effect on Koutarou and Theia. They were both far too worked up. However, Ruth wasn’t about to throw in the towel.</p>

      <p>“Please! I beg you to listen to my selfishness! No matter the outcome, the two of you mustn’t fight!”</p>

      <p>Ruth was seriously worried about them, which gave strength to her words.</p>

      <p>“Grrr... I-I understand, Ruth. I’m sorry for making a commotion.”</p>

      <p>“I’ll only overlook it this time, for Ruth-san’s sake.”</p>

      <p>Fortunately, her second attempt got through to them. They started to withdraw, but continued to glare at each other.</p>

      <p>“Thank you very much. Both of you. I am truly grateful that you would listen to my selfish appeal.”</p>

      <p>Overcome with relief, Ruth rubbed the corner of her eye.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter7title">
    <img alt="chapter7title" class="insert" src="../Images/ChapterTitle7.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter7">
    <div class="main">
      <h1>There’s No Spirit of Cooperation!</h1>

      <h2>Thursday, April 9th</h2>

      <p>“Phew.”</p>

      <p>Koutarou was able to calm down after drinking the cup of tea Kiriha had poured for him.</p>

      <p>“Problems just keep piling up and I can’t help feeling like I’m starting to lose my mind.”</p>

      <p>“When that happens, just have another cup of tea. Although, sadly, I wasn’t able to find any good tea leaves.”</p>

      <p>Sanae was clinging on to Koutarou’s back and playing with the now empty cup using her Poltergeist powers.</p>

      <p><em>Now that I think about it, I used to fight with Sanae when we first met too...</em></p>

      <p>Having remembered that, Koutarou looked at Theia who was currently sitting at the tea table across from him. Being as stubborn as she was, she blatantly looked away from him, determined not to look him in the eyes. Koutarou felt that the current situation was quite similar to when he had first met Sanae.</p>

      <p>“Hey, Tulip.”</p>

      <p>“...Don’t call me by that strange name! I have a splendid name! It’s Theia!”</p>

      <p>Theia glared at Koutarou. Although she was more bullish and selfish than Sanae, her puffed up cheeks still gave her a childlike charm.</p>

      <p><em>I have no intention of handing over this room, but I’m being a bit immature. She’s only a child...</em></p>

      <p>“All right then, Theia.”</p>

      <p>“Call me Theia-sama or Your Highness.”</p>

      <p>“I’m not a citizen of your country, and I don’t intend to become one. Think about it. Right now, we are enemies.”</p>

      <p>“...Well, fine. So what do you want?”</p>

      <p>“We may be enemies, but let’s not do anything that won’t benefit either of us.”</p>

      <p>“Such as?”</p>

      <p>“Such as punching, kicking, or firing lasers. You’d be in trouble if I died too, right? Besides, I can’t imagine using violence to force someone into submission would help prove your leadership potential.”</p>

      <p>“...”</p>

      <p>Theia furrowed her brow and fell silent. She understood that Koutarou was correct, but her emotions couldn’t accept it.</p>

      <p>“And I’ll restrain myself from throwing you out right now too. So let’s tolerate each other to a certain degree, okay?”</p>

      <p>“...”</p>

      <p>Theia stared at Koutarou’s face. Two intense feelings were fighting within her small chest.</p>

      <p>“Your Highness, bargaining is required from time to time.”</p>

      <p>“...I understand. It’s true that I have nothing to gain from fighting you.”</p>

      <p>In the end, Ruth was the one that pushed Theia in the right direction.</p>

      <p>“If you’re open to negotiations, I will stop resorting to violence.”</p>

      <p>Theia looked reluctant, but she agreed to Koutarou’s proposal.</p>

      <p>“I’m fine with that.”</p>

      <p><em>Hmm... As long as she doesn’t get emotional, it looks like she can be somewhat reasonable...</em></p>

      <p>The reality of the situation was that Theia could simply use her weapons to take the entire planet hostage and then threaten Koutarou. However, as long as she wasn’t losing it, she knew that wasn’t how she should handle things.</p>

      <p>“Well, with that settled, I’d like to define the situation we’re in. How about it?”</p>

      <p>Waiting for the struggle between Koutarou and Theia to die down, Kiriha made her proposal.</p>

      <p>“No objections.”</p>

      <p>“I understand.”</p>

      <p>Sanae and Yurika agreed right away.</p>

      <p>“Let’s do that. I’m starting to lose track myself.”</p>

      <p>At first, Koutarou had been the only one in the room. But in just four days, the number had increased to six. Anyone would get confused.</p>

      <p>“I don’t mind. I’d like to hear everyone’s intentions once more.”</p>

      <p>Theia obediently agreed as well. However, the last one, Ruth, didn’t say anything. She was only there are Theia’s helper.</p>

      <p>“Then let’s begin with Koutarou. He is currently the legal master of this room.”</p>

      <p>“What about me? I’ve lived here since before Koutarou.”</p>

      <p>“Koutarou is the one who has a contract with the landlord. I have no intention of neglecting you, Sanae, but let’s start by hearing what Koutarou has to say.”</p>

      <p>“Ugh, fine. I guess we have to.”</p>

      <p>Sanae was dissatisfied, but she held it in for now. That was because her feelings for Koutarou had started to change, although she herself was still unaware of this development. If this were happening the day they had first met, Sanae never would have backed down.</p>

      <p>“Go ahead, Koutarou.”</p>

      <p>“Okay... It’s simple for me. This is where I’m living while going to school. That’s why I won’t leave. The monthly rent of just 5,000 yen makes it ideal.”</p>

      <p>“Pleb, how long will it take for you to finish school?”</p>

      <p>“...Three years.”</p>

      <p>Although slightly irritated by being called a pleb, Koutarou answered Theia.</p>

      <p>“I can’t wait for that long.”</p>

      <p>“But I have no intention of leaving. I’m also friends with Landlord-san. If I hand this room over to you, it would just cause her trouble instead.”</p>

      <p>Koutarou had two reasons for not moving out. The first was strictly financial. The second was Shizuka.</p>

      <p>While they had only known each other for a few days, Shizuka had treated him well, and he felt indebted to her. They were also becoming friends, so he didn’t want to haphazardly hand over the room and dump these problems on her. Koutarou knew how much the building meant to Shizuka, which was why he couldn’t simply leave.</p>

      <p>“That’s about it for me.”</p>

      <p>“With your lifestyle on the line, you can’t withdraw easily, huh?”</p>

      <p>“But I need you to leave.”</p>

      <p>“Yurika, save that until it’s your turn, if you please. Next is Sanae.”</p>

      <p>“Me?”</p>

      <p>“I was thinking of doing this in the order of appearance.”</p>

      <p>“Okay. But my story isn’t all that complicated. I’ve been living here this whole time, so I don’t want to be chased out.” Sanae smiled indifferently as she spoke. “I currently have a truce with Koutarou, but I plan on throwing out anyone that gets in my way.”</p>

      <p>“B-By possessing and killing them?”</p>

      <p>“If I have too... Heh heh. I might just put a curse on you!”</p>

      <p>“Aaaaaaaiieee!”</p>

      <p>Sanae flashed a grim smile, leaving Yurika frozen with fear. Amused, Sanae slowly approached her.</p>

      <p>“N-Nooooo!”</p>

      <p>“Stop! Wait! Don’t run away, Yurika!”</p>

      <p>Yurika was about to jump into wardrobe as per her usual, but Koutarou grabbed ahold of her foot and stopped her.</p>

      <p>“L-Let go! You’re the only one that has to get possessed, Satomi-san!”</p>

      <p>“Hey, stop kicking! Stop running! At least tell us your story first!”</p>

      <p>“But the ghost! The ghost will attack!”</p>

      <p>“I might eat you up!”</p>

      <p>“Kyaaaaah! Noooooooo!”</p>

      <p>“Sanae, you cut it out! We’re not going to get anywhere if you keep this up!”</p>

      <p>“Teehee, sorry.”</p>

      <p>Sanae stuck her tongue out and returned to her seat.</p>

      <p>“Nooooo!”</p>

      <p>“Yurika, calm down! Sanae isn’t coming after you anymore!”</p>

      <p>“Let gooo!”</p>

      <p>However, seemingly blind to her environment, Yurika continued to struggle. As she kicked Koutarou repeatedly, his rage began welling up from within.</p>

      <p>“Gah! This is why I hate cosplayers with spring fever!”</p>

      <p>“If we don’t put a stop to this kind of behavior, the reputation of cosplayers worldwide will just keep getting worse. Even though they’re all good people...”</p>

      <p>“I’m not a cosplayer!”</p>

      <p>Yurika shouted reflexively, but it finally snapped her back to reality. Realizing everyone was staring at her coldly, her face turned red with shame.</p>

      <p>“Ah, um...”</p>

      <p>“Phew. Jeez...”</p>

      <p>Koutarou let out a sigh and let go of Yurika’s leg before returning to his seat.</p>

      <p>“Good work, Koutarou.”</p>

      <p>“I don’t want to hear that from you, Sanae!”</p>

      <p>“Oh my. Just relax.”</p>

      <p>“Sheesh.”</p>

      <p>“Teehee.”</p>

      <p>Sanae didn’t so much as flinch when Koutarou shouted at her.</p>

      <p>“I’m sorry for making such a commotion.”</p>

      <p>An apologetic Yurika returned to her seat too.</p>

      <p>“Well it is your turn now, Yurika. Tell us why you came here.”</p>

      <p>“She came here to hold a cosplay party with her friends, right?”</p>

      <p>“I think that was it. The cheap rent must have caught her eye.”</p>

      <p>“You’re wrong! There will be people who come here wanting to claim the magical power that’s overflowing in this room. I need everyone to escape from here before that happens!”</p>

      <p>“Okay, okay. So that’s the backstory for your party, right?”</p>

      <p>“The way you stick to your story is worthy of praise, but could you please not try to take over this room for something like that?”</p>

      <p>“Honestly, even I’m struggling to handle Yurika.”</p>

      <p>“That’s not it! Why won’t you ever listen to what I have to say?!”</p>

      <p>Yurika desperately tried to appeal, but Koutarou and the others didn’t believe her at all.</p>

      <p>“Isn’t it obvious?”</p>

      <p>“Yeah. Nobody really believes in magic. It’s just unrealistic.”</p>

      <p>“And despite calling yourself a magical girl of love and justice, you constantly run away, leaving behind Koutarou as a sacrifice. That’s totally not something a heroine of justice would do.”</p>

      <p>Common sense, reality, and cowardice. There was just far too much working against Yurika for anyone to believe her story.</p>

      <p>“A-Auuugh! I’m not lying!”</p>

      <p>“Don’t worry, Yurika.” Theia leaned over to pat her on the shoulder. “I believe in you.”</p>

      <p>“Really?!” The gloomy expression on Yurika brightened up at Theia’s words. “You believe in magic?!”</p>

      <p>“Of course.”</p>

      <p>“And that I’m a magical girl? And that enemies are coming?”</p>

      <p>“Yes. Of course I do.”</p>

      <p>“Thank you so much! I always thought someone who believed in me would appear!”</p>

      <p>Yurika grabbed Theia’s hand and shook it intensely. She was crying tears of joy.</p>

      <p>“There’s no need to thank me. If you leave in return, that is.”</p>

      <p>But Theia’s next words made Yurika’s expression freeze in place.</p>

      <p>“Huh?” Yurika was visibly flustered now. “Wh-What do you mean by that?”</p>

      <p>“I’m simply saying I believe your story. That’s why you can leave without any regrets. I will deal with your enemies, so there is no need to worry.”</p>

      <p>“W-Wait just a minute! You mean—”</p>

      <p>“You’re trying to use diplomacy to get rid of her. Even though you don’t believe her one bit, you’ll say you do so you can bargain with her... You’re a clever one, alien princess.”</p>

      <p>Kiriha cut in on Yurika’s behalf.</p>

      <p>“Heh heh, royalty can do more than just use force.”</p>

      <p>And Kiriha got it spot on.</p>

      <p>“Th-This is just too cruel! You all just keep picking on me! Why?! You’re fine with ghosts, underground people, and aliens!”</p>

      <p>Yurika started crying again.</p>

      <p>“This is discrimination! It’s unfair! I demand a correction in the balance!”</p>

      <p>Yurika got up and jumped into the wardrobe, slamming the sliding door shut.</p>

      <p>“Waaaaah...”</p>

      <p>Her crying voice could be heard coming through the wardrobe.</p>

      <p>“Well then, I’m next.”</p>

      <p>“Kiriha, why did you come here?”</p>

      <p>Everyone else quickly moved on.</p>

      <p>“Waaah! I’m still right here.”</p>

      <p>It only made Yurika sadder.</p>

      <p>“I came here to rebuild the altar where my ancestors were enshrined.”</p>

      <p>“Oh, so this is sacred ground to you?”</p>

      <p>“But you’re only rebuilding it so you can invade the surface, right?”</p>

      <p>“That’s right. By rebuilding the altar, we can efficiently gather spiritual energy. By mass producing spiritual energy weapons, we will be able to regain our lost glory.”</p>

      <p>“So in a political sense, your goal is similar to mine.” Theia smiled contentedly.</p>

      <p><em>So this is my enemy. She seems sharp, too... This’ll be interesting.</em></p>

      <p>Theia was secretly happy that a worthy rival had appeared.</p>

      <p>“Finally, it’s your turn, Theia-dono.”</p>

      <p>“Yes, my reasons are as I mentioned before. I came here as part of a ceremony to prove myself. I demand ownership of this room in addition to the loyalty of its resident pleb.”</p>

      <p>Theia pointed at Koutarou as she spoke. There was plenty Koutarou wanted to say in return, but he decided to hold it in for now.</p>

      <p>“Which means, in the end, we’re all after this room.”</p>

      <p>“So it seems.”</p>

      <p>Koutarou and Sanae wanted to live there, Yurika wanted to hold a party, Kiriha wanted to rebuild an altar, and Theia wanted to rule it.</p>

      <p>“In other words, you all came here to invade my room.”</p>

      <p>“Simply put, that would be the case,” Ruth chimed in.</p>

      <p>Five girls were after Koutarou’s room. They each had their own goals, but they all wanted to take the room from him.</p>

      <p>“But what do we do? None of us have any intention of fighting or leaving. Are we going to play games again?”</p>

      <p>Another thing they all had in common was that none of them wanted to fight Koutarou. Because of that, they had previously agreed to settle things with games. But that was before Theia had arrived.</p>

      <p>“Ohoho, games don’t sound bad. That is how wars of old used to be.”</p>

      <p>“Then you’ll agree on settling things with games, Theia-dono?”</p>

      <p>“On one condition.” Theia nodded confidently.</p>

      <p>“Condition? What condition?”</p>

      <p>“Hehehe, I will only play against that pleb.”</p>

      <p>“What do you mean, Theia-dono?” Kiriha’s expression turned serious.</p>

      <p>“It’s simple. If I play a game now, I have a one in five chance of winning. However, after I have eliminated the other invaders, my chances are one in two. The pleb aside, I have no reason to play games with the rest of you!”</p>

      <p>“So that’s your plan...!”</p>

      <p>“Do you really think you can win?!”</p>

      <p>Tension in the room rose as Theia stood up with a fearless smile.</p>

      <p>“Of course! In truth, I was just about to last time.”</p>

      <p>“I wonder about that. I have already prepared weapons that will work on you. Karama, Korama!”</p>

      <p>“Ho!”</p>

      <p>“Yes, ho!”</p>

      <p>Responding to Kiriha’s voice, the two haniwas appeared before her. Their designs had changed slightly from before. One had a sword hanging off its waist, while the other had something resembling a beard near its mouth.</p>

      <p>“The Spiritual Energy Katana and Spiritual Wave Cannon have been prepared! Ho!”</p>

      <p>“Ane-go, just leave this to us! Ho!”</p>

      <p>“This means neither of us can block the other’s attacks.”</p>

      <p>Kiriha slowly stood up and made her declaration, wearing the same fearless grin as Theia. The Spiritual Energy Katana and Spiritual Wave Cannon were similar to Sanae’s psychic powers. Since Sanae could supernaturally slip past Theia’s barrier, these weapons would work on Theia too.</p>

      <p>“You impudent...”</p>

      <p>“Which means victory for me and Kiriha. You can’t hurt me since I’m a ghost.”</p>

      <p>Sanae floated up and created a will-o’-wisp. As she discharged electricity, the will-o’-wisp grew larger.</p>

      <p>“Blue Knight, activate the Anti-Personnel Weapons System’s Mind Pulse and Motor Cannon.”</p>

      <p>Obeying Theia’s orders, the two small disks reappeared above her shoulders once more.</p>

      <p>“Those things won’t work on me.”</p>

      <p>“We’ll see about that.” Theia remained confident. “Even if you are a ghost, you still have a mind. So as long as I use a weapon that targets your mind, I can defeat you!”</p>

      <p>“Damn it, is there anything aliens can’t do?!”</p>

      <p>Sanae stomped her feet in frustration as Koutarou and Ruth raised their voices.</p>

      <p>“H-Hey, wait! Are you going to fight here?!”</p>

      <p>“Please stop, Your Highness!”</p>

      <p>“Back off, Koutarou! It seems we need to eliminate this alien princess no matter what!”</p>

      <p>“If you get in the way, you’ll just get hurt!”</p>

      <p>“Just stand back, pleb! I’ll show you how powerful your master is!”</p>

      <p>“S-Stop it! God knows what will happen if you guys fight for real!”</p>

      <p>“Your Highness! Please stop it, Your Highness!”</p>

      <p>But the three girls refused to listen to Koutarou’s and Ruth’s desperate pleas. They just continued to stare each other down as the tension grew thicker.</p>

      <p>“Wh-What’s going on?!”</p>

      <p>As Yurika—who was unaware of the situation—opened the sliding door, the battle finally began.</p>

      <p>“Victory to the attacker!”</p>

      <p>“Gooooo!”</p>

      <p>“Korama, the Spiritual Wave Cannon!”</p>

      <p>What ensued was a disaster.<br/><br/></p>

      <p>“Look out, Ruth-san!”</p>

      <p>“Wha... What?!”</p>

      <p>One of the stray bullets that shot out from the black disks above Theia’s shoulders flew directly towards Ruth, who wasn’t paying attention. Koutarou instinctively reacted and tackled her into the hall leading to the front door.</p>

      <p>“Kyaaaaah!”</p>

      <p>Being thrown to the floor hurt a little, but fortunately, the bullet passed over them.</p>

      <p>“Th-Thank you, Satomi-sama...”</p>

      <p>“Don’t space out, Ruth-san!”</p>

      <p>“I’m sorry. Even though I’m a guard, I’m no good at combat...”</p>

      <p>Koutarou helped Ruth back to her feet as Yurika came to hide in the hall as well.</p>

      <p>“Wh-What is going on?! The futon in the wardrobe was just charred!”</p>

      <p>“Tulip is planning on reducing the number of people in this room before she settles things with me!”</p>

      <p>“Wait, so we’re not playing games then?!”</p>

      <p>“She wants to single me out to increase her chances of winning!”</p>

      <p>“B-But that’s terrible! That means I’ll be targeted too, doesn’t it?”</p>

      <p>“Don’t worry. You’re probably not on her radar.”</p>

      <p>“Waaaaah! I don’t want that either!”</p>

      <p>Several minutes had already passed since the other girls had begun fighting.</p>

      <p>“Fuahahaha! What’s the matter, you two? Do you think you can beat me like that?”</p>

      <p>“What do we do, Kiriha?! She’s just ridiculous!”</p>

      <p>“We will not lose either. Just calm down and look for an opening!”</p>

      <p>Sanae and Kiriha were working together to fight off Theia, but her superior firepower meant the playing field was practically level.</p>

      <p>“But what do we do? The room will be destroyed at this rate!”</p>

      <p>Realizing that himself, Koutarou began panicking. Since no one had the decisive upper hand in this battle, the room was taking most of the damage. There were scorch marks and bullet holes all over the apartment. It was a small miracle that there weren’t any fires yet.</p>

      <p>“Satomi-sama, look out!”</p>

      <p>“Huh?!”</p>

      <p>As Koutarou peeked into the inner room to get a handle on the situation, a fireball launched by one of the haniwas came straight for him. Another stray bullet.</p>

      <p>“Waaaaah! I’m going to die!”</p>

      <p>“Quick Cast Fireball! Targeting Option: Auto Homing!”</p>

      <p>Koutarou heard Yurika’s voice as he ducked to cover his head.</p>

      <p>“What?!”</p>

      <p>The next instant, the broom in Yurika’s hand began glowing red, and a second fireball appeared from its tip. The new fireball flew towards the first one.</p>

      <p>“Hyaaaah!”</p>

      <p>The two fireballs collided mid-air and exploded. While that prevented a direct hit, the flames from the explosions assailed Koutarou.</p>

      <p>“I’m gonna die! I’m gonna burn to death!”</p>

      <p>“Flame Shield!”</p>

      <p>But for some reason, the flames didn’t hurt Koutarou.</p>

      <p>“Huh? It’s not hot?”</p>

      <p>Curiously enough, the flames vanished some ten centimeters or so away from him. A yellow light surrounded Koutarou. When the flames touched the light, they were extinguished.</p>

      <p>“What’s this...?”</p>

      <p>“Satomi-sama!”</p>

      <p>“Are you okay, Satomi-san?!”</p>

      <p>Ruth and Yurika pulled the surprised Koutarou back into the hallway.</p>

      <p>“That’s dangerous, Satomi-san! Don’t poke your head out like that in a fight! If my spell hadn’t made it in time, what do you think would’ve happened?”</p>

      <p>“What?! Was that thing your doing, Yurika?”</p>

      <p>Koutarou’s eyes opened wide in surprise.</p>

      <p>“Yes! The fireball and the light protecting you now were both spells I cast.”</p>

      <p>Yurika smiled triumphantly as she looked at Koutarou’s surprised expression.</p>

      <p>“You, you really are...!”</p>

      <p>“Yes, I really am a magical girl!”</p>

      <p>Yurika’s eyes beamed with anticipation as she waited for Koutarou’s next words.</p>

      <p>“You really are an idiot!”</p>

      <p>“...Huh?”</p>

      <p>Yurika’s smile froze. What came out of Koutarou’s mouth was the exact opposite of what she had expected.</p>

      <p>“This place is already at risk of going up in flames, so why the hell would you use fire to fight fire?!”</p>

      <p>“Whaaaaa?! That’s what caught your attention?!”</p>

      <p>Yurika was deeply disappointed. She had truly believed that this time Koutarou would have to accept that she was a magical girl. This time, this time for sure... But reality is cruel.</p>

      <p>“What else?! You idiot!”</p>

      <p>“Auuugh... Please be surprised that I’m actually a magical girl!”</p>

      <p>“I don’t care about that! My life is on the line here! Or are you trying to burn me to death?!”</p>

      <p>“No, I used my spell to keep that from happening!”</p>

      <p>“Good grief... I can’t waste time on this”</p>

      <p>Koutarou gave up on arguing with Yurika and ran towards the front door.</p>

      <p>“Aahhh... I’m starting to hate everything...” As Yurika watched him go, she squatted down, depressed. “My precious stuffed animals burned up too... Maybe I should stop protecting this room and everyone in it...”</p>

      <p>The only reason that the room hadn’t already been destroyed was thanks to Yurika’s protective spell. It was also the reason the three girls fighting weren’t hurt. If it weren’t for Yurika, they would have been seriously injured fighting in a small room like this with nowhere to run. Not to mention the massive fire that would have started by now.</p>

      <p>“This is painful... I thought being a magical girl would be more rewarding than this...”</p>

      <p>Yet her efforts remained unacknowledged. In the end, the biggest contributor to protecting room 106 was sulking.</p>

      <p>“Ruth-san, I’ll leave Yurika to you!”</p>

      <p>Leaving the moping Yurika behind, Koutarou grabbed his bat from the umbrella stand by the door and marched to the inner room now embroiled in a fierce battle.</p>

      <p>“Satomi-sama, just what are you—?!”</p>

      <p>“I’m going to stop Tulip—I mean Theia!”</p>

      <p>“Please stop, Satomi-sama! If you run in there now, your life will be in danger!”</p>

      <p>“It’ll be too late if I don’t go now! I don’t even want to imagine what will happen if this fight breaks out of the apartment!”</p>

      <p>Koutarou was well aware of the danger of jumping into the fight, but if he didn’t stop it now, it would get out of control. They would eventually move outside. And if that happened, there would really be no stopping them. Right now, fighting inside the cramped apartment was forcing each of them to hold back. It was keeping the damage to a minimum. But once they broke outside, they would be able to go all out.</p>

      <p>“Now’s the only time we can stop them! There’s no time to spare!”</p>

      <p>Koutarou had no confidence that he’d be able to stop them if they went outside.</p>

      <p>“Satomi-sama...”</p>

      <p>“Don’t worry. She can’t attack me, right?”</p>

      <p>“Well, that’s true, but...”</p>

      <p>Ruth anxiously looked back towards the inner room. She could hear the girls’ voices and she could see mysterious flashes.</p>

      <p>“If I can restrain her, the other two will stop fighting too. Ruth-san, this is the best way to protect your princess.”</p>

      <p>“Satomi-sama... You...”</p>

      <p>Ruth looked surprised, but eventually nodded.</p>

      <p>“I understand. I will support you.”</p>

      <p>“Are you sure?”</p>

      <p>“Yes. This is for Her Highness’s sake”</p>

      <p>Ruth nodded with a smile. It was the kind of smile that made Koutarou feel close to her.</p>

      <p>“I’ll charge in and grab her.”</p>

      <p>“Then I will intrude into the Blue Knight’s main system and lower Her Highness’s barrier. Capture Her Highness when it’s down!”</p>

      <p>“Please do. Let’s get to work, Ruth-san. We’re running out of time.”</p>

      <p>Quick to action, Koutarou rushed down the hall.</p>

      <p>“Yes!”</p>

      <p>Ruth followed his lead and took action.</p>

      <p>“I’m off, Ruth-san!”</p>

      <p>“Leave the barrier to me, Satomi-sama!”</p>

      <p>Koutarou leaped into the inner room.<br/><br/></p>

      <p>When Koutarou entered, the three girls were in the middle of a firefight. However, as Theia had more firepower, the other two were being pushed back.</p>

      <p>“It’s no use! I have seen through all of your attacks!”</p>

      <p>“Then how about me?!”</p>

      <p>Koutarou jumped at the loudly laughing girl as she shot the room full of holes.</p>

      <p>“What?!”</p>

      <p>“Koutarou! Why?!”</p>

      <p>“Get back, Koutarou! You’ll be killed!”</p>

      <p>“All of you! Stop this stupid fighting right now!” As Koutarou shouted, he grabbed ahold of Theia’s right wrist. “I got you!”</p>

      <p>“What?! The barrier isn’t working?!”</p>

      <p>The barrier that had been protecting the girl proved ineffective as it allowed Koutarou to catch her. That was thanks to Ruth who had lowered the barrier as promised, but Theia was caught off guard by the situation.</p>

      <p>“I won’t just let you do as you please!”</p>

      <p>Koutarou pulled on Theia’s arm and glared at her.</p>

      <p>“You fool! I told you that I wouldn’t fight you!”</p>

      <p>“But if I just let this fight go on, it’s going to turn into a giant mess!”</p>

      <p>“So what? Blue Knight, use only non-lethal weapons! I can’t afford to accidentally kill the pleb!”</p>

      <p>“As you wish, my princess.”</p>

      <p>Obeying her orders, the weapons that could be seen from within the holes above her shoulders were changed. Since Theia couldn’t kill Koutarou, she switched to non-lethal weapons in case of friendly fire.</p>

      <p>“Not good.”</p>

      <p>However, that just showed that Theia still intended to fight. Upon realizing this, Koutarou threw his bat to the side and forcibly embraced her.</p>

      <p>“L-Let go of me, you fool! Don’t touch me so casually!”</p>

      <p>“Like hell I’d let go! You’ll just keep attacking if I do, right?!”</p>

      <p>“Of course!”</p>

      <p>Theia struggled to break free, but Koutarou wasn’t going to let go that easily. It was clear that she would attack if she got free.</p>

      <p>“All right, Koutarou! Just keep holding her like that!”</p>

      <p>“Sanae?!”</p>

      <p>As Koutarou turned his head to look at Sanae, he saw her floating his TV into the air.</p>

      <p>“Stop it, Sanae!”</p>

      <p>She was going to throw the TV at Theia. Koutarou desperately tried to stop her. It was the Satomi family TV from before Koutarou moved out, so it was quite large. A direct hit wouldn’t just hit Theia. Koutarou was in danger too.</p>

      <p>“Hyaaah! Sanae-chan Drop!”</p>

      <p>But sadly, Sanae ignored Koutarou and threw the TV anyway.</p>

      <p>“Ahhhhh!”</p>

      <p>“Uwaaah?!”</p>

      <p>Koutarou threw himself to the floor while still holding on to Theia.</p>

      <p>The TV flew past where they had just been standing and rolled across the floor before crashing into the wall and breaking apart.</p>

      <p>“You idiot! Are you trying to kill both of us?!”</p>

      <p>“I-I’m sorry! I just went with the flow!”</p>

      <p>“You have my gratitude, ghost! Thanks to you, the tables have turned!”</p>

      <p>Using the opening when they fell to the floor, Theia escaped from Koutarou’s grasp and turned her weapons on him. The guns inside the black disks were shining eerily.</p>

      <p>“Oh no!”</p>

      <p>“Karama, Korama! Block up those holes!”</p>

      <p>“Leave it to us! Ho!”</p>

      <p>“Got it!”</p>

      <p>“Fire!”</p>

      <p>As the weapons were fired, the haniwas blocked a hole each. Theia’s attack hit them directly, but as she had only fired non-lethal weapons, the haniwas remained unharmed.</p>

      <p>“You again?! Ugh, how annoying!”</p>

      <p>Theia’s expression distorted in anger as she swung her left fist. She was wearing a metallic glove that had the power to blow away her opponents, but the haniwas saw the attack coming and easily dodged it as they returned to Kiriha.</p>

      <p>“Thanks, Kiriha-san.” Koutarou thanked Kiriha while getting some distance from Theia.</p>

      <p>“Don’t thank me.”</p>

      <p>“Huh?”</p>

      <p>For some reason, Kiriha grabbed ahold of Koutarou and pushed her large breasts against his back.</p>

      <p>“With this, I can’t lose.”</p>

      <p>“What are you doing?!”</p>

      <p>Koutarou shouted at the girl before he could take the time to confirm the sensation of her chest.</p>

      <p>“Koutarou, as long as you’re with me, that girl can’t defeat me. However, I can still attack her.”</p>

      <p>“Ho!”</p>

      <p>“Ho, ho!”</p>

      <p>Moving simultaneously as Kiriha spoke, the two haniwas floated before Koutarou and Kiriha.</p>

      <p>“Kiriha-san, let go! There’s no reason to continue fighting!”</p>

      <p>“With this, I win, alien princess!”</p>

      <p>“You put some thought into this, Person of the Earth or whatever!”</p>

      <p>Theia grit her teeth and stopped moving. Like Kiriha said, Theia couldn’t attack her in this predicament. With Kiriha using Koutarou as a shield, Theia couldn’t use any powerful weapons, and any non-lethal weapons would just be blocked by the haniwas.</p>

      <p>“Hey! Kiriha! Get away from Koutarou!”</p>

      <p>“Sanae?!”</p>

      <p>But things didn’t go down the way Kiriha had planned.</p>

      <p>“You’re trying to seduce him with your adult figure again!”</p>

      <p>“You’re wrong! Stop it, Sanae! You misunderstand the—”</p>

      <p>“What exactly am I wrong about?!”</p>

      <p>Unfortunately, Kiriha was unable to persuade Sanae, and the now furious ghost jumped in to pull Kiriha and Koutarou apart.</p>

      <p>“An opening!”</p>

      <p>Of course, Theia didn’t let this chance slip by.</p>

      <p>“Blue Knight, eliminate everyone except the pleb!”</p>

      <p>“As you wish, my princess.”</p>

      <p>“Waaaaah, stop it! You’ll destroy the room!”</p>

      <p>Koutarou had jumped in to stop the fighting, but it had only made things worse.</p>

      <p>“...Huh?”</p>

      <p>When Yurika snapped out of it, she was alone by the front door. There was still an uproar coming from the inner room, and the whole apartment was filled with a burning smell.</p>

      <p>“Oh... Oh no! The magic is about to lose effect!”</p>

      <p>Yurika quickly stood up and raised her broom over her head.</p>

      <p>“If I don’t cast a more powerful spell, the room won’t last! Return to normal, Angel Halo!”</p>

      <p>As she spoke, her broom was wreathed in white smoke. When the smoke cleared, the broom was nowhere to be seen. Instead, there was now a long staff in her hands. Like with the broom, the staff was covered in decorations, clearly designed with form over function in mind. No matter how you looked at it, it clearly wasn’t intended to be used as a walking staff.</p>

      <p>“Now to cast it one more time!”</p>

      <p>Yurika grabbed the staff with both hands and closed her eyes to concentrate.</p>

      <p>“Force Field! Modifier: Area Effect! End: Effective Time, Twice!”</p>

      <p>With the last word out of her mouth, a yellow light started shooting out from her staff. The light grew larger and larger, slowly extending to the floor and walls of the room. It was a defensive spell that would protect the room, as well as Koutarou and the others, from damage.</p>

      <p>“Phew, that should do it... Now we should be okay for a little while longer.”</p>

      <p>Once the light extended to cover the entire room, Yurika opened her eyes and wiped the sweat off her brow.</p>

      <p>“Maybe I should cast Elemental Shield too, just in case...”</p>

      <p>Yurika timidly peeked into the inner room where the battle was still going.</p>

      <p>That was when the front door opened without warning.</p>

      <p>“Huh?!”</p>

      <p>“Just what is going on, Satomi-kun?!”</p>

      <p>Standing in the door was the landlord of Corona House, Kasagi Shizuka. She had come to check on things since the commotion from room 106 had continued well past midnight.</p>

      <p>“Th-This place is a complete mess! Just what is going on?!”</p>

      <p>Shizuka could tell what a horrible state the inner room was in from the entrance. The moment she saw it, she looked shocked.</p>

      <p>“What are you doing, Satomi-kun?!”</p>

      <p>Shizuka kicked off her sandals and dashed towards the inner room.</p>

      <p>“Ah, stop, it’s dangerous to go there!”</p>

      <p>“Outsiders should keep quiet!”</p>

      <p>“Kyaaah!”</p>

      <p>Shizuka pushed right past Yurika who was trying to stop her, then jumped into the inner room.</p>

      <p>“Eeek!”</p>

      <p>After being pushed aside, Yurika tumbled into the wall and stopped moving as usual. Shizuka saw it, but her immediate priorities were elsewhere.</p>

      <p>“Just what exactly are you people doing?!”</p>

      <p>The room was charred and riddled with holes. And inside, Koutarou and few other people were practically rioting. Shizuka could tell right away that they were responsible for what had happened to the room.</p>

      <p>“Landlord-san! It’s dangerous! Don’t come over here!”</p>

      <p>“Wh-What did you do to my precious Corona House—this beloved building that my mom and dad left for me?!”</p>

      <p>However, Koutarou’s attempts to stop her didn’t even reach Shizuka’s ears. She was beside herself with rage.</p>

      <p>There probably wasn’t a soul that could see Shizuka’s attack coming.</p>

      <p>“Hyaaaaaaaah!”</p>

      <p>The moment after entering the room, Shizuka caught sight of Sanae and struck her with all of her might.</p>

      <p>“Kyaaaaah! Whyyy?!”</p>

      <p>The lighting fast attack easily sent Sanae flying, despite her invulnerability to normal attacks. With her guard down, Sanae didn’t even have a chance to protect herself.</p>

      <p>“Hahh...”</p>

      <p>However, Shizuka didn’t stop there. She exhaled sharply and used the momentum from her strike to spin around and unleash a roundhouse kick.</p>

      <p>“Hah!”</p>

      <p>“Aaaaah!”</p>

      <p>The blow connected with Kiriha and knocked her away as well. She slammed into Koutarou, but that didn’t slow her down any. Instead, they fell down together next to the wall.</p>

      <p>“Wh-Who are you!?”</p>

      <p>Theia was petrified by Shizuka’s sudden appearance and swift defeat of Sanae and Kiriha.</p>

      <p>“I’m this building’s landlord. I won’t accept any more of this ruckus that’s bothering the neighbors!”</p>

      <p>Her harsh tone and determined posture showed none of Shizuka’s normal kindness. That was just how angry she was.</p>

      <p>“I don’t take orders from anyone! Attack her, Blue Kni—”</p>

      <p>“You’re too slow!”</p>

      <p>Sensing that Theia was about to attack, Shizuka mercilessly thrust her palm forward.</p>

      <p>“Gyah?!”</p>

      <p>Theia was unable to finish her attack orders as she was sent flying by the fast and heavy attack. She landed on the tatami mat in defeat.</p>

      <p>“L-Landlord-san...?”</p>

      <p>Koutarou couldn’t believe what he had just witnessed. He had really struggled with the invading girls, but Shizuka was able to dispatch them in a matter of seconds. And without using any weapons.</p>

      <p>“I... I can’t believe it...”</p>

      <p>“What is she?! Is she really human?!”</p>

      <p>“She could hit me?! She could touch me even though she’s not Koutarou!”</p>

      <p>Of course, the same was true for the girls. They were each in disbelief at the swift defeat. But whether they were ready to accept it or not, they had taken enough damage to be rendered incapacitated.</p>

      <p>“Phewww...”</p>

      <p>Her attack complete, Shizuka now exhaled and turned towards Koutarou and the others as if nothing had happened.</p>

      <p>“Eep!”</p>

      <p>Her piercing gaze caused all four to freeze. They were all convinced she was about to finish them off.</p>

      <p>“Satomi-kun.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert8">
    <img alt="insert8" class="insert" src="../Images/Insert8.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter71">
    <div class="main">
      <p>“Y-Yes!”</p>

      <p>Shizuka looked at Koutarou.</p>

      <p><em>I had a good life...</em></p>

      <p>As the other girls huddled together, they were truly relieved that they weren’t getting Shizuka’s attention.</p>

      <p>“Wh-What can I do for you, Landlord-san?”</p>

      <p>Koutarou, on the other hand, was flustered. Having witnessed Shizuka’s overwhelming prowess, he couldn’t stop sweating.</p>

      <p>“If something like this happens again, I will have you leave.”</p>

      <p>“Y-Yes, I understand!”</p>

      <p>Shizuka’s eyes were sharp and her voice was cold. Shizuka had an overpowering presence that she never normally showed. Witnessing it, Koutarou could feel his life force draining from him.</p>

      <p>“And then there’s you three!”</p>

      <p>“Waaah!”</p>

      <p>When Shizuka’s looked over to the three girls, they started trembling as they embraced each other.</p>

      <p>““I’m sorry, I’m sorry! I’m so sorry!””</p>

      <p>The three girls apologized in choir, dropping all pretenses.</p>

      <p>“If you make a mess again... you know what will happen, right?”</p>

      <p>“Yes!”</p>

      <p>“If you damage this building or cause trouble for the other residents, then—” Shizuka stopped mid-sentence and cracked her knuckles. “I’ll definitely make sure you regret the day you were born.”</p>

      <p>Shizuka then gave the girls a big smile.</p>

      <p>“Eeeeek!”</p>

      <p>The three girls screamed. Even though she was just smiling, Shizuka was exuding uncontrollable bloodlust. Compared to that, she had gone easy on Koutarou.</p>

      <p><em>She’s a devil. This is a devil in human form... I cannot go against her...!</em></p>

      <p>The girls’ instincts screamed at them. But that was when they remembered the existence of Yurika, who was passed out nearby.</p>

      <p><em>Why are you the only one unconscious?!</em></p>

      <p>The girls were envious of Yurika. Being out cold right now seemed preferable.</p>

      <p>“So what do you have to say for yourselves?”</p>

      <p>Shizuka’s smile grew bigger when the three girls didn’t answer. There are plenty of men who would have found that smile very attractive, but it only instilled fear in the hearts of the three girls.</p>

      <p>“I-I understand! I won’t do it again!”</p>

      <p>“I was planning on solving things p-peacefully from the start. I-I have no objections. None whatsoever.”</p>

      <p>“I am of noble birth. I loathe barbaric methods such as fighting to begin with. R-Rest assured!”</p>

      <p>Their responses were all different, but they all amounted to the same thing: a total surrender to Shizuka.</p>

      <p>“Well done.”</p>

      <p>And just like that, Corona House’s room 106 quieted down for the first time in a while.<br/><br/></p>

      <p>Although scorched, the tea table had just barely survived. Including Shizuka, all seven of them were sitting down around it. It was now more cramped than ever before. But nobody complained. And apart from Shizuka, everyone sat up straight and proper. Everyone had a serious expression on their face, and there was no trace of the lighthearted atmosphere from before.</p>

      <p>“...I understand the situation.”</p>

      <p>After hearing the four girls’ circumstances, Shizuka slowly nodded.</p>

      <p>“Ghosts, cosplayers, underground people, and aliens. It’s hard to believe, but it seems I have no choice.”</p>

      <p>Shizuka was all business now. Her tone was nothing like it had been when she helped Koutarou move in. The friendly Shizuka was now nothing but harsh.</p>

      <p>“Um... I-I’m not a cosplayer. I really am a...” Yurika attempted to object to Shizuka’s choice of words.</p>

      <p>“...What was that?”</p>

      <p>“N-No, it’s nothing. I’m a cosplayer. That’s right.”</p>

      <p>But when Shizuka glared at her, she trembled and easily withdrew. Not sticking to her guns in situations like that was the kind of person Magical Girl Yurika was.</p>

      <p>“Again, I understand. But as the landlord, I can’t overlook the commotion. I will have you resolve this situation peacefully.”</p>

      <p>As the landlord, Shizuka had to draw a line somewhere.</p>

      <p>“We had no intentions of fighting Koutarou, but...”</p>

      <p>“We would never be able to come to an agreement! It’s not so easy that we can resolve everything peacefully just because you said so!”</p>

      <p>“Yeah! Koutarou aside, I definitely can’t get along with that woman!”</p>

      <p>However, the girls who had done nothing but fight were unable to simply accept Shizuka’s proposal.</p>

      <p>“Then would you prefer eternal peace right now? I’m fine with that too.”</p>

      <p>“That said, nothing would be resolved with fighting...”</p>

      <p>“Y-You’re right. It seems the time for us to work together has come...”</p>

      <p>“I’ll become a pacifist instead!”</p>

      <p>When Shizuka smiled and cracked her knuckles, the girls’ attitudes completely changed. With sweat pouring down their brows, they all agreed to Shizuka’s proposal.</p>

      <p>“I’m glad you see it my way. And what about you, Nijino Yurika-san?”</p>

      <p>“...”</p>

      <p>Yurika didn’t answer.</p>

      <p>“Nijino-san?”</p>

      <p>“...”</p>

      <p>“You’re not saying you’d like to keep fighting, are you?”</p>

      <p>“Hey, what’s wrong?”</p>

      <p>Sensing danger from Shizuka again, Koutarou looked over at Yurika.</p>

      <p>“Yurika, just say you don’t want to fight. You don’t have to put your life on the line for cosplaying.”</p>

      <p>Koutarou shook Yurika’s shoulders and whispered to her.</p>

      <p>“...”</p>

      <p>But even then, Yurika said nothing. She simply fell to the floor after being shaken by Koutarou.</p>

      <p>“Waaaaah! Yurika?!”</p>

      <p>“She’s unconscious...?”</p>

      <p>“Poor thing. She must have been terrified...”</p>

      <p>Under Shizuka’s guidance, Koutarou and the others agreed on various rules. These were all quickly put into a document. Mostly, it dictated how to peacefully decide the ownership of the room. The other clauses included covered things like not damaging Corona House, not disturbing the neighbors, not fighting outside of the apartment, and not stirring up trouble at night. Finally, collated together, this document became known as the Corona Convention.</p>

      <p>“I’m done. You’re next, Theia.”</p>

      <p>“This is humiliating. There could be nothing more humiliating than signing this document...”</p>

      <p>Theia took the piece of paper from Sanae and reluctantly removed the cap from the pen.</p>

      <p>“Please endure it, Your Highness.”</p>

      <p>Next to her was Ruth, smiling wryly.</p>

      <p>“You don’t have to sign it.”</p>

      <p>“Really?!”</p>

      <p>Theia’s expression brightened at Shizuka’s unexpected offer.</p>

      <p>“But if you don’t sign it, you’ll just get to experience eternal peace right now.”</p>

      <p>Shizuka cracked her knuckles again.</p>

      <p>“N-No thank you. I agree that we should sign this document!” Theia hurriedly moved the pen. Writing in her native tongue, only she and Ruth could read it. “As royalty, I have to bring about peace! My pride is nothing compared to that!”</p>

      <p>While there had been some whining, everyone agreed to sign the document in the end.</p>

      <p>“Landlord-san, should I sign it as well?”</p>

      <p>“Of course. You might be the current tenant of this room, but if you’re not working under the same rules as everyone else, how could we proceed?”</p>

      <p>“But even without this, I already have a contract with you. And I don’t have any laser beams or haniwas either...”</p>

      <p>Continuing after Theia, Koutarou signed his name on the document.</p>

      <p>“Satomi-san, please give it to me next.”</p>

      <p>Waiting for Koutarou to finish writing, Yurika reached out her hand.</p>

      <p>“...”</p>

      <p>However, Koutarou simply stared at Yurika instead of giving her the pen and paper.</p>

      <p>“Wh-What is it?”</p>

      <p>“Landlord-san, should Yurika sign it as well?” Koutarou asked.</p>

      <p>“She doesn’t need to, right? It’s just Yurika, after all,” Sanae added.</p>

      <p>“Well, thinking about it, Nijino-san might not need to. No, I suppose she doesn’t have to.”</p>

      <p>“Then finally, I will—”</p>

      <p>“I’ll do it! I’ll sign it! Please let me sign it!”</p>

      <p>As Koutarou was handing the pen and paper to Kiriha, Yurika hurriedly snatched them away and scribbled down her name: Nijino Yurika. That was her real name.</p>

      <p>“You don’t have to cry, Yurika.”</p>

      <p>“B-But... I’m serious about this too!”</p>

      <p>Finally receiving the document and pen from the tearful Yurika, Kiriha signed her name as well.</p>

      <p>“I’m done.”</p>

      <p>With everyone’s signature, they returned the document to Shizuka. In total there were five names: Koutarou, Sanae, Yurika, Kiriha, and Theia.</p>

      <p>“Excellent. With this, the rules are officially in effect. If you break them... you know what happens, don’t you?”</p>

      <p>After looking over the document, Shizuka looked over the group. All six nodded their heads in unison. They all knew exactly what awaited them if they broke the rules.</p>

      <p>“Well then, everyone, I really do hope you find a way to resolve this peacefully.”</p>

      <p><em>Huh?</em></p>

      <p>At that moment, Shizuka’s smiling face seemed to distort to Koutarou. Suddenly, it wasn’t just her, but the whole room that looked weird. Eventually he started getting dizzy and lost his balance.</p>

      <p><em>Not good...</em></p>

      <p>With those thoughts running through his mind, Koutarou rapidly started to lose consciousness.</p>

      <p>“Satomi-kun?!”</p>

      <p>“Waaah! Koutarou collapsed!”</p>

      <p>“Hey, now’s not the time to sleep! Wake up!”</p>

      <p>“Don’t move him! He has a terrible fever! Get a futon and some ice!”</p>

      <p>“I’ll go get the first aid kit!”</p>

      <p>“I’ll use h-healing magic!”</p>

      <p>“Don’t be ridiculous! Get the futon!”</p>

      <p>“Auuugh...”</p>

      <p>Koutarou’s consciousness sank into darkness.<br/><br/></p>

      <p>Hearing the sound of flowing water, Koutarou opened his eyes.</p>

      <p>“H-Huh...?”</p>

      <p>At first, Koutarou was puzzled to find himself in his futon, but he quickly remembered what had happened.</p>

      <p><em>That’s right. After I signed the document, I suddenly began feeling faint, and then...</em></p>

      <p>The clock pointed to 5 AM, which meant that Koutarou had been asleep for several hours.</p>

      <p>“Are you awake, Satomi-sama?”</p>

      <p>A shadow looked down at Koutarou.</p>

      <p>“...Ruth-san?”</p>

      <p>“Good morning, Satomi-sama.”</p>

      <p>She gave him a mild smile and exchanged the wet towel on his head for a new one. The sound of water from before was the sound of her washing the towel.</p>

      <p>“Thank you, Ruth-san.”</p>

      <p>The new towel felt nice and cool.</p>

      <p>“No, there is no need to thank me over something like this. Besides, you should thank everyone else as well. They were all very worried when you collapsed.”</p>

      <p>“Ah...”</p>

      <p>Urged on by Ruth, Koutarou looked around and spotted the girls. They were all sitting around the futon, each asleep with an exhausted look on their face.</p>

      <p>“So you all helped nurse me back to health...?”</p>

      <p>“Yes. Kasagi-sama was here just a moment ago too.”</p>

      <p>“Even Landlord-san?”</p>

      <p>“Yes. But she said she had to attend school and apologized as she left.”</p>

      <p>“I see. I caused a lot of trouble for her...”</p>

      <p>Koutarou looked around again. Sanae was sleeping soundly next to his pillow. Kiriha was sleeping on the opposite side. Yurika was holding on to a cushion as she slept, and Theia looked like she was sleeping uncomfortably in her big dress.</p>

      <p>Koutarou had only thought of them as troublemakers, but looking at them now, he felt the exact opposite about them.</p>

      <p><em>They might not be all that bad...</em></p>

      <p>It was a feeling of gratitude for their kindness.</p>

      <p>“Satomi-sama, please close your eyes again.”</p>

      <p>Koutarou wasn’t sure if Ruth knew how he felt, but she smiled at him gently.</p>

      <p>“You’re the most fatigued of us all. You’ve been pushing yourself these past few days, haven’t you? Please rest.”</p>

      <p>“...I think I’ll do just that.”</p>

      <p>Koutarou obediently closed his eyes.</p>

      <p>“Goodnight, Satomi-sama.”</p>

      <p>Koutarou closed his eyes, but opened his mouth once more.</p>

      <p>“...Thank you.”</p>

      <p>Those words weren’t just intended for Ruth.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter8title">
    <img alt="chapter8title" class="insert" src="../Images/ChapterTitle8.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter8">
    <div class="main">
      <h1>There’s a Spirit of Cooperation</h1>

      <h2>Friday, April 10th</h2>

      <p>Harumi strained and peeked through the small window in the door to class 1-A.</p>

      <p>“Satomi-kun is...”</p>

      <p>The disorderly atmosphere before homeroom was the same in any classroom. There were those who were talking to friends, those doing homework, those reading... The students all spent their morning in various ways.</p>

      <p>“...Ah, there he is!”</p>

      <p>Harumi finally spotted the person she was looking for sitting in the back of the classroom.</p>

      <p>“Good, Satomi-kun must be feeling better...”</p>

      <p>Koutarou had taken the day off from school yesterday. Since they had club activities, he had called to let her know. But Harumi couldn’t help worrying about Koutarou. That’s why she’d come to check on him today.</p>

      <p>“He’s laughing... It looks like he’ll be fine.”</p>

      <p>Having confirmed that, Harumi stopped peeking into the classroom and turned around to walk to the second-year classrooms. Being as withdrawn as she was, she didn’t think to call out to Koutarou.</p>

      <p>“All right... I’ll have to work hard today too.”</p>

      <p>Seeing that Koutarou was back and healthy was enough for Harumi. And she would see him later for their club activities, so she had no reason to rush anything.</p>

      <p>Koutarou on the other hand was just chatting away with Kenji like always, completely unaware that Harumi had come to see him.</p>

      <p>“School sure is relaxing. Too much noise is no good.”</p>

      <p>Koutarou looked around the classroom as he spoke, and Kenji flashed him a playful smile.</p>

      <p>“Still, it’s rare for you to take a day off from school, Kou.”</p>

      <p>“Don’t say that like I’m some kind of brainless jock.”</p>

      <p>“...But you are.”</p>

      <p>After all the commotion, Koutarou ended up resting for a whole day.</p>

      <p>Sanae had appeared on Sunday. On Monday it was Yurika. On Tuesday it was Kiriha, and on Wednesday it was Theia. The nonstop fuss had left Koutarou so exhausted that just sleeping until morning hadn’t been enough to recover. Because of that, Koutarou was absent from school on Thursday, and it was now Friday.</p>

      <p>“Well, moving in and starting school was too much for even the mighty Kou, I guess.”</p>

      <p>“Yeah, something like that.”</p>

      <p>Koutarou hadn’t told Kenji the truth. Kenji didn’t do well with anything involving the occult or strange occurrences.</p>

      <p>“Ahahaha, but I’m glad you’re feeling better now, Satomi-kun! Ahahaha!”</p>

      <p>Shizuka, who was with Koutarou and Kenji, laughed awkwardly. Being the only one who was aware of Koutarou’s situation, she understood his complex emotions. She smiled at him sympathetically, but...</p>

      <p>“Hahaha... HA?!”</p>

      <p>That smile suddenly froze.</p>

      <p>“Okay, everyone, get back to your seats.”</p>

      <p>The female homeroom teacher entered the classroom. Of course, that alone wasn’t enough to surprise Shizuka.</p>

      <p>“Listen up, everyone! I’d like to introduce you to some new transfer students!”</p>

      <p>Their homeroom teacher had brought four transfer students with her.</p>

      <p>“Oooooooohhhh!”</p>

      <p>The excitement in the classroom reached its peak instantly.</p>

      <p>“S-Satomi-kun! Look over there!”</p>

      <p>Having spotted the transfer students right away, Shizuka shook Koutarou’s shoulders in a fluster.</p>

      <p>“Huh?”</p>

      <p>Koutarou and Kenji were still chatting and hadn’t been paying attention.</p>

      <p>“What now, all of a sudden, Landlord-san...?”</p>

      <p>“Just look over there!”</p>

      <p>Losing her patience with Koutarou, Shizuka forcibly pulled on Koutarou’s chin and turned his head towards the front of the classroom.</p>

      <p>“Ack!”</p>

      <p>Koutarou’s eyes immediately shot wide open and he blinked repeatedly. He doubted his own eyes. He couldn’t believe what he saw before him.</p>

      <p>“I-It couldn’t be...”</p>

      <p>If it meant not having to believe what he was seeing, Koutarou was willing to accept all the mysteries of the world right now. That was how badly shaken he was.</p>

      <p>“Y-You guys, I-I regret ever thanking you...”</p>

      <p>Koutarou’s voice sounded like someone who had gazed into the depths of hell. But the hell he was seeing came in the shape of people.</p>

      <p>Nijino Yurika.</p>

      <p>Kurano Kiriha.</p>

      <p>Theiamillis Gre Forthorthe.</p>

      <p>Ruthkania Nye Pardomshiha.</p>

      <p>These four stood at the head of the class in Kisshouharukaze uniforms, all showing angelic smiles.</p>

      <p>“Everyone, please be nice, okay?”</p>

      <p>The four girls introduced by the teacher bowed their heads.</p>

      <p>“Please take good care of us!”</p>

      <p>The girls were wearing brand new uniforms, and all said their greeting in unison.</p>

      <p>“...Satomi-kun...”</p>

      <p>Shizuka put her hand on Koutarou’s shoulder as if to console him. Out of the whole wide world, Shizuka was the only person who understood the position Koutarou was in right now.</p>

      <p>“I tried to stop them, you know.”</p>

      <p>That was when Sanae appeared in front of Koutarou. Strangely enough, she was in a school uniform too. She floated around Koutarou like usual.</p>

      <p>“What are those girls planning...?”</p>

      <p>Shizuka should have been able to see Sanae too, but she showed no signs of noticing. Instead, she was focused on the four girls in front of the blackboard. But Shizuka wasn’t the only one that didn’t see Sanae. In fact, not a single person seemed to notice her. Only Koutarou and the four girls could see and hear Sanae right now.</p>

      <p>“I told them that even if they’re trying to put pressure on you to chase you out of the room, this is too much.”</p>

      <p>“F-For something like that... they’d go this far...”</p>

      <p>Koutarou’s clenched fist began trembling.</p>

      <p>“Oh, Koutarou is here!”</p>

      <p>Theia called out to Koutarou in a very unnatural fashion, as if she had just noticed him.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert9">
    <img alt="insert9" class="insert" src="../Images/Insert9.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter81">
    <div class="main">
      <p>“I’m glad we could meet again, Satomi Koutarou.”</p>

      <p>“Satomi-saaan! I’m so happy we’re in the same class!”</p>

      <p>Kiriha and Yurika followed after Theia. The only one who didn’t say anything was Ruth, who just smiled apologetically.</p>

      <p>“Those idiots... How obvious can you be?”</p>

      <p>The girls were of course aware which class Koutarou was in. That was why they “transferred” here to begin with. They also knew what would happen when they called out to him.</p>

      <p>“‘Koutarou’?”</p>

      <p>“‘Meet again’?”</p>

      <p>“‘Satomi-san’?”</p>

      <p>The class would turn to Koutarou with their curious and envious glances. Some even gave him dirty looks. It was only natural. Each of the four girls was beautiful. Being thrust into such a situation, Koutarou remembered something important.</p>

      <p>“That’s right. I completely forgot... In the end, you’re invaders. All right, if that’s how you want to play, I accept your challenge...”</p>

      <p>“Satomi-kun, stop! Calm down!”</p>

      <p>Shizuka’s attempts to restrain Koutarou were ineffective.</p>

      <p>Getting emotional, he shouted out in a loud voice, “Bring it on! I’ll take you all on!”</p>

      <p>“What are you talking about, Koutarou?”</p>

      <p>Theia tilted her head cutely and feigned ignorance. Yurika flinched at the threat. Kiriha calmly observed the developing situation, and Sanae just laughed at Koutarou.</p>

      <p>“I’ll protect my lifestyle with my own hands! I won’t let you guys just do as you please!”</p>

      <p>Two years and eleven months remained until Koutarou graduated high school. And now, the curtains for a three year long battle rose.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="afterword">
    <div class="main">
      <h1>Afterword</h1>

      <p>Long time no see, everybody. It’s Takehaya.</p>

      <p>It’s been about a year since <em>Ano Hibi wo Mou Ichido,</em> and now my second work has finally been published. This chance only came my way thanks to everyone’s support. I would first like to thank you all for this.</p>

      <p>Since I have some leeway with the pages this time around, I’d like to touch on this series. <em>Invaders of the Rokujouma!?</em> is a comedy that follows Koutarou, our protagonist who has just entered high school, and his nonstop misfortune.</p>

      <p>Since my last work didn’t have any comedic elements in it, I believe this has quite a different feel to it. Moreover, this story has been set up so it could be continued. I wrapped up my previous title in a single volume, aiming to write it as a novel. The two works are quite different in that regard as well. So depending on the reception, I should be able to continue with this story.</p>

      <p>Speaking of differences, I’m working with a different illustrator this time. Helping me out this time around is Poco-san. Though they were taken aback by my excitement in my hobbies, I believe they will be able to deliver great images for this series.<br/><br/></p>

      <p>This work came to life when I was working on a brutal story for a game last year and the year before that. As I was writing that story, I truly felt negative feelings, and by the time I finished it, I felt like I was going to lose my mind.</p>

      <p>That was when I figured that maybe writing a lighthearted story would give off lighthearted feelings the same way. Following that simple idea, I made the first draft for this title.</p>

      <p>However, there were problems up until this story got the go-ahead. The editorial department and I had different opinions on the project. After a lot of discussion, we eventually decided to go back to the original idea. Because of that, there was a big delay before I could get this work out into the world. But in return, I believe I was able to write something good. I hope that you feel the same way.</p>

      <p>By the way, when I was writing this story, I did feel lighthearted like I had hoped.<br/><br/></p>

      <p>This is the second novel I’ve written, but as my first work was written with no intention to continue it from the outset, this might as well be my first work. Therefore, I am very eager, but my experience and skills are still developing. That’s why I hope that you can kindly watch over me as the work progresses.</p>

      <p>If the reception is good, I think I’ll be able to release a second volume soon. If possible, I’d like to release both a second and third volume this year.</p>

      <p>If possible. That’s right, if possible.</p>

      <p>What a nice phrase.<br/><br/></p>

      <p>Finally, I would like to thank everyone at the editorial department for their hard work, Poco-san for the nice illustrations, my friends for their advice, and all of the readers for buying this book.<br/><br/></p>

      <p>With that, I’ve used up all of the pages, so this seems like a good place to stop.</p>

      <p>Let us meet again in some other afterword.</p>

      <p class="signature">January, 2009</p>

      <p class="signature">Takehaya</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="notes">
    <div class="main">
      <h1>Notes</h1>

      <ol>
        <li id="note1">Tatami - A type of mat used as flooring material, roughly 0.9m by 1.8m. <a href="../Text/chapter1title.xhtml#note1">→</a></li>

        <li id="note2">Yayoi period - The Japanese iron age, normally cited as 300 BC to 300 AD. <a href="../Text/chapter1title.xhtml#note2">→</a></li>

        <li id="note3">Jōmon period - Prehistoric Japan, dating from roughly 12,000 to 300 BC. <a href="../Text/chapter1title.xhtml#note3">→</a></li>

        <li id="note4">Maneki Neko - Literally translated to “beckoning cat,” these figures are considered lucky charms that bring good luck to their owners. <a href="../Text/chapter1title.xhtml#note4">→</a></li>

        <li id="note5">Haniwa - Clay figures that were used during rituals and buried with the dead during the Kofun period; it is theorized that the souls of the dead would reside inside them. <a href="../Text/chapter1title.xhtml#note5">→</a></li>

        <li id="note6">Ginza - The Japanese word for “galactic” or “galaxy” is “ginga,” while Ginza is a district in Tokyo. <a href="../Text/chapter1title.xhtml#note6">→</a></li>
      </ol>
    </div>
  </section>
</body>
</html>