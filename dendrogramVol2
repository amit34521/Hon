<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="default-style"/>
  <title>Infinite Dendrogram: Volume 2</title>
  <link href="../Styles/stylesheet.css" rel="stylesheet" type="text/css"/>
</head>

<body>
  <section epub:type="bodymatter chapter" id="prologue">
    <div class="main">
      <h1>Prologue: The Emotions of the Dead</h1>

      <p><em>Kingdom of Altar, Cruella Mountain Belt</em></p>

      <p>To the east of Gideon — the second largest city in the Kingdom of Altar — there was a mountainous area known as the Cruella Mountain Belt. It was the kingdom’s border with Caldina — a country of expansive, desertlike wastelands.</p>

      <p>For years, this border area had been a popular place for bandit gangs and their hideouts. Even if some group on a quest from the Adventurers’ Guild eliminated one of them, they would soon be replaced by others.</p>

      <p>There were two reasons for that.</p>

      <p>The first was that the kingdom couldn’t do any widescale and thorough bandit hunts due to the possibility of the neighboring country of Caldina seeing it as an act of war and thus provoking them.</p>

      <p>The second was that the belt was on the primary trade route between Gideon, one of the kingdom’s largest cities, and Caldina — a nation known for its mercantilism. A bandit couldn’t ask for an area more plentiful with prey. Thus, the bandit problem in the belt was neverending.</p>

      <p>However, it actually wasn’t a bad thing for the Adventurers’ Guild.</p>

      <p>The new bandit gangs were always made up of people who went broke and got reduced to brigandry. Their jobs were low-rank and their levels weren’t even maxed. Most active adventurers could eliminate them without much effort, and since it was a net positive for the adventurer economy, the guild wasn’t averse to the idea of the problem’s continued existence. The only real victims were the peddlers unfortunate enough to be marked by the brigands.</p>

      <p>However, at one point, this bandit problem — already reeking of bloody money — took a turn for the worse.</p>

      <p>One of the bandit gangs started kidnapping children from Gideon and the nearby villages.</p>

      <p>They demanded ransom money for every child, and those with unpaid ransoms were simply never returned. Some relatives didn’t get their children back even after paying, while others only received shredded pieces of their corpses. It all seemed like a sick joke.</p>

      <p>Naturally, the parents of the children requested to have the Adventurers’ Guild eliminate those bandits, and, of course, the guild accepted it.</p>

      <p>The officials of the Adventurers’ Guild believed that the kidnappers had someone particularly powerful among them. Thus, they gathered and dispatched a party made up of several excellent tian adventurers. It was a group that could even fell a Pure Dragon.</p>

      <p>Everyone believed that — regardless of whether the kidnappers had capable people among them — the party would eliminate the bandit gang and bring back any children that were still alive. The party members themselves were certain of that, as well.</p>

      <p>The party’s leader — famous for his dashing looks — set out on the quest while waving goodbye to the people seeing him off. The intrepid smile on his face made everyone — the guild’s officials, other adventurers, and, of course, the inhabitants of Gideon — all the more certain that they would return successful.</p>

      <p>The following day, the leader’s half-eaten face was placed outside the steps of the guild hall. It was accompanied by a paper saying “Seconds, please,” along with a number of small fingers, one finger for every kidnapped child.</p>

      <p>Though perplexed by this unexpected turn of events, the Adventurers’ Guild quickly made their next move. Their plan was to gather several adventurer parties and annihilate the bandit gang through human-wave tactics. Among the adventurers — numbering nearly a hundred — there were even some Masters. The guild’s Masters were absolutely certain that they would emerge victorious.</p>

      <p>Three days later, a resurrected Master came back to report what happened. “They killed us all. It just can’t be done,” he said.</p>

      <p>According to him, most of the enemies were absolute weaklings, but two of them were ridiculously strong.</p>

      <p>One was a horse-man undead, while the other was a large, ox-headed man. Their power was far beyond that of normal tians, and it was fair to say that they were what had killed most of the adventurers.</p>

      <p>With that report, the guild’s master realized that this wasn’t a job for adventurers. He contacted the knights responsible for the area around Gideon, but the army couldn’t act due to the area being close to the border with Caldina.</p>

      <p>Even Gideon’s local champion — Super Gladiator Figaro — rejected the request, despite being able to take care of the matter all by himself.</p>

      <p>The Adventurers’ Guild had exhausted all their options, leaving them unable to do anything. Every now and then, some stronger sorts would accept the request and head out to eliminate the bandits, but they would always end up as corpses and were sent back to the guild along with fingers of the children.</p>

      <p>This tragedy continued for a year, and the Adventurers’ Guild eventually stopped making the request appear in their catalogs.</p>

      <p>Thus, the bandits in question — the Gouz-Maise Gang — were still active in the Cruella Mountain Belt.</p>

      <p class="centerp section-marking">◆</p>

      <p>It was happening in the gloomy cellar of an abandoned fortress.</p>

      <p>“Third this month. Payment received. No relevant materials. To be returned.” The man mumbled something while looking at an old desk in a piercingly-cold room thick with suffocating moisture.</p>

      <p>“Fourth this month. Payment not received. Relevant materials found. Turned to materials.”</p>

      <p>He looked through the documents, spoke those words, and wrote something down on the ledger in his hand. It was much like a ledger one would use in a business, and the one under his hand wasn’t the only one on the table.</p>

      <p>Gloomy as the idea might’ve been, it seemed as though he had only placed them there just for the sake of having them around, and the man wouldn’t deny that idea.</p>

      <p>“Fifth this month. Payment received. Relevant materials found. Head to be returned after turning to materials.” With those words, the man stood up and walked to a neighboring room.</p>

      <p>The way he walked was curious. His upper half was that of a human, but the bottom half was that of a horse. The man was a humanoid creature known only as “horse-man.”</p>

      <p>Just as there were human-horse mix <em>monsters</em> known as centaurs, so there were human-horse mix <em>humans</em> known as horse-men. An average monster would have its name pop up above its head, but that didn’t apply to the man.</p>

      <p>Therefore, this horse-man was, in fact, humanoid...</p>

      <p>...regardless of just how inhuman his appearance and mental workings were.</p>

      <p>“This is the one,” he said.</p>

      <p>The room had cages in it, and inside there were a number of small animals. They were the man’s commodities. The small animals were all asleep and thus completely oblivious to the man’s presence.</p>

      <p>The horse-man removed the small animal from the fifth cage and placed it on the stony floor of his own room. On the floor, there was a magic circle the man had drawn. The man fixed the shackles, which were chained to the floor, on the small animal’s limbs. He took out a black crystal.</p>

      <p>“______”</p>

      <p>As he whispered something, the magic circle began to shine, and it released small amounts of purple lightning.</p>

      <p>At the very same moment, the small animal woke up.</p>

      <p>“GYAAAAHHHHH!”</p>

      <p>The shriek that escaped its mouth was thick with anguish.</p>

      <p>It tried to raise its body up, but the manacles binding it were not so accommodating. As the metal on its limbs tore through its skin, the small animal’s body spasmed and hit its back to the stony floor in a futile attempt to break out.</p>

      <p>This continued for a long five minutes...</p>

      <p>“Mo...mmy...”</p>

      <p>...and at the end, the small animal — the miserable little human child — breathed its last.</p>

      <p>“This is less than I expected,” the horse-man said, looking at the crystal in his hand.</p>

      <p>Then he cut off the corpse’s head with a large blade he had prepared, stuffed it into a bag, and threw it into a basket that said “To be returned.” The rest of the body was carefully put into a container saying “Materials.”</p>

      <p>Then — as if what had just happened was nothing special — the man returned to the table and continued filling in the ledger.</p>

      <p>No one who knew the ledger’s contents would ever compare it to those used in business. At this point, it was nothing but a cursed book containing the fates of countless children.</p>

      <p>“Sixth this month. Payment not received. No relevant materials. Dispose. Gouz!”</p>

      <p>In response to the man’s call, something within the darkness began to move. “Ahh...”</p>

      <p>The creature referred to as “Gouz” — a large man with an ox’s head and demonic fangs — reached into one of the cages and grabbed a little girl by her arm. She was sleeping and continued to do so even as he dragged her across the floor.</p>

      <p>Many would say that she would’ve been better off if she continued sleeping. However, Gouz didn’t allow that. Gently — like a parent or a close friend — he tapped on her cheek.</p>

      <p>The little girl stirred and woke up...</p>

      <p>“They taste better when they’re scared, y’know,” he grinned.</p>

      <p>...and her flesh was rendered from bone. Eaten alive.</p>

      <p>By the time Gouz was done with his snack, the horse-man was done filling in the ledger.</p>

      <p>“Gouz, don’t make such a mess,” he said.</p>

      <p>“Gahahah!” the ox-head laughed. “Maise, this place is basically painted with the brats’ blood and other fluids! I couldn’t make it worse if I wanted to!”</p>

      <p>“I’m talking about your saliva. It reeks.”</p>

      <p>“That so? Well, I’ll try to be careful, then.”</p>

      <p>The horse-man — Maise — sighed at Gouz’s half-hearted and unreliable response and changed the subject.</p>

      <p>“That’s today’s set done,” he said. “Gouz, after we go through tomorrow’s set, we’re leaving this place.”</p>

      <p>“Huh? We are?” asked the ox-head.</p>

      <p>“Yes,” answered the horse-man. “That event is starting in Gideon in just two days. Some of those who will gather for it might try to eliminate us. It would be far too troublesome.”</p>

      <p>“Masters, huh?” sighed Gouz. “Why not just kick their non-serious asses?”</p>

      <p>“Because we can’t,” curtly replied Maise. “We could handle those with high-rank jobs, but Superiors and their Superior jobs would be far too challenging. Also...”</p>

      <p>He momentarily stopped talking, merely to emphasize the words that followed.</p>

      <p>“...they stand where we are aiming for.”</p>

      <p>Maise’s words — which had some sort of certainty to them — made Gouz laugh out loud. “Gehahahaha! You’re not wrong there.”</p>

      <p>“Ah, it just hit me,” added the ox-head. “You said we’re leaving, but what about our underlings? There are, like, a hundred of ‘em, and they’re still working hard getting the brats and whatnot.”</p>

      <p>Gouz’s question made Maise’s eyes — empty sockets where a wisp-like fire popped up and disappeared — light.</p>

      <p>“We’re taking them with us, of course,” said the horse-man.</p>

      <p>“Gahahah! Hope they all fit!”</p>

      <p>Gouz was a man-eating ox-head demon with a high-rank job from the gladiator grouping: Strong Gladiator.</p>

      <p>Maise: a grudge-wielding undead horse-man with a high-rank job from the necromancer grouping — Lich.</p>

      <p>They were the Gouz-Maise Gang.</p>

      <p>They were Gideon’s most feared band of kidnappers and murderers.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter1">
    <div class="main">
      <h1>Chapter One: A Morning in Gideon</h1>

      <p><em>Paladin Ray Starling</em></p>

      <p>Most large cities in the Kingdom of Altar — the royal capital included — were encircled by a large wall. Not only was it a necessary structure that protected against monsters and attacks from other countries, it also separated the worlds inside and out.</p>

      <p>Duel City Gideon, where we had just arrived, was no different.</p>

      <p>“Whoa...” I couldn’t help but voice my amazement. Beyond the walls — which were similar to the ones in the capital — waited a radically different scenery.</p>

      <p>It made me remember how I’d felt when I had first entered Altea. The atmosphere of a hyper-realistic fantasy town was moving, to say the least, and Gideon was making me experience it all over again.</p>

      <p>The air here was thick with people’s enthusiasm. I had a feeling that most of it came from the very middle of the metropolis — the Great Central Arena of the duel city, towering right before my eyes. Ancient Rome’s Colosseum was 200 meters in diameter and 50 meters in height, yet Gideon’s pride and joy seemed to be more than twice the size of that.</p>

      <p>According to a sign hanging near the gates to Gideon, there were twelve smaller arenas evenly spaced out around the city, and every single one of them was active daily. The sign also said that the Great Central Arena was often used for various events.</p>

      <p>With all the liveliness here in Gideon, I found it hard to believe that this city was part of a kingdom that had recently experienced a crippling blow in a war and was forced to the verge of defeat.</p>

      <p>I looked around and saw a number of humanoid races I didn’t encounter much back in the capital. Some had beast-like ears, others had dragon-like horns... There were even some fairies, so petite they only went up to my knees. They seemed to be this world’s Demi-Humans — a staple for every fantasy work.</p>

      <p>As I watched them, I noticed that there were both tourists and those who actually lived and worked here. Figaro hadn’t been lying when he’d said this place was lively.</p>

      <p>“What an energetic city,” said Rook.</p>

      <p>“It’s only natural, since this area isn’t close to the kingdom’s border with Dryfe, which is in the north,” Marie said. She began explaining why. “The countries close to Gideon are Caldina and Legendaria. The latter signed a treaty of commerce with Altar, while the former is a full ally, so this city gets many tourists from both.”</p>

      <p>She showed us a map to illustrate what she’d explained. In the center of the map was Gideon; to the east, a mountain belt, followed by Caldina; and to the south, there was Legendaria. To the west, there was a small patch of land followed by the open sea, while to the north, there was the capital.</p>

      <p>“Not only is Gideon positioned in a safe spot — you can also count all the gladiators fighting in the arenas as its soldiers,” Marie continued. “It wouldn’t be an exaggeration to say that Gideon is the strongest city in the kingdom.”</p>

      <p><em>I see,</em> I thought. <em>That makes it the safest city in the Kingdom of Altar.</em></p>

      <p>I could only assume that many people who’d escaped from the capital had chosen this as their destination. After all, in the catalog of the capital’s guild, there had been many escort requests from people searching for a safe refuge.</p>

      <p>However, there were still merchants like Alejandro, who would go out of their way to stock up in the capital. We and that merchant had gone our separate ways at the entrance to Gideon, but since he’d wished to thank us properly, he’d invited us to visit his shop whenever we had the time.</p>

      <p>“Now, let’s go to the Adventurers’ Guild,” said Marie. “We have to finish the quest and report that Gardranda was eliminated.”</p>

      <p>Rook and I were quick to agree, and we all made our way to Gideon’s Adventurers’ Guild.</p>

      <p>The ceiling inside it was higher than it was in the capital’s guild. The entrance was larger, too. The designers were probably being considerate of the larger races inhabiting and visiting this city.</p>

      <p>Anyway, we completed the delivery quest without any problems. The reward was 30,000 lir. We split it evenly and got 10,000 lir each. It was a nice amount, no doubt about it. However, we ran into some problems when claiming the reward we were supposed to get for taking care of Gardranda.</p>

      <p>Proving that we’d done it wasn’t difficult at all. We simply had to go to a special counter and show them the MVP special reward: The Miasmaflame Bracers, Gardranda.</p>

      <p>Items of this type were always named after the defeated UBM, had qualities that fit the MVP, and couldn’t be transferred in any way. Thus, the fact that I possessed the item with Gardranda’s name on it could only mean that I had been the most valuable player in Great Miasmic Demon, Gardranda’s elimination.</p>

      <p>Of course, it was also possible to prove such things by going through a thorough inquiry. It was only natural, considering that not every bounty was a UBM.</p>

      <p>And so, though we got the reward money without any trouble, we found the amount to be quite problematic.</p>

      <p>It amounted to a total of 1,000,000 lir. That was the equivalent of 10,000,000 yen, which was quite a fortune. It got us to sit around a table in the guild and intensely argue about how we would split it.</p>

      <p>“Oh, come on, now!” I raised my voice. “Let’s just all take a third and be done with it!”</p>

      <p>“No!” said Marie. “I already took the money for the potions I used, so there’s no reason for me to have any more! I didn’t participate in the battle at all! You two should just split it in half!”</p>

      <p>“I didn’t fight Gardranda, either!” cried Rook. “I could never accept the same amount as Ray! He should just take it all, honestly!”</p>

      <p>The three of us were fiercely arguing in favor of reducing the amounts we would get.</p>

      <p>First, Marie had been given approximately 100,000 lir of the reward to make up for the Elixir she’d thrown at me and other medicines she’d used on the people in the carriages. She’d been apprehensive about accepting it, saying that she’d chosen to use those items on her own volition, but I’d insisted, and she’d soon caved. With that settled, we’d had 900,000 lir left, and that was when things had gotten fiery.</p>

      <p>I had argued that it had been the result of us acting as a party, and insisted that we all take a third each.</p>

      <p>Marie had insisted that she didn’t deserve or need more than what she’d gotten for the medicine.</p>

      <p>Rook had stated that he didn’t deserve any money because he hadn’t participated in the battle against Gardranda.</p>

      <p>I sincerely believed that they both were invaluable in the victory against the demon, so I really wanted them to take what was rightfully theirs.</p>

      <p>“Honestly, I already got the MVP special reward, so maybe I shouldn’t take any of it,” I said.</p>

      <p>“That would take you beyond simple selflessness and quickly make you look like an unreasonable lunatic,” commented Nemesis.</p>

      <p>I was being completely serious, yet Nemesis looked at me like I was an idiot. Rook and Marie, too, seemed thoroughly perplexed by my suggestion.</p>

      <p>“Hey, these things are downright insane,” I said. “I really can’t let myself take much after getting something <em>this</em> good.”</p>

      <p>I raised my hands to show off the things on them. These two-tone colored bracers — one red, other dark purple — were inside my inventory after we had defeated Gardranda.</p>

      <p>The description in the equipment window went like this:</p>

      <p><em>Miasmaflame Bracers, Gardranda</em></p>

      <p class="noindent"><em>Legendary item</em></p>

      <p class="noindent"><em>A legendary item embodying the concepts surrounding the three-faced demon of flame and miasma.</em></p>

      <p class="noindent"><em>In addition to being extremely tough, it increases the physical strength of the wearer.</em></p>

      <p class="noindent"><em>This item cannot be transferred or traded.</em></p>

      <p class="noindent"><em>No level limit.</em></p>

      <p>It actually gave a 100% bonus to STR, and had more defense than all my other armor combined. Not only that, but it also allowed me to use the skills “Purgatorial Flames” and “Hellish Miasma,” which were probably much like the attacks used by the UBM itself. There was also a skill that I couldn’t read for some reason, one that simply said “???”.</p>

      <p>They were insanely good, no doubt about it.</p>

      <p>Not only did they seem to be worth more than 300,000 lir — they’d probably go for more than the whole reward for defeating Gardranda.</p>

      <p><em>I mean, it’s a “legendary” item,</em> I thought.</p>

      <p>“I know I’m the MVP and all, but taking the reward after getting <em>these</em> would be far too much,” I said.</p>

      <p>We would have lost the battle against Gardranda if Marie hadn’t provided support with her items. Rook, too, had done a great job holding back Audrey — who had originally been the demon’s mount.</p>

      <p>We wouldn’t have achieved victory if it hadn’t been for them, so I thought I was fair in insisting that my contributions were worth only a third of the reward.</p>

      <p>“...I understand,” said Marie. “But I think I have a better idea.” She lightly hit the table. “First of all, Ray, you’re getting 300,000, and that’s final. If <em>you</em> don’t accept that money, no one here has the right to have any of it. Now, Rook, I know you don’t want to take as much as Ray, so let’s cut it by half and give you at least 150,000. And before anyone tells me off for not taking anything, I’ll be satisfied with just 50,000, thank you very much.”</p>

      <p>Rook and I weren’t against that split, so that was 500,000 lir taken care of. However, there was still 400,000 lir left.</p>

      <p>“We shall use the rest as a party,” said Marie.</p>

      <p>“By that, you mean...?” I raised an eyebrow.</p>

      <p>“You could call it a little lesson for future reference,” she answered.</p>

      <p><em>What is she talking about?</em> I thought.</p>

      <p>“For now, just leave it all to me,” she continued. “I would like you to gather here in the afternoon after three days game time. Is that okay with both of you?”</p>

      <p>Three days game time was just one day in reality.</p>

      <p>“No problems here,” said Rook.</p>

      <p>“I don’t have any plans for tomorrow, either, but what are you planning?” I asked.</p>

      <p>“Let’s have it be a little secret for the sake of surprise,” said Marie. “Oh, but if you don’t like this idea of mine, just say so. I’ll give your money back at once.”</p>

      <p>“No, it’s fine by me,” I said. I had absolutely no intention of taking any more, so I just let Marie do her thing.</p>

      <p>“Then with that, we’re done splitting the money,” she said. “Good job on finishing this quest, you two.”</p>

      <p>“Yeah, thanks for the help,” I said.</p>

      <p>“Thank you very much,” said Rook.</p>

      <p>And so ended the first quest we had taken up as a party.</p>

      <p>We had a small celebration, and by the end, I was so tired that I immediately logged out.</p>

      <p class="centerp section-marking">◇</p>

      <p>The next day, I logged in soon after waking up.</p>

      <p>I’d slept long enough for a whole day to have passed in the game. <em>Infinite Dendrogram’s</em> tripled time feature was useful and all, but situations like these made it seem a bit confusing and even bothersome. The time here was six o’clock in the morning, and the sun was just beginning to rise.</p>

      <p>As soon as I logged in, Nemesis jumped out of the crest on my left hand and greeted me. “Good morning, Master. You sure are early today.”</p>

      <p>“...Funny, considering that I basically overslept in terms of real life time,” I said.</p>

      <p>“So what are you doing today?” asked Nemesis. “It’s too early for shops to be open.”</p>

      <p>“Well, I was thinking of doing it after getting some new gear, but I guess I’ll have to do the testing first,” I answered.</p>

      <p>“Testing? Of what?” she asked again.</p>

      <p>I raised both my hands before her. “These.” They were covered by two pieces of armor. My Miasmaflame Bracers.</p>

      <p>Just like the royal capital, most of the kingdom’s cities always had their gates open. There were many reasons for that, but one of them was the fact that there were many Masters who were active at night. It would be extremely inconvenient if they were only allowed to pass during the day, and there would be many people who would go out of their way to try to climb over the walls. Thus, the gates were open 24 hours a day. There were three guard shifts, and it reminded me of part-time jobs in convenience stores.</p>

      <p>When I passed the northern gate and greeted the guards standing there, they greeted me back in a slightly sleepy manner.</p>

      <p>Soon after leaving the city, I was standing in Nex Plains, the same place I had passed through yesterday.</p>

      <p>I roamed about looking for a monster I could do the test on, and it didn’t take long for me to find a lone Goblin Warrior. I was familiar with this monster, so I could defeat it even if the test failed. A good target, no matter how I looked at it.</p>

      <p>“You said you were going to test the bracers, but is there anything specific you had in mind?” asked Nemesis in her sword form.</p>

      <p>“Well, these Miasmaflame bracers have skills on them, right? I want to see if they’re of any use,” I said. “I don’t like the idea of having to try them out on something stronger than myself.”</p>

      <p>I had gotten Vengeance is Mine during the fight with the Demi-Drag and Like a Flag Flying the Reversal while fighting Gardranda, but I couldn’t continue to rely on skills I wasn’t familiar with to always match my situation and lead me to victory. Testing was important.</p>

      <p>Therefore, I decided to test the two skills on the item — Purgatorial Flames and Hellish Miasma. I couldn’t use the skill named “???”, so that was on hold for now.</p>

      <p>One was a flamethrowing skill, while the other was a release of poisonous gas. If I could master them, I would finally have attacks other than standard blows and Vengeance is Mine. Having to use Gems just to cast spells was quite a waste, after all.</p>

      <p>“...Oh, it just hit me that I still have some of those Gems,” I muttered.</p>

      <p>Suddenly, the Goblin noticed I was here and charged at me while swinging his weapon.</p>

      <p>“All right, then... Purgatorial Flames.” I stretched my hand out to the Goblin and opened my palm flat facing towards it.</p>

      <p>A moment later, a demon’s mouth opened up on the back of my hand...</p>

      <p>“Eh?”</p>

      <p>...and it released a fierce stream of crimson fire, painting my vision red.</p>

      <p>“AAAGHHHHH!”</p>

      <p><em>Damn, that made my HP go down so fast!</em> I thought. <em>It’s my own attack, so it’s not affected by Paladin’s Aegis and other defensive skills! Oh, crap! I even got the “Burns” debuff!</em></p>

      <p>“You fool! Are you trying to kill yourself?! Oh! The Goblin is coming!” shouted Nemesis.</p>

      <p>“OAAGHH!”</p>

      <p>The damage I’d caused myself had turned this into an extremely dangerous battle. I desperately defended myself against the Goblin’s attacks, used a number of skills and healing items, and barely emerged victorious.</p>

      <p>Lesson learned. As important as testing was, one always had to consider safety.</p>

      <p class="centerp section-marking">◇</p>

      <p>“...All right, time to pull myself together and test the Hellish Miasma,” I said.</p>

      <p>“Are you sure it will work right this time?” asked Nemesis.</p>

      <p>“It will,” I answered. “...I think.”</p>

      <p>After a short while of looking for a new prey, I had stumbled upon a bipedal, plant-like monster. The words above it said “Walking Grapevine,” and just as they implied, it was literally a walking vine with grapes hanging from it.</p>

      <p>“Is that thing even breathing?” asked Nemesis. “Wouldn’t it be better to burn it?”</p>

      <p>“I’m testing the Hellish Miasma right now. And yes, plants <em>do</em> breathe, so it should work,” I answered. “Hellish Miasma! Release!”</p>

      <p>This time, I made sure to make the back of my hand face the enemy and thus prevent the smoke from hitting myself.</p>

      <p>Just as I’d intended, the miasma surrounded the Walking Grapevine... and then a strong gust of wind made it go back to me.</p>

      <p>“GYAAAAHHH!”</p>

      <p>“I knew this would happen!” shouted Nemesis.</p>

      <p>Trying to not breathe any of it in, I escaped the noxious cloud.</p>

      <p><em>Man, that was close,</em> I thought. <em>I almost got destroyed by my own skill.</em></p>

      <p>“Now, let’s see what the monster thinks of it,” I said. I looked as the wind made the miasma disperse to reveal the Walking Grapevine, clearly suffering due to the debuffs.</p>

      <p>“It seems to be effective,” said Nemesis. “However, it’s hard to make it work on windy days, and trying to use it indoors isn’t even an option.”</p>

      <p>“Yeah, I can’t deny that it’s a difficult skill to use,” I said.</p>

      <p>As we were having that exchange, something flew right into my mouth.</p>

      <p>“Hghuh?!” I accidentally bit and gulped it down. The aftertaste — both sweet and sour — was that of a grape.</p>

      <p>A grape, of all things.</p>

      <p>Yes, that Walking Grapevine was actually attacking me with its grapes.</p>

      <p>“Whot kind ohf attahck ish that?!” I exclaimed in confusion.</p>

      <p>“Master, don’t talk with your mouth full,” said Nemesis.</p>

      <p><em>Seriously, though, what am I supposed to think about this attack?</em> I thought. <em>The grapes are pretty good, and even if they hit me on the body, they only get me a bit dirty and don’t hurt at all—</em></p>

      <p>“Guh...” My face suddenly contorted.</p>

      <p>“Master, what’s wrong?! Was that attack poisoned?!” asked Nemesis in perplexion.</p>

      <p><em>Poison?</em> I thought. <em>Yeah, it was poisoned.</em></p>

      <p>My stats clearly showed the debuffs that were affecting me. Their names were Poison, Intoxication, and Weakness.</p>

      <p>“They’re the same debuffs I just gave it...!” I said. Apparently, its fruit had become poisoned by the miasma and I’d gotten its effects transferred to me by ingesting them. I’d had no idea that debuffs could travel like that.</p>

      <p>“M-Master!” exclaimed Nemesis. “There’s a number of monsters coming this way!”</p>

      <p>I looked around and saw some Goblins and beast-type monsters here and there. They were all here because of me — or, rather, the fruit juice on my body.</p>

      <p>“I see, so that’s the aim of that attack...” I muttered.</p>

      <p>And so, still under the effects of the debuffs, I was attacked by a group of monsters which numbered to more than ten.</p>

      <p class="centerp section-marking">◇</p>

      <p>“We ran into some unexpected trouble, but I think I know how these skills work now,” I said.</p>

      <p>Despite the tremendous failure on its first use, I had soon found out that Purgatorial Flames was an exceptionally effective skill.</p>

      <p>First of all, it was very powerful. It actually did more damage than my standard attacks. I could also continue to channel it as long as I had MP, not to mention that it could apply the Burns debuff or its upgrade — Charring. Just as the name said, it was a debuff that could reduce a burned Goblin’s arm to charcoal.</p>

      <p>Strong as it might be, however, Purgatorial Flames affected friend and foe alike.</p>

      <p><em>Heck, it includes myself, as well, so I’ll have to be really careful when using it,</em> I thought.</p>

      <p>Also, its power was lower than that of Gardranda’s flames. If it had been the same, the first failure would’ve blown my head away. I could only assume that Purgatorial Flames was weaker than the original either because it had been reduced to equipment, or because I was simply a weaker creature. Due to the fact that there was a skill I’d yet to unlock, it was quite obvious that I wouldn’t be able to master the Miasmaflame Bracers just yet.</p>

      <p>And though it had gotten me into the unexpected predicament of getting surrounded by more than ten monsters, the Hellish Miasma test had been successful, as well.</p>

      <p><em>Man, that was tough,</em> I thought. <em>If I hadn’t activated the Reversal, I would be dead by now.</em></p>

      <p>The only reason I’d survived was because I’d fought the monsters while powered up by the reversed debuffs.</p>

      <p>By the time it was over, the Walking Grapevine had succumbed to the Poison and died. I was lucky to have found out that debuffing a monster and then getting those debuffs by ingesting its body parts was counted as a negative effect from the monster.</p>

      <p><em>Though I have no idea if I’ll ever find a use for it,</em> I thought. <em>I don’t eat monsters while fighting, after all.</em></p>

      <p>Whatever the case, I had to be extra careful when using Hellish Miasma.</p>

      <p>Oh, I almost forgot to mention. Since the Walking Grapevine had died, the Reversal was no longer effective. Thus, I was currently being tortured by the debuffs.</p>

      <p>“Uoghh...” I moaned. “First Heal.”</p>

      <p>While lying on the ground due to Intoxication and Weakness, I used healing magic to restore my HP, which was being drained by Poison.</p>

      <p>Since the Purgatorial Flames were weaker, I had hoped that would apply to Hellish Miasma, as well, but that clearly wasn’t the case. It was just about as bad as it had been when Gardranda’d given me these debuffs.</p>

      <p>“Perhaps it becomes less effective on stronger creatures,” pondered Nemesis. “Your level is low, so it seems like its effect on you is still powerful.”</p>

      <p>“Y-You might be right...” I muttered.</p>

      <p>When examining the way the debuffs were applied and the relationship between Burns and Charring, I began to believe that some debuffs could change depending on how great the cause was. Say someone got attacked by something that applied debuffs, causing the attacked person’s debuff “level” to rise and make a debuff appear. Would it really be strange for a continued barrage of such attacks to stack the debuff level and make the illness more serious?</p>

      <p><em>In other words, breathing the miasma for too long might cause some new debuffs to appear,</em> I theorized. <em>...Not that I’m willing to try it.</em></p>

      <p>“But man, this is bad,” I said. “I might have to go back to the city by crawling on all fours.”</p>

      <p>“That would be quite unsightly,” said Nemesis. “Oh...?”</p>

      <p>As I looked to where Gideon was — still lying on the ground — a shadow came over me.</p>

      <p>I realized that someone was standing behind me, so I slowly got up and looked at who it was. I wasn’t in a hurry because I was still under the effects of the debuffs and could simply feel that the presence wasn’t hostile, unlike the Goblins and such.</p>

      <p>“...Eh?” I said, startled.</p>

      <p>That assumption of mine had turned out to be both correct and wrong. The thing was definitely not a monster. However, it was clearly a creature one had to be cautious with.</p>

      <p>“...”</p>

      <p>It was a penguin. A large, bear-sized penguin suit was looking down at me.</p>

      <p>“Huh?!” I hastily tried to back away, but the debuffs rendered me unable to move as I pleased. Even as I began to panic, the penguin did nothing but continue to watch me, completely immobile.</p>

      <p>“...Did Brother Bear get himself a new suit?” asked Nemesis.</p>

      <p>“No, it’s not my brother,” I answered.</p>

      <p>However, it didn’t seem like a monster or a player killer, either.</p>

      <p>It seemed like all it did was observe me.</p>

      <p>“What the hell <em>are</em> you?” I asked.</p>

      <p>“What am I, you ask? Heh heh heh heh... Oops!” In response to my question, the penguin completely destroyed his — the voice was male — silence and immobility and jumped upwards.</p>

      <p>After making a number of mid-air spins, he landed and took a V-like pose.</p>

      <p>“My name is Fla...MINGO! Call me Dr. Flamingo, if you will.”</p>

      <p><em>...What a weirdo.</em> I thought.</p>

      <p>“Would you say that suits are a signal for oddballs?” asked Nemesis.</p>

      <p><em>We only have two so far,</em> I thought. <em>If we find a third suited weirdo, I’ll accept this theory of yours.</em></p>

      <p>Putting that aside, however...</p>

      <p>“Flamingo?” I raised an eyebrow. “That’s a penguin suit, isn’t it?”</p>

      <p>It reminded me of Adelie Penguins, common to many aquariums. Its primary colors were black and white, and no one with eyes could mistake it for the flashy, pink bird he’d named himself after.</p>

      <p>“Who cares about the details?! What matters here is that you seem to be in a pickle! Do drink this!” The penguin reached for his pocket — which was in the suit’s stomach area — and took out a medicine bottle with liquid inside it.</p>

      <p>“And this is?” I asked.</p>

      <p>“A drug that removes debuffs!” he answered. “It instantly takes care of all disease-based status effects!”</p>

      <p>I didn’t know how to respond. If he wasn’t lying, I would gladly chug it down, but I had basically no reason to believe such a blatantly suspicious penguin.</p>

      <p>“Isn’t this a trap?” asked Nemesis.</p>

      <p>I had gone through Lei-Lei’s lesson with the fake alcohol and knew the dangers of such offers, but if this penguin had had any intention to hurt me, he would’ve done it while I was writhing around due to the debuffs. He’d had no reason to prepare a trap for me.</p>

      <p>“Thanks.” I took the drug from the penguin’s hand, activated Reversal just to be on the safe side, and slowly drank it down.</p>

      <p><em>...Hey, this is pretty good,</em> I thought. It had the taste of mixed fruit juice.</p>

      <p>Soon after I drank it, the debuffs burdening my body quickly faded away...</p>

      <p>“Drank it all, didn’t you?” spoke the penguin.</p>

      <p>...and, at the same time, I was attacked by a sudden, powerful headache.</p>

      <p>“Huh?! You little...!” I growled.</p>

      <p>“So it <em>was</em> a trap!” exclaimed Nemesis.</p>

      <p>The headache made me fall to my knees and grab hold of my head.</p>

      <p>“I’ve been watching you and thinking...” said the penguin. “...‘What kind of drug would suit him best?’” The pain continued to get worse.</p>

      <p>“It didn’t take long for me to come to a conclusion! It simply had to be <em>this</em> prototype!” he declared.</p>

      <p>Soon enough, the headache became completely unbearable... and then it disappeared as if it had never been there.</p>

      <p>“Huh?”</p>

      <p><em>What was that all about?</em> I thought. The headache had faded away and not caused anything to happen.</p>

      <p>The penguin that drugged me seemed to be strangely satisfied. Not that I saw his face, but still.</p>

      <p>“Hey, what the hell did you make me dri—?!”</p>

      <p>“M-Master!” Nemesis cut me off. “Ears! Your ears!”</p>

      <p>In response to her words, I reached for my ears, but didn’t find anything wrong with them.</p>

      <p>“Not <em>those</em> ears! The ones above!” she exclaimed.</p>

      <p><em>The ears above?</em> I thought. <em>But I only have one set of ear—</em></p>

      <p>Suddenly, I felt something fluffy.</p>

      <p>“Hm...?”</p>

      <p><em>What was that strange sensation?</em> I once again reached for the place I’d just touched — the area between the temporal region and calvaria. And again, I felt something fluffy. It was actually kinda pleasant to the touch. It reminded me of the ears of a Siberian husky I used to have...</p>

      <p>“YES! I knew those ears would look great on you!” From seemingly nowhere, the penguin took out a full-length mirror. In it, I saw myself...</p>

      <p>...with dog ears — as golden as my hair — sticking out of my head.</p>

      <p>“...” <em>...Wha—</em> “WHAT THE HELL IS THIS?!”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert1">
    <img alt="insert1" class="insert" src="../Images/Insert1.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter11">
    <div class="main">
      <p class="centerp section-marking">◇</p>

      <p>“I happen to be a humble Researcher, and I merely wanted to test my very own Animal Ear Drug,” the penguin explained. “When I went around to look for a convenient guinea pig, I stumbled upon you, just lying there on the ground. Not letting this divine opportunity go to waste, I mixed and blended a drug that removed your status effects with the drug I wished to test. My evaluation didn’t fail me! The Animal Ear Drug was a success, and the dog ears look absolutely perfect on you! ...I’m sorry, I am <em>so</em> sorry! I’ll genuflect and apologize, so could you please withdraw your sword? You’ll tear my suit! Please stop! It might reach my throat!”</p>

      <p>I pushed Nemesis against the mad scientist penguin’s throat as I found out that I’d been used as his guinea pig.</p>

      <p><em>Forgive me, Lei-Lei,</em> I thought. <em>I deserve this for failing to follow your advice. But man, isn’t this a bit too much?</em></p>

      <p>“I’m not too big on fashion, but there are three things I’ve decided to never wear under any circumstances,” I spoke.</p>

      <p>“A-And those are?” asked Nemesis.</p>

      <p>“Glasses, girl’s clothing, and animal ear headbands.”</p>

      <p>Naturally, this turn of events was quite upsetting.</p>

      <p>“Master,” said Nemesis, “you are more averse to glasses than girl’s clothing?”</p>

      <p>“Glasses are great,” said the penguin. “This pair, for example, gives you various skills and—”</p>

      <p>“Shut up!” I cut his words short.</p>

      <p>“Th-That sounded like you intend to kill him,” commented Nemesis.</p>

      <p>“I’m shorryy!” cried the penguin.</p>

      <p><em>No glasses, not ever,</em> I thought.</p>

      <p>“Well... what the hell do I do now?” I tried to hide the dog ears with some random headgear, but I couldn’t equip anything. They all got rejected like magnets of the same pole. I brought up my equipment window, and it said that I already had “Dog Ears” equipped on my head. Apparently, as is normal in most such games, you could only wear a single piece of equipment in each slot.</p>

      <p>By the way, these Dog Ears had no bonuses or skills on them. It was an item that only changed my appearance. However, just like a generic cursed object straight out of your average RPG, it couldn’t be removed through the equipment window.</p>

      <p>There were also no relevant status effects to accompany that function, and Reversal couldn’t do anything about it, either.</p>

      <p>“How do you fix this?” I asked.</p>

      <p>“It’s growing out of your head, so you can’t just take it off,” said the penguin. “It’s like a sub-type of hair makeovers.”</p>

      <p><em>Man, that’s annoying,</em> I thought.</p>

      <p>“Oh, but it should disappear after some time,” he continued. “If I had to guess, it will happen sometime in the evening.”</p>

      <p>“By which time standard?” I asked.</p>

      <p>“This world’s, of course.”</p>

      <p>That was the equivalent of ten hours here or three hours in reality.</p>

      <p>“Then I guess I’ll just log out until that time comes,” I said. I didn’t want anyone I knew to see me like this.</p>

      <p>“Oh no, time when you’re logged out wouldn’t count,” the penguin said. “It would be boring if it did.”</p>

      <p><em>...This mad penguin just said the word “boring,” didn’t he?</em></p>

      <p>“Hhaah... All right,” I sighed, resigned. “Guess I’ll just continue like this, then...”</p>

      <p>Having to go about with something like this on my head was somewhat embarrassing. <em>But when compared to having to wear glasses... hey, I guess this ain’t all that bad,</em> I thought.</p>

      <p>“Just <em>what</em> did glasses ever do to you?” asked Nemesis.</p>

      <p><em>Not gonna comment.</em></p>

      <p>“By the way, Ray, my boy,” spoke the penguin again.</p>

      <p>“What is it?” I asked.</p>

      <p>“I have but one humble request.” The penguin looked at me with a serious face — not that I could see it, but it felt that way — and stated what he wanted of me. “I want to take a screenshot, so could you take off your clothes? Just the top would be fine.”</p>

      <p>Without saying a word back, I slashed at him.</p>

      <p>“Fwahahahah! Farewell!”</p>

      <p>The penguin evaded my attack and quickly ran in the direction of the city.</p>

      <p><em>Man, is he fast,</em> I thought. <em>A penguin has no business being this fleet of foot.</em></p>

      <p>“What do we even make of oddballs like this...?” asked Nemesis.</p>

      <p>“No idea. From the fact that he mentioned screenshots, it’s obvious that he’s a Master, but... Hm?” I stopped talking and realized something.</p>

      <p>I realized that the penguin had called me by my name before he left. And I definitely hadn’t introduced myself to him...</p>

      <p>After that penguin weirdo gave me the dog-ear drug, I made my way back to the city.</p>

      <p>Since Gideon was a place where demi-humans weren’t uncommon, the guards didn’t make any comments about my new appearance.</p>

      <p>I could hear one of them whisper, “Huh? Did that guy have those ears when he greeted us in the morning...? Guess I wasn’t fully awake,” but that was the extent of it.</p>

      <p>“All right, what now?” I asked myself.</p>

      <p>Prior to the testing, I’d had plans to go say hello to Alejandro, buy some new equipment, and perhaps even go hunting alongside Rook and Marie, provided they were online. As things were now, however, I didn’t want to encounter anyone I knew. Being seen with these dog ears on my head would be downright degrading.</p>

      <p>“I don’t see why it bothers you that much,” said Nemesis.</p>

      <p><em>It’d be weirder if it didn’t bother me,</em> I thought. <em>Imagine a scenario where a good friend suddenly appears before you with a pair of dog ears coming out of his head.</em></p>

      <p>I was fully confident that such a sight would be etched onto my brain forever.</p>

      <p><em>I’m strongly averse to the idea of that happening, so I don’t want to see anyone I kno—</em></p>

      <p>“Ah, Ray, Nemesis. Good morning,” a feminine voice reached my ears before I could finish my thought.</p>

      <p>I had no words for this situation.</p>

      <p><em>Seriously?! You do this to me right when I was thinking that?!</em> I thought.</p>

      <p>“Well, if it isn’t Marie,” said Nemesis.</p>

      <p>“Indeed it is,” replied the Journalist.</p>

      <p>“Now, Ray, why do you have such a unique look on your fa...” Marie stopped talking and fixed her gaze on the things sprouting out of my head.</p>

      <p><em>Crap, she’s staring at them,</em> I silently panicked. <em>She’s seriously eyeballing them.</em></p>

      <p>I had to clear things up before she thought I was some weirdo who got his kicks from wearing dog ears.</p>

      <p>“Marie, just so you know, this isn’t my thin—”</p>

      <p>“Don’t say anything, Ray!” she cut me off.</p>

      <p>“Excuse me?!” The vigor in her words made me stiffen up and rendered me unable to continue what I wanted to say. With her gaze still fixed on me, Marie reached into her wristband-shaped inventory and took something out. It was...</p>

      <p>“A sketchbook and... a pen?” I looked at the items with questioning eyes.</p>

      <p>Just like she had during the minion capacity explanation, Marie began drawing something at an incredible speed. I wasn’t knowledgeable about the subject of drawing, but I couldn’t help but question if it was really possible for such a coherent picture to have come from such fast movements. With nimble strokes, she drew the outline, the hair, the details on the face and — of course — the dog ears.</p>

      <p>“Phew,” she sighed. Two minutes later, Marie finally took the pen away from the paper and put up a satisfied expression. On the sketchbook in her hands, there was a ridiculously well-drawn picture of a blond youth with dog ears and no upper clothing.</p>

      <p><em>...Huh? Is this me? But I still have my clothes on,</em> I thought.</p>

      <p>“Impressive,” said Nemesis.</p>

      <p>“Well, yeah, it’s good, but... It’s good, but I, uh...” I stumbled.</p>

      <p>It was definitely a high-quality drawing, but I had no idea how to react to a depiction of a shirtless me with dog ears. The art style was a perfect fit for those monthly magazines that were aimed at teenage boys, but which happened to have a lot of female readers, and that made it even harder for me to comment on it.</p>

      <p>“Is there a Drawing skill or something?” I asked.</p>

      <p>“It’s included among the sense skills, yes, but this is all me,” Marie answered.</p>

      <p><em>Oh, so she’s good at drawing in real life,</em> I thought.</p>

      <p>“So, Ray, how did you end up with such a splendid pair of dog ears?” she asked.</p>

      <p>“...A penguin drugged me.” I told her the details of my encounter with Mister Flamingo.</p>

      <p>“I must say, that penguin has some great taste,” said Marie. “I’ll make sure to buy some of that Animal Ear Drug if it ever gets on the market.”</p>

      <p>“Not that I’d stop you, but... are you serious?” I asked.</p>

      <p>“Very,” she answered. “By the way, Ray. Dog ears look great on you, but I think that tiger or fox ears wou—”</p>

      <p>“Whoa, now! Don’t think of using it on me!” I cut her off.</p>

      <p>“...Tch.”</p>

      <p><em>Did this shady Journalist just click her tongue?!</em> I thought in disbelief.</p>

      <p>“Anyway, you said that the effect wears off in the evening,” she said, changing the subject. “What do you plan to do until then?”</p>

      <p>“I was thinking of paying a visit to Alejandro’s shop, but I can’t really do that with these things popping out of my head,” I answered. I didn’t want people to see them.</p>

      <p><em>Although it may be a lost cause, considering they’ve already been seen by someone I know,</em> I thought.</p>

      <p>“Hmm, I really don’t think it’s such a big deal,” said Marie. “You shouldn’t be so self-conscious about them.”</p>

      <p>“But—”</p>

      <p>“You’d be hard-pressed to find a tian who’d be surprised by a Master who suddenly grew a pair of animal ears,” she cut me off and explained. “To most tians, we Masters are creatures that exist outside the boundaries of common sense.”</p>

      <p><em>Is that how it is?</em> I asked myself. <em>Well, now that I think about it, the King of Destruction destroyed a whole forest in a single night, so it’s perfectly reasonable for tians to see us that way.</em></p>

      <p>“Guess I’ll go to Alejandro’s place, then,” I sighed.</p>

      <p>“I’m still busy with something, so I can’t join you,” said Marie.</p>

      <p>“Busy?” I asked.</p>

      <p>“Various preparations and all that,” she responded, but didn’t make anything clear. “Speaking of which, don’t forget to meet up with me tomorrow afternoon.”</p>

      <p>“Yeah, I remember the plan,” I said. “What are you preparing, anyway?”</p>

      <p>“It’s a secret,” she answered. “See you tomorrow!”</p>

      <p>With those words as her last, Marie ran off towards an uncertain direction. I couldn’t help but wonder what kind of surprise she had in store for us.</p>

      <p>After splitting up with Marie, Nemesis and I made our way to the shop address Alejandro had given us yesterday, which was located in Gideon’s fourth district.</p>

      <p>Gideon was a circular city split into twelve districts — making it seem much like a sliced cake — and the fourth was an area focused on trade. Making my way through the bazaars while trying not to get lost among all the people and other things, I somehow arrived at Alejandro’s shop.</p>

      <p>The large building had a sign that said “The Alejandro Company.” I peeked inside and saw a variety of goods being sold. Obviously, there were weapons, armor, and healing items, but I also noticed works of art such as paintings and statues. There were fruit and other foods, as well, and they created quite a contrast with the rows of Jewels on display. The place was much like a department store.</p>

      <p>“Good morning,” I said as I came in. A moment later, a young girl — clearly an employee — ran up to me.</p>

      <p>“Is Alejandro here right now?” I asked.</p>

      <p>“Oh! You’re the Master from the day before yesterday!” she exclaimed. “Thank you very much for what you did back then! I’ll call the owner immediately!” The girl trotted off deeper into the shop.</p>

      <p>From her words, it was pretty obvious that she had been one of the tians riding the carriages when Gardranda had attacked. I couldn’t tell if I’d seen her back then, though. Things had been pretty hectic, after all.</p>

      <p>“What a fidgety young girl,” said Nemesis. “From the air about her, I assume that she has the makings of a ‘klutz.’”</p>

      <p><em>Not sure how I feel about summarizing people with a single word,</em> I thought. <em>What word would you summarize yourself with, Nemesis?</em></p>

      <p>“Goddess,” she answered with no hesitation.</p>

      <p><em>Well, your name is that of a goddess, yeah, but I’d say you’re better summed up as an “old loli ha-”</em> I thought willfully.</p>

      <p>“Hey! What were you about to think just now?!” Nemesis exclaimed.</p>

      <p>“Ha ha ha, don’t be so loud,” I said. “You’ll disturb the other customers.”</p>

      <p>“That laugh was so forced!” she shouted, seeing right through me.</p>

      <p>As we were fooling around, Alejandro walked out from the shop’s inner quarters.</p>

      <p>“Well, if it isn’t Mr. Ray,” he said. “You are most welcome here.”</p>

      <p>“Hello,” I greeted him. “Since you insisted that I pay a visit, I came to take a look at your wares.”</p>

      <p>“Oh, please do,” he said. “Look at them for as long as you like. You get a discount on everything I have.”</p>

      <p>“Thank you,” I said.</p>

      <p>I had to get a lot of new gear appropriate to my current level, so a discount was very welcome.</p>

      <p>Also, there was something I couldn’t help but notice. The female employee and Alejandro weren’t making any comments about my dog ears. Sure, the girl gave them a few involuntary glances, but she didn’t say anything at all. Alejandro, on the other hand, acted as though the ears didn’t even exist. A pro if I ever saw one.</p>

      <p>Perhaps Marie was right about tians not being mindful of such things happening with Masters.</p>

      <p>I was thankful for that. Having to explain the dog ears to every single person I encountered would’ve been really annoying.</p>

      <p><em>Now, I can only hope they disappear before I meet Rook again,</em> I thought.</p>

      <p>“Oh, look, it’s Ray and Nemesis,” said someone in the shop. “Good morning. Nice to see that you’re already logged in.”</p>

      <p>“Helloo,” followed a feminine voice. “Oh? Why do you have those ears, Ray?”</p>

      <p>I turned to see Rook and Babi, who had — apparently — been shopping here before we came in.</p>

      <p>I had no words. <em>This is the second time today that my hope has died the very moment I created it,</em> I thought. <em>Are these dog ears cursed or something?</em></p>

      <p>“If you consider everything that’s happened ever since you logged in this morning, the cursed item here might be the Miasmaflame Bracers, not the ears,” said Nemesis.</p>

      <p><em>...You have a point,</em> I thought.</p>

      <p>“Ray, how did you end up with that nice pair of ears?” asked Rook.</p>

      <p>“It’s a result of this and that happening because of so on and so on,” I said.</p>

      <p>“Surely you’re not expecting him to understand that,” commented Nemesis.</p>

      <p>“I see,” said Rook. “You ended up like that because a shady person tricked you into drinking some drug, right?”</p>

      <p>“He actually got it right?!” Nemesis and I couldn’t hide our surprise.</p>

      <p><em>Are you an esper or something?</em> I thought.</p>

      <p>“No, this isn’t a superpower or anything like that,” he answered to my thought. “This level of ‘mind reading’ is easy once you get the hang of it.”</p>

      <p>“How can you call it easy when you’re talking to my thoughts as naturally as Nemesis does?!” I asked, still perplexed.</p>

      <p>“Ohh... what a heavy blow to my identity.” Shocked for some reason, Nemesis fell to her knees.</p>

      <p>“That’s pretty amazing, Rook,” I said. “You’d be unbeatable when playing old maid.”</p>

      <p>“Old maid, huh...” he said. “I don’t think this ability of mine would be this precise with anyone I don’t know, though. The most I can do with strangers is tell how they feel and notice if they have any ulterior motives.”</p>

      <p><em>That’s still pretty amazing,</em> I thought.</p>

      <p>After Rook surprised us with his special ability, we began looking at the wares on sale here.</p>

      <p>“Why are you here, anyway?” I asked him. “To say hi and buy some new gear, I assume?”</p>

      <p>“Yes,” he answered. “Not just for me and Babi, either. I found out that I can get weapons for Marilyn and Audrey, as well. Also, we went hunting yesterday, so I have some drops to sell.”</p>

      <p><em>So there’s monster gear here, too, huh?</em> I thought. <em>This shop sure has a wide variety of items.</em></p>

      <p>“Hunting, eh?” I said. “What level are you now?”</p>

      <p>“48,” he answered.</p>

      <p><em>...H-He’s about to reach the maximum level a low-rank job can get,</em> I thought. <em>It’s almost two times greater than my level. How am I supposed to feel about this?</em></p>

      <p>“Looks like someone got real busy during the day I was offline...” I muttered.</p>

      <p>I could only assume that having Marilyn and Audrey had made his hunting that much more effective. Heck, Rook and Babi were absolute terrors in large-scale battles by themselves.</p>

      <p>“I’m about to reach level 50, so I’ll have to start working towards switching to a high-rank job soon,” said Rook.</p>

      <p>“Do you have anything in mind?” I asked.</p>

      <p>“Yes, I did my research and found out that a Pimp’s high-rank job is called the ‘Lost Heart,’” he answered.</p>

      <p><em>Lost Heart, eh?</em> I thought. It was a reference to the Japanese word used to describe a person who’d lost all the eight virtues as they were presented in works such as <em>The Eight Dog Chronicles.</em> The term also referred to people who managed brothels. Quite the unique naming choice.</p>

      <p>“Here are the requirements.” Rook took out a Catalog and showed me the Lost Heart’s page.<br/><br/></p>

      <p class="noindent"><em>Requirement no. 1: Reach level 50 as Pimp.</em></p>

      <p class="noindent"><em>Requirement no. 2: The sum total of all underling female monster and slave stats must be above a certain point.</em></p>

      <p class="noindent"><em>Requirement no. 3: The total money gained by making the underling female monsters and slaves work must be above 1,000,000 lir.</em><br/><br/></p>

      <p>“I see,” I said. Unlike Paladin, it didn’t have any requirements that involved human relations or some special victories. In fact, everything could be achieved by simply playing Pimp for a certain amount of time. These requirements could’ve been one of the reasons why it wasn’t classified as a battle-focused job.</p>

      <p><em>Even though Rook makes it look far more formidable than most battle jobs,</em> I thought.</p>

      <p>“I’m about to reach level 50, and the second requirement is already fulfilled,” said Rook. “The third one is gonna take a while, though.”</p>

      <p>“Yeah, that seems like a lot of work,” I agreed.</p>

      <p><em>Is it even possible for a Pimp to make money by using creatures such as Marilyn and Audrey?</em> I thought.</p>

      <p>“I feel like they would be very efficient in construction sites,” said Rook.</p>

      <p>I said, “I think that one of the retro games my brother owns had some tamed monster running around a construction site... Hm?”</p>

      <p>I belatedly noticed that Rook was wearing a different outfit than he had yesterday. It was a coat that seemed to emit a strange, silver shine.</p>

      <p><em>Well, this looks new,</em> I thought.</p>

      <p>“That’s an awesome-looking coat, Rook,” I said. The details on the décor were elaborate, and the metallic gleam was damn cool.</p>

      <p>Its sleeves had different lengths, which made it seem very stylish, and Rook — handsome as he was — made it all come together in the best of ways. He hadn’t been wearing it yesterday, so I could only assume that he’d gotten it while I was offline.</p>

      <p>“Oh, yes. I like Liz a lot,” he said.</p>

      <p><em>Enough to give it a name?</em> I raised an eyebrow.</p>

      <p>Suddenly, the coat seemed to move in an unnatural manner. I had no idea why, but the movement seemed somehow happy.</p>

      <p>While doing this and that, I finished choosing everything I needed. Since I was going to wear the Miasmaflame Bracers no matter what, I didn’t go for set armors like the Riot series items.</p>

      <p>In my case, one of the most important pieces of equipment was the chest armor, and since Rook looked really cool in that coat of his, I went for a coat-type piece, as well. It had the name "Blaze Metal Scale Coat."</p>

      <p>It was created by taking a coat made from the skins of red, wolf-type monsters and strengthening it with many metal scales. It had two skills on it — “Fire Affinity” and “Fire Resistance.” The former increased the damage of my fire-based attacks by 10%, while the other reduced the damage I took from fire by the same amount, giving it good synergy with Purgatorial Flames. Sure, it was a luxury item that’d cost me a whole 80,000 lir, but I had no regrets about choosing it.</p>

      <p>I got some other equipment to go with it and made my way to the counter to buy it all.</p>

      <p>“Eh?” Right next to the counter, there was a device you’d often see in reality.</p>

      <p>It was a rectangular case with many round capsules inside it and a lever on its side. By putting money inside it, you could pull on the lever and make one of the capsules pop out.</p>

      <p>It was basically a gacha vending machine.</p>

      <p class="centerp section-marking">◇</p>

      <p>Gacha vending machines had existed since long before I was born.</p>

      <p>I could remember when I used to go to the machines dedicated to my favorite anime or games, pop in 100 yen, pull the lever, and get a random toy related to those series. It was fun because you never knew what you were going to get, and because of that, those memories were dear to me.</p>

      <p>However, <em>in-game</em> gacha machines were a completely different beast.</p>

      <p>Some time ago, there used to be a game genre known as “social games.” They could be played on mobile devices and PC browsers, and you could start them without paying any money whatsoever.</p>

      <p>Social games were many and varied. Some were fantasy games with equipment systems, while others revolved around monster growing, robot squad creation, or even idol producer work. The games were free, but if the players wished to get high-quality weapons, armor, monsters, robots, or idols, they had to pay additional money.</p>

      <p>The most popular method of distributing such treasures was the real money gacha machine. For about 300 yen, the player could pull the virtual machine’s lever and get a random item. The items had levels of rarity, and the rarest items of all had the lowest chances of popping out.</p>

      <p>Rarity was often related to quality, too. To either win at the games, boast to others, or simply to enjoy their idols, the players would pull the lever. They would do it over and over until they got what they wanted.</p>

      <p>However, it was all just data. The companies would never lose anything, no matter how many high-quality, high-rarity pulls the players got. Many players’ desire to get the good stuff only increased with every bad thing they pulled, making them throw even more money at the game.</p>

      <p>As a result, there had been many players who would spend 100,000 yen on the games every month. Some would even go above and beyond and break the 1,000,000 barrier.</p>

      <p>It had been a very real, very dark time, indeed...</p>

      <p class="centerp section-marking">◇</p>

      <p><em>With that in mind, the gacha before me takes lir instead of real money, so it’s not a big deal if I pull it once or twice, right?</em> I thought.</p>

      <p>“...I see that all those thoughts just now were nothing but a big excuse to do it,” said Nemesis.</p>

      <p>“Well, yeah, I <em>want</em> to pull it, after all,” I said. I really enjoyed the excitement involved in pulling on gachas and buying random card packs.</p>

      <p><em>All right, back to the thing before me...</em> I thought and looked at the machine. Though its shape was familiar, there were several differences between it and the gachas I knew.</p>

      <p>First of all, it was possible to choose the amount of money you wanted to put in. There was a short line before it, and I noticed that some threw single 100 lir coins, while others went in with as much as 10,000 lir.</p>

      <p>According to the explanation on the machine, the items that could pop out had rarities from S to F.</p>

      <p>Rank C items were worth as much as the money put in.</p>

      <p>Rank F — the lowest rank — items were worth only 1% of the money put in.</p>

      <p>Rank S — the highest rank — items were worth 100+ times more than the money put in.</p>

      <p>The minimum amount of money you could put in was 100 lir, while the maximum was 100,000.</p>

      <p>As was natural, low risk meant low reward and high risk meant high reward.</p>

      <p>“But doesn’t that make it hard to keep track of the items inside and manage the quality of what pops out?” I asked an employee, and the answer I got was one I’d never have expected.</p>

      <p>“It doesn’t work the way you think,” she said. “While it is true that we manage this magic item itself, we have nothing to do with the prizes inside or the money used on it.”</p>

      <p>According to her, this gacha machine had originally been a rare item found in the Tomb Labyrinth.</p>

      <p>It wasn’t a one-of-a-kind, either. There were records of other people getting these, and some had tried to take them apart and take the prizes by force. Apparently, the effort involved was insane, and yet those who succeeded had found out that the inside of the machine was completely empty.</p>

      <p>Thus, everyone had begun to assume that the money offered to it made the machine magically summon an appropriate item. And since it was impossible to retrieve the money used, the gacha definitely wasn’t a part of any successful business model.</p>

      <p>“However, the owner believes that it works to attract customers, so we keep it here for everyone’s convenience,” said the employee. “We also made it a rule that only paying customers can use it.”</p>

      <p>A wise decision, indeed, for it created a decent flow of money from those who only came here for the machine. I now had no doubts that Alejandro was highly skilled as a manager.</p>

      <p>“How did he come to have it, anyway?” I asked.</p>

      <p>“When its previous owner ran out of money, he had to part with a lot of property,” she said. “This was among the items, and our owner bought it.”</p>

      <p>“...And the reason for the previous owner going broke was...?”</p>

      <p>“...Exactly what you imagine,” she said.</p>

      <p><em>So he went broke because he pulled on this thing a bit too much, huh?</em> I thought. That might’ve been another reason why Alejandro was using it for nothing more but attracting customers.</p>

      <p>Anyway, I’d grown interested in the gacha machine, so I thanked the employee that told me about it and took my place at the end of the line.</p>

      <p>“So, how much do you plan on spending?” asked Nemesis.</p>

      <p>“100,000 li—GUH!”</p>

      <p>The moment I answered, she hit me with a blow to my stomach. It came from a really good angle, so it actually made me bend forward.</p>

      <p>“How can you let yourself use such a great amount of money right after hearing about someone who lost it all because of it?!” she exclaimed.</p>

      <p>“I-I know that 100,000 lir is a lot, but I might pull something really good if I’m lucky...” I said.</p>

      <p>“This reeks of a scenario where you get something worthless, if you ask me.”</p>

      <p><em>Well, if something like that happens, we’ll have something to look back at and laugh about later down the line,</em> I thought.</p>

      <p>She sighed. “I hope you don’t regret this.”</p>

      <p>“I’m sure I won’t,” I said.</p>

      <p>Soon enough, it was my turn, so I put ten 10,000 lir coins into the gacha. Once done with that, I pulled the lever, making the machine release a single capsule. The thing had the letter C on it. According to the explanation, the thing inside had the same value as the money I’d put in, so it wasn’t a loss.</p>

      <p>Excitedly, I opened the capsule and made the item inside it pop out.</p>

      <p><em>Tomb Labyrinth Exploration Permit.</em></p>

      <p>Seeing the familiar item made me drop to my knees.</p>

      <p>“Ohh... nooooooo...” I groaned. I could almost hear the thing greet me with a smug “Hey there! it’s been a while!”</p>

      <p>“Oh dear, a double,” said Nemesis.</p>

      <p><em>Well yeah, it’s worth 100,000 lir, but... but I...</em> I moaned silently.</p>

      <p>“Rook... take it,” I said, presenting the paper to him.</p>

      <p>“Are you sure? Isn’t this a decent pull?” he asked.</p>

      <p>“It is, but I already have one, and you don’t need more than one...”</p>

      <p><em>Hell, being a Paladin, I don’t need even one...</em> I thought.</p>

      <p>“Th-Thank you,” Rook said gratefully. “Umm, shall we go explore it sometime?”</p>

      <p>“That’s a good idea...” I replied with little enthusiasm. It really <em>was</em> a good idea, though, since I hadn’t gone beyond the first floor there.</p>

      <p><em>All right, time to pull myself together, and...</em></p>

      <p>“One more,” I said.</p>

      <p>“Haven’t you learned your lesson?!” exclaimed Nemesis.</p>

      <p>“Come on! There’s no way I’ll get another one of the Permits! I’m sure I’ll pull something good this time!” I said.</p>

      <p>“That’s what every gambler thinks before losing it all!”</p>

      <p>Despite Nemesis’ disapproval, I stood in the line again and got ready for a second try.</p>

      <p>Like last time, I went with 100,000 lir. Considering the total cost of the equipment I was buying, this was my last chance.</p>

      <p>I pulled on the lever while praying to God, Buddha, or whatever was listening.</p>

      <p>And the result was...</p>

      <p>“...What?” I raised an eyebrow.</p>

      <p>The capsule had popped out as normal, but the rarity displayed on it wasn’t even in the range of S to F.</p>

      <p>It simply said “X.”</p>

      <p><em>Is this above S? Or is the X actually a cross that makes it as worse than F?</em> I was thoroughly confused. There was a little warning on it, saying, “Open only in spacious areas.” I asked an employee about it, and she said that warning appeared on any capsules that contained something large, like a carriage. That meant that this capsule had something sizable inside it.</p>

      <p>Also, the employee said that this was the first time she’d ever seen a capsule with X rarity on it.</p>

      <p><em>I have no idea how to feel about that,</em> I thought.</p>

      <p>Whatever the case, since I could only open it in spacious areas, I chose not to open it inside the shop. I kept it in capsule form and placed it inside my inventory.</p>

      <p><em>Okay, now that I’ve calmed down, there’s something to consider,</em> I thought.</p>

      <p>One pull had cost me 100,000 lir.</p>

      <p>My new equipment had a combined cost of 110,000 lir.</p>

      <p>...That comparison made me aware of just how expensive the pulls were. In terms of rarity, I hadn’t really experienced a loss, but I couldn’t help but feel off.</p>

      <p>“That’s what you get for gambling away 200,000 lir,” said Nemesis.</p>

      <p>I was in no position to say anything to that.</p>

      <p>By the time I finished buying my equipment, Rook was trying his own luck on the gacha.</p>

      <p>Apparently, seeing me try it got him interested, too.</p>

      <p>“...You didn’t really have to copy the amount of money I used, though,” I muttered. Hoping that his 100,000 wouldn’t go to waste, I looked at what he got, and...</p>

      <p><em>And, uh... Huh?</em></p>

      <p>Silence overwhelmed the entire shop. The shock was shared by everyone inside, except Rook.</p>

      <p>Nemesis, I, the employees, and the other customers were all at a loss for words.</p>

      <p>The capsule in Rook’s hand was rainbow-patterned.</p>

      <p>It seemed to be made from a mineral so vivid that it looked like a rare item by itself.</p>

      <p>Its surface had a large S on it.</p>

      <p>Rook had actually pulled something great on his first try.</p>

      <p>“Ah, Ray! I think I got something good!” he said.</p>

      <p>“C-Congratulations!” My shock made me unintentionally raise my voice.</p>

      <p>“Rook, let’s hurry up and open it!” Babi cried.</p>

      <p>“Y-Yes! Let’s find out what you have received!” Nemesis agreed.</p>

      <p>Since he’d used 100,000 lir, and the value of an S rarity prize was 100 times greater, the item inside should be worth 100,000,000 lir.</p>

      <p>Naturally, something that amazing interested not only us, but the shop employees and other customers, as well.</p>

      <p>Rook’s capsule didn’t have any warnings on it, so he opened it on the spot.</p>

      <p>What came out was a pair of gloves, long enough to cover the elbows. Made from a blue, leather-like material, they were decorated by an intricate pattern of golden metal.</p>

      <p>“‘Touch of the Silencer, Veltboule’?” Rook’s mutter made me tilt my head.</p>

      <p>That naming style was similar to the one on my special reward — “Miasmaflame Bracers, Gardranda.” Such special rewards should be impossible to gain without defeating an UBM, and there was no way to transfer them to others, either.</p>

      <p>“...Whoa,” Rook said. He was looking at the details of the item — Touch of the Silencer, Veltboule — and couldn’t hide his amazement. His face was downright stiff, and it was probably the first time I’d seen him make such an expression.</p>

      <p>“So, what kind of item is it, Rook?” I asked.</p>

      <p>Looking around, I noticed that some customers — likely Masters and tians with a high Identification skill — seemed as dumbfounded as Rook was.</p>

      <p><em>Okay, now I’m dying to know more about it,</em> I thought.</p>

      <p>“Basically, this is an MVP special reward for defeating a UBM,” he said.</p>

      <p>“Are you serious?” I asked in disbelief.</p>

      <p>“Yes,” he answered. “Let me tell you the details elsewhere.”</p>

      <p>After he said that, Rook and I left the shop. As I walked away, I glanced back inside and saw that the line for the gacha had gotten longer and that just about everyone was preparing 100,000 lir.</p>

      <p>Apparently, finding out that you could pull UBM special rewards had gotten them all hyped up.</p>

      <p><em>...I hope no one goes broke,</em> I thought.</p>

      <p class="centerp section-marking">◇</p>

      <p>The place Rook took me to was the room he’d rented at the inn. Rook had clearly learned something that couldn’t be heard by other people.</p>

      <p>“Basically, this is a special reward that no longer has an owner,” he said.</p>

      <p>“What do you mean?” I asked.</p>

      <p>He explained.</p>

      <p>First of all, standard special rewards could only be used by the owner and couldn’t be transferred to other people in any way.</p>

      <p>However, there was one exception to this rule... and it happened when the owner was a tian who died.</p>

      <p>In such cases, the special reward would be automatically retrieved from the body and become either an ultra rare drop in the deeper levels of created dungeons or — as it had been in this case — a high-risk gacha prize.</p>

      <p>From that, I could easily understand why he’d gotten all secretive about it.</p>

      <p>“You think there’d be more tian-killing if people found out about this, huh?” I asked.</p>

      <p>“Yes,” he answered.</p>

      <p>I had no idea how many special reward-owning tians there were, but I couldn’t be certain that there weren’t any Masters who would kill them just to increase their chances of getting such items. At the very least, we sure as hell didn’t want to be the root cause of such killings. That was the reason why Rook hadn’t said that in public.</p>

      <p>“Are you sure it didn’t slip?” I asked. “What if someone with a high Identification skill saw that part of the description?”</p>

      <p>“It wasn’t in the item description, but in a personal message,” he explained. “No one knows this, I’m sure.”</p>

      <p>“All’s good, then,” I said.</p>

      <p><em>Though, now that I think about it, I doubt there would be many Masters willing to take the risk,</em> I thought. Tian-killing could get you on the wanted lists, and there was no guarantee that items gotten this way would ever end up in your hands.</p>

      <p>“Here are the details of the item.” Rook showed me a window that described the Touch of the Silencer.<br/><br/></p>

      <p class="noindent"><b>Touch of the Silencer, Veltboule</b></p>

      <p class="noindent"><b>Ancient Legendary Item</b></p>

      <p class="noindent"><b>A treasure embodying the concepts surrounding the sphinx famed for being a “mage killer.”</b></p>

      <p class="noindent"><b>In addition to increasing the wearer’s magic and special powers, it provides them with a great resistance to mental status effects and attacks.</b><br/><br/></p>

      <p>Just as the description said, the gloves greatly increased the wearer’s resistance to mental debuffs and attacks while also giving a large bonus to MP and SP.</p>

      <p>“So, what are the effects of the skills on it?” I asked.</p>

      <p>“It’s pretty interesting,” said Rook. “There are two skills on it. I can’t read one yet, but the one that I can use now is called ‘Silence,’ and it cancels any magic-based skills that are in their preparatory stages.”</p>

      <p>“Oh?” I asked.</p>

      <p><em>Preparatory stages? What does that mean?</em> I thought.</p>

      <p>“Apparently, if an opponent is chanting or getting ready to invoke a magic spell, this skill will nullify it,” he continued. “But it can’t influence any insta-cast skills or magic that has already been cast.”</p>

      <p><em>So it’s the bane of all casters, huh? Seems like it’ll be useful in many scenarios,</em> I thought.</p>

      <p>After all, the skill would cancel any spell that hadn’t been cast yet. Magic-based jobs would become powerless when going against him mano a mano.</p>

      <p>“If it was originally owned by a tian, then... I see how it is,” I nodded.</p>

      <p>The source of this Touch of the Silencer — the UBM known as Veltboule — had clearly been a creature that specialized in killing casters. It had probably been defeated by a tian who had been strong without having to rely on magic. Later on, the tian had died somehow, and this special reward had ended up in Rook’s hands.</p>

      <p>“I must say, Rook,” Nemesis spoke up, “You are quite a lucky sort.”</p>

      <p>I couldn’t help but agree.</p>

      <p>First Marilyn, then Audrey, now this great pull in the gacha... Rook was definitely a very lucky person.</p>

      <p><em>I wonder if that has something to do with him being a good person,</em> I thought.</p>

      <p>“But you pulled something good, too, didn’t you, Ray?” he said.</p>

      <p>“Oh right, I got this thing.”</p>

      <p>Saying that, I took out the X capsule. I couldn’t open it here due to the thing inside being a carriage or something, so I decided to do it after going through the northern gate again.</p>

      <p>“I’m going to open it. Care to join me?” I asked Rook.</p>

      <p>“I can’t. I’ve been getting messages saying that I need to return to reality,” he answered.</p>

      <p>“Hm? ‘Visitor,’ I assume?” I asked.</p>

      <p>“‘Hunger’ and ‘Lack of Sleep,’ actually,” he said. “I’ve been online since yesterday, hunting monsters and leveling. The only food I’ve eaten was in-game, and I didn’t get any sleep at all.”</p>

      <p>“Holy crap!” I exclaimed. “Get some food, take a bath, and go to sleep already!”</p>

      <p>“Ahaha,” he laughed awkwardly. “I’ll do just that. I’ll make sure to wake up in time for Marie’s plan.”</p>

      <p>“Take care of yourself, man.”</p>

      <p>After I said that, Rook logged out, so I left his room.</p>

      <p>I’d never expected Rook to be enough of a no-lifer to forget his own basic needs.</p>

      <p><em>I guess he’s just another student using his spring break for some unreasonable levels of gaming,</em> I thought.</p>

      <p>And so, I left the inn. The “spacious area” I was most familiar with was the Nex Plains north of Gideon, so I made my way to the city’s northern gate.</p>

      <p>“Master,” Nemesis said, “shouldn’t we have lunch now?”</p>

      <p>“Oh yeah, I guess we should,” I said. “I’ll open the capsule after we do that, then.”</p>

      <p>I’d probably go hunting in the Nex Plains right after seeing what was inside, so having a meal before that was a good idea.</p>

      <p>Since it was noon, most of the nearby restaurants were full, so I chose one that seemed somewhat empty by comparison.</p>

      <p>“...Huh?” I said in surprise.</p>

      <p>Inside the one I’d chosen, I saw that the shopkeeper was being questioned by a certain group. Wearing full plate mail armor and cloaks that had the Kingdom of Altar’s crests on them, they asked something of the shopkeeper while showing him a photo-like object.</p>

      <p>Realizing that this was why the shop was so empty, I decided to observe them.</p>

      <p>From his ragged voice, I could tell that the one asking questions was in a minor state of panic and that the subject matter was serious. However, looking stumped, the shopkeeper only shook his head in response, making it obvious that he couldn’t help them in any way.</p>

      <p>After that, a woman from the group tried to calm down her panicked comrade. She was a familiar face.</p>

      <p>“Liliana?” I asked.</p>

      <p>“Oh? Well, if it isn’t Ray,” she replied.</p>

      <p>It was the Kingdom of Altar’s Knights of the Royal Guard, Vice Commander, Paladin Liliana Grandria. I hadn’t seen her since I’d left the royal capital, and by some twist of fate, we had happened to meet again here in the city of duels.</p>

      <p>As I was busy being surprised by the encounter, Nemesis telepathically told me something ominous.</p>

      <p>“I feel some trouble brewing.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter2">
    <div class="main">
      <h1>Chapter Two: Back-Alley Cliché</h1>

      <p><em>Paladin Ray Starling</em></p>

      <p>Liliana was the first tian I’d ever spoken to. Her responses had been so natural and she’d seemed so alive that I hadn’t been able to see her as a tian — as nothing more but an NPC. That feeling was still alive, and even though I knew I was in a game, I couldn’t see her as just a game character.</p>

      <p>“It has been a while,” she said. “I didn’t expect to see you here in Gideon.”</p>

      <p>“Well, I’ve only been here for about two days,” I said.</p>

      <p>Probably due to her being my first personal — and physical — contact in this world, my manner of speaking automatically became somewhat courteous. She’d said that it’d been a while since we’d last met, but it had actually only been about eight days.</p>

      <p><em>Now that I think about it, since I’ve started playing, only ten days have passed in this world and only three in reality,</em> I thought. <em>Man, this world’s days sure are dense.</em></p>

      <p>“I must ask — why the dog ears?” she asked, looking above my head.</p>

      <p>“Please don’t,” I replied. “Way too much has happened. So, why are you here with such a group?”</p>

      <p>Liliana seemed to be somewhat troubled, so I decided to ask her about what was going on. She was surrounded by knights wearing similar armor, flags and unit symbols. Liliana was a Paladin and the Vice Commander of the Knights of the Royal Guard. From that, I could assume that the people with her were part of the Royal Guard, too.</p>

      <p>“Well, Ray, we—”</p>

      <p>“Lady Grandria!” one of them cut her words short. “We cannot let any outsiders know of this!”</p>

      <p>It was the same man who’d been questioning the shopkeeper. He was glaring at me — or, rather, at the back of my left hand.</p>

      <p>“But Sir Lindos, he is one of us — a Paladin,” said Liliana.</p>

      <p>“He isn’t the same as us just because we share a profession,” retorted the man. “This is something we have to do without relying on Masters.”</p>

      <p>It was clear by now that he was Liliana’s comrade — a Paladin from the Royal Guard. He also seemed to have a dislike for us players — the Masters.</p>

      <p>“It’s only fair for him to hate your kind,” commented Nemesis.</p>

      <p>Indeed. The Kingdom of Altar’s Knights of the Royal Guard had reasons to hate us Masters. Altar’s Masters were the ones who hadn’t helped much during the war, and the Imperium’s Masters were the ones who had done the most damage.</p>

      <p>The king had even been killed by a Master, so it was only natural for him to hate us.</p>

      <p>“But there are things that only they can know,” said Liliana. “We are not in a situation that allows us to choose who we get help from.”</p>

      <p>“...That is reasonable,” he said, giving in. “In that case, please search the way you think is best. We will continue looking for her as we were. However, you should only request assistance from those you trust.”</p>

      <p>“I understand,” she nodded. “Be careful in your search.”</p>

      <p>“Certainly,” he said. “Come, men, we’re continuing this in the fourth district.”</p>

      <p>The man Liliana had called Sir Lindos gave the other knights an order, and they all left the shop.</p>

      <p>The only ones left inside were Nemesis, Liliana, me, and the shopkeeper, who seemed visibly relieved.</p>

      <p>“I see,” said Nemesis. “From how he expressed his dislike for Masters, I thought he was an impulsive sort, but it seems that he’s malleable when he needs to be.”</p>

      <p><em>Or maybe the situation is just grave enough for a Master-hating knight to accept a Master’s help,</em> I thought.</p>

      <p>“I am sorry, Ray. Sir Lindos isn’t a bad person or anything, but...” said Liliana.</p>

      <p>“No need for that,” I said. “He seemed to be in a hurry.”</p>

      <p>“Yes, about that... there is something I’d like to ask you.” With those words, Liliana took out a single photo.</p>

      <p>It gave me a minor déjà vu, making me remember the first time I’d met her. However, the person on the photo was different this time.</p>

      <p>“Have you seen this girl anywhere?” she asked.</p>

      <p>The person on the photo was a young girl. She looked no older than nine. Her face was a strong contestant for the most good-looking one I’d seen so far here in <em>Infinite Dendrogram</em>. Of course, that was only among females. Rook was incontestably at the top if both genders were considered.</p>

      <p>The girl in the photo had golden hair done into rolls and coils, and striking blue eyes that seemed to express a strength of heart. I also couldn’t help but notice that her clothes were very well-made. I didn’t know much about such apparel, but even I could tell that she wore a high-quality dress.</p>

      <p>Her appearance, combined with the dignified way she was sitting in the chair, made the photo look like one of those formal marriage meeting photos.</p>

      <p><em>She’s a bit too young for that, though,</em> I thought.</p>

      <p>Anyway, there was no way I could’ve missed a person that stood out this much, so...</p>

      <p>“I’m sorry, but I haven’t seen her,” I said. “So, who is she?”</p>

      <p>From how the knights were panicking, I could only assume that she was the young lady of some important nobles.</p>

      <p>“Eh?! Umm, uhh...” Liliana couldn’t hide her surprise at my question and looked at me with a perplexed expression. It wasn’t because she had trouble talking about the lady in the picture or anything. The bewilderment seemed too strong for that. She was acting as though I asked her something weird, like the answer to one plus one.</p>

      <p>Once she realized that I really didn’t know the girl, Liliana gave me the answer.</p>

      <p>“This is the Kingdom of Altar’s second princess, Elizabeth S. Altar.”</p>

      <p>“Ohhhhh.” It all made sense now.</p>

      <p>“When someone asks you something that’s supposed to be common knowledge, it’s only natural to become perplexed,” commented Nemesis. “I’m not one to talk, though. Since we share most of our memories, I didn’t know the girl, either.”</p>

      <p><em>How unbecoming of a Paladin,</em> I thought of myself. I really should’ve investigated the ruling structure of the kingdom.</p>

      <p>“So,” I said. “If you’re looking for her, then...”</p>

      <p>“Her Highness went missing while we were visiting Gideon, and we of the Royal Guard are now searching for her,” she explained.</p>

      <p><em>This seems like some serious trouble,</em> I thought.</p>

      <p>Since I didn’t know anything, Liliana gave me all the details about the disappearance of the princess.</p>

      <p>First of all, she was the daughter of the king who had died in the war with Dryfe. The king had three daughters, but no sons. The missing girl’s elder sister — the first princess — was the acting ruler of the country.</p>

      <p>The Kingdom of Altar had no rule that prevented females from inheriting the throne, but historically, the country had had more kings than queens.</p>

      <p>Due to that, even though a whole six months had passed since the fall of the king, the accession had yet to happen, and Elizabeth was still just “the second princess.”</p>

      <p>She had come here to Gideon to participate in some official event. She had arrived here and begun staying in Count Gideon’s mansion about two days ago.</p>

      <p>Yesterday, she had still been there to talk with the count and participate in the preparations for tomorrow’s event. Today, she’d had plans to talk with some powerful people of this city. However, when one of Elizabeth’s maids had gone to her room this morning, she found no sign of the princess anywhere.</p>

      <p>There had been only a piece of paper — marked with the royal seal — that said “I will be back by evening.” From the handwriting, it was clear that she hadn’t been kidnapped, but had slipped out on her own volition.</p>

      <p>Also, it was well known that the princess had wished to look around Gideon, and had become quite upset when she’d found out that she wasn’t allowed to.</p>

      <p>Additional info: Liliana made sure to be as indirect as possible when saying this, but the princess was whimsical, excessively vigorous, terribly insolent, and so full of curiosity that it was troubling.</p>

      <p>Basically, the princess had slipped out of her roles just so she could go sightseeing in Gideon.</p>

      <p>Of course, the Royal Guard couldn’t just let her walk around the city by herself, so, naturally, they’d begun searching for her.</p>

      <p>If there was one thing I could say to this situation...</p>

      <p>“Don’t you think you should up your security?” I asked.</p>

      <p><em>I mean, they let this little girl slip past them. That’s clearly not right.</em></p>

      <p>“You are completely right about that...” she said.</p>

      <p>But it turned out they’d actually had a valid excuse.</p>

      <p>During the time period in which the princess had made her escape, there’d been a certain bit of trouble.</p>

      <p>It had happened in the process of passing the role of protecting the princess from the Third Order of Knights to the Knights of the Royal Guard. It didn’t seem like that could ever be particularly troublesome, but there had been a reason for it being so.</p>

      <p>The princess’ visit to this city had been planned a long time ago. Back then, it had been decided that her protection — from the moment she left the capital until she finished her business in Gideon and was safely back home — would be in the hands of the Royal Guard.</p>

      <p>However, the player killer incident had made them postpone the day they’d left the capital.</p>

      <p>Once the killers had been taken care of, they had finally been able to leave, but there had been a whole new problem. It was the event that — as we’d confirmed with our own eyes — had reduced Noz Forest to cinders.</p>

      <p>Most assumed that the one responsible was King of Destruction the Unknown, but there was no proof of that.</p>

      <p>However, it had to be known, so the role of meeting the King of Destruction and asking him about it had been given to the only one in the kingdom who knew him personally — Liliana. Apparently, everyone else who had been acquainted with him had died in the war.</p>

      <p>Liliana was the Vice Commander of the Knights of the Royal Guard. However, since the Commander’s seat was empty, she was basically the top of the order.</p>

      <p>Since there were some problems with the prospect of the Royal Guard protecting the princess without Liliana’s presence, the role had been hastily given to the Third Order of Knights. It had needed to be done because the princess’ leave had already been belated due to the player killer incident, and they hadn’t been able to afford any more delays. But that was the very cause of the trouble.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert2">
    <img alt="insert2" class="insert" src="../Images/Insert2.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter21">
    <div class="main">
      <p>After she had finished questioning the King of Destruction about his role in the Noz Forest incident, Liliana and her Royal Guard had made their way to Gideon and arrived today, early in the morning. Right upon arriving, she had tried to take the role of protecting the princess from the Third Order of Knights.</p>

      <p>During that process, both groups had looked at each others’ documents and found out that there were some inconsistencies. The inconsistencies were so big, in fact, that no one could even believe that they’d actually happened.</p>

      <p>They had all had to compare and adjust the documents they had while occasionally using magic communication tools to contact and confirm certain points with the people in the capital, and that had cost them more than an hour of time. Once they had finished that and mentally prepared themselves to protect Her Highness, they’d found out that the princess had disappeared.</p>

      <p>“...Oh man,” I said.</p>

      <p>She had probably noticed the trouble going on and seen an opportunity to make her escape.</p>

      <p><em>Sounds like she’s a resourceful girl,</em> I thought.</p>

      <p>“The document trouble might’ve been devised by the princess,” said Nemesis.</p>

      <p><em>Ha ha ha, as if...</em> I thought. Then I realized, <em>Wait, you know what? You might actually be right.</em></p>

      <p>Though it was slightly unrelated, Liliana’s exchange with the King of Destruction had gone like so:</p>

      <p><em>“Were you the one to do it?”</em></p>

      <p><em>“YES.”</em></p>

      <p><em>“Why?”</em></p>

      <p><em>“I was angry, so I just did it. I feel bad about it, though.”</em></p>

      <p><em>“I see. By the way, Noz Forest was a kingdom-owned lumbering ground. I would like you to pay to make up for all the wood you have burned. 130,000,000 lir, please.</em></p>

      <p><em>“...Take it, you thief!”</em></p>

      <p><em>“Oh, but I am an authority.”</em></p>

      <p>With that, the kingdom had instantly gotten enough money to function despite having lost Noz Forest. Apparently, it had helped them a lot.</p>

      <p>I was mostly just surprised that people sitting at the top of the ranks could readily part with that much money.</p>

      <p>“But man, he was just ‘angry’...? What a troublesome guy,” I said.</p>

      <p>“Indeed,” Liliana agreed. “Make sure to tell him off the next time you meet him.”</p>

      <p>“Eh? Ah... sure?” I didn’t know how to respond.</p>

      <p><em>What makes her think I have anything to do with him?</em> I thought.</p>

      <p>After telling me all the circumstances surrounding the princess’ escape, Liliana ran off to search for her again.</p>

      <p>She seemed to spend a lot of her time looking for people. I could only assume that she’d been born under that kind of star.</p>

      <p>“Anyway, though it’s a pretty big deal, the princess <em>merely</em> ran away,” I said. “We just have to make sure to tell Liliana if we ever see the girl.”</p>

      <p>She hadn’t been kidnapped or anything — she was just sightseeing. It didn’t seem like it was something that could leave a bad taste in my mouth.</p>

      <p>“I don’t think you should be saying anything so careless,” said Nemesis. “Try to consider your experiences so far. You seem to be some sort of event magnet. You get into all sorts of happenings, regardless of whether they’re related to tians, monsters, or Masters.”</p>

      <p><em>...You might be right,</em> I thought. <em>I haven’t played the game for too long, yet I’ve experienced quite a lot.</em></p>

      <p>“I don’t know how eventful other Masters’ lives are, but don’t you think that you’re far above the average in that regard?” she asked.</p>

      <p>Well, I <em>had</em> been thinking that my days here were pretty dense.</p>

      <p>“If that knight girl was born under a star that led her into a life full of searching for people, you might’ve been born under a star of strife,” said Nemesis. “I cannot recommend talking in a manner that could summon more such events.”</p>

      <p>“You’re right,” I said. “I’ll keep that in mind.”</p>

      <p>All these exchanges had made me a bit hungry. Hunger was the reason we had come to this shop in the first place, so I began talking to the shopkeeper.</p>

      <p>“Excuse me. Can we eat here?” I asked.</p>

      <p>“Yes, certainly,” he said. “We couldn’t do any work until a few moments ago. We have to make up for the time lost.”</p>

      <p>“Oh yeah, you were questioned.” I nodded. “Any specific reasons why?”</p>

      <p>“Our shop is popular among young girls, so they probably assumed they could find a trace of the little lady here,” he answered.</p>

      <p>“Oh?” Nemesis reacted to something. “‘Popular among young girls,’ you say? Does that mean...?”</p>

      <p>“Yes, we have a large selection of sweets,” said the shopkeeper.</p>

      <p>Nemesis’ eyes lit up. “Excellent!” she cheered. “Master! Let’s eat to our heart’s content!”</p>

      <p>“But I just bought some new gear,” I said. “I’m not sure I want to use much more mon—”</p>

      <p>“Two gacha pulls, 200,000 lir,” she cut me off.</p>

      <p>“I’m sorry. Please eat all you want,” I said, giving in.<br/><br/></p>

      <p>An hour later, Nemesis left the shop looking wholly satisfied after having eaten tons of sweets, while I walked out with my hands on my head as I despaired at the state of my inventory, which had less than 10,000 lir remaining.</p>

      <p><em>That’s too much... You ate way too much!</em></p>

      <p>“And yet it still cost less than your gacha shenanigans,” she said.</p>

      <p>There was nothing I could say back to that.</p>

      <p>“All right, I guess it’s time to go outside and open up the capsule I pulled,” I said.</p>

      <p>“Indeed,” Nemesis agreed. “I hope it’s worth more than 200,000 lir.”</p>

      <p><em>...Yes, please, oh God almighty,</em> I thought.</p>

      <p>Once again, I went to the Nex Plains, where I’d tested my Miasmaflame Bracers. I distanced myself from Gideon’s walls and stood in the grass several tens of meters away from the main road.</p>

      <p>The capsule said, “Open only in spacious areas.” I didn’t know its standards for “spaciousness,” but the place I was standing at was wide enough for an entire house or a ship to pop out without any problem.</p>

      <p>“After all, I don’t want to spawn something huge only to have it get stuck on the walls, destroy them, and get me into lots of trouble,” I said.</p>

      <p>“Time to open it, then?” asked Nemesis.</p>

      <p>I took out the X capsule, twisted it to make it open, and caused something pop out. It reminded me of that long-running game series where you grow monsters and have them fight other monsters.</p>

      <p>“It’s a...” I muttered.</p>

      <p>I had been steeling myself for the appearance of something as large as a house or a ship, but the thing I’d gotten was nowhere near as big. In fact, it was even smaller than the shop employee’s “carriage” example.</p>

      <p>It wasn’t too far off the mark, though. For what I had gotten was a horse. However, it didn’t seem to be a living creature.</p>

      <p>The horse was made of a silver-looking metal that was reminiscent of well-polished plate mail. Its shape was blatantly equestrian. It had been forged from what seemed to be armor pieces, and it had glimmering white orbs where its eyes were supposed to be. It could only be described as a “robot horse.”</p>

      <p>“So, it’s not a monster?” asked Nemesis.</p>

      <p>I seemed to be its official owner, and its description in my inventory went like so:<br/><br/></p>

      <p class="noindent"><b>Prism Steed, Zephyrus Silver</b></p>

      <p class="noindent"><b>Special equipment: Mount</b></p>

      <p class="noindent"><b>One of the five Prism Steeds manufactured by Flagman — an artisan from an ancient civilization.</b></p>

      <p class="noindent"><b>He who walks inside the wind.</b></p>

      <p class="noindent"><b>Details unknown.</b><br/><br/></p>

      <p><em>Details unknown?</em> I raised an eyebrow. All the description had told me was that it was rideable and that it had a relation to the wind. With questioning eyes, I looked at both the window with the description and the Prism Steed, Zephyrus Silver — who I chose to call just “Silver.”</p>

      <p>Silver didn’t seem to care, and only continued to stand in the field.</p>

      <p>Upon further inspection, I noticed that his head didn’t seem to have a mouth. The description said that he was <em>manufactured</em> by an artisan called Flagman, so it was obvious that he was a robot. However, he occasionally released sounds similar to neighs, kicked the ground with his hoof every now and then, and moved his fiber-made tail in a very horse-like manner.</p>

      <p>The way it was impossible to tell which part of the sky he was looking at made him seem somewhat cat-like.</p>

      <p>“How about riding him?” suggested Nemesis.</p>

      <p><em>Good idea,</em> I thought. Thankfully, Silver already had a saddle and reins, so I wouldn’t have any problems getting on.</p>

      <p>I closed in on him while being wary of kicks or something like that, but he turned out to be very obedient.</p>

      <p>Once I took the reins, he lowered himself in a way that made his stomach partly touch the ground, making it easy for me to get on.</p>

      <p><em>What a well-trained and friendly horse,</em> I thought. It was strange that he was actually a robot.</p>

      <p>I was quickly growing fond of him. I wanted to get on and speed through these fields on him.</p>

      <p>After I sat down in the saddle, I placed my feet in the stirrups. After I did that, Silver stood up.</p>

      <p>“Wow...” I murmured.</p>

      <p>The view from atop of a horse was slightly moving. My visual point was much higher than when I stood on my own two feet, or when I’d ridden a pony when I was young.</p>

      <p>Silver moved his hooves in a way that made it seem as though he wanted to dash through the fields right now.</p>

      <p>“Be careful,” warned Nemesis.</p>

      <p>Riding together with Nemesis seemed pretty hard, so for now, I had her wait while I tried riding Silver by myself. I’d give her a chance to try after a short run.</p>

      <p>“All right, let’s go,” I said. “Hi-yo, Silver! Away!”</p>

      <p>Saying those words I’ve always wanted to say, I threw the reins, and at that moment, the sky and ground were reversed.</p>

      <p>Unable to tell which way was really up, I felt as if I was falling upwards.</p>

      <p>I could see Nemesis, who looked completely taken aback.</p>

      <p>I could hear the sound of Silver running through the fields.</p>

      <p>With my five senses in such a state, I fell to the ground — head first.</p>

      <p>“Good thing it’s just grass,” Nemesis said that while looking down on me.</p>

      <p>With my hand on top of my slightly creaking neck, I used healing magic on myself.</p>

      <p>Silver was looking at me, and I couldn’t tell whether he was worried or didn’t think anything at all.</p>

      <p>“I never would’ve expected you to fall off on the very first step,” said Nemesis.</p>

      <p><em>Same here,</em> I thought. I’d fallen off the very moment Silver had begun to run.</p>

      <p>“You had a small audience looking at you from the main road,” said Nemesis. “They all made expressions much like mine when they saw what happened.”</p>

      <p>That seemed like an appropriate reaction, honestly.</p>

      <p>“...Why did that happen, though?” I couldn’t help but ask. I hadn’t been riding him in a weird way or anything. The way I’d been thrown off seemed to ignore all laws of physics.</p>

      <p>“It’s a wonder, indeed,” Nemesis agreed. “You’re a Paladin, so you should be able ride horses without any problems.”</p>

      <p>“Exactly, so... hm?” Realizing something, I took a look at Silver’s skills. There was a total of three — Running, Wind Hoof, and one unknown skill that said “????,” just like a skill on the Miasmaflame Bracers.</p>

      <p>I took a look at the details of the “Running” skill.</p>

      <p><em>Allows running while someone is riding. The rider must have either Horse Riding or Riding skills.</em></p>

      <p>“Horse Riding... skill?” I read out loud.</p>

      <p><em>I can’t ride Silver without that skill?</em> I thought. <em>I can only make him walk around?</em></p>

      <p>“Well, you don’t have the skill,” said Nemesis. “Strange, considering that you’re a Paladin.”</p>

      <p>“There aren’t many skills I can learn from my job,” I said. The only ones I had so far were Paladin’s Aegis and the low-tier healing magic.</p>

      <p>“Strange,” she seemed puzzled. “A Paladin is basically an upgrade to Knight, so you have every reason to have the Horse Riding skill.”</p>

      <p>“Yeah,” I agreed. “...Wait, an upgrade?”</p>

      <p>Wait, Paladins were upgraded Knights.</p>

      <p>The realization of the implications made me break out in a cold sweat.</p>

      <p>“Nemesis, I’m going offline for a second.”</p>

      <p>“Hm? W-Well, if you insist...”</p>

      <p>After logging out, I went on my PC and began doing research on the Horse Riding skill and the relationship between low-rank and high-rank jobs.</p>

      <p>Horse Riding was a skill that practically represented the Knight — the low-rank job that usually came before Paladin. Therefore, anyone who took the normal path and became a Paladin after having been a Knight would naturally have the Horse Riding skill. But, due to some twists of fate, I’d ended up skipping Knight and going straight to Paladin.</p>

      <p>Doing so had given me a great stat growth and a head start over most newbies. However, the number of skills the Paladin job had given me was really lacking. In fact, I only had a mere two — Paladin’s Aegis and First Heal.</p>

      <p>Rook had far more, as a Pimp — a low-rank job. I could only assume that skills from high-rank jobs required the player to learn skills from low-rank jobs of the same grouping.</p>

      <p>According to the walkthrough wiki, Knights had no access to Paladin’s Aegis or any healing spells — they could only be learned after becoming a Paladin. Other skills that could be learned by Paladin were Grand Cross — which was considered to be the job’s ultimate attack — and Purifying Silverlight — which no one really knew how to get.</p>

      <p>All skills except for these four were extensions of skills learned by Knights. That included offensive and other skills... such as Horse Riding.</p>

      <p>I sat at my PC and silently processed the facts.</p>

      <p>I didn’t have a single offensive Paladin skill. My level was in the mid-20s. I definitely should’ve had one by now. But I didn’t, which meant that my assumption was correct.</p>

      <p>Most Paladin skills required the player to learn the skills from the low-rank job of the same grouping — Knight.</p>

      <p><em>Why didn’t my brother warn me about this?</em> I thought. <em>...Oh, I guess he just didn’t know anyone who’d started with a high-rank job, so my case was a first to him.</em></p>

      <p>I had a feeling that — like Rook’s Lost Heart — many high-rank jobs required the person to have reached the max level on low-rank jobs of the same grouping. Even Paladin requirements weren’t ones that could be fulfilled by your standard level 0 newbies, so it was natural for him not to know about this.</p>

      <p>“...I see,” I muttered. It all made sense now. I couldn’t learn the skill and ride Silver without switching to the low-rank job, Knight.</p>

      <p>I didn’t care much about the offensive skills. I had Nemesis with me, and I’d recently gotten my hands on the Miasmaflame Bracers. However, to ride Silver, I had to find a way to learn the Horse Riding skill.</p>

      <p>I searched around for a way to learn it without switching to Knight, and it didn’t take long for me to find it.</p>

      <p>There was an accessory called “Amulet of the Equestrian Tribe,” which gave a +1 to the Horse Riding skill. That was the only thing I would need to be able to ride Silver.</p>

      <p>That wasn’t all. Jobs which had the aptitude for skills acquired through accessory effects could actually master those skills and make them their own. Since Paladin was an upgrade to Knight, it was obvious that I had the aptitude for Horse Riding.</p>

      <p>“Yes! This is it!” I exclaimed.</p>

      <p>Quickly concluding that I had to go to Gideon’s marketplace and buy one of those accessories, I took a look at how much they went for.</p>

      <p>Amulet of the Equestrian Tribe — Market Price: 100,000 lir.</p>

      <p>I fell to the ground.</p>

      <p class="centerp section-marking">◇</p>

      <p>“We <em>have</em> to find ways to get money.” I logged back in and stated our next course of action.</p>

      <p>“Well, we have less than 10,000 lir left,” Nemesis nodded. “We would’ve had to get money even if we didn’t have this problem with Silver.”</p>

      <p>She was right. We were nearly broke, so we had to do something about it regardless.</p>

      <p><em>I seem to have a knack for getting big money and quickly losing it all,</em> I thought. <em>Strange, considering that I’m not actually wasting it.</em></p>

      <p>“Gacha,” said Nemesis.</p>

      <p><em>A-Again, I-I’m not actually wasting it.</em></p>

      <p>“By the way, unlike the first Permit, the second one wasn’t signed, right?” she said. “Why did you just give it to Rook instead of selling it? I can’t be sure if you would’ve gotten the 100,000 lir you spent on it, but you could’ve received at least half of that, no?”</p>

      <p>“...Ah,” I said. She had a point.</p>

      <p>“You...” Nemesis couldn’t find the words to express what she felt.</p>

      <p>“No, it’s fine,” I said. “I already gave it to Rook. A man does not go back on his word. We’ll find other ways to make money.”</p>

      <p>“That’s easy to say,” she said. “However, Rook is currently offline and asleep, while Miss Sunglasses has her hands full with some other business. There’s a limit to how much we can do just by ourselves.”</p>

      <p>“Yep, that’s a bit of a problem,” I agreed. I could go and accept some quest, but since I was solo, my choices were limited to the ones with low difficulty and thus low rewards.</p>

      <p>There was also the meeting we had planned for tomorrow afternoon, so I couldn’t take any quests that would last too long.</p>

      <p>“Perhaps we should hunt for a bounty? Like that demon?” suggested Nemesis.</p>

      <p>“That’ll get us a death penalty if we fail, though,” I said. “We wouldn’t make it for tomorrow’s arrangement.”</p>

      <p>“I see this world just isn’t nice enough to give us a means of getting 100,000 lir in a short amount of time,” she said.</p>

      <p>Time wasn’t a big problem — I’d have had tons of it after the surprise Marie had in store for us tomorrow. However, I wanted to ride Silver as soon as possible.</p>

      <p>“What about the arena, then?” asked Nemesis. “It allows fighting without the risk of death penalty and rewards the victor, no?”</p>

      <p>“Yeah, well, I looked it up and found out that you can only participate when your total level is above 51,” I answered.</p>

      <p>During the testing this morning, my level had gone up to 26. I still had a way to go before the arena was open to me.</p>

      <p>“Oh, yeah!” Something came to me. “I can still bet on the fighters! I’ll put my money on who I think will win and—”</p>

      <p>“Don’t,” Nemesis cut me off. “Fortune might favor you when it really counts, but most of the time, you’re just plain unlucky.”</p>

      <p><em>...You’re not wrong there,</em> I thought.</p>

      <p>“Guess I’ll have to give up on getting the Amulet of the Equestrian Tribe by today or tomorrow and just do some basic money-making instead,” I sighed.</p>

      <p>“Good idea,” Nemesis agreed. “With that in mind, let’s make our way to the Adventurers’ Guild.”</p>

      <p>Nemesis and I began walking towards Gideon’s first district, where the guild building was.</p>

      <p>“By the way,” Nemesis spoke up again. “I know that borrowing from Rook isn’t an option, but what about Brother Bear?”</p>

      <p>“Having him lend me money would make me feel like a loser,” I said.</p>

      <p>“Hmm...” she pondered. “What about your old equipme—”</p>

      <p>“Already sold it,” I answered before she could finish. <em>And all the earnings I got from it have disappeared into your endless stomach,</em> I thought.</p>

      <p>The only property I owned currently was the gear I was wearing and the less than 10,000 lir I had remaining.</p>

      <p>“Oh, this talk about equipment reminds me...” said Nemesis. “Why are you so averse to glasses?”</p>

      <p>“...What?” I asked.</p>

      <p>“I’ve been wondering about it since our exchange with the penguin,” she continued. “I tried looking through your memories, but I couldn’t do it because it’s in the deepest, most private section of all. Honestly, the defenses on it are way too strong, and I can’t help but wonder why.”</p>

      <p><em>...That seems like a strong sign that I don’t want to talk about it and that you shouldn’t be asking me this,</em> I thought. <em>But okay, I’ll talk.</em> Nemesis and I were basically one and the same, so there should be no harm in telling her.</p>

      <p>“Back when I was a kid,” I said, “my eyesight was very poor. When I got into year 4 of elementary school, I happened to be the only kid in class who wore glasses.”</p>

      <p>“Well, things like that happen every now and then,” Nemesis commented.</p>

      <p>“My nickname instantly became ‘Noby,’ like the character from <em>Doraemon,</em>” I continued.</p>

      <p>“...Hm?” she raised an eyebrow.</p>

      <p>“My classmates used ‘Noby’ more than my real name,” I went on. “They often pressed me to say his trademark <em>Doraemon</em> phrase, even though I didn’t sound much like the character. Not only that, but the theme of the school’s arts festival somehow became <em>Doraemon,</em> and, of course, I was given the role of Noby.”</p>

      <p>It wasn’t like I had been bullied. Nor had I been some sort of outcast. In fact, I’d had a lot of friends. My classmates at that time had clearly had no ill will, and had only given me the nickname because we were somewhat close. However, the lack of a proper outlet had made a certain sentiment grow within me.</p>

      <p>It could basically be summed up with the words “Who are you calling ‘Noby’?” Or, “I love <em>Doraemon</em> and all, but this is a completely different matter.”</p>

      <p>Nemesis was silently staring at me.</p>

      <p>“What wrong, Nemesis?” I asked her.</p>

      <p>“The reason is just so trifling that I don’t know how to react,” she answered.</p>

      <p>“...Well, even I know that it’s not such a big deal,” I admitted. My big sister had reacted the same way when I’d told her about it.</p>

      <p>“You said you had poor eyesight,” Nemesis spoke again. “Do you still wear glasses in real life?”</p>

      <p>“No,” I answered. “My vision was corrected over the course of the five years after the school’s arts festival.”</p>

      <p>I had eaten things that were good for my eyes and trained them by looking far ahead and by moving my eyeballs daily. It’d been hard work.</p>

      <p>“I admire your tenacity, but wouldn’t it have been better to just get contact lenses?” she asked.</p>

      <p>“The idea of putting things in my eyes scares me,” I answered.</p>

      <p>“Master, you...” She was completely out of things to say.</p>

      <p>“Naturally, laser eye surgery scared me, too, so I had to fix my eyesight with steady training and... Hm?”</p>

      <p>As Nemesis and I were walking through the streets and chatting, I suddenly heard some unpleasant sounds coming from a nearby back alley.</p>

      <p>They made me curious, so I went towards their source.</p>

      <p>A short distance away from the main road, between the buildings, there was a slightly larger area where I saw five men encircling a single girl.</p>

      <p>The men looked like the most stereotypical, run-of-the-mill, boorish punks. The sight reminded me of what Liliana had told me about the princess who’d run away, which had made me picture a generic scenario where I encountered her being harassed by a bunch of evil bastards. Thinking that it couldn’t be the case, I took a better look at the scene, and... it actually wasn’t.</p>

      <p>The damsel in distress had a decent appearance, but her facial features were definitely those of a commoner. She wouldn’t have seemed out of place if I’d seen her standing outside a restaurant and attracting customers. The girl definitely wasn’t the princess, but that didn’t matter, considering how much trouble she was in.</p>

      <p>The contents of their exchange could be summed up like so:</p>

      <p>The girl had a little brother who had been kidnapped yesterday.</p>

      <p>These men had blackmailed her, saying that she had to prepare 200,000 lir if she wanted him back. They had also added that her brother would be killed if she told anything to the knights.</p>

      <p>The girl had run around, borrowing money and selling their family’s possessions until she’d barely managed to gather the 200,000 lir. She had then brought the ransom money to the place the kidnappers had named — this back alley — and given it to them.</p>

      <p>The men had readily accepted the money, but they’d had absolutely no intention of giving her little brother back. Not only that — they were about to take the girl herself as an extra.</p>

      <p><em>Well, damn,</em> I thought. <em>They’re scumbags to the core.</em></p>

      <p>They were tians, not monsters — at least not in the game sense — but it was clear that kicking their asses wouldn’t give me any pangs of conscience.</p>

      <p><em>And letting it slide would leave a bad taste in my mouth.</em></p>

      <p>With that thought, I stood up and showed myself to the scumbags.</p>

      <p>“Stop right there!” I exclaimed and instantly realized that my voice was doubled for some reason.</p>

      <p>“...Hm?” I said in surprise, and it happened once again.</p>

      <p><em>Okay, what the hell?</em> I thought.</p>

      <p>I’d done nothing special — I’d merely jumped out and said something — but my voice had come out as if it was in-sync with another one.</p>

      <p>A moment later, I noticed the cause. There was another person standing behind the scumbags and the girl — at the other side of the back alley.</p>

      <p>It was a young man who looked about as old as I was and had donned some strangely-designed clothing that seemed to be a mix of a military uniform and a rider suit. The gloves he wore exposed the backs of his hands, and the left one had a crest which made it obvious that he was a Master.</p>

      <p>“It matters not,” he said. “Back away from that fair lady, you vile scoundrels.”</p>

      <p>Apparently, he was just a guy who’d happened to be thinking the exact same thing I had been thinking at the exact same time.</p>

      <p>“P-Please, help!” pled the girl.</p>

      <p>“Heh,” he grinned. “Why, certainly. All beauteous flowers have thorns. And it is my mission in life to be the thorn for ladies as lovely as yourself and to sting any ruffians trying to harm you.”</p>

      <p>Though we seemed to be alike in some ways, I wasn’t nearly as pompous as him. The aura around him almost made me imagine roses and unnatural rays of light like in some manga aimed at young girls or a Takarazuka Revue performance.</p>

      <p>“Who the hell are you two?” demanded one of the scumbags.</p>

      <p>Another got excited. “Huh? Ya wanna go? Let’s do this!”</p>

      <p>“Hyahaah!” one just cheered in a discomforting way.</p>

      <p>“There’s five of us, ya dumb shits!” spoke yet another.</p>

      <p>“That’s two times more than you!” the last one added.</p>

      <p><em>That’s not two times, you numbskull,</em> I thought. <em>It’s 2.5 times.</em></p>

      <p>“Heh,” the pompous Master grinned. “Indeed, there are more of you, but what are your levels?”</p>

      <p>“Huh?!” One of them got scared.</p>

      <p>“From what I can tell, you are all on your first low-rank job,” said the pompous weirdo. “<em>My</em> total level, however, is 126.”</p>

      <p>“W-What?!” They all freaked out in unison.</p>

      <p>“Heh,” he grinned yet again. “Now, bear witness to my power. I’ll just summon my Garage and...”</p>

      <p>“Get him before he does anything!” shouted one of the scumbags. The other four let out a battle cry and charged at him.</p>

      <p>“What?!” the guy was surprised. “Wait, I need to get in my Magingear and... No matter! I will do this with my bare hands if I must!”</p>

      <p>I felt as though I was reading a delinquent manga. All five of the hoodlums ran towards the guy in the military uniform with their fists ready to strike.</p>

      <p>And so, due to just how much the weirdo was standing out, I was being completely ignored.</p>

      <p>“Oh well,” I sighed. The timing was good, so I spoke to the girl. “You should run away now.”</p>

      <p>“Th-Thank you very much!” She thanked me with palpable fear in her voice and ran to the street behind me.</p>

      <p>“Okay, that’s done,” I said. “And the battle is... wait, what?”</p>

      <p>I looked to the other side and — to my surprise — saw the guy in the uniform getting beaten to a pulp. The five hoodlums weren’t unharmed or anything, but it was still safe to say that the battle was completely one-sided.</p>

      <p><em>Seems like there are too many of them for him to take on by himself,</em> I thought. <em>But wait, his total level is 126, so how... Oh, I see.</em></p>

      <p>“Having a high total level doesn’t mean that you have high stats, as well,” I said aloud. He was probably like Rook, who — due to being a Pimp — had half of most of my stats despite his level being two times greater than mine.</p>

      <p>Nonetheless, 126 was a formidable level. If the five scumbags were taking care of him <em>that</em> easily, it was entirely possible that I wouldn’t fare so well, either.</p>

      <p>As that thought went through my head, one of the five raised his fist and charged towards me. “You’re next!”</p>

      <p>I hastily evaded his attack and countered with a punch directed straight into his face.</p>

      <p>The next moment, the man got blasted away to the other side of the alley.</p>

      <p>“...Eh?” The other four hoodlums were shocked.</p>

      <p>“...Why?” I asked, as perplexed as the scumbags.</p>

      <p>Thinking that Nemesis had done something, I turned around and looked at her. She responded by heaving a light sigh and pointing at the back of her hand. That action made me look at the backs of my own hands and reminded me of a certain fact.</p>

      <p>I was wearing the Miasmaflame Bracers.</p>

      <p>While testing them today, I had focused mainly on their ability to release fire and gas, but those weren’t the only features they had. The item could also be used for defense and gave a bonus to my stats. Specifically, it increased my STR by 100%.</p>

      <p>Back when I had been level 0, my STR had been somewhere around 10. I hadn’t had any problems moving my body back then, so I could only assume that that amount was representative of a standard adult male’s strength. I’d leveled up and increased my stats since then, and with the bonus from Miasmaflame Bracers, my STR was now over 400. That meant that I’d just punched a hoodlum in the face with the strength of more than 40 average adult males.</p>

      <p>“Is he dead?” Slightly worried, I took a look at the guy, who was lying on the other side of the alley.</p>

      <p>He was twitching, so it was safe to assume that he’d survived. I heaved a sigh of relief. It was pretty obvious that their jobs were combat-oriented, so they were probably tougher than the average Joe.</p>

      <p>“It’s all good, then,” I said as I closed in on them while bashing my bracers together.</p>

      <p>The results wouldn’t have been pretty if I’d used Nemesis, so I chose to settle it with the bad boys on my hands.</p>

      <p>“Who’s next?” I asked.</p>

      <p>“Eee!” one of them shrieked like a little girl.</p>

      <p>I probably looked a bit too menacing, since they quickly turned pale, whirled around, and ran away like roaches.</p>

      <p>“D-Damn it!” one of them shouted. “Don’t get cocky, you shits! We still have that bitch’s brother!” With that, they disappeared into the main road.</p>

      <p><em>Man, what a generic set of scumbags,</em> I thought.</p>

      <p>“Are you okay?” I asked. “First Heal.”</p>

      <p>I walked over to the uniformed guy they’d beaten up and cast my healing spell on him.</p>

      <p>His wounds weren’t deep by any stretch of the imagination, and my basic healing magic quickly closed them all.</p>

      <p>“Heh, thank you,” he said gratefully. “Hm? Those ears are...” He looked up at the things on my head — the dog ears I’d grown because of the mad penguin.</p>

      <p>“What about them?” I asked.</p>

      <p>“...Oh, nothing,” he answered. “It’s a nice accessory.”</p>

      <p>“Find a penguin and you can get your own pair,” I said.</p>

      <p>“Heh.” He grinned yet again. “I will keep that in mind.”</p>

      <p>The man stood up and dusted his clothes. Even that action seemed a bit pompous.</p>

      <p>“I feel that this meeting is fated,” he said. “Allow me to introduce myself. My name is Hugo Lesseps. I am a Master and my job is High Pilot.”</p>

      <p>“I’m Ray Starling,” I responded. “I’m a Master and a Paladin. And this is my Embryo, Nemesis.”</p>

      <p>“I see... Embryos of the Maiden type are quite a rarity,” he said. “It’s a pleasure to meet such a lovely mademoiselle.”</p>

      <p>“Pleased to meet you, too,” said Nemesis.</p>

      <p>I found it interesting that he could tell that Nemesis was a Maiden and not a Guardian just by looking at her.</p>

      <p><em>But man, the way he talks sounds like it belongs in a play or something,</em> I thought. <em>I wonder where he’s from. If his name is anything to go by, then he’s probably French.</em></p>

      <p>“By the way, why did they beat you up so easily?” I asked. “Is your job not battle-oriented or something?” They’d been pretty weak when I’d fought them, so I would’ve assumed that someone with a total level of 126 could’ve handled them easily.</p>

      <p>“Heh.” There was that grin again. “I am a level 50 Pilot, level 50 Mechanic, and level 26 High Pilot. Leveling with these jobs only raises my HP, MP, SP, and DEX, so all my other stats are about what they were when I started out!”</p>

      <p>That didn’t seem like something to be proud of. Also, I couldn’t help but wonder just what kind of jobs they were to have such a biased stat growth.</p>

      <p><em>Does he drive a car or something?</em> I thought. <em>Is he like a character from </em>Metal Max<em> or something?</em></p>

      <p>“U-Umm...” I said.</p>

      <p>As I pondered the nature of Hugo’s job, someone called out to me.</p>

      <p>I turned around to see the girl we’d helped out. Apparently, she’d chosen to stay nearby instead of running away completely.</p>

      <p>“Th-Thank you very much for helping me!” she cried.</p>

      <p>“Oh, no need for that,” I said. “I did it because I felt like it.” Also, it would’ve left a bad taste in my mouth if I hadn’t.</p>

      <p>“Heh.” Hugo grinned again. "I feel the same way. I don’t know if I could sleep at night after having ignored a lady in distress.”</p>

      <p><em>Isn’t that much like my go-to phrase for these situations?</em> I thought.</p>

      <p>“U-Umm... Are you Masters?” the girl ventured.</p>

      <p>“Why, yes,” said Hugo. “Myself and Ray here are both Masters.”</p>

      <p>The girl dropped to the ground before us and pushed her head against it.</p>

      <p>“Lady...” Hugo didn’t seem sure how to react. “Please raise your head.”</p>

      <p>“Please... Please save my little brother!” she pled. “I beg of you!”</p>

      <p><em>Oh, yeah, the scumbags said something about that while running away,</em> I thought.</p>

      <p>“Save him? As in, from those hoodlums?” I asked.</p>

      <p>“Y-Yes!” she said. “They’re the Gouz-Maise Gang... They kidnap children, and if they don’t get the ransom for them, the boys and girls get killed and e-eate— ohhh...”</p>

      <p>Her words made me turn silent.</p>

      <p><em>Killing and eating children?</em> I thought in disbelief. <em>Ohhh, man...</em></p>

      <p>“They kidnapped my little brother, so please, save him!” she exclaimed. “I can give you this money! And if that’s not enough, I’ll do whatever you want...”</p>

      <p>She extended the bag with the ransom towards us and begged while crying her eyes out.</p>

      <p>I knew the circumstances from the eavesdropping I’d done before jumping out to help her. As things were, her brother would’ve been killed and eaten sooner rather than later. To prevent that result from becoming reality, one had to act fast, and the only ones who could do that were Hugo and me.</p>

      <p><em>Honestly, I had a feeling it would come to this the moment I showed myself to the scumbags,</em> I thought. <em>That’s why I’m fully prepared to face the risks.</em></p>

      <p>“I’m down for it,” I said. “I don’t need any compensation, though.”</p>

      <p>“B-But...”</p>

      <p>“You went through great lengths to gather this ransom money, right?” I said. “I can’t take it.” I had a feeling that I would’ve done something about it even if she hadn’t asked me to. If I’d ignored it, the aftertaste in my mouth would’ve been downright foul.</p>

      <p>“What about you, Hugo?” I asked.</p>

      <p>“Heh,” he grinned. “A foolish question. <em>Of course</em> I’m doing it. And I don’t need any money, either.”</p>

      <p>Hugo went down on one of his knees, gently placed his left hand on her chin, and made her look upwards. He then gently wiped her tears away with the thumb of his right hand.</p>

      <p>“Lady,” he said gently. “We shall stop your tears.” And so — as if acting out a scene from a play — Hugo smiled at her. “I promise that you will greet tomorrow’s morning with a smile on your face.”<br/><br/></p>

      <p class="noindent"><b>[The quest “Rescue Roddie Lancarse, Difficulty Level 8” has started]</b></p>

      <p class="noindent"><b>[Please see the quest window for further details]</b><br/><br/></p>

      <p>A message directed to my ears announced the beginning of an event quest. Apparently, the same thing had happened to Hugo.</p>

      <p>“Let us go, Ray,” he said. “The mission awaits.”</p>

      <p>“Okay,” I sighed. “I can dance to this tune of yours.” Our target quest was the difficulty level 8 “Rescue Roddie Lancarse.” Our destination was the hideout of man-eaters and kidnappers — the Gouz-Maise Gang.</p>

      <p>Our goal... was a morning of smiles.</p>

      <p>And so, we began our quest.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter3">
    <div class="main">
      <h1>Chapter Three: A Maiden’s Master</h1>

      <p><em>Gideon, the city of duels, Paladin Ray Starling</em></p>

      <p>Nemesis, Hugo, and I got on a difficulty level 8 random event quest called “Rescue Roddie Lancarse.” Just like the quest to save Milianne, it was going to be a race against time. However, I had two other worries about it.</p>

      <p>First was the quest difficulty. I didn’t know just how difficult level 8 quests were, so I asked Hugo about it...</p>

      <p>“Difficult enough for level 500 tians going solo to fail spectacularly,” he said. “Even a full party of such tians would have a hard time.”</p>

      <p>...and that was his answer. So, level 8 quests were too difficult for max level tians. Even if we Masters were generally stronger than tians, it was clearly a bit too much for me — someone below level 50 — to handle. However, I had no intention of leaving the child for dead just because it was hard to save him.</p>

      <p>“I must say that letting them escape was a grave mistake,” said Nemesis.</p>

      <p>And that was my other worry — the five scumbags we’d faced.</p>

      <p>The one I’d punched was still spread out on the back alley’s pavement, so Hugo tied him up with a wire he had on him. We decided to hand him over to the guards, so the girl we’d helped — Rebecca — ran off to the guardroom.</p>

      <p>The other four had run away with a threat regarding her brother, unfortunately. We didn’t know where their base was. If they got there before us and told everyone about what happened here, the boy’s life would be in more danger than ever.</p>

      <p>“Man, I should’ve gassed them,” I said. A whiff of the poison from my Miasmaflame Bracers would’ve rendered them completely immobile.</p>

      <p>“We’re in the city, so wouldn’t that count as terrorism?” asked Nemesis.</p>

      <p><em>You have a point,</em> I thought. <em>Although I could’ve also scorched their legs with fire from the left bracer and make them unable to walk, and...</em></p>

      <p>“I can tell that you’re thinking something disturbing,” said Hugo. “Let me assure you, though, that there’s no need to worry about them.” He then pointed to the street they’d run off to.</p>

      <p>I couldn’t see what was behind the corner, but I could hear something being dragged on the ground.</p>

      <p>“What’s that sound?” I asked. The source got closer and closer until it soon entered my vision.</p>

      <p>“Shorry for the waith, Hugo.” It was a girl. If you ignored the ushanka hat on her head, she would’ve been about as tall as Nemesis.</p>

      <p>The first thing I noticed about her was her <em>whiteness</em>. White hair, white cheeks, white hat. Despite it not being particularly cold, she also wore a white felt long coat and a white scarf. And, for some reason, she was also biting into a white manju sweet. The only non-white thing about her were her blue eyes.</p>

      <p>“Heh.” Hugo turned pompous again. “Well done, Cyco.”</p>

      <p>She gulped down the manju before responding. “It’s a pain, but they were weak, so don’t mind it.”</p>

      <p>I looked down and saw that she was holding people — the four hoodlums that had escaped — by the clothes behind the napes of their necks.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert3">
    <img alt="insert3" class="insert" src="../Images/Insert3.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter31">
    <div class="main">
      <p>The ease with which she was holding two people in each hand clearly didn’t fit her appearance, but I soon noticed the Master crest on her left hand.</p>

      <p><em>Well, I guess her strength makes sense if she’s a Master,</em> I thought.</p>

      <p>The way she spoke was extremely monotone, and I couldn’t tell if she was role-playing or if that was her normal way of speaking.</p>

      <p>She noticed me examining her and shot a glare at Nemesis and me. “Hugo the girl pamperer befriended a lolicon? You like little girls, mister?”</p>

      <p>“Who are you calling a lolicon?!” I shouted.</p>

      <p>“Who are you calling a loli?!” Nemesis howled at the same time.</p>

      <p><em>She actually marked me as a sexual deviant with her first words to me! Who the hell does that?!</em> I thought.</p>

      <p>“That flat chest and low height are exemplary loli features,” she said. “And anyone who has a loli service him is a real lolicon.”</p>

      <p>Slander if I’d ever heard any. Nemesis was a part of me, so she didn’t count.</p>

      <p>“No!” said Nemesis. “This form of mine merely prioritizes beauty over function!”</p>

      <p>“A Master with an Embryo who claims <em>that</em> form to be beauty is a lolicon to the core,” said the white girl.</p>

      <p>“You little...! Seems like I have to do something about that mouth of yours!” Nemesis shouted.</p>

      <p>“Try it.”</p>

      <p>Nemesis jumped on the girl, who faced her head-on, as emotionless as ever. They began fighting, but I felt like I was watching two cats mess about.</p>

      <p><em>It sure is rare for Nemesis to be this honest with anyone that’s not me,</em> I thought.</p>

      <p>“So, Hugo,” I spoke up. “Who is this monotone and monochrome girl who has no qualms about labeling strangers as perverts?”</p>

      <p>“Cyco,” he answered. “She’s my... party member. I contacted and told her to catch the ones that ran away. The girl’s a bit foul-mouthed, yes, but as you can see, she’s quite reliable. Oh, and just so you’re aware, the things she just said are far from the worst you can hear from her.”</p>

      <p>“Seriously?” I raised an eyebrow.</p>

      <p>“Yes,” he nodded. “Especially when compared to the abuse she spouts at our clan owner.”</p>

      <p><em>...I don’t think I can even imagine that,</em> I thought.</p>

      <p>Well, her foul mouth aside, we now had a total of three Masters in our party. Naturally, that increased our chances of successfully completing the quest.</p>

      <p>“All right, Cyco, tell us what you found out,” said Hugo.</p>

      <p>“Okay,” Cyco replied while her hands were fixed with Nemesis’ as they pushed each other in what seemed like a situation straight out of a pro wrestling match. Still in that state, she turned her face to Hugo and began talking. “After I beat up and interrogated them, they told me where their hideout was. It’s beyond the east gate, in the Cruella Mountain Belt. The specific location was in a map they had.”</p>

      <p>Skillfully using her mouth, she bit into a paper she had in a pocket on her side and threw it over to Hugo using only her head.</p>

      <p>“Cruella Mountain Belt?” I repeated the place name. It was an area I hadn’t been in before.</p>

      <p>“That’s the name of the mountains to the east of this city,” said Hugo. “The area beyond them is Caldina’s territory.”</p>

      <p>“So it’s basically the border between the two countries,” I said.</p>

      <p>“It’s a great place for a bandit hideout,” he continued. “Any Kingdom of Altar military operations done in the Cruella Mountain Belt would be taken as acts of war against Caldina.”</p>

      <p>“Why don’t the two countries team up to take care of the bandits, then?” I asked. Bandits lurking near the border seemed like a big problem for both Altar and Caldina, so it would’ve been natural to team up and exterminate them.</p>

      <p>“That will never happen,” said Hugo. “Caldina only acts when there’s money to be had. In fact, they would do <em>anything</em> for it.”</p>

      <p>“By that, you mean...?” I asked.</p>

      <p>“For the right price, the vilest bandit could be a valued customer.”</p>

      <p><em>So they’re in on this?</em> I thought.</p>

      <p>“I would guess they get paid a lot and provide passive cooperation in exchange,” he continued. “Caldina probably agreed to react in some way if the kingdom’s army made a move. Even if it was all just an act, the kingdom still couldn’t do what they wanted.”</p>

      <p>Hugo opened the map that Cyco had given him. On the left side of it was Gideon. The right portrayed a desert, and the area right in the middle of them had several mountains. The second closest mountain to Gideon had a circle marking something.</p>

      <p>“This is the place,” said Hugo. “It’s beyond a mountain. Seems like we’ll have to make haste.”</p>

      <p>“Yeah,” I agreed. “We’ll have to run real fast.”</p>

      <p>For some reason, Hugo gave me a strange look.</p>

      <p>“What?” I asked.</p>

      <p>“Ray,” he said. “You’re a Paladin, aren’t you? Won’t you be riding a mount?”</p>

      <p>“I have a horse, but I can’t ride it because I don’t have the Horse Riding skill,” I answered.</p>

      <p>“So that’s how it is...” he said, looking completely weirded out.</p>

      <p>“...Yeah.”</p>

      <p><em>Well, this is awkward,</em> I thought.</p>

      <p>“Heh,” he chuckled. “This is the first time I’m seeing anyone who doesn’t have the Horse Riding skill while being in the knight grouping.”</p>

      <p>“Is it normal for us to have it?” I asked.</p>

      <p>“Well,” Hugo said. “Let’s just say that I feel as though someone just told me that they’re a swimmer, but can’t do the front crawl, backstroke, breaststroke, or butterfly stroke.”</p>

      <p>“Is there even anything more to swimming than those four?” I asked.</p>

      <p>“The dog paddle and traditional Japanese swimming?” he suggested.</p>

      <p>Those didn’t seem like they fit.</p>

      <p>“Anyway, I see how it is,” said Hugo. “Leave it to me. I have a means of travel that allows us to get to their hideout in a short amount of time.”</p>

      <p>“Thanks,” I said gratefully.</p>

      <p>In unrelated news, Nemesis and Cyco had become friends during the fight, and were now exchanging a firm handshake.</p>

      <p><em>Friendship is a great thing,</em> I thought. <em>But man, the fact that one is black and the other’s white reminds me of a girl’s anime from a few decades back.</em><br/><br/></p>

      <p>Our party — Hugo, Cyco, and me with Nemesis as my blade — had made our way through the eastern gate in Gideon’s third district and were now standing before the entrance to the Cruella Mountain Belt area.</p>

      <p>There was a road leading towards the mountains, which was being used by carriages and the like.</p>

      <p>We were about to make our way to the gang’s hideout by using the means of travel Hugo mentioned, but...</p>

      <p>“What <em>is</em> that means of travel, anyway?” I asked.</p>

      <p>“This isn’t the right place for it,” he said. “We have to go where there are even fewer people.”</p>

      <p><em>He can’t show it to anyone or something?</em> I thought. “Does it stand out or something?”</p>

      <p>“You could say that, yes,” he answered.</p>

      <p>And so we walked for about fifteen minutes. We weren’t following the road, either. Hugo actually led us into some forest.</p>

      <p><em>All right, this is weird,</em> I thought. We were nowhere close to any proper road that could be used by carriages and such.</p>

      <p>If we were about to use something rideable, the mountain road near Gideon would have been much better for it.</p>

      <p>“This place seems good,” he said upon discovering an opening in the forest. It was circular and had a radius of about ten meters. There was a curious lack of tall trees, and it seemed like the plants here had only just begun sprouting.</p>

      <p>“My guess is that someone with a magic-based job used an area-of-effect offensive spell here,” said Hugo. “I don’t know how it was for those affected, but it’s convenient for us.”</p>

      <p>He reached into his inventory, took out a silver sheet, and spread it out on the ground.</p>

      <p>Once he did that, I realized just how big the sheet was. It was a square with sides that were about five meters in size.</p>

      <p>“I’ve prepared the Garage,” said Hugo. “Cyco, any hostiles nearby?”</p>

      <p>“None at all,” she answered. “I’m not picking up any monsters or people.”</p>

      <p>“Roger that.” Hugo opened a window and began doing something on it. A moment later, sounds of machinery began coming out from under the sheet he’d spread on the ground.</p>

      <p>“...Wait, machinery?” I muttered. Suddenly, I realized something.</p>

      <p>Hugo’s job was High Pilot. The noun “pilot” was generally used on people who operated something mechanical. However, this world didn’t have any machinery that could be “driven” in that sense...</p>

      <p>...unless it was related to a certain country.</p>

      <p>“Hugo,” I said. “You’re...”</p>

      <p>“Ray,” he spoke up before I could finish. “I am taking part in this quest as a <em>person</em> and as a thorn protecting the beautiful flowers we call ‘women.’”</p>

      <p>His statement made it obvious that he’d known exactly what I was gonna say.</p>

      <p>“Why are <em>you</em> on this quest?” he continued. “Is it because you’re a Paladin of the kingdom, or because you’re your own man?”</p>

      <p>There was only one thing I could say in response.</p>

      <p>“Ignoring this would leave a bad taste in my mouth.” It was the exact same thing I’d thought when I accepted this quest. “At the very least, I’m not doing this because of my occupation.”</p>

      <p>“Nor am I.” With those words, Hugo gave a wry smile and pushed down on a button on the window. It said “sortie” on it.</p>

      <p>Right after that, the sheet on the ground began to expand. Its surface began to slip and open up like a garage shutter, exposing a cavity that completely ignored the sheet’s thickness.</p>

      <p>Four pillars rose up at the corners of the sheet and stopped when they were about five meters tall.</p>

      <p>A moment later, a roaring sound came from the bottom of the cavity as a lift began rising up until it reached the surface.</p>

      <p>On it, there was a large object. Its two arms and legs gave it a humanoid appearance. However, it was nowhere near human.</p>

      <p>It was about six heads tall, but its height was above five meters and it was covered in a dark green steel coating.</p>

      <p>On its pelvic area, there was a gun and an army knife that fit its great size, and it didn’t seem like that was the extent of the weaponry it had in store.</p>

      <p>Its chest area was open, and inside, I saw a cockpit that bore a striking resemblance to one I had seen in some old anime.</p>

      <p>In conclusion, it was a humanoid battle robot.</p>

      <p>“‘Magic and Gear,’” he said. “More widely known as Magingear. The main weapon of the Dryfe Imperium.”</p>

      <p>Hugo — a High Pilot of the Dryfe Imperium — said that as he got into the cockpit.</p>

      <p>“...Hugo,” I said, impressed.</p>

      <p>“Right now, I am but a knight fighting for a lady’s tears,” he told me. “You are not a Paladin of the Kingdom of Altar, either. Am I correct, fellow knight?”</p>

      <p>“...Yeah,” I nodded.</p>

      <p>Yet again, he’d donned that aura straight out of a young girls’ manga or a Takarazuka performance and spoken as if he were a character from a play. Despite how ridiculous it seemed, I couldn’t help but agree with what he’d said.</p>

      <p>The Kingdom and the Imperium had been at war once. There was a ceasefire going on right now, but it was rumored that it was going to get heated again within the next few months. The countries we served were true enemies.</p>

      <p>However, as we were right now, that didn’t matter to us. It was also completely irrelevant to the girl who’d cried for her brother and the boy we were going to save.</p>

      <p>Our standings had absolutely no connection to what we had to do. When we’d taken this quest, we had been acting as our own individual human beings.</p>

      <p>“Shall we go?” he asked from his cockpit.</p>

      <p>“We shall,” I answered and jumped on the hand of the Magingear he was piloting. The other hand was already occupied by Cyco.</p>

      <p>With both its hands full, Hugo’s Magingear stood up.</p>

      <p>“Demi-Dragon-tier Magingear, Marshall II... Sortie!”</p>

      <p>And so, the Marshall II began dashing towards our goal — the other side of the mountain.</p>

      <p class="centerp section-marking">◇</p>

      <p>Magingear. That was the abbreviation of “Magic and Gear” — a term used to describe the imperium’s main type of weapon.</p>

      <p>As I sat on this weapon’s right hand, all the shaking caused by its running made me think of something.</p>

      <p>The first Embryo I’d seen after beginning to play <em>Infinite Dendrogram</em> had been my brother’s Baldr. That was a technological weapon, too, but since it was an Embryo — something that was unique to each Master — it wasn’t quite the same as something made by technology.</p>

      <p>The Magingear, however, were weapons born from Dryfe Imperium’s scientific prowess — a part of the world’s setting.</p>

      <p>As far as I was aware, the imperium was the only country in <em>Infinite Dendrogram</em> that excelled in technology and science. That fact made me curious as to why the other countries didn’t follow its footsteps.</p>

      <p>Technological innovation was something that would normally spread like wildfire. The imperium had been a technological nation for more than a hundred years. Reason suggested that their knowledge should’ve spread to other countries by now.</p>

      <p>When you looked at it as a game, it was probably safe to say that the reason was that the developers wanted to keep each country unique. However, <em>Infinite Dendrogram’s</em> setting was detailed enough to incorporate the basic function of logging in and out. That made me think that the technological gap between the nations wasn’t without a world-building reason, too.</p>

      <p>So, as we made our way to the hideout of the Gouz-Maise Gang, I asked Hugo about it. “What do you think?”</p>

      <p>“Heh,” he grinned. “To know the answer to that, you have to know about a certain civilization.”</p>

      <p>“Civilization?” I repeated.</p>

      <p>“Yes,” said Hugo. “It’s called either the ‘lost’ or the ‘ancient’ civilization.”</p>

      <p><em>...That name seems familiar,</em> I thought. <em>Oh, right. Silver — the horse I pulled from the gacha — had “ancient civilization” in his description.</em></p>

      <p>“That civilization existed a few thousand years ago,” Hugo continued.</p>

      <p>According to Hugo, the ancient civilization had been highly advanced in terms of technology. It was similar to the imperium in that regard, but their technology had been superior to anything Dryfe had now.</p>

      <p>However, the civilization perished, leaving behind only a few machines and texts that archeologists stumbled upon every now and then.</p>

      <p>“You’re gonna have to tell me more than that,” I said.</p>

      <p>“There are theories that the grand civilization disappeared because their technological advancement made the people too arrogant, and therefore it incurred some divine wrath,” he explained. “According to the legends, a god and his thirteen servants went around destroying every civilization that existed back then. Every country besides Dryfe and Granvaloa believes that legend, so the people <em>choose</em> not to make any scientific and technological advancements.”</p>

      <p><em>I see,</em> I thought. <em>So they’re actively avoiding technology because they’re afraid of divine punishment. Hm...? Dryfe </em>and<em> Granvaloa?</em></p>

      <p>“That doesn’t apply to those two countries, then?” I asked. “And wait, Granvaloa is scientifically advanced?”</p>

      <p>“Well...” he said and pondered. “You might say that Granvaloa has science and you might say that it doesn’t.”</p>

      <p><em>How am I supposed to process that?</em></p>

      <p>“First, let me tell you about Dryfe,” he said. “Dryfe has always presented itself as the true successors of the ancient civilization and thus didn’t shy away from technology and science. However, all their attempts to recreate the technology of the ancient times have failed, so they had to compromise for machines such as the Magingear, which only functioned by using people’s magic.</p>

      <p>“People’s magic?” I asked.</p>

      <p>“Yes, they can only move at the cost of MP. Right now, my Marshall II uses 1MP per minute. In battle, it would be 1MP per second. There are differences in extent, but this is how every Dryfe machine works.”</p>

      <p><em>MP per second, eh? Reminds me of my Reversal,</em> I thought.</p>

      <p>Anyway, a certain thing made sense now. <em>That</em> was the reason why Hugo’s jobs — Pilot, Mechanic, and High Pilot — were so focused on MP growth.</p>

      <p>“So the machines of the past were different?” I asked.</p>

      <p>“Many of the ones that have been excavated had generators installed in them,” he answered. “They provided the machines with all the magic they needed to operate, and as far as I’m aware, they’re a technology lost to the modern world.”</p>

      <p><em>Interesting,</em> I thought. <em>I wonder where Silver stands in all of this.</em></p>

      <p>“Can you expand on Granvaloa?” I asked. “I didn’t know that they had machine technology.” All I knew about it was that it was a country on the sea, so I had always imagined it functioned with sail-based ships, like the ones in the Age of Discovery.</p>

      <p>“Heh. That country is less about machine technology and more about ship-building technology,” said Hugo. “For example, steamships aren’t uncommon among their people, but there are no automobiles to speak of. In a sense, Granvaloa is more unbalanced than Dryfe. After all, though their magic technology is behind that of most countries, their magic ships are unmatched.”</p>

      <p>“So that’s how it is,” I nodded. Though it was limited to shipbuilding, the maritime nation excelled in both magic and technology.</p>

      <p><em>Yeah, it’s safe to call it unbalanced,</em> I thought.</p>

      <p>“Also,” added Hugo. “Since they’re the only ones salvaging things from underwater ruins, not even Dryfe knows what they really have.”</p>

      <p><em>Well, that sure piqued my interest. I should go there someday.</em></p>

      <p>“Hmm... Hugo,” Nemesis spoke up. “Did you get the knowledge about this civilization from the world’s official description?”</p>

      <p>“No,” he answered. “I’ve been told about it by archeologist tians and some trivia-crazed acquaintances who’ve explored ruins all over the world. The clan I belong to has many people with strange hobbies.”</p>

      <p>“Your clan?” I asked.</p>

      <p>“Yes,” Hugo nodded. “It’s one of the bigger clans in Dryfe, so there are quite a lot of us. If you ever switch to serving the imperium, I’ll help you join.”</p>

      <p>“Ha ha ha,” I laughed. “I don’t see that happening.”</p>

      <p>“Heh. I think that depends on the results of the upcoming war.”</p>

      <p>He wasn’t wrong. That could easily happen if the imperium came out on top and the kingdom became its domain.</p>

      <p>“Though it’s not impossible that the results lead to me joining <em>your</em> clan,” he added.</p>

      <p>“My own clan, huh?” I said. “I actually don’t have one yet.”</p>

      <p>“Then you should find one that has people you get along with and join it. It’ll give you more things to do in this world. You can also make one yourself, if you like.”</p>

      <p>“I’ll think about it... Oh?” I said, startled.</p>

      <p>As we made our way through the forest, the Magingear had lowered its engine’s output and reduced its noise to a minimum.</p>

      <p>“Looks like we’re here,” said Hugo.</p>

      <p>A few moments later, we came close to the forest’s edge.</p>

      <p>“I see it,” Cyco said.</p>

      <p>I looked through the spaces between the trees.</p>

      <p>Outside the forest was a large building — a stone fortress. With its walls covered in ivy, it stood in the middle of a forest clearing that extended for at least a few hundred meters in every direction.</p>

      <p>It was easy to tell that it had been built a long time ago, eventually been abandoned, and was now being used as the bandits’ hideout.</p>

      <p>“It’s just like it was shown on the map,” said Hugo. “That’s the place, no doubt about it. There’re even some guards there.”</p>

      <p>He was right — I could see some bandits standing on the fortress’ walls. However, the boredom in their mannerisms and the occasional yawns made it obvious that they weren’t too serious about their job. At the very least, they still hadn’t noticed us hiding in the forest.</p>

      <p>I had my worries about the possibility of them seeing Magingear, but that didn’t seem to be necessary. The trees in the forest were tall enough to hide it without any problem. The dark green coating probably worked as a good camouflage, too.</p>

      <p>“What now?” asked Nemesis. “Shall we all charge at it?”</p>

      <p>“Don’t be stupid,” I said. “It’ll all be over if they start using the kidnapped children as hostages.”</p>

      <p>Then again, that was going to happen in any scenario where we made an attempt to fight the bandits and do the rescuing. However, since we didn’t know the inner structure of the fortress, sneaking in without getting spotted would be difficult. Also, no matter how negligent the guards were, they’d quickly notice us if we showed ourselves in this wide open space.</p>

      <p>“...I happen to have an idea on how to go about this,” said Hugo.</p>

      <p>“An idea?” I asked.</p>

      <p>The Magingear he was driving nodded in a highly convincing manner and pointed at itself.</p>

      <p>“Everyone in this world knows that this weapon belongs to Dryfe,” he said. That was the reason why we got here through a route on which no one could see us.</p>

      <p>“Again, this is <em>a weapon belonging to Dryfe</em>,” he continued. “The same Dryfe that has <em>absolutely no reason to save the kingdom’s children</em>.”</p>

      <p>“Hm...? Ah!” I finally realized what he meant. “If I attack the fortress, they will likely think that it has nothing to do with the kidnappings. After all, there’s no reason for a man of the imperium to come rescue the children of an enemy nation. That will prevent the bandits from using them as hostages. They will probably believe that I wouldn’t discriminate and kill any children they brought out, and that would be unfavorable for them because less children means less ransom money.”</p>

      <p><em>So, Hugo’s true affiliation is actually gonna be useful to us, huh?</em> I thought.</p>

      <p>“They won’t be able to use the children as hostages,” he continued. “And they certainly won’t just sit and do nothing while I attack the fortress. They will surely come to face me. And while they’re busy with me, you can sneak into the building and rescue the kidnapped children. That’s the plan I have in mind, anyway.”</p>

      <p>“Sounds good,” I nodded. “Are you sure you’ll be okay, though? Being a distraction isn’t easy.”</p>

      <p>“A Marshall II has a strong frame,” said Hugo. “It won’t go down easily. Also, I have Cyco with me.”</p>

      <p>“Yep,” she nodded. “What do we do?”</p>

      <p>“You use Enemy Detect,” Hugo said. “Also, ready some Smoke Dischargers to make a smokescreen for us to hide in while we lower their numbers.”</p>

      <p>“Oui, umm... monsieur.”</p>

      <p>“You can use the smoke to close in on the fortress,” Hugo added, turning to me. “Save the children, and stay out of sight.”</p>

      <p>“All right,” I nodded.</p>

      <p>“Understood!” Nemesis declared. “This is nothing Ray and I can’t do!”</p>

      <p>“It will probably be a battle against time,” Hugo added. “You will need to be both fast and precise.”</p>

      <p>“I know,” I nodded again. A battle against time while trying to save children. It was going to be much like my first quest, when I’d had to save Milianne.</p>

      <p>However, back then, I’d had Liliana and — most of all — my brother with me. Without him, I couldn’t have made my way to where Milianne was, and if he hadn’t kept the Demi-Dragon Worms busy, the situation would’ve gotten much worse.</p>

      <p>Also, that had been a difficulty level 5 quest. The quest we were doing right now was a difficulty level 8. I had no idea what kind of monsters I would have to face, and I didn’t have the people I’d relied on back when I’d saved Milianne.</p>

      <p>Still, this time, I had Hugo and Cyco with me. I was stronger, as well, and Nemesis was more reliable than ever. I didn’t know how far that would get me, but...</p>

      <p>“...Backing out isn’t really an option when the lives of children are on the line.”</p>

      <p>“Hm?” Hugo asked.</p>

      <p><em>Wait, did I say that out loud?</em> I thought. Hugo had apparently heard what I’d said and stared at me with the Magingear’s head camera.</p>

      <p>“What?” I asked.</p>

      <p>Well, I kinda understood what he wanted to say. He probably thought I was getting a bit too serious about <em>Infinite Dendrogram</em>, which — from beginning to the end — was nothing but a game. However, game or not, having children die on me left a bad taste in my mouth.</p>

      <p>Hugo stayed silent. He looked at me through the camera while thinking about something.</p>

      <p>“If you’ve got something to say, just say it,” I said.</p>

      <p>“...All right.” Hugo finally spoke up. His words were far from what I’d expected. “It’s nothing much... I just realized that you, too, are a real Maiden’s Master.”</p>

      <p>“Hm?” I raised an eyebrow. I didn’t see what he meant by that. I wasn’t aware of any relationship between what I’d said and the fact that I was the Master of Nemesis, a Type Maiden.</p>

      <p>“Do you know what Masters of Type Maiden Embryos have in common?” he asked.</p>

      <p>“They have something in common?” I asked back.</p>

      <p>“Yes. A Master I know told me that such Masters have a certain common feature.”</p>

      <p>I had yet to meet a single other Maiden’s Master, but I was mildly surprised to hear that we all had a similarity. “Which is...?”</p>

      <p>“They don’t feel <em>Infinite Dendrogram</em> is a mere game.”</p>

      <p><em>...What?</em></p>

      <p>“That’s stupid,” I said. “I’m well aware that we’re in a game here.”</p>

      <p>I had no grand delusions about being in an old light novel type of scenario in which the game I’d started playing was actually a real other world. <em>Infinite Dendrogram</em> was a game, and I wouldn’t argue against that.</p>

      <p>“The Master I mentioned said the same thing,” said Hugo. “However, somewhere deep inside, they don’t believe that to be true. And that’s why...” He fell silent.</p>

      <p>“Why... what?” I asked.</p>

      <p>“It’s nothing. Never mind. Sorry for saying something weird right when we’re about to attack the fortress. I got a bit derailed.”</p>

      <p><em>Damn it, don’t leave me hanging after getting my attention like that!</em> I thought.</p>

      <p>“Oh, by the way,” he spoke up again. “The enemies might be tians, but killing them doesn’t count as a crime when they’re criminals or if you’re just defending yourself. Keep that in mind.”</p>

      <p>“Yeah... I will,” I nodded.</p>

      <p>After that, Hugo fell silent once again.</p>

      <p><em>I’m still wondering what he was going to say, though,</em> I thought.</p>

      <p>“Master,” Nemesis spoke to me telepathically.</p>

      <p><em>What?</em></p>

      <p>“Do you know what he was about to say?” she asked.</p>

      <p><em>No, I don’t. You don’t either, right?</em></p>

      <p>“I wouldn’t say so. But if you say you don’t know, it might be best for you if things stay that way.”</p>

      <p>“Hm?” I raised an eyebrow. <em>What do you mean by that?</em></p>

      <p>“Ray!” yelled Hugo in surprise. “Look over there!” Cutting short my conversation with Nemesis, his Magingear pointed at the fortress. I looked in that direction and saw that its gates were slowly opening.</p>

      <p>“Look there,” said Cyco. “A carriage is coming.” I shifted my gaze to where she was pointing and saw a mountain road leading through an opening in the forest surrounding the fortress.</p>

      <p>On it, there were several carriages moving towards the bandit hideout.</p>

      <p>“Did they kidnap more children?” I asked.</p>

      <p>“Seems like it,” said Hugo.</p>

      <p>“They’re saying something,” Cyco muttered. She placed her hands on her ears, closed her eyes, and focused her hearing. “‘When we’re back in the fortress’... ‘we’ll kill him’... ‘our buddies’... ‘got caught’... ‘revenge’... ‘we’re killing’... ‘the brat.’”</p>

      <p>“Crap!” A realization made me mutter my frustration.</p>

      <p>“Wait, do they mean...?!” Hugo seemed to have realized it, too.</p>

      <p>They were talking about the five underlings we’d beaten, caught, and handed over to the guards.</p>

      <p>“It seems there were more than those five,” Hugo muttered. “They’ve noticed what we did back there.”</p>

      <p>And if that was the case, then the first child they were going to kill when they reached the fortress was the very same one we had to save.</p>

      <p>“It seems like time is short.” Hugo made the Magingear go from a kneeling position to standing upright. “I’ll attack the ones at the carriages. That should make the ones in the fortress come out and help them. When that happens, I’ll create a smokescreen you can use to get in undetected. Cyco, you support me.”</p>

      <p>“All right!” I nodded.</p>

      <p>“Understood!” said Nemesis in her sword form.</p>

      <p>“Yes, sir!” Cyco snapped to attention.</p>

      <p>As soon as he confirmed that everyone was fine with his plan, Hugo made his Magingear jump out of the forest and charge at the bandits.</p>

      <p>This time, he wasn’t running like when we had traversed the forest. Instead, he used the wheels installed in its legs to do a rolling dash that made him the fastest I’ve seen yet. Not slowing down, he took out a gun that was mounted on the robot’s pelvic area and began firing at the front of the group of carriages.</p>

      <p>A single attack was enough to make the horses drawing the first carriage burst, while the resulting shockwave blew the coachman away and made the carriage fall to its side.</p>

      <p>The sudden disaster made the carriages trailing behind it stop, and the Magingear — not letting the opportunity go to waste — began firing at and instantly killing the bandits surrounding them.</p>

      <p>“Hm?” The sight actually made me feel strangely uncomfortable. Nemesis seemed to notice my reaction, but chose not to say anything.</p>

      <p>After a number of bandits had been killed by Hugo’s preemptive attacks, they finally began retaliating and fighting back. However, they weren’t coordinated in any sense of the word, attacking independently with the methods each of them were familiar with. Some used swords, fists, and axes, while others took the ranged approach with bows and arrows.</p>

      <p>Reason stated that such things would be able to do nothing against the Magingear — which was as tough as a tank — but we were in <em>Infinite Dendrogram</em>. The bandits likely had low-rank battle-oriented jobs. Due to that, their stats would be higher than those of normal people, allowing their attacks to occasionally break and pierce through the Magingear’s armor.</p>

      <p>“Hghh!” Hugo exclaimed as his Marshall II showed no sign of stopping. He used the robot’s army knife to cut down anyone who got too close.</p>

      <p>Well, the term “knife” was only appropriate when compared to the Magingear. It was equivalent to a longsword for any bandit and it had absolutely no trouble slicing through their armor and splitting their torsos.</p>

      <p>Hugo used the gun to shoot down anyone attacking him from a distance. The bullets were equivalent to cannon shots, and they made the bow-wielding bandits burst and scatter in all directions.</p>

      <p>Though the bandits greatly outnumbered him, Hugo was far stronger than all of them combined. The sight made me recall the way Marilyn — Rook’s Demi-Dragon — had gone rampaging within the army of Goblins. The robot was probably as powerful as she was. When he’d gotten in, Hugo had called it a “Demi-Dragon-Rank Magingear,” and it was clear that the description was appropriate.</p>

      <p>Hugo was also highly skilled at controlling it, and from what he’d told me on the way here, the Piloting skill he had from being in the Pilot job grouping greatly increased the stats of the machines he rode. As a result of all of that, he had an upper hand in this battle despite the bandits greatly outnumbering him.</p>

      <p>“But his advantage isn’t absolute,” I muttered.</p>

      <p>Though the bandits were dying one after the other, some of their attacks were landing on the Magingear. Little by little, the damage done by them was piling up and becoming obvious.</p>

      <p>“Flaw,” Cyco said from beside me. Then she told me about the robot’s greatest disadvantage.</p>

      <p>“Magingears can’t be healed,” she said. “They need to be stored and fixed.”</p>

      <p>“I see.” I nodded.</p>

      <p>Though fueled by magic, the Magingears were machines. Healing magic and medicine didn’t work on them like they worked on people and monsters. Due to the constantly falling HP and the per-second MP cost, these iron giants could only fight for a limited amount of time.</p>

      <p>And yet, for the sake of saving the children, Hugo played his part in the plan by facing the bandits head-on and distracting them.</p>

      <p>“That’s why we have to do our best, too,” said Cyco.</p>

      <p>“Of course,” I agreed.</p>

      <p>All at once, several dozens of bandits ran out of the fortress. They went to help their endangered comrades by joining their battle against the Magingear, but that came at the cost of reducing their numbers at the hideout.</p>

      <p>“Now,” Cyco said.</p>

      <p>At about the same time...</p>

      <p>...the Magingear covered the area in can-like objects it had kept around its waist. After rolling on the ground a bit, they began spinning around while intensely releasing great amounts of white smoke.</p>

      <p>“Smoke Dischargers, released,” said Cyco. “We can go now.”</p>

      <p>She disappeared from my side. Not only that, she disappeared from the party window, as well. Whether that mattered or not, she’d probably gone to assist Hugo.</p>

      <p>“We’re going too, Nemesis!” I said.</p>

      <p>“Understood!” she agreed.</p>

      <p>As the white smoke covered the surroundings, I tightened my grip on Nemesis in her sword form and ran towards the fortress.</p>

      <p>I had to make good use of the opportunity Hugo had given me.</p>

      <p>This was all to free the children and make sure they survived.</p>

      <p>Letting the smoke shroud me, I broke into the fortress.</p>

      <p class="centerp section-marking">◇</p>

      <p>We’d saved Rebecca from her predicament in that back alley and instantly begun making our way to the hideout of the Gouz-Maise Gang for the sake of saving her little brother. That was why — by the time I broke into the fortress — I was grossly uninformed about what kind of group the Gouz-Maise Gang was. All I knew about them was that they were a bunch of scumbags who kidnapped and killed children.</p>

      <p>I was far too clueless.</p>

      <p>However, even if I’d known the kinds of things they actually did, it wouldn’t have changed anything.</p>

      <p>All that mattered was whether I was too late or not.</p>

      <p class="centerp section-marking">◇</p>

      <p>The smoke from the Smoke Dischargers used by Hugo’s Magingear permeated even the interior of the fortress, allowing me to go through the entrance and reach the building’s inner passages without being detected.</p>

      <p>Despite the thick smoke overwhelming the rooms and hallways here, I didn’t have any problem seeing which way was which. In fact, I could see right through it by merely straining my eyes a bit. I could only assume that it was made to not affect the vision of the user’s — Hugo’s — party members. I had no idea how that worked, though.</p>

      <p>“Well, we’re inside,” said Nemesis. “But we don’t know the structure of this place.”</p>

      <p>Since we had to be sneaky while moving through these hallways, Nemesis and I were talking to each other telepathically.</p>

      <p>Every now and then, we passed by some bandits running to fight Hugo, but it was clear that they couldn’t see us due to the smoke.</p>

      <p>“Master, where do you think we can find the children?” she asked.</p>

      <p><em>Either windowless rooms on the second floor or higher, or somewhere below.</em></p>

      <p>“Why do you think that?”</p>

      <p><em>The chances of them escaping would be higher if they were kept in the first floor, and I saw ivy growing on the walls around the windows of the upper floors. They could use that to go down and get out. By simple process of elimination, it’s safe to guess that they’re either below or above.</em></p>

      <p>“Then they’re probably underground,” she said. “It’s standard for kidnapping scoundrels to keep children locked up in the dungeon.”</p>

      <p>I didn’t know if I could be as sure as her. However, the possibility was there, so I had no reason not to test it.</p>

      <p>As those thoughts ran through my head, I came across a split in the hallway. There were three ways to go — forward, left, and right. A short distance up the right path, I saw a flight of stairs leading down — basically beckoning us in.</p>

      <p>I chose to follow the call and went down underground.</p>

      <p>“Ugh!” The moment I put my foot on the first stair, a strange stench came from the bottom and attacked my nose. It was a vile, yet familiar smell that I couldn’t remember — or perhaps didn’t want to. However, I couldn’t back away just because of it, so I gathered my resolve and went further down.</p>

      <p>The stairs, floor, walls, and ceiling were all made from stone, exactly as you’d expect. The ceiling was two times higher than my full height, while the distance between the walls was even greater than that.</p>

      <p><em>I won’t have any problems swinging Nemesis in here,</em> I thought.</p>

      <p>I also couldn’t help but notice the unique humidity permeating the air and the dark green moss growing on the ceiling and the walls.</p>

      <p>“How gloomy,” commented Nemesis.</p>

      <p><em>It’s a dungeon, after all,</em> I told her. <em>Also, this moss and humidity is a clear sign that there’s underground water leaking in from somewhere.</em></p>

      <p>“Well, it’s an abandoned fortress, after all.”</p>

      <p><em>Staying here for prolonged periods of time can’t be good for the children’s health.</em></p>

      <p>“If the scoundrels cared about the little ones’ health, they wouldn’t be kidnapping or killing them.”</p>

      <p><em>...True that.</em></p>

      <p>A single look at the underlings we’d beaten in the back alley or the ones around the carriages was enough to know that they didn’t care for the children’s lives whatsoever. Just remembering their words and behavior made me sick.</p>

      <p>“Gh...”</p>

      <p>“Do you feel it, Master?” asked Nemesis. She didn’t say what she meant by “it.” However, I knew without her having to put it into words.</p>

      <p>“It started when I began going down the stairs,” I said with my mouth. I finally recalled where I last breathed this stench.</p>

      <p>There was no need to speak telepathically anymore. Hiding was unnecessary...</p>

      <p>...because something at the other end of the hallway had already noticed us.</p>

      <p>“There’s something there...” said Nemesis.</p>

      <p>“Yeah,” I nodded.</p>

      <p>I was being assaulted by multiple smells. The smell of the wafting humidity, the stuffy air, and the moss covering the walls mixed with the stench of blood and rotten meat. I was familiar with this smell because it had been all around me during my night in the Tomb Labyrinth. There was no way I could mistake it.</p>

      <p>“Uuuaaaagghhh...” A groan reached my ears. It was followed by the rattling of bones. The sounds completed the imagery and made me all the more certain that the smell was that of the “undead.”</p>

      <p>Wounded Zombies were groaning as they closed in on me. Their decaying flesh clung to their bones, vile juices leaking from pustules and boils. The Civilian Skeletons closed the distance between us, their teeth rattling as they shambled ahead.</p>

      <p>The sight robbed me of words. That reaction might’ve been unwarranted, given that I had already faced undead monsters in the Tomb Labyrinth, but there was an important difference between the Zombies and Skeletons there and the ones before me.</p>

      <p>It wasn’t the number of them. Sure, there were several dozens of them, but the difference I had in mind was far more important.</p>

      <p>It wasn’t their physical might, either. A single look was enough to tell that these undead were significantly weaker than the ones in the Tomb Labyrinth.</p>

      <p>The great difference I had in mind was that they were all <em>the result of someone’s death.</em></p>

      <p>“...F-Fuck off.”</p>

      <p>I didn’t know who I was talking to — probably the vile reality that had allowed the sight to happen — but those words were the first to escape my lips before I began repeating them in my head.</p>

      <p>“How horrid...” Nemesis broke in.</p>

      <p>I closed my mouth, rage overcoming me in the form of a dull grind of tooth against tooth, while Nemesis — despite having a phobia of the dead — showed far more pity than fear.</p>

      <p>The undead horde was composed of very small skeletons. I was about two times taller than any of them.</p>

      <p>They were numerous enough to cover the whole hallway.</p>

      <p>Nobody had to say it. I knew exactly who they had been before they were... this.</p>

      <p>“I’m gonna be sick...”</p>

      <p>The tiny undead closed in on us, extending their little arms. Grasping worn-out weapons, they slowly charged at us — the intruders.</p>

      <p>I’d seen similar things in the Tomb Labyrinth, but undead that were made from the corpses of people were far too different from those that were created as undead to begin with. Just looking at them was enough to fill me with emotions that I could hardly bear.</p>

      <p>“It appears that the bandits have someone who can use necromancy among them,” said Nemesis. “They’ve repurposed the children they killed.”</p>

      <p>“Are you okay, Nemesis?” I asked.</p>

      <p>“Ha!” she laughed with no humor in her tone. “My fear is irrelevant right now. How could they do this to children?”</p>

      <p>“I feel the same,” I said.</p>

      <p>With my eyes fixed on the undead horde, I couldn’t help but wonder whether it was possible to save them. But I already knew the answer to that. The children were lost.</p>

      <p>If there was a way to bring people back from the dead, this war-ravaged country would’ve done it ages ago. That meant that it either didn’t exist or it was a method that even the kingdom couldn’t do. As things were, I simply couldn’t save them.</p>

      <p>“Tell me, Nemesis,” I spoke up.</p>

      <p>“What is it?” she asked.</p>

      <p>“What happens to the undead when they die?”</p>

      <p>The undead in the Tomb Labyrinth — a created dungeon — weren’t actual corpses, but mere creations. However, though they had the same names as the monsters back there, these Wounded Zombies and Civilian Skeletons before me had once been living beings. That made me wonder about what would become of their souls.</p>

      <p>“I do not know,” said Nemesis with a regretful tone. “Some are being used as nothing but empty corpses, while others still have their souls trapped in the bodies. I am not one to know what would happen to them when the vessels are destroyed.”</p>

      <p>“I see...”</p>

      <p>“However, I believe it’s best to end their painful existence as undead,” she added.</p>

      <p>“...Yeah.”</p>

      <p>The distance between me and the undead children became a mere five meters.</p>

      <p>The dimly-shining lights on the walls lit up the faces of the zombies and made me painfully aware that some of them had traces of facial features from when they had been alive.</p>

      <p>I tightly closed my eyes and stayed like that for a few seconds. Then I opened them and directed the back of my left hand at the undead children.</p>

      <p>“I’m sorry.”</p>

      <p>I made my left Miasmaflame Bracer burn them all with a stream of Purgatorial Flames. Their thin bones, decaying flesh, and what little hair they had left were embraced by the intense blaze and quickly burned away. It only took a moment for them to lose their HP and continue burning as actual corpses, rather than undead monstrosities.</p>

      <p>A black smoke shrouded the hallway before beginning to follow the ceiling up the stairs and mix with the white smokescreen.</p>

      <p>I ended the flow of fire, making them stop burning, and leave behind nothing but cremated remains.<br/><br/></p>

      <p class="noindent"><b>[Successfully eliminated over 100 monsters that fit the condition “Undead of the appropriate total level”]</b></p>

      <p class="noindent"><b>[Due to fulfilling the job condition, “Paladin” and the elimination total condition, “Eliminate 100 appropriate monsters,” the skill “Purifying Silverlight” has been acquired]</b><br/><br/></p>

      <p>A message told me that I’d learned a new skill, but I felt no joy from the news. My heart was bogged down.</p>

      <p>I stood silently. I slowly put my hands together. Like I would do while standing before a grave, I prayed for their happiness in the next world.</p>

      <p>All of a sudden, an airflow created by the heat made a gust of wind pass through this underground hallway.</p>

      <p>“<em>T h a n k y o u.</em>”</p>

      <p>As the wind blew by, those words entered my ears.</p>

      <p>But I was certain it was just wishful thinking on my part. It was an illusion born out of my wish that their souls were saved.</p>

      <p>“Master,” Nemesis called out to me.</p>

      <p>“Is this it, Nemesis?” I asked while placing my hand on my chest and trying to bear the heaviness of the situation. “Is this... Is this the feeling Hugo was going to mention back then?”</p>

      <p>“...Yes,” she said. “If, somewhere deep inside, Maiden’s Masters don’t believe this world to be just a game... If you acknowledge this world’s lives to be just as real as those of your world...”</p>

      <p>I was silent.</p>

      <p>“...then the weight of the lives you shoulder in <em>Infinite Dendrogram</em> is much too real for you.”</p>

      <p>“Too real, huh?” I asked. The harsh reality of the heaviness of life. “You’re probably right...”</p>

      <p>This world was so realistic that it was hard to tell it apart from reality. Somewhere deep inside, I even believed that the tians living here actually had minds and souls. Even if my head told me that it was all just a game, I wasn’t able to shake that feeling. That was why seeing tians die to Gardranda had left such a bad taste in my mouth. It was also the reason why I’d gone all out to protect Milianne from such an ending.</p>

      <p>This case was no different. Except now, all I had before me were a bunch of people who had reached such sad conclusions.</p>

      <p>I didn’t know the courses of their lives. I had no idea how they’d ended up like this. They had been nowhere near me, so there was no way for me to know. However, the way they’d ended was just far too cruel for me to disregard it as your everyday tragedy, and the feelings overwhelming my heart were too powerful to ignore.</p>

      <p>An aftertaste so bad that it seemed to burn my throat now permeated my chest, mixing with great amounts of sadness and anger.</p>

      <p>“In this world — where lives are lost far more easily than in yours — this disposition you have might bring you great pain,” said Nemesis.</p>

      <p>“...That’s true,” I said weakly. I was actually on the verge of crying. It was so bad that a part of me wanted to throw it all away.</p>

      <p>I probably wasn’t the first to feel this way. Many of those who shared my nature probably couldn’t stand to experience this overwhelming pain of loss more than once and instead chose to never touch <em>Infinite Dendrogram</em> again. A side of me was actually urging me to do the same.</p>

      <p>“However, I... Not yet.” I was still unbroken.</p>

      <p>I still had to save the rest of the children. I still had a promise to fulfill.</p>

      <p>And most of all, I still had to make sure that the shithead who’d created this sight got what was coming to him. I had to make him pay.</p>

      <p>I shifted my gaze to the children — now nothing but dust.</p>

      <p>Hidden under their remains was a piece of metal that had something written on it in <em>Infinite Dendrogram</em>’s common language.</p>

      <p>It said “Maise’s Utility Child Civilian Skeleton, Specimen No. 87.”</p>

      <p>It was a tag. That was all that child had been to the one who’d put it on.</p>

      <p>The words and the number on it made me all the more aware that this enemy of mine was beyond redemption. Whether this was a game or not, I simply couldn’t let him be.</p>

      <p>“Let’s go, Nemesis,” I said. “We’re bound to find him at the end of this hallway.”</p>

      <p>“Understood!”</p>

      <p>And so, we began walking forward.</p>

      <p class="centerp section-marking">◆◆◆</p>

      <p><em>One of the two leaders of the Gouz-Maise Gang — Lich Maise.</em></p>

      <p>“Hm?” I said. A drop in my Minion Capacity count made me aware that some of the undead under my command had vanished.</p>

      <p>To be more specific, the dead units had just been the trash I’d made to kill some time. I’d left those little things in the underground hallway to act as sentries.</p>

      <p>They were weak, so their only use had been as alarms. I had gotten worried about nothing. I’d thought I might’ve lost something of actual value.</p>

      <p>It did catch me by surprise, however. I’d been aware that some intruder was causing a ruckus on the surface, but I’d had no idea that there was someone underground, as well.</p>

      <p>“Gouz.” I used a magic item that kept me in contact with the surface.</p>

      <p>“Yeah?” he asked.</p>

      <p>“How are things up there?” I asked.</p>

      <p>“I give it five or six more minutes,” Gouz answered. “It should all be over by then.”</p>

      <p>“In that case, when our underlings are all dead, move in to crush the intruder,” I said. “I’ll take care of the rat here in the dungeon. Once it’s dealt with, we’re moving.”</p>

      <p>“Gotcha,” he said. “Oh yeah, it looks like this’ll get me lots of packed lunches, so take some extra inventories for me, will ya?”</p>

      <p>“Of course.” I had some empty inventories meant for corpse retrieval somewhere around here. I intended to take everything with me along with the inventory containing my ultimate treasure and ritual.</p>

      <p>“Once you’re done with the intruder, wait in front of the gate,” I said.</p>

      <p>“Sure,” Gouz said.</p>

      <p>I cut the connection.</p>

      <p><em>That’s the surface taken care of,</em> I thought. Though our underlings were all weaklings still sitting on their first low-rank jobs, having faced all of them and surviving was no simple task. It meant that the intruder was quite tough. However, Gouz was on another level.</p>

      <p>He’d reached the maximum level, had a high-rank job, and — when it came to the entire gladiator job grouping — he was surely among the top five in this country. If Figaro hadn’t existed, it wouldn’t have been strange for Gouz to have taken the seat of the Over Gladiator.</p>

      <p>I, too, was at the maximum level. Not only that, but I was at this country’s pinnacle when it came to necromancy, and had a Superior Job within arms’ reach. I didn’t know how powerful the intruders were, but as long as they weren’t Superiors and didn’t have Superior Jobs, there was nothing for us to fear.</p>

      <p>However, something about them was highly curious.</p>

      <p>“Just what <em>is</em> their business here?” I muttered. They should’ve been well aware by now that trying to eliminate us was not worth the effort.</p>

      <p><em>Are they interested in our treasure?</em> I thought. Even when the amount I sent to Caldina was considered, the money we had with us was great. If someone wanted to get rich quick, taking it would be a perfectly viable method.</p>

      <p>However, if they were actually planning to delve into such daredevilry, it told me everything I needed to know about them.</p>

      <p>“Well, now... I believe it is time to prepare a welcome to my inhuman intruder.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter4">
    <div class="main">
      <h1>Chapter Four: The Two Leaders</h1>

      <p><em>High Pilot Hugo Lesseps.</em></p>

      <p>The clan I was part of was a gathering of players that mostly focused on crafting.</p>

      <p>Engineers, Mechanics, Pharmacists, Smiths... This world had many such jobs that produced all sorts of things, but when the work of tians and players was compared, most of the time, players were the ones that came out on top.</p>

      <p>Just like with battle jobs, this was due to the abilities and bonuses to stat growth given to them by their Embryos. The quality of the item and the production success rate were dependent on skill level and DEX — not any real-life ability. Due to that, even a player who was a novice at the craft could produce work showing true mastery.</p>

      <p>As my clan leader often said: “Unlike battle — which now involves moving your body — production in this game isn’t too different from how it was when MMORPGs weren’t VR. That’s why even the slowest klutz can do it.”</p>

      <p>That wasn’t all, though.</p>

      <p>“Mind you, that only applies when they’re making something that has already been made,” he liked to continue. “To create something new, you need the power to imagine it. When making something without the instructions, the necessary materials and inventiveness are on a completely different level.”</p>

      <p><em>Infinite Dendrogram</em>’s crafting came in two types — the production of known items and the creation of new items.</p>

      <p>Both methods required the person to have sufficient materials, skills, and stats.</p>

      <p>However, while known items could easily be made by following the instructions displayed on Recipes, the creation of new items required the creation of those very instructions.</p>

      <p>Naturally, they weren’t easy to make, since they required a deeper understanding of the processes involved, detailed knowledge of this world’s science and magic, and a proper grasp of the necessary materials.</p>

      <p>Simply put, creating new items was far too taxing. Thus, even after half a year had passed since the game’s release, Masters had still been making only known or slightly customized items.</p>

      <p>That had changed with our clan.</p>

      <p>Our clan leader had made a breakthrough in the game’s crafting department. In hindsight, it had been pretty simple, for he’d merely begun gathering people who were skilled and knowledgeable in reality.</p>

      <p>The Dryfe Imperium was a country that had machine technology. Though there were many differences — such as the fuel of the machines being magic — the Imperium’s technology had similarities to what we had in reality. The clan leader had made good use of that fact.</p>

      <p>He’d gathered various people who had knowledge about machines, which included graduate school students that had majored in mechanical engineering, skilled workers from automobile factories, designers of heavy machinery, and even those who were simply nutty about cars, trains, or weapons. And it was all for the goal of creating a new item.</p>

      <p>Of course, people hadn’t gone to him just because he was recruiting. The clan leader had begun to receive a significant amount of applications when he’d revealed a specific project of his.</p>

      <p>Its goal was to create a humanoid battle robot.</p>

      <p>Back then, Dryfe hadn’t had any humanoid mobile weapon-type Magingears. When the game had begun, the only Magingears Dryfe had had in their arsenal were the powered suits nicknamed “Marshall” and the tanks known as “Geist.” While bipedal, human-like robots weren’t even being invented. Thus, the clan leader had made it his goal to create them.</p>

      <p>Many people had been intrigued by the idea, so by the time the clan had been created, it’d already had dozens of knowledgeable and skilled people. They’d all quickly begun cooperating and working towards the common goal.</p>

      <p>“All you need is knowledge, equipment, manpower, materials, money, imagination, skill level, luck, and guinea pigs!” the leader had announced when he’d kickstarted the project.</p>

      <p>Clearly, it had been a demanding task. However, they’d been able to prepare everything they needed.</p>

      <p>They’d mixed and matched their knowledges of machinery, compared and adjusted their magic technology, and performed lots of trial and error while trying to make it all click. There had been countless failures, great costs, and members leaving one after the other. However, they’d continued despite the many problems.</p>

      <p>One of the senior members had compared the whole thing to something called “Project X,” and there had been many who’d nodded to his words. I had been uninformed and knew nothing about that show, but it seemed to click with those from his generation — especially the Japanese people.</p>

      <p>And so, after two months in real life — half a year in <em>Infinite Dendrogram</em> — all the trouble has finally paid off as they completed a new item.</p>

      <p>The name given to it was “Marshall II.” It was a mass-producible weapon with the power equivalent of a Demi-Dragon. The humanoid battle robot Magingear was a straight upgrade to a Marshall — the powered suit.</p>

      <p>Once the Marshall II was complete and the Recipe became public, our clan quickly began growing into the largest one in Dryfe Imperium.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p>The battle before the fortress was nearing its end.</p>

      <p>“Hugo, five o’clock, one Gunner,” said Cyco.</p>

      <p>“Oui.”</p>

      <p>As Cyco scouted the fog and gave me directions, I acted accordingly by turning my frame and firing from the Hand Canon on my left hand.</p>

      <p>The Gunner that was aiming at me with a magic gun failed to evade my attack, and the explosive shot from my MRW03 Hand Canon made him burst into little pieces, leaving only the arm that was gripping the weapon.</p>

      <p><em>That gun is one of the Imperium’s older models,</em> I thought. <em>Looks like our technology is leaking through that country’s black market again.</em></p>

      <p>“Six o’clock, two Fighters,” said Cyco.</p>

      <p>“Got it.”</p>

      <p>I made my upper half turn around and used the centrifugal force to cut them down with my SRW02 Battle Knife.</p>

      <p>The first one was unable to react as it broke through his armor, flesh, bone, flesh, armor — in that order — and split him at his torso. The second one reacted and stopped my Battle Knife with his greatshield.</p>

      <p>Unlike in reality, <em>Infinite Dendrogram’s</em> Fighters of this vein were tough. Though a Marshall II had power that made most heavy machinery pale in comparison, many Fighters could — evidently — block mine’s attacks and even harm it.</p>

      <p>This one had both reaction speed and power.</p>

      <p>However...</p>

      <p>“Your legs are wide open,” I said.</p>

      <p>Making sure he didn’t move by forcing him to struggle against the force of my Battle Knife, I used the Marshall II’s legs to step on his. The robot’s overall weight — which reached a whole ten tons — was far too great for his plated boots to handle, and his legs were crushed.</p>

      <p>“HHHH?!”</p>

      <p>The moment he released a voiceless scream and lowered the power on his shield arm, I used my blade — now free to move — to split his head in half.</p>

      <p>“No enemies nearby,” said Cyco.</p>

      <p>“Got it,” I replied. “Continue keeping an eye out. And dedicate extra attention to the direction of the fortress.”</p>

      <p>“Oui.”</p>

      <p>Apparently, I’d handled everything they’ve sent at me so far. The realization that I’d prevailed made me heave a deep sigh.</p>

      <p>My Marshall II was standing in the middle of the battlefield, surrounded by countless bandit corpses. I silently looked around. The one responsible for this horrible scene was me.</p>

      <p>I was fully aware that there were things to be said about me killing so many people, but my actions didn’t make my heart hurt, nor did I regret them.</p>

      <p>I’d known about the existence of the Gouz-Maise Gang before Rebecca had told me about them. In fact, I’d been aware of them before I’d even come to Gideon. During the research we’d done for <em>the plan</em>, I’d noticed them among the factions surrounding the city and engraved them onto my mind.</p>

      <p>They had killed far too many children and far too many noble souls trying to save them. It was only natural for people who took the lives of other humans to — in turn — be killed by them, as well. I thoroughly believed that to be true.</p>

      <p>Though, considering that I was an immortal Master, that belief might be insolent and contradictory.</p>

      <p>“All right, now...” I muttered.</p>

      <p>Though the result of the battle made it seem like my victory had been flawless, that was far from the truth. My own HP hadn’t dropped a single percent, but the damage to my Marshall II was severe. Due to the attacks it had sustained, about a third of its armor had come off, which had exposed the inner frame to considerable amounts of damage. The movement of its left arm had become quite slow, as well.</p>

      <p>Special equipment like cars, ships, and Magingear didn’t have any HP displays, but if they did, my Marshall II’s gauge would be at about 30% of the total. That was a testament to just how difficult the battle had been.</p>

      <p>Though a Marshall II was a humanoid robot straight out of science fiction, my opponents were all true inhabitants of this fantasy world. The axes they’d swung could break steel, and the arrows they’d fired had easily pierced through the robot’s armor. If my fellow clan members hadn’t increased the Marshall II’s stats by fine tuning it for better use by the clan’s Masters, and if I hadn’t given it the bonuses from a High Pilot riding it, I would’ve been overwhelmed by their numbers and lost.</p>

      <p>I sighed yet again, reached into my inventory and took out an MP Recovery Potion.</p>

      <p>Moving and fighting in the Magingear came at a cost to my MP. During the battle, it had dropped to a mere 20% of the total, and if I didn’t restore it, the damage to my Marshall II would be the least of my worries in the upcoming battles.</p>

      <p>“Hugo,” Cyco addressed me.</p>

      <p>I drank the contents of the bottle and replied to her. “What is it, Cyco?” “It wouldn’t have been this hard if you’d used your Embryo’s skill,” she said.</p>

      <p>“Indeed.” I nodded in response. She was completely right. If I’d used my Embryo’s skill, I could’ve won without getting as much as a scratch on me. After all, it was basically the natural enemy of people such as these.</p>

      <p>However...</p>

      <p>“I can’t,” I said. “I will only allow myself to use that skill after the plan begins. I am not touching it before that. That’s an order from the clan leader, and I made a promise to follow it.”</p>

      <p>“But no one’s watching — not even Ray.”</p>

      <p>“Even so,” I said. “If I were to use the skill before the plan begins, it would have to be a situation when I simply <em>have</em> to do it.” And thankfully, it hadn’t come to that.</p>

      <p>“How stubborn,” she said.</p>

      <p>“I’m aware,” I nodded. “Now, I wonder if there are any kidnapped children in those carriages.”</p>

      <p>I could easily help them right now, but doing so would made it obvious that using them as hostages would be effective against me. If another battle began while they were aware of that, the scum would begin using them to threaten me.</p>

      <p>That would be fine if there were no more bandits left or if Ray had exterminated all the ones still at the fortress, but if some were still alive, trying to help the children in the carriages would be dangerous. I had to leave them there for now.</p>

      <p>As such thoughts went through my head...</p>

      <p>“...Heh,” I grinned.</p>

      <p>“Hugo,” said Cyco.</p>

      <p>“I know.”</p>

      <p>I sighed slightly and moved the levers to make the Magingear replace the Hand Cannon’s empty explosive shot magazine with a full one it had hanging on its waist. Even while doing such a simple action, I couldn’t help but be aware that the left arm’s movements were noticeably duller.</p>

      <p>“I could’ve put the Marshall II back in the Garage and fixed it up, but it seems I’ll have to give up on that,” I said. After all — I was all out of time.</p>

      <p>Aiming towards the entrance of the fortress, I fired a shot from my Hand Cannon. It went through the open gates and exploded upon hitting the <em>thing</em> standing right behind them.</p>

      <p>Any normal human hit by such an attack would’ve burst into pieces so small that none of them would’ve reached one kilogram in mass. However, that didn’t happen to the creature standing there.</p>

      <p>“Damn, that hurts!” it said. “It’s kinda hot, too.”</p>

      <p>With those words, the thing showed itself while displaying no signs of injury or pain.</p>

      <p>It was a demon of a large stature. Despite its head being that of an ox, the teeth lining its mouth were all hound-like fangs.</p>

      <p>Its height almost matched that of my Marshall II. It even had to bend a bit to fit through the fortress’ gates, which were twice as tall as the average person. A single glance was enough to know that it was on an entirely different level from the bandits I’d been fighting until now.</p>

      <p>The sight of it made me tremble.</p>

      <p>“...I assume you’re one of the leaders of the Gouz-Maise Gang?” I asked.</p>

      <p>“Ayup,” it said. “Yer talkin’ to one of the two great leaders of the Gouz-Maise Gang — Strong Gladiator Gouz.”</p>

      <p class="centerp section-marking">◇◆◇</p>

      <p>“Hugo, do you know about category-based personality analysis?” the clan leader had asked soon after I’d joined the clan. It had happened about a month ago in terms of reality’s time.</p>

      <p>The clan had already become the largest in Dryfe. It was known for having played a great role in the war and was flourishing in terms of both budget and human resources. There was no end to the Masters trying to join, and the total number of members was quickly closing in on a thousand.</p>

      <p>Back then, I had still been a rookie whose total <em>Infinite Dendrogram</em> playtime didn’t even break a month — a Master who’d just happened to join at that particular time. However, due to some things in reality, the leader had taken an interest in me and invited me into his clan. Because of those circumstances, he and I often had talks such as these.</p>

      <p>“Is it something like blood type-based personality analysis?” I asked. “It certainly sounds like it.”</p>

      <p>I wasn’t fond of the idea behind blood type-based personality analysis. Rather than trying to research my character by examining the traits I was born with, I preferred to strive to be someone I wanted to be. A person’s character was best left for the person to decide. Whether here or in reality, I sincerely believed that to be true.</p>

      <p>“Blood types, eh?” said the leader. “I don’t like personality analysis based on that because the basis for it is extremely weak. I still think that brain — not blood — should be the first thing to look at if you wanted to know how a person ticks. Well, anyway...”</p>

      <p>He reached into his inventory and took out a whiteboard. Then he began writing something down on it with a marker. He liked explaining things, so he always had those objects with him.</p>

      <p>He also liked scheming, so he often used them to lay out the plans that came to his mind. It wouldn’t have been too bad if the schemes could be laughed off, but he often made plots which — while amusing to us — were nothing short of tragic to those affected.</p>

      <p>A part of me was often disturbed by such plans, but the part of me that would stop him simply didn’t exist.</p>

      <p>...Back to the matter at hand.</p>

      <p>On the whiteboard, the leader drew a humanoid shape which represented a Master and wrote down several Embryo categories to the side of it.</p>

      <p>“You know how, in the Zeroth Form, an Embryo examines the Master’s actions, character, and other personal things before using the results to go into the First Form, right? Well, some decided to turn it around, creating this idea that you can find out what kind of person a Master is by looking at the type of their Embryo.”</p>

      <p>That made sense. Since Embryos were born from the inner workings of Masters, they were far more reliable than blood types.</p>

      <p>“The idea was popular about one year ago in terms of real time,” said the leader. “I tried my hand at it, too. However, High-Rank Embryos and above had so many irregularities that I couldn’t make sense of them at all. There were even some Embryos like mine — completely unique in terms of typing. In the end, the only results that were somewhat reliable were those I got from four of the five base categories and a certain extra.”</p>

      <p>The categories he wrote down were Arms, Guardian, Castle, Territory, and just “extra.”</p>

      <p>“Boss,” I spoke up. “I don’t see Chariot among the five main categories.”</p>

      <p>“Chariot, eh?” he repeated. “I actually didn’t notice anything definite among Masters with those Embryos. That’s why it’s not in my results.”</p>

      <p><em>What a shame,</em> I thought. I was actually quite curious about that category.</p>

      <p>“Now, let me describe them for you,” he said. “Arms often belong to people who are courageous and unafraid to get hurt. Reckless, stupid, emotional, hot-blooded. There are many ways to describe them. Guardian Masters are the opposite — they’re cowardly, afraid to get hurt, lonely, or just want to have someone protect them. These two fit the general image, don’t you think?”</p>

      <p>Weapons and defenses. When the nature of those Embryos was considered, that evaluation seemed to be quite correct. Though I couldn’t help but wonder where non-weapon Arms were in all of this.</p>

      <p>“Castle Masters are introverted, gentle, careful, cooperative, and have an artisan’s temperament. Seems right, no?” he said. “Territory Masters have a lust for control, tend to hoard their stress, create rules for themselves, and are self-righteous and lone wolves. By the way, my Embryo’s first category was Castle.”</p>

      <p><em>I see,</em> I thought. So, depending on the person, there was room for objections. Especially when you considered the leader’s personality and aligned it with the description of Castle Masters.</p>

      <p>“There are some hybrids that mix several categories at once, so it’s hard to be completely sure,” he added. “But anyway, that’s the main categories covered.”</p>

      <p>“So, boss,” I spoke up. “What’s the extra category?”</p>

      <p>“Maiden.”</p>

      <p>His answer made my eyes widen, though only a little bit.</p>

      <p>“Type Maiden,” he said. “A rare category you will encounter every now and then. These Embryos have two main features. First, they’re always hybrids that come equipped with another category. And second, their base form is always that of a human. Sure, there are Guardians that take the shape of humanoid monsters, but Maidens are always humans, through and through.”</p>

      <p>I was fully aware of those features.</p>

      <p>“Just so you know, the term ‘Maiden’ is only used when their human form is female,” he continued. “It’s different when it’s male, but those are just so damn rare.”</p>

      <p>“So, leader... what are Maiden Masters like?” I asked.</p>

      <p>“They don’t think that this world is a game. To them, the weight of the lives here is just as great as it is in reality.”</p>

      <p>His answer made me silently gasp.</p>

      <p>“So, got anything to say about my deductions, Hugo?”</p>

      <p>I had trouble formulating an answer to that.</p>

      <p class="centerp section-marking">◇◆◇</p>

      <p>Finally, one of the two leaders of the gang had left the fortress and introduced himself as Gouz, the Strong Gladiator.</p>

      <p>“Strong Gladiator” was one of the high-rank jobs from the gladiator grouping. I’d heard that it focused mainly on hand-to-hand combat. What mattered more than the job itself, however, was the fact that he even <em>had</em> a job, which meant that — despite appearing so monstrous — he was actually a Demi-Human. That reality was also supported by the fact that he could hold a conversation.</p>

      <p>“Man, did you make a mess here,” he said. “My boys were such a nice little bunch, and you went and killed them all.”</p>

      <p>“You say that,” I replied, “but I don’t see a hint of anger or sadness in you.”</p>

      <p>“Well, yeah, means I get a buncha free meals, right?”</p>

      <p><em>...This wretch,</em> I thought.</p>

      <p>“A kid’s meat is sweet and tender, sure,” he continued. “But every now and then, I feel like sinking my teeth into the bitter meat of an adult. Did ya know that adult flesh actually becomes more bitter and tastier the more of a dreg they are?”</p>

      <p>“Sorry, but I’m a vegetarian,” I snapped.</p>

      <p>“Really, now? Surprised ya can stay healthy like that. Guess that immortality you Masters have comes packaged with some tough bodies, eh?”</p>

      <p>So he knew I was a Master.</p>

      <p>“I was watchin’ the whole fight from the fortress,” he went on. “Your movements are too good. Don’t hafta be a genius to see that you’re not the usual soldier.”</p>

      <p>“Heh,” I grinned. “Then you could’ve come out before I’d killed every single one of your underlings.”</p>

      <p>“Oh, but having you take care of them saved us the hassle,” he said.</p>

      <p>“...What?”</p>

      <p>“Well, we were actually planning to move out of here,” he explained. “By ‘we,’ I mean me and the other leader, of course. The underlings and the brats were just in the way, ya know? We planned to kill and eat them all.”</p>

      <p><em>The leaders were leaving their hideout and getting rid of their underlings?</em> I thought. <em>What drove them to do that?</em></p>

      <p>“So what’s the reason?” I asked.</p>

      <p>“Not telling,” he said. “Well, I don’t actually need any reasons. He said we’re doing it, so I’m just tagging along.”</p>

      <p>So the other leader was above him, while he merely acted as his right hand man.</p>

      <p>...That relationship reminded me of a certain someone.</p>

      <p>“Thanks to you killing our underlings, all that’s left is to eat ’em,” he added. “Then just gotta take care of the brats in the dungeon... and the ones the boys just brought us.”</p>

      <p>He shifted his gaze towards the carriages behind me... specifically, towards the children inside.</p>

      <p>“I won’t allow that,” I said coldly. I made my Marshall II brandish the Battle Knife and aim the Hand Cannon at him.</p>

      <p>“Ha ha ha!” he laughed. “Thought as much. But...”</p>

      <p>Gouz lowered his center of gravity, and...</p>

      <p>“Y’CAN’T WIN AGAINST ME WITH THAT BROKEN PILE OF JUNK, YA DUMB SHIT!”</p>

      <p>...with a roar that seemed to shake the fortress — no, the whole ground around him — he charged at me while perking his shoulders.</p>

      <p>In response to that unrefined — almost suicidal — attack, I swung my Battle Knife at him. Since the explosive shot from my Hand Cannon hadn’t worked, I chose to use my melee weapon — a means of attack with a more focused type of damage — to hit his weak point. Specifically, I aimed at his carotid artery, which was sure to become a fatal injury when damaged.</p>

      <p>However, the result was far from my expectations.</p>

      <p>“NOT GONNA WORK!”</p>

      <p>My Battle Knife actually broke — not by his horns or claws, but by the skin covering his carotid artery.</p>

      <p>“Huh?!” I exclaimed.</p>

      <p>A moment later, Gouz’s large body rammed into my Marshall II and greatly shook the inside of the cockpit.</p>

      <p>“MGHHHOOOOOO!”</p>

      <p>Though the robot was several times heavier than him, his power was great enough to overcome that difference in weight. After pushing the Marshall II for more than ten meters, Gouz grabbed hold of its torso and threw it in an uncertain direction. Following a momentary floating sensation, the Marshall II crashed into the ground.</p>

      <p>“Ghh! Ahhh!” Though the harness fixing me to the machine didn’t show any signs of letting go, the force of the impact made the air escape my lungs. I hurriedly tried to regain my breath, but my respiratory system didn’t seem to be functioning properly.</p>

      <p>I then tried to move the levers to make the Magingear get into a proper position, but it didn’t go too well. The Marshall II or myself — I couldn’t tell which one was broken.</p>

      <p>“Hugo!” said Cyco.</p>

      <p>“Heh... ha ha ha,” I laughed. “I underestimated him. This ox-head’s tough. Clearly among the best high-rank job wielders. He could even aim for a Superior Job if the conditions were right.”</p>

      <p>However, that couldn’t ever happen because the Superior Job of the gladiator grouping — Over Gladiator — had already been taken by that “Figaro” fellow.</p>

      <p>Still, there was no denying that Gouz was strong. He could easily defeat high-rank Masters such as myself. Honestly, I wasn’t certain if I could’ve won against him even if the Marshall II had been in perfect shape.</p>

      <p>This robot’s ability was equivalent to that of a Demi-Dragon. My level 7 Piloting skill increased its power by 140%, but that still wasn’t enough to match this man.</p>

      <p>“Hugo,” Cyco said again.</p>

      <p>“Yes, I can hear you, Cyco,” I responded.</p>

      <p>“Will you use the skill?” she asked.</p>

      <p>I was silent. I still didn’t know if that was a good idea.</p>

      <p>My power was below that of Gouz. The gap between us was made even greater by the damage I’d sustained.</p>

      <p><em>The Marshall II and I can’t hope to win against this tough man-eater,</em> I thought. <em>However, if I use the skill — my Embryo’s skill — the result will change drastically. My victory will become certain due to the fact that he </em>is<em> a tough man-eater.</em></p>

      <p>However, I’d made it a point not to use my Embryo’s skill until the project, and...</p>

      <p>“Man, I’m really workin’ up an appetite here,” he cut my thoughts short with his words.</p>

      <p>Hearing Gouz say that, I looked at him through the Marshall II’s cracked camera-eye. Despite being in battle with me, he was facing towards the other direction. Considering my condition, he might’ve been thinking that the battle was over.</p>

      <p>Gouz was messing with a corpse of one of his underlings. He removed the armor, stripped off the clothes... and sank his fangs into the flesh.</p>

      <p>“Mm, them’s good eatin’,” he spoke while eating, courtesy be damned. “It’s just so... complete. Wouldn’t expect less from my boys.”</p>

      <p>With those words, bite by bite, he devoured his underling whole. As the sight filled me with an urge to vomit, I looked at my equipment window and tested the levers to determine the Marshall II’s condition.</p>

      <p>More than 70% of the armor was lost, while the damage to the armor that remained was critical. The left arm wasn’t moving at all. The right arm’s movements were dull. The legs, however, were still mobile.</p>

      <p>As for weapons... the Hand Cannon had been lost along with the left hand. The Battle Knife had been completely destroyed. The Marshall II had been rendered useless for battle.</p>

      <p>“My choices are...”</p>

      <p><em>...to use the skill or retreat without using it,</em> I thought.</p>

      <p>I couldn’t use the skill because of the plan.</p>

      <p>I couldn’t let myself get the death penalty here because the plan was commencing tomorrow.</p>

      <p>Thus, I had to run away...</p>

      <p>But if I retreated, Ray was still here. There was the possibility that he could defeat Gouz. Therefore, even if I retreated...</p>

      <p>“Main course over — guess I’ll have dessert!” He cut my thoughts short again and took something out of the bag hanging at his waist.</p>

      <p>Once I realized what it was... my mind almost blanked out completely.</p>

      <p>The thing in Gouz’s hand was about the size of a ball. Small eyes — open wide and filled with terror, swaying hair — long and drenched in blood... It was unmistakably a human head. The head of a little girl.</p>

      <p>Gouz threw it into his mouth as nonchalantly as one would a piece of candy. The demonic fangs lining his oral cavity fell downwards, mashing the child’s skull with ease.</p>

      <p>“Man, it’s so good,” he said. “Kid meat’s tastiest when they know they’re about to die, y’know that? But my appetite ain’t quite sated yet.”</p>

      <p>Saying that, Gouz began making his way towards the carriage, and his intentions became immediately clear.</p>

      <p>“Gh...” The deed I’d just witnessed and the realization of what he was going to do made all the hesitation in my mind fade away like it had never been there. What took its place was pure, unadulterated wrath.</p>

      <p>“Hugo!” Cyco called out to me again.</p>

      <p>“Cyco,” I replied.</p>

      <p>“Will you use the skill?”</p>

      <p>“<em>You</em> already know the answer to that.”</p>

      <p>Though it was still severely damaged, I made my Marshall II stand upright.</p>

      <p>“Gouz!” I yelled.</p>

      <p>The ox-head turned around when he heard his own name called out.</p>

      <p>“Huhh? Ya still awake, ya Master piece of shit?” he asked.</p>

      <p><em>Awake?</em> I repeated the word in my head. <em>How appropriate.</em></p>

      <p>Indeed — I had been half-asleep until now. I hadn’t used the skill because of the plan. And because of the same plan, I’d chosen to avoid getting the death penalty and run away.</p>

      <p>How thoroughly absurd. That wasn’t <em>me</em> at all.</p>

      <p>The Hugo Lesseps I strived to be wasn’t this unsightly an individual.</p>

      <p>Thus, I made my wrath known.</p>

      <p>“I declare that I will no longer tolerate you!”</p>

      <p>My words made Gouz laugh. “Ha ha ha! Big words, comin’ from a Master who treats my entire world like a little game! You aren’t the first of your kind to come here, and let me tell ya — none of the ones before ya were actually serious about whatever they were doing. You shits can’t die in this world, so what’s it matter to you? You can’t ever know the fear of death my kind know!”</p>

      <p>“Indeed,” I said. “We Masters all enter this world with the intention to play. However, there are some that listen to the voices of those who call this world their home. Some that grieve when hearing the dying cries of the weak. And some who use that to set what they really are.”</p>

      <p>Thus, I had decided on my role in this world.</p>

      <p>I was the thorn of a rose. A spike meant to pierce any and all scoundrels trying to ravage beautiful flowers and precious lives.</p>

      <p>That was the true Hugo Lesseps. The role I’d willingly given to myself.</p>

      <p>“Be aware,” I said. “For the sin of ending lives too many to count, I will send you into the bowels of Hell.”</p>

      <p>Following the set role, I faced the scoundrel — Gouz — and declared, “My hell will destroy you.” He would pay for all his sins.</p>

      <p>“DO YOUR WORST, YA PIECE OF SHIT!” Gouz screamed in exasperation, and charged at me once again.</p>

      <p>Another attack from him could completely destroy the Marshall II and kill me alongside it. However, that had no chance of happening at this point.</p>

      <p>“Cyco!”</p>

      <p>Cyco stood up on the robot’s shoulder.</p>

      <p>“Crest Disguise... Disable,” she said. Through the camera-eye, I could see Gouz’s face fill with surprise. It was only natural, considering what he’d just seen.</p>

      <p>Cyco suddenly appeared on the Marshall II and made the crest on her left hand — the proof of a Master — disappear.</p>

      <p>Indeed — Cyco was not a Master.</p>

      <p>A Master of that name simply didn’t exist.</p>

      <p>Cyco’s true identity was...</p>

      <p>“Cocytus, it’s time.”</p>

      <p>“Yes, Master.”</p>

      <p>Cyco — Cocytus — disintegrated to become a gathering of white and blue particles that showered the Marshall II, merged with it, and drastically changed its appearance.</p>

      <p>The surroundings were momentarily overwhelmed by a whirling blizzard, followed by a brief whiteout.</p>

      <p>In the center of it all stood Cocytus and I — taking the shape of a completely reconstructed Marshall II.</p>

      <p>The robot was now equipped with new armor reminiscent of transparent, white ice. In its hands and on its head were cross-like blades that were made of blue ice.</p>

      <p>Due to its replenished magic, the Marshall II’s output was now greater than it had been when it was completely unharmed. Its appearance was reminiscent of an anthropomorphized church made of ice.</p>

      <p><em>This</em> was my Embryo.</p>

      <p>The true form of Cocytus — a Type Maiden with Chariot.</p>

      <p>“GRRROOAAAAGGHHHHHHH!”</p>

      <p>Despite what had just transpired, Gouz didn’t stop his charge.</p>

      <p>That was the correct reaction. Not knowing hesitation or fear, Gouz was a perfect example of a true warrior.</p>

      <p>He was strong, indeed.</p>

      <p>But it was already over for him. The moment I’d decided to use Cocytus’ power, Gouz had lost all chance of emerging victorious. It didn’t matter how tough of a man-eater he was.</p>

      <p>The stage was set.</p>

      <p>The gates of hell were opening to welcome another sinner.</p>

      <p>“Omnes relinquite spes, o vos intrantes.”</p>

      <p>After reciting the words etched onto the entrance to hell — “Abandon all hope, ye who enter here” — I activated the skill.</p>

      <p>“La Porte de l’Enfer.”</p>

      <p>Moments later, Gouz’s life reached a bitter end.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Paladin Ray Starling</em></p>

      <p>The world of <em>Infinite Dendrogram</em> had a job system.</p>

      <p>Just as I had my “Paladin” job, so did other Masters and tians have theirs. The only people who <em>didn’t</em> have jobs were Masters who had just started <em>Infinite Dendrogram</em> and tian children.</p>

      <p>Jobs were many and varied. Vanguard roles alone had job groupings such as Knight — which included my Paladin job — Swordsman, Warrior, Gladiator, Pugilist, Samurai, and so on.</p>

      <p>Then there were job groupings for rearguard roles, support roles, crafting roles, et cetera... When summed up, they were just too many to properly grasp.</p>

      <p>The catalog my brother had given me had the conditions for acquiring every low-rank and high-rank job. The entries there amounted to several thousands, and — naturally — I still had trouble remembering them all. The number of active Masters was several hundred thousand, and I had a feeling that — if jobs had been split evenly among them — there would’ve been fewer than one hundred people on each of them. Of course, the actual job distribution was nowhere near “even.” Rook’s Pimp job, for example, wasn’t too popular among Masters.</p>

      <p>There was no denying that the number of jobs available for people in other MMORPGS was incomparable to that of <em>Dendro</em>’s freedom. But despite this overwhelmingly great amount, there was one job that was etched into my mind. It was one I couldn’t quite forget about.</p>

      <p>It was a job named “Necromancer.”</p>

      <p>Its selling points were its many debuff skills, offensive dark magic skills...</p>

      <p>...and, of course, Necromancy — the skill that allowed one to turn corpses into tamed monsters at the cost of MP.</p>

      <p>It could be used on both people and creatures without any problems.</p>

      <p>Of course, the difficulty of turning a corpse into a tamed monster depended on how powerful the creature was when alive.</p>

      <p>On the other hand, that meant that children — being nearly powerless — could be turned into undead without much trouble.</p>

      <p>The catalog said that one of the conditions to get the high-rank job of the Necromancer grouping was related to the number of successful uses of the Necromancy skill. I’d read on the wiki that some tian criminals were Necromancers who used children and the sickly to increase that counter for that very purpose. Some theorized that getting the Superior Job of this grouping involved a similar condition.</p>

      <p>The implications of the idea made me sick, so I’d etched the existence of Necromancers into my memory. And now, it all came back to me.</p>

      <p>Trying to make sense of why the Gouz-Maise Gang was kidnapping children, I made my way towards the end of the underground hallway.</p>

      <p class="centerp section-marking">◇</p>

      <p>It was a straight path without any branches, so all I had to do was go forward.</p>

      <p>Although I didn’t encounter any bandits, I had to face some undead — adults this time — blocking my way.</p>

      <p>They’d probably been made from corpses that had gathered here when the fortress had still been occupied by the army. Then again, they could’ve just as well been the remains of the adventurers the bandits had defeated.</p>

      <p>I destroyed each and every undead in my way. Even if they had been people once, I couldn’t let them stop me. If I did, the dead would just keep piling up.</p>

      <p>Finally, I reached the end of the hallway, where I was greeted by a door. A heavy-set thing of wood, secured by a steel padlock, it separated me from the room behind it, where I felt the presence of living creatures.</p>

      <p>“Hhgh!”</p>

      <p>I swung my Nemesis down on the door itself, rather than the padlock. As pieces of wood scattered all over, I jumped inside and examined the surroundings.</p>

      <p>I was fully ready to cut down any gang members that were awaiting me, but the only living creatures here were caged children.</p>

      <p>There was a total of seven of them.</p>

      <p>From their closed eyes, I could tell that they were in deep sleep. I didn’t know which, but I had little doubt that one of them was Roddie — the one we had to save. Of course, I fully intended to save them all, quest-related or not.</p>

      <p>I found it a bit strange that the children seemed to be the only people here.</p>

      <p>“Not a single gang member?” I said in confusion.</p>

      <p>“This room had a padlock on it, after all,” said Nemesis. “It might be fair to assume they left the child-watching to the undead.”</p>

      <p>“I guess that makes sense.” I cautiously examined the children and the condition they were in. Reaching through the grates, I gently shook some of them, but they showed no signs of awakening.</p>

      <p>“I assume they’re either drugged or under the effect of some debuff spell,” commented Nemesis.</p>

      <p>“Probably,” I nodded. It was just my intuition, but I believed it to be magic. After all, the one who’d done it was probably the one who’d made undead out of those children in the hallway.</p>

      <p>To him, they were just cards to use to get ransom money. And if it didn’t come, he’d readily kill them and use his Necromancy to desecrate their corpses. I was beyond disgusted.</p>

      <p>“Master, look to the right,” Nemesis said.</p>

      <p>I looked, saw another door — an iron one this time. Upon approaching it, I lightly spun the doorknob. The way it felt made it obvious that it wasn’t locked and that I’d have no trouble opening it.</p>

      <p>“Will you go inside?” asked Nemesis.</p>

      <p>“Of course,” I replied.</p>

      <p>I spun the doorknob and quickly kicked the door open. I had already broken one door. If there was someone in here, then there was no reason for me to act all stealthy.</p>

      <p>“Is that a...?” I began.</p>

      <p>The first thing I saw after entering was a person. A young boy, to be precise. He was sleeping — just like the children in the cages. In the middle of the room, on the floor under him, there was a highly detailed magic circle.</p>

      <p>“There’s a lot to be said about the tastes of the owner of this room.” Nemesis’ voice was steeped in anger.</p>

      <p>The magic circle on the floor wasn’t the only thing she was referring to. In fact, the magic circle was tame when compared to the rest of the scene.</p>

      <p>Stains of blood covered both the walls and the ceiling. <em>Something’s</em> leather was heaped against the edge of the room. A nearby barrel was overflowing with white bones. The table next to the wall was covered in utensils and materials, but nothing really stood out until I saw a taxidermy construction of a right hand with twenty fingers, which compelled me to shift my gaze away.</p>

      <p>I silently suppressed my rage. There was no denying that we were standing in the laboratory of the Necromancer who’d created those undead.</p>

      <p>However, the Necromancer himself was nowhere in sight. It was safe to assume that he’d gone out to face Hugo.</p>

      <p>The child on the magic circle was probably going to be his next guinea pig. We’d saved him by coming here.</p>

      <p>“What now?” asked Nemesis. “Should we ensure the children’s safety or go help Hugo with the bandit elimination?”</p>

      <p>That was a hard decision to make. Saving the children was our primary goal, but carrying all seven of them somewhere safe would be too difficult for me alone. However, if I left them here and went out to fight, I’d increase the possibility of them being used as hostages.</p>

      <p>My other option was to stay here and protect the children while Hugo took care of the bandits, but it’d all go to hell if Hugo got killed.</p>

      <p>“Man, this is a tough one...” I sighed.</p>

      <p>“For now, I think you should take that youngling to the other room,” said Nemesis. “I don’t know what kind of magic circle that is, but I don’t believe it’s safe for a child to sleep on.”</p>

      <p>I nodded and moved towards the child in the circle.</p>

      <p>After a few steps, I stepped on something that seemed strange. It was a particularly thick piece of cloth. At first glance, it looked like a thin mattress made of felt, but I soon noticed that it had a pair of sleeves sewn on it, making it clear that it was a piece of clothing — a robe, to be precise. What seemed strange wasn’t the fact that clothing was lying on the ground, but the fact that I could feel something hard under it.</p>

      <p>I kicked the robe away to find out what it was.</p>

      <p>“These are...”</p>

      <p>...bones — that was the source of the hard sensation beneath my feet.</p>

      <p>Their presence didn’t surprise me in the least. The nearby barrel was full of them, after all. However, I found it strange that half of the bones were those of a human, while the other half belonged to something else. The non-human bones were thicker and reminded me of a horse skeleton I’d seen in a museum once.</p>

      <p>“How did human and horse bones end up lying in the same place?” I asked.</p>

      <p>“I would guess they belong to a horse-man,” said Nemesis. “As far as I am aware, this is just about how their skeletal remains look.”</p>

      <p>That reminded me that, back in Gideon, I had seen some members of a race that looked much like the centaurs from Greek myth.</p>

      <p>I glanced back down at my feet. The upper body and skull bones clearly belonged to a human, while the bones that matched to the lower body seemed about the right fit for an equine. Indeed, there was little doubt that they belonged to a horse-man.</p>

      <p>However, there were things to be said about their large size. I didn’t know that race’s average, but at the very least, it was clear that it didn’t belong to a child.</p>

      <p><em>How did the bones of a mature horse-man end up here?</em> I thought.</p>

      <p>“The Necromancer might’ve somehow gotten his hands on one of their corpses and used it in his experiments,” said Nemesis.</p>

      <p>“He would’ve cleaned it up if that was the case,” I argued. “After all, he’s already preparing his next guinea pig.”</p>

      <p>I looked at the child on the magic circle. It didn’t take a genius to see that the Necromancer was fully ready for the next experiment. He wouldn’t have left the bones from a previous experiment just lying on the floor like this.</p>

      <p><em>I mean, the madman is methodical enough to put all the other bones in that barrel there,</em> I thought.</p>

      <p>“Trying to understand the thought process of a madman is a fool’s errand, if you ask me,” said Nemesis.</p>

      <p>“...No point in considering it, huh?” I muttered.</p>

      <p>She had a point. My prime objective was to move that child away from here.</p>

      <p>After using Nemesis to shatter the magic circle multiple times and making sure that I wouldn’t activate some strange magic, I stepped inside and picked the boy up.</p>

      <p>Sleeping on the cold floor had made his body temperature drop. Still, he was breathing properly and had a stable pulse. Slightly relieved, I began carrying him on my back and made my way out of the room.</p>

      <p>Suddenly, I felt his breath behind me.</p>

      <p>That was normal — considering where he was — but for some reason, a chill arced down my spine like lightning...</p>

      <p>“Die.”</p>

      <p>I was unsure of where that word came from. But it was too late. I heard the sound of a blade slicing my neck.</p>

      <p>Somehow I’d missed it, but the child on my back had a dagger in his hands.</p>

      <p>As my carotid artery began oozing blood, I fell to the cold, stony floor.</p>

      <p class="centerp section-marking">◆◆◆</p>

      <p><em>One of the two leaders of the Gouz-Maise Gang, Lich Maise</em></p>

      <p>This world had a power most referred to as “Superior Jobs.”</p>

      <p>Out of the thousands of jobs available to humanoid creatures, those were the ultimate peak — available only to a select few.</p>

      <p>Superior Jobs allowed people to surpass the limits of their corporeal form.</p>

      <p>One of the people who had a Superior Job was the Arch Wiseman — the one they called the kingdom’s guardian deity. His magic power was nothing short of divine. He could part the ground beneath and even bring down the heavens themselves.</p>

      <p>However, in the war with Dryfe, the Arch Wiseman had been defeated by the King of Beasts — a Master and another owner of a Superior Job.</p>

      <p>Though that had been nothing but a tragedy for the Kingdom of Altar, a number of people were glad that he was gone. After all — the throne of a Superior Job was exclusive to the one possessing it. With the kingdom’s Arch Wiseman dying, the role of the Arch Wiseman became open for those wanting to take it.</p>

      <p>I, too, was aiming for a Superior Job. However, it was a job completely unlike the Wiseman’s.</p>

      <p>The Superior Job I set my sights upon was at the apex of the Necromancer grouping. It was a job known as the King of Corpses.</p>

      <p>Its power was far above the magic of common Necromancers... and beyond even the Necromancy of Liches — those who became undead themselves.</p>

      <p>Anyone seated in the throne of corpses would be immortal, undying, and commanding power surpassing that of all the deceased. It was the only method to receive the undeath that only Masters had.</p>

      <p><em>That</em> was the King of Corpses.</p>

      <p>I started leading the Gouz-Maise gang to further my efforts at getting this Superior Job. The kidnapped children were there to help me practice my Necromancy. The money was necessary for me to get certain magic items and to bribe Caldina.</p>

      <p>In that country, money was the start and the end of the conversation. <em>Everything</em> in Caldina had a price. A sufficiently-greased palm could even get their army to act in response to movements from Gideon’s soldiers.</p>

      <p>Since this place was near the border, that made the kingdom hesitant to attack us because it could provoke Caldina.</p>

      <p>Also, with all the Conceal and Presence Manipulation magic items I’d bought from them, the kidnapping of materials had become significantly easier. Blessed with abundant ingredients and the perfect environment, I was able to study the path of Necromancy to my heart’s content and slowly made my way towards the throne of the King of Corpses.</p>

      <p>Getting this Superior Job required the fulfillment of several difficult conditions and then passing a certain test. I had learned the conditions by deciphering an ancient text describing the secret processes.</p>

      <p>The first condition there was “Turn 5,000 years’ worth of life into death,” which I’d easily achieved by making this fortress my hideout and having the gang work for me. Since I focused on children — who were both easy to convert into undead and still had long, happy futures ahead of them — it all went extremely smoothly. I needed fewer than a hundred of them for this, but since the undead were a great asset, I continued on doing it.</p>

      <p>The second condition — which I’d achieved, as well — was the creation of a Crystal of Resentment. It was made by forcing enormous amounts of fear — or grudge, to be more precise — into a Crystal of Purity — an item that cleansed the corruption of the undead.</p>

      <p>Gouz helped me a lot with this. The fear of the children he ate while they were still alive manifested in exquisite, sorrowful grudges.</p>

      <p>Of course, the grudge I got from them when using the Anguish Circle to turn them into materials for the undead wasn’t too bad, either.</p>

      <p>The once-white crystal that had emitted an irritatingly divine light was now blackened to the very core.</p>

      <p>With that, I’d had already fulfilled the conditions to become the King of Corpses. All that was left was going to Legendaria — the place where the job’s throne was sealed — to clear the ordeal quest and make the title my own.</p>

      <p>Both the fortress and the gang had outlived their use. Gideon would soon become crowded with some particularly pesky individuals. Before that happened, I planned to take Gouz — my only useful subordinate — with me, then destroy all the knowledge I might’ve left here and leave once and for all.</p>

      <p>That was when a particularly reckless intruder sneaked into the fortress.</p>

      <p class="centerp section-marking">◆</p>

      <p>“Die.”</p>

      <p>A moment after I spoke that word, I heard the sound of a man dropping to the laboratory floor. I couldn’t see the look on his face, but the ground was drenched in his fresh blood.</p>

      <p>Standing next to him was a child I’d magically controlled to slice open the man’s throat.</p>

      <p><em>An undead would’ve easily been recognized by the description over its head,</em> I thought. <em>In such cases, it’s better to use them alive.</em></p>

      <p>“So a child got you to let your guard down, huh?” I muttered. “What a fool you are.”</p>

      <p>I began rebuilding my scattered body. Once my horse-man skeleton came together, I re-equipped my robe. Then, skin and leather began covering my bones before expanding to fit the flesh inside.</p>

      <p>A moment before, I had been nothing but bones, which was made possible by one of my Lich skills — Corpsification. To the man now lying on the ground, I’d probably looked like a standard set of skeletal remains.</p>

      <p>I was undead and had Lich — a high-rank necromancer job — as my own. Having such trickery at my disposal was only natural.</p>

      <p>“Oh? You’re still alive?” I said while looking down at the man. Although he’d lost so much blood that the stream from his neck had significantly weakened, he still seemed to have a pulse. In his right hand, he held a black halberd with a flag trailing from behind. I tried identifying it, but didn’t get any results. That could only mean one thing: the weapon was an Embryo and the man was a Master.</p>

      <p>“You’re still conscious, too?” I spoke again. “Well, it matters not. The dagger was coated in a Poison and Paralysis-causing fluid, specially concocted by yours truly. A Lich’s poison is nothing to sniff at, either. You’ll die without being able to do anything about it.”</p>

      <p>The Bleeding and Poison was draining his life, while Paralysis sealed all and any movement. Shame that he was a Master — I could’ve harvested a truly potent grudge from him if he hadn’t been one.</p>

      <p>Masters were a terrible source for grudges. When killed, they would simply come back to life three days later. Compared to tians, their fear of death and resentment towards their murderers was simply... mediocre. Not only that — their absolute immortality made them live as though everything was just a game.</p>

      <p>That was exactly how the party of Masters that’d attacked this place had been. My magic and Gouz’s strength had been more than enough to take care of them, but since I hadn’t even been able to turn their corpses into undead, they’d been absolutely useless to my Necromancy work. Masters irked me to no end. Their treatment of this world as a plaything, and the fact that they automatically had immortality... the one thing I had decided to make my life’s work.</p>

      <p>...Oh, that made me remember. The first party to come here had been comprised entirely of tians, and the grudges I’d collected by torturing them had been simply superb. Ah, the fun I’d had back then. Their corpses had become some excellent materials, too.</p>

      <p>Turning tians into undead was extremely easy. I was rather intrigued by the idea of making undead out of Masters, as well, but for now, I had to make due with merely getting rid of them whenever they intruded.</p>

      <p>By now, Gouz had probably taken care of this man’s ally on the surface. All I had to do now was leave the fortress, go where I must, complete the ordeal, and become the King of Corpses.</p>

      <p>“With that in mind, it’s time to move out and head towards Legendaria,” I muttered.</p>

      <p>As I made my way towards the laboratory door, I noticed the materials... the children I’d put to sleep in the other room. I’d nearly forgotten.</p>

      <p>“The gang act is over,” I said. “Better kill all the children and turn them into materials for my undea... hm?”</p>

      <p>The moment I said that, I saw the fingers of the man on the ground twitch a little bit. That small action — combined with the look on the side of his face — made me realize something.</p>

      <p>“Did you actually come all the way here just to save the children?” I asked. “It wasn’t for my treasure?”</p>

      <p>He didn’t say a word. Not like he could, considering his current condition, but his reaction was more than enough.</p>

      <p><b>“Hah... hah... HAHAHAHAHAHAHAHA!”</b> I placed my hands on my belly and laughed out loud.</p>

      <p>No other reaction was appropriate. How could I <em>not</em> laugh?</p>

      <p>“Hahahahahah! An inhuman immortal? Going out of his way to save a few brats? Ghahahahahahah! Oh my, quite a heroic way to play you’ve found, Mister Master.”</p>

      <p><em>Thought you’d roleplay as some champion of justice, huh?</em> I thought. The fact that <em>this</em> was where it had gotten him filled me with great bliss.</p>

      <p>“Heheheh,” I continued laughing. “All right, this is how it will go. I’ll create some lovely little undead creatures, and you will watch it happen until the poison kills you. Who knows? You might learn something. After all, I’m quite skilled at it, if I say so myself. But that is only natural, considering that I’ve already created hundreds of them!”</p>

      <p>In response to my words, the man on the ground exuded some horrific, traumatic emotions.</p>

      <p><em>Excellent,</em> I thought. <em>It appears that even a Master can be a good source when properly agitated. But even more than that, as one who will soon be the King of Corpses, I know now that I will thoroughly enjoy the freedom to look down on any and all immortal Masters.</em></p>

      <p>“Now, then...” I said. “The children with thick-looking bones will be turned into Skeletons, while all the others will do fine as Zombies. Oh, but it might be a good idea to turn these pretty-looking ones into taxidermy pieces and sell them off somewhere. Despite appearances, my hands are quite dexterous, so I’m actually pretty decent at managing the finer details. Some men of culture value my work quite highly.”</p>

      <p>In response, I got more angry silence.</p>

      <p><em>Ah, the joy,</em> I thought. <em>This is pure bliss.</em></p>

      <p>I’d never have expected to have this much fun with a Master. His sorrow was like the perfect seasoning.</p>

      <p>However, it was time to end it.</p>

      <p>“Now, let’s start with the brat that cut your neck!” I exclaimed. “First, I’ll have him cut his own neck and—”</p>

      <p>Suddenly, a gust of wind...</p>

      <p>...followed by the sound of something hitting the ground.</p>

      <p>“...What?” Confused, I looked to where the sound came from and saw something very familiar.</p>

      <p>It was a left hand, covered in magic rings. Magic rings that had cost me a fortune.</p>

      <p><em>Isn’t that... my own left hand?</em> I thought, stunned.</p>

      <p>“If you... are...”</p>

      <p>The man whose defeat was all but certain slowly spoke up. His right arm was raised in the air.</p>

      <p>“If you... are not among the living...”</p>

      <p>The blade of the halberd he held was emitting a noble, white gleam. I recognized it. It was imbued with the bane of the undead — Purifying Silverlight.</p>

      <p>“If you... lost sight of what it means to be a person...”</p>

      <p>He slowly stood up and faced towards me. The neck wound that was surely there less than a minute ago had disappeared without a trace.</p>

      <p>“If you... are the one responsible for <em>that</em> scene...”</p>

      <p>His expression had neither the weariness of Poison, nor the heaviness of Paralysis.</p>

      <p>“If you... claim that you will keep on doing it...”</p>

      <p>The only real emotion on his face was in the light in his eyes — a blaze of pure rage.</p>

      <p>“...then I <em>will</em> kill you.”</p>

      <p>It was the first time I had seen a Master — one of those immortal, inhuman beasts of undeath — make such an expression.</p>

      <p>I couldn’t articulate it completely, but what I felt was dread. Utter and unmatched dread.</p>

      <p>My instincts were screaming, telling me only one thing:</p>

      <p><em>Run! He is going to extinguish you.</em></p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert4">
    <img alt="insert4" class="insert" src="../Images/Insert4.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter41">
    <div class="main">
      <p>“■■■■ — Abyssal Delusion!”</p>

      <p><em>Dead Man’s Bind!</em></p>

      <p>I quickly used the most vile hexes I had at my disposal. They were two high-rank debuff spells — one was vocal and came accompanied by a chant, while the other came from the magic item on my right hand and didn’t need any words.</p>

      <p>Abyssal Delusion was a powerful hex that gave the affected the Death Sentence, Weakness, and Deterioration status effects, making them rot and become corpses while still alive. Dead Man’s Bind was another spell with three debuffs — Binding, Curse, and Lethargy. Together, they gave a total of six particularly powerful status effects.</p>

      <p>This combination had sent many of my enemies to their deaths. Anyone unlucky enough to receive it was rendered completely immobile.</p>

      <p>“Ghaah!”</p>

      <p>Yet <em>he</em> didn’t stop. As though he’d reversed the effects of my hexes, he became more intimidating and horizontally swung his halberd — shining with Purifying Silverlight — towards me.</p>

      <p>“Guh?!” I exclaimed. If I had been but a step closer, his attack would’ve split my torso.</p>

      <p>I couldn’t let that happen. Taking fatal damage from <em>him</em> was something I had to avoid at all costs.</p>

      <p>I was a Lich — an undead master of magic. Most of my wounds would mend a moment after they’d happened. I could lose an arm or get my body split in half — no such damage was critical to me.</p>

      <p>However, in this case, the mending didn’t work at all. In fact, the arm he’d cut off had already turned to dust.</p>

      <p>That was only natural. After all — he was wielding Purifying Silverlight. It was a gleam used only by a limited number of Paladins and Temple Knights — a light meant for the sole purpose of purging the undead. No matter how great of a Lich I was, I couldn’t come back from a fatal attack by a weapon blessed with that loathsome shine.</p>

      <p>The fear of death overwhelmed me. It was a feeling that had become alien to me over time. It was a feeling that would never again strike me once I became the King of Corpses. But here and now, it was raw. It shook my very being.</p>

      <p>“Awaken Undead!” Using my Necromancy, I activated the undead monsters I’d stored in the barrel in this room.</p>

      <p>Countless Skeleton Soldiers answered my call.</p>

      <p>However, they meant little.</p>

      <p>There was no chance of them winning against this <em>aberration</em>, but it mattered not. They only had to buy the time I needed to run away.</p>

      <p>As the undead began charging at him, I turned around and left the laboratory. If I stayed any longer, I knew it would become my grave.</p>

      <p>Then — as my breath became ragged — I ran towards the surface through the underground hallway. Once we Liches became undead, our hearts and lungs ceased their function and were replaced by a gathering of crystallized magic. Thus, physical lack of breath was something I should never have experienced again. And yet, I felt as though I was suffocating.</p>

      <p>“Why is a Master...?!” Through my ragged breath, I voiced my dread. “Why is one of those immortal abominations... <em>actually furious</em>?”</p>

      <p>This fear was unknown to me. The fear of <em>that thing’s</em> emotion. The terror I felt towards that aberration.</p>

      <p>Terror — that was the word. Having one of those abominations direct such pure killing intent and rage towards me was nothing short of terrifying. After all, that meant that an immortal, indestructible animal would be hunting me for all eternity.</p>

      <p>I had to escape. Anywhere near that aberration was certain death, so I had to leave this fortress and run where he could never find me.</p>

      <p>I had to do it — and I <em>could</em> do it.</p>

      <p>Though I was a Lich, my Agility was greater than his, so it would be perfectly possible for me to distance myself from him.</p>

      <p>Reaching the surface would mean regrouping with Gouz. Then, I’d simply have to make him fight the abomination while I made my escape.</p>

      <p>“I can do it...!” Picturing that future made me relieved.</p>

      <p>Due to me being a horse-man, the underground hallway’s soundscape was dominated by the sound of my horse legs hitting the floor.</p>

      <p>However, the sound soon mingled with another.</p>

      <p>“...What?” I burst out.</p>

      <p>Its source was approaching me from behind. Systematic, yet rough impacts on the ground — the sound was exactly the same as the ones coming from under my feet. It was the sound of a galloping horse.</p>

      <p>“Gh...!”</p>

      <p>Unable to bear the tension caused by the approaching sound, I turned around.</p>

      <p>What I saw was far beyond my imagination. It was an artificial, silver horse, speeding through the underground hallway. And to the side of it was the abomination.</p>

      <p>For some reason, he wasn’t riding it. The aberration was holding the silver horse’s reins with his right hand, scraping his leg armor across the ground. It was reminiscent of a Granvaloan water sport.</p>

      <p>In his left hand, he was still holding the halberd as the flag flowing out of it fluttered wildly in the air.</p>

      <p><em>Why isn’t he using his Riding skill?</em> I thought.</p>

      <p><em>That way of riding it should soon break his legs and render them useless, right? But why doesn’t it look like he’s taking any damage?</em></p>

      <p>The strange sight left me with several questions, but their answers didn’t matter.</p>

      <p>What mattered was the fact that he was still chasing me... and that the horse was faster than me, meaning that he would soon catch up.</p>

      <p>“AAAAUUUGHHHHHHH!”</p>

      <p>Disregarding my shame and reputation, I screamed in fear while running towards the surface as fast as I could.</p>

      <p>On the surface, I would meet up with Gouz. He could buy me all the time I needed to run away.</p>

      <p>“Awaken... AWAKEN UNDEAAAAD!” Not slowing down whatsoever, I activated the undead monsters I had buried in the walls for emergencies such as these.</p>

      <p>They were called “High-End Skeleton Warriors.” I had made these high-rank undead by using the corpses of skilled tians. They were the remains of the party Gouz and I had taken care of.</p>

      <p>Six High-End Skeleton Warriors stood between me and him. Though turned undead, they had all been owners of high-rank jobs once, so there was a chance that...</p>

      <p>“Out of our way!” two voices — his and another, feminine one — said that at the same time. A moment later, the mass of silver went through the Skeletons and returned them all to dust.</p>

      <p>The halberd in his left hand and the hooves of the man-made horse ended my undead in a blink of an eye. I then noticed that not just the halberd, but the entire body of the steed was shining with the Silverlight.</p>

      <p>“Aaagh?!”</p>

      <p>That was no living horse — it was a piece of equipment. Emitting the Silverlight and galloping at a great speed, it pulverized all and any undead that touched it.</p>

      <p>It didn’t matter if the undead were high-rank. The thing was the bane of <em>all</em> undead. It was a silver bullet that brought forth the ultimate end.</p>

      <p>“GGGHAAAHHHHH!”</p>

      <p>Completely desperate, I used the moment my undead monsters had bought me to climb up the stairs leading to the surface. With the Master being dragged by the horse, he couldn’t get up the stairs properly. It ought to affect his speed.</p>

      <p>A moment before he could catch up, I ran up the stairs and escaped to the surface.</p>

      <p>“GOUZ! GOOUUUZ!” I screamed while dashing through the fortress.</p>

      <p>Once I ran through the hallway on the first floor and could see the gates of the fortress, I was overcome with relief. That was because I saw Gouz’s face.</p>

      <p>A moment later, that relief changed into despair.</p>

      <p>That was because Gouz’s face... was the only thing there.</p>

      <p>I couldn’t grasp what had happened, but Gouz’s dismembered head — completely frozen — was impaled on the gate.</p>

      <p><em>Wh-Where did his brawny body go?</em> I asked myself. It was nowhere in sight. All I could see were pieces of frozen meat, scattered all over the area outside the gate. Two of those pieces — placed close to each other — looked much like Gouz’s feet.</p>

      <p>Right next to them stood an anomaly looking much like an anthropomorphized church made of ice — an enemy of my kind if I ever saw one.</p>

      <p>“Choose your fate, sinner,” spoke the anomaly. “Which end do you desire? Hell, or Divine Retribution?”</p>

      <p>I instantly understood what it was talking about.</p>

      <p>It was telling me to choose to meet my end, either at the hands of the icy anomaly or the silver aberration.</p>

      <p>“No!” I shouted. “This is not happening!”</p>

      <p><em>I can’t die here! I’ve come so far! And now, when the throne of the King of Corpses is within arms reach, I...</em></p>

      <p>“Why...?!” I voiced my despair yet again. “What...?!”</p>

      <p><em>What did I do to deserve this?!</em></p>

      <p>“Very well,” the anomaly spoke again. “Divine punishment it is.”</p>

      <p>It then pointed an icy blade towards something behind me.</p>

      <p>I turned around and saw the silver aberration.</p>

      <p>The abomination had caught up with me.</p>

      <p>A sound thick with dread escaped my mouth. I could no longer run or hide.</p>

      <p><em>Th-There must be something I can do!</em> I thought. <em>Don’t I have a teleportation magic item on me? No?! I should have something! I just...!</em></p>

      <p>“Huh...?” As I dug through the inventory in my robe, my fingers touched something that made me gasp. I slowly took it out. It was a pitch black, crystalline object that emitted no light whatsoever — a Crystal of Resentment.</p>

      <p>“No...” I said in despair. I held the obsidian-like object in my hand. It was an item without which I had no hope of becoming the King of Corpses. Creating it had required me to lead the Gouz-Maise Gang and spend nearly a year sacrificing a great number of children.</p>

      <p>However, aside from being the condition for becoming the King of Corpses, the crystal was also the ultimate medium for the Necromancer grouping’s magic. Using it here was painful, but...</p>

      <p>“If I die... it will have all been for naught!” I screamed.</p>

      <p>I had to pick between dying and using the Crystal to survive, so I gladly picked the latter. If I didn’t, the time and effort I’d dedicated to my cause would’ve all gone to waste. I simply had to survive and do it all over again in some other town. After all — the time, the work I was willing to dedicate and the sacrifices were endless.</p>

      <p><em>As long as I’m alive, I can restart as many times as I have to!</em> I thought. <em>Indeed — I cannot let myself die here! Dying to this accidental encounter is unacceptable!</em></p>

      <p>“YOU DISGUSTING, MONSTROUS CURS!” I roared while filling the Crystal of Resentment — my greatest treasure — with great amounts of magic. <b>“YOU MONSTERS WILL NOT TAKE MY LIFE FROM ME!”</b></p>

      <p>After reforming the wicked feelings within the crystal to pure destructive energy, I released it all towards the abomination, fully aware that it would destroy the fortress, as well. After all, it was the strongest offensive magic skill any Lich could have.</p>

      <p><b>“DEADLY MIXEEERRRR!”</b></p>

      <p>With great dread and frenzy overwhelming me, I unleashed the most powerful attack I’d ever cast. It was great enough to instantly eradicate a Pure-Dragon. There was simply no way for him to survive it.</p>

      <p>“Counter Absorption.”</p>

      <p>And yet...</p>

      <p>“Ah...? Ugh...? Eahhh...?” Confusion escaped my mouth in the form of strange sounds. The magic I’d dedicated my entire being to was blocked by a barrier of light he created before it. “Th-This cannot be!”</p>

      <p>The shock made me lose my footing and fall to the ground. A moment later, the abomination was right in front of me.</p>

      <p>“Ghah?! N-No!”</p>

      <p>The moment I attempted to stand up and run away in fear, his halberd — still emitting a silver gleam — penetrated my torso and pinned me to the spot.</p>

      <p>“GYYAAAHH!”</p>

      <p>I was unable to move — both due to the halberd piercing me and the pain caused by Silverlight — and the aberration stood before me.</p>

      <p>“Stop... running,” it hissed through its ragged breath.</p>

      <p>“W-Wait!” I said. “I won’t run! You caught me!”</p>

      <p>Escape was impossible at this point, but I still had to survive, even if it meant begging for my life.</p>

      <p>“L-Let’s make a deal!” I spoke in a panic. “M-Money! I’ll give you money! I still have lots of it! 70,000,000 lir, to be precise! It’s yours! Take it all, but please, let me go!”</p>

      <p>The aberration said nothing.</p>

      <p><em>Yes!</em> I thought. <em>He reacted to my offer! I don’t care if I have to give him all my coins! I have already sacrificed my Crystal of Resentment! Money is a small price to pay for survival!</em></p>

      <p>“Hhaaahh...” He sighed and extended his right palm towards me.</p>

      <p><em>Excellent! It worked!</em></p>

      <p>“Khah! Hahahah!” I laughed. “G-Give me a moment. I’ll just take it all out of the inventory, so—”</p>

      <p>“Your life is payment enough,” he said, cutting my words short.</p>

      <p>“Eh?”</p>

      <p>As confusion overtook me, his open hand changed into a fist, and the bracer on it began to emit that painfully-familiar silver light.</p>

      <p>I heard my own skull crack and squelch. And then I was gone.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Paladin Ray Starling</em></p>

      <p>The headless corpse of the Lich became dust and began to crumble.</p>

      <p>At the same time, my body quickly became too heavy for me to stand properly and I dropped to the ground before I could do anything to soften my fall.</p>

      <p>“Looks like... it’s over,” I forced out a mutter. My status window displayed Poison, Paralysis, Death Sentence, Weakness, Deterioration, and a number of other debuffs. There were so many that keeping track of them all seemed like a fool’s errand.</p>

      <p>However, the fact that the status effects I’d gotten from my opponent had come back left me with no doubt that he was defeated.</p>

      <p>“Like a Flag Flying the Reversal.” That was the unique skill that Nemesis had gained with her second form — The Flag Halberd. It reversed all the debuffs given to me by hostile creatures. On the flip side, that meant that it would stop the moment the relevant hostiles were dead. The return of his debuffs was the ultimate proof of his death.</p>

      <p>The moment after he’d manipulated the child into slicing my neck, I’d made Nemesis go from her greatsword form into The Flag Halberd and activated the Reversal. Thus my reaction to the debuffs displayed in my status window. Once the skill was active, Bleeding began to increase my bloodflow, Poison healed me, and Paralysis upped my physical abilities.</p>

      <p>The damage I’d gotten from the surprise attack had been healed by the reversed Poison while I was still on the ground. Once that effect had closed the wound on my neck, the Bleeding status effect had completely disappeared.</p>

      <p>Later, when he’d hit me with those debuff spells, I’d turned them all into buffs, as well. Though I’d felt that some of them didn’t seem like they got reversed, it was clear that I was under no negative effects.</p>

      <p>He’d ended up greatly buffing me and reversing the power balance.</p>

      <p>He’d also had the problem of compatibility. The Purifying Silverlight was a skill meant for purging undead, and that was exactly what a Lich was. Also, Silver had been a great help in catching up to him when he’d run away.</p>

      <p>Of course, I still didn’t have the Riding skill. So I hadn’t been <em>riding</em> him, per se. I’d merely let Silver gallop towards the Lich while I held on to him, letting my feet get dragged along the floor.</p>

      <p>It hadn’t been too different from one of those generic Western flick scenes where people got pulled around while tied to horses. In that state, my feet had gotten continuously damaged, but I’d been able to cover it with the healing from the reversed Poison.</p>

      <p>Once on the surface, I’d blocked his final spell with Counter Absorption. Though it was far more powerful than Gardranda’s flames, we had somehow been able to handle it.</p>

      <p>For a moment, I’d thought the debuffs would make me collapse, but after the attack had been done, Nemesis had quickly changed back to The Flag Halberd and re-activated the Reversal, letting me come out of it unscathed. Then I’d pinned him with down with my weapon and ended his life with my fist.</p>

      <p>This whole battle had been extremely dangerous to me. I had only managed due to the convergence of several very specific circumstances. This wasn’t a feat I’d be repeating any time soon.</p>

      <p>“...I got really lucky here,” I said.</p>

      <p>“I know all the reasons why we emerged victorious, but even I can’t help but think the same,” Nemesis agreed.</p>

      <p><em>Perhaps fate itself helped me hunt down and punish the scumbag who toyed with the lives of countless children,</em> I thought.</p>

      <p>I silently looked at my hand. The sensation I’d felt when I’d pulverized his head was still there. Either due to him being undead or because of my Silverlight, it had felt much like shattering a withered tree, but it’d been there nonetheless.</p>

      <p>Though he was a piece of filth beyond any redemption, he was also the first tian I’d killed.</p>

      <p>If I — being a Maiden’s Master — felt as strongly about this world as I did about reality, this killing might cause me pain.</p>

      <p>“I have nothing against such considerations, but you should leave it for later,” said Nemesis.</p>

      <p>“Nemesis?” I asked, slightly puzzled. She had already returned to her human form and was looking down at me.</p>

      <p>She pointed at one part of the status window — specifically, the Death Sentence debuff. Upon further inspection, I noticed that it had a counter next to it, saying “362 seconds.”</p>

      <p><em>Is this one of those debuffs that kills you when the counter reaches 0?</em> I thought.</p>

      <p>“So, Master, do you happen to have any anti-debuff medicine?” she asked.</p>

      <p>“I’ve got some Antidotes for poisons, but I never expected to get a debuff like <em>this</em>,” I said.</p>

      <p><em>This is bad... Really bad. At this rate, I’ll get the death penalty.</em></p>

      <p>Hugo was here, the children were safe, and the gang was eliminated, so I didn’t have to worry about any of that. However, dying would mean missing the time we’d agreed on with Marie. I didn’t like that scenario at all.</p>

      <p>“Curse you, you wretched horse zombie!” shouted Nemesis. “You just <em>had</em> to leave us with this parting gift!”</p>

      <p>“...Crap,” I muttered. Due to all the debuffs on me, only my mouth worked properly, so I couldn’t even hold my head in despair.</p>

      <p>Nemesis began rummaging through my inventory to see if I had something that could help me. Silver — who I still hadn’t called back — was looking down at me in a somewhat worried manner.</p>

      <p>“You should drink this.” Something hard was pushed against my jaw.</p>

      <p>I looked and saw Hugo — who’d just jumped out of... what I could only describe as a see-through ice robot with a Magingear inside — pushing a potion against my mouth.</p>

      <p>Once I gulped down the contents, my body became so light that it felt as though the debuffs were never there.</p>

      <p>He followed it up with another potion. Once I drank that one, I looked at the status window and saw that all the status effects were gone.</p>

      <p>“I’m healed!” I cried.</p>

      <p>“Indeed you are!” said Nemesis. “You have our thanks, Hugo!”</p>

      <p>“You’re welcome,” he smiled.</p>

      <p>“What was this medicine, anyway?” I asked.</p>

      <p>“An Elixir and a curse-removing High Spirit Water,” he said.</p>

      <p>“And you didn’t mind giving them to me?” I asked.</p>

      <p>“Not at all. After all, they came out of the inventory of the one I defeated.” Hugo pointed at the ox head hanging on the gate.</p>

      <p>I looked at that general direction and saw a number of items lying around the remains.</p>

      <p>Some of them were bottles, just like the one I’d just drunk from.</p>

      <p>“Why are the items scattered like that?” I asked.</p>

      <p>“His inventory broke with my attack,” answered Hugo. “I, uh... might’ve overdone it.”</p>

      <p>That made me remember the tutorial, when Cheshire had said that <em>this</em> was just about what happened when an inventory shattered. Though the power of the release often left the contents break, it was the easiest way to take the possessions of others. Due to that, some bad guys chose to attack rich people and spread their items all over the place.</p>

      <p>The other ways to take someone’s items were the Bandit grouping’s Steal skill — which directly stole the items from people’s inventories — and the Burglar grouping’s Plunder skill — which switched the ownership of the taken items to the user. When I’d learned that, I had wondered why these two skills were in different job groupings despite not being <em>that</em> different.</p>

      <p>“Hm? Is that a...?”</p>

      <p>I noticed the inventory of the Lich I’d defeated peeking out from under his robe. While mine had the shape of a bag, his was a black, cube-like box.</p>

      <p>In his last moments, he had been reaching into it to take his money and buy me off. So, by breaking that, I could probably get the money and some of the rare items he owned, but...</p>

      <p>“I don’t feel like touching the stuff left behind by that freak,” I said.</p>

      <p>His life was more than enough for me. Also, it was easy for me to imagine how he’d come to have those riches, and that didn’t make them look attractive at all.</p>

      <p>“I share the sentiment,” said Nemesis. “That money is so dirty that simply picking it up might sully our hearts.”</p>

      <p>“I understand,” said Hugo. “Feel free to leave it there, then. Someone will come across and take it eventually.”</p>

      <p>“True,” I nodded.</p>

      <p>Though, with the defeat of the Gouz-Maise Gang, this fortress was now as abandoned as it had been before they’d made it their hideout. It was uncertain if anyone would ever set foot here again.</p>

      <p>Then again, reporting this event to the Adventurers’ Guild would probably cause them to launch an investigation. It might be a good idea to tell them to gather any treasure the scumbags had left behind. Perhaps the money would become cleaner if it was used for the good of society... and those who’d suffered due to the gang’s vile deeds.</p>

      <p>“Oh yeah, Hugo,” I said. That thought reminded me of something. “I encountered some kidnapped children in the dungeon. Eight of them are still alive. From what I can tell, they’ve been put to sleep via magic. I’d like us to band up and carry them outside, so... Wait, where’s Cyco?”</p>

      <p>We were done with everything here, and yet she was nowhere in sight.</p>

      <p><em>I recall her leaving her party slot before the battle began, but she wasn’t showing up at all anymore, so... did she get the death penalty?</em></p>

      <p>“Cyco’s fine,” said Hugo. “Give me a moment. Cyco, come here... Yeah, it’s fine.”</p>

      <p>He said that while facing the Magingear clad in armor that looked much like an icy church. A moment later, the armor scattered into countless white and blue light particles.</p>

      <p>Without the frozen armor, the Magingear collapsed, making Hugo say something about getting a spare one from some “leader.” However, Nemesis and I were more interested in where the light particles were heading. They all gathered in one spot and took a humanoid form.</p>

      <p>“Hellooo.”</p>

      <p>It was the Master clad in white — Cyco. However, she no longer had the proof of Masterhood — the crest on her left hand.</p>

      <p>Also, the way she’d changed shape was like a differently-colored version of Nemesis’ shapeshifting.</p>

      <p>“I see,” said Nemesis. “So Cyco and I... are birds of a feather.”</p>

      <p>“Yes,” she nodded. “My real name is Cocytus.”</p>

      <p>“Birds of a feather...?” I raised an eyebrow. “So she’s actually a...”</p>

      <p>...Type Maiden Embryo — the same as Nemesis. And Hugo was her Master.</p>

      <p>“But didn’t she have a crest on her left hand before?” I asked.</p>

      <p>“It was there because of Crest Disguise — a skill unique to Type Maiden Embryos,” answered Hugo. “It makes their hands and status displays look like those of a Master.”</p>

      <p>“I had no idea such a skill existed...” I said, slightly surprised.</p>

      <p>“They get it after a while of fighting in their human forms,” he said.</p>

      <p>During my entire play time, I had yet to let Nemesis fight on her own. Obviously, I didn’t have it.</p>

      <p>“What use is that skill, anyway?” I asked.</p>

      <p>“You’d be surprised,” said Hugo. “Due to them being unique and unpredictable, Embryos are powerful wild cards. With Crest Disguise, you can make it seem like there are more Masters — and thus, Embryos — than it appears.”</p>

      <p><em>So you can use it for bluffing, huh?</em> I thought. <em>I feel like it might have other uses, too, so perhaps we should learn that skill ourselves.</em></p>

      <p>“Anyway, now that we’re all here, we should go to the dungeon and take the children back to the light of day,” I said.</p>

      <p>“Agreed,” nodded Hugo.</p>

      <p>Nemesis, Hugo, Cyco, and I all began making our way towards the fortress’ dungeon.</p>

      <p>With there being four of us and with me having Silver, there was a chance that we could take them all in one trip. Also, with the Lich being dead, the children might’ve woken up from his spell, so we had to hurry up and calm them down.</p>

      <p class="centerp section-marking">◆◆◆</p>

      <p><em>The surroundings of the abandoned fortress.</em></p>

      <p>“...Are they gone?” a voice asked.</p>

      <p>“Yeah, they went in the fortress.”</p>

      <p>In the forest surrounding the abandoned fortress, in an area that had even denser foliage than the route taken by Hugo’s Marshall II, there were five suspicious-looking men.</p>

      <p>“I didn’t expect the bosses to get beaten,” said one of them.</p>

      <p>These were the remnants of the Gouz-Maise Gang, and the very same five men that Ray and Hugo had encountered back in Gideon.</p>

      <p>After Ray and Cyco had beaten them up and handed them over to the guards, some of their allies had jumped out and rescued them before they could be jailed.</p>

      <p>After that, they’d followed the gang’s carriages from a considerable distance — just to make sure that they weren’t followed — and when they’d reached the fortress, they’d found their hideout and fellow gang members being completely destroyed.</p>

      <p>They’d been lucky that they were in a place where Cyco’s Enemy Detect skill couldn’t reach them. Thus, they’d been able to hide it out and survive the massacre.</p>

      <p>“What now?” asked one of them.</p>

      <p>“What do you mean, ‘what’ — we’re getting outta here!” answered another. “We can’t do shit against monsters that can kill our bosses, who were pretty damn monster-like themselves.”</p>

      <p>“Crap, that means that we have to leave all the treasure behind.” One of the men — specifically, the one that’d gotten punched by Ray — clicked his tongue in frustration. “...Oh, wait.” He seemed to have just gotten an idea. “Yeah, <em>that’s</em> what we should do!”</p>

      <p>He nodded, completely satisfied with himself.</p>

      <p>“The hell’s got into you?” The other men looked at him, completely confused.</p>

      <p>“They’re in the fortress now, right?” he spoke up. “So it’s a good time for us to take all the money and items the bosses left behind! Also, we can easily take the brats in them carriages there. We can use them to get the ransom money or just sell them somewhere in Caldina. Or maybe we can buy our way into some other local gangs!”</p>

      <p>“Oh, man!” another man cried.</p>

      <p>“That’s an idea I can get behind!”</p>

      <p>Their fellow gang member’s suggestion made the other men turn joyous.</p>

      <p>“There’s no better time than now, then...” said one.</p>

      <p>“Yeah!” howled another. “Let’s get the items and the brats and get the hell out!”</p>

      <p>They then split up. Some began gathering the items, while the others linked the living horses to the carriages with the children.</p>

      <p>However, one of them — the one that’d suggested that they do what they were doing — was tilting his head near Maise’s corpse, which was nothing but dust now.</p>

      <p>“What’s up with you?” asked another man.</p>

      <p>“Boss Maise’s inventory isn’t broken,” he answered. It was the very same inventory that Ray and Hugo had decided not to break.</p>

      <p>“Huuhh? Break it, then, retard,” the other man said. “All of us who had Plunder have already croaked, so that’s the only thing we can do here.”</p>

      <p>As was natural for a band of brigands, the gang had people with Steal and Plunder skills. However, all of them had died to Hugo’s Marshall II.</p>

      <p>“True that,” the man nodded. “Guess I’ll do just that, then.”</p>

      <p>The man took out a dagger and — with great force — pierced through the inventory. Naturally, it broke and released its contents all over the area.</p>

      <p>“Whooaaaahhhh! Get a load of all these coins!”</p>

      <p>“Seriously! I don’t think we even have to be bandits anymore! We can live like nobles with this!”</p>

      <p>“We have the brats, too, so maybe we should start being Slave Dealers!”</p>

      <p>“Good idea!”</p>

      <p>The money Maise had left behind made them all imagine a bright future. They were surrounded by great riches. Just as Maise had said to Ray, the amount he’d had on him was over 70,000,000 lir. Of course, there were many rare gems, equipment pieces, and materials, as well.</p>

      <p>With all of this, they could easily make all their dreams come true. Their futures would become even more secure after the next step. Every man was thinking it at this point. Every man wanted to kill the others and make all of the riches their exclusive property.</p>

      <p>However... that was completely impossible.</p>

      <p>“Huh?” one spoke in confusion. “What’s this?”</p>

      <p>He picked up an item that was lying on the ground. From its outline alone, it looked much like a hen’s egg. However, it was dark red in color and had a single area on it that looked much like an eyelid.</p>

      <p>At first glance, it didn’t look too different from the materials owned by Maise the Lich, but the man holding it wouldn’t have said the same.</p>

      <p>He had a high level Identification skill and could identify just about every item he came across, but he didn’t get any results for the egg-like object. It confused him, for he’d never had any problems identifying materials or monster eggs. However, it was obvious that he couldn’t see what the thing in his hand was. After all, it wasn’t an item, a monster, or any other living creature, for that matter.</p>

      <p>It was nothing but a <em>curse</em>.</p>

      <p>“Awakening.”</p>

      <p>A voice rang out from every inch of the shell as the egg opened its “eyelid.”</p>

      <p>“Eee!”</p>

      <p>It surprised the man into attempting to throw it away, but the egg seemed to be stuck to his fingers like a strong vacuum.</p>

      <p>“What?”</p>

      <p>“What’s wrong?”</p>

      <p>The other men called out to the one who’d screamed — their faces still grinning due to the great amount of coin in their hands.</p>

      <p>If they’d had the mind to realize that something was wrong and run away, the man with the egg in his hand would’ve been the only one to die.</p>

      <p>However, that was hopeless. Anyone with that amount of sensitivity to danger would’ve never touched the belongings of Maise in the first place.</p>

      <p>Maise had been among the greatest users of Necromancy in the Kingdom of Altar. Not only was he extremely thorough in his work towards becoming the King of Corpses — he was also a man who made use of people in a way most couldn’t fathom.</p>

      <p>He was the type of person to discard his most precious Crystal of Resentment — a necessity in becoming the King of Corpses — just to survive. He also hadn’t hesitated to try prolonging his life by trying to buy off Ray with all the riches he’d amassed.</p>

      <p>If a man with such an attachment to life were to be killed and had his treasure taken away...</p>

      <p><em>Just what would he do?</em></p>

      <p><em>Just how far would he go?</em></p>

      <p>The men were defeated the moment they didn’t consider those questions.</p>

      <p>“Destruction of inventory: confirmed,” said the egg. “Search: Lich Maise’s Magical Wavelength... No response. Termination of Lich Maise: Confirmed. Assumption: plundering by hostiles. Invoking final spell — Undead Grudge Construction.”</p>

      <p>Once the voice had finished speaking, the fingers of the man touching the egg were sucked into it. Much like sewage going down a drain, his body began falling <em>into</em> the egg, his body cracking and spurting out blood as his form was compressed.</p>

      <p>“AUGH!! UuGgh!! EeuGH!!”</p>

      <p>Leaving only his completely inhuman screams, the thing that was once a man disappeared into the object.</p>

      <p>The egg gained in size, becoming about as large as the egg of an ostrich.</p>

      <p>“EEEEEK!”</p>

      <p>“WH-WHAT THE HELL?!”</p>

      <p>The spectacle made the other men panic, and they turned around and attempted to run away.</p>

      <p>A moment later, the egg released pipes reminiscent of blood vessels and forced them into the backs of three out of four men that tried to escape. And — as if drinking juice through a straw — the egg began sucking the men into itself.</p>

      <p>“GHHHY! JAUHGHH! EIHH!”</p>

      <p>“EGGH... UGHAAAHH!!”</p>

      <p>“ASSHHDIEDEAAAGAUGHH!!!”</p>

      <p>Experiencing pain beyond their imagination, the men disappeared while speaking words that didn’t belong in the realm of the sane.</p>

      <p>“AAAAAHHHHH!”</p>

      <p>The only survivor — the one who’d suggested they take the riches to begin with — dropped to the ground in fear and tried backing away while wetting himself. He thought the egg would launch a pipe at him, as well, but for some reason, it didn’t happen. Instead, the egg began extending pipes towards the corpses surrounding the area.</p>

      <p>The remains were numerous. All of them belonged to the Gouz-Maise Gang members who’d lost their lives in the battle against the Marshall II. The pipes reached into the pieces of meat scattered by cannon shots, the body halves split by knives, the corpses crushed by the robot’s frame, and the head of Gouz hanging on the gate.</p>

      <p>That wasn’t all — the egg’s surface also grew a funnel-like organ that began absorbing something invisible — <em>the grudges</em> — from both the air and the ground beneath. And — though his body had already become dust — that also included the regrets, hatred, and sorrow of Maise the Lich. All the flesh and grudge it’d gathered made the egg expand once more.</p>

      <p>It was now an orb that seemed to mix the size of a gas tank and the fragility of a balloon. The scene before his eyes put the last survivor of the Gouz-Maise Gang into a complete stupor.</p>

      <p>Soon enough, the orb cracked.</p>

      <p>A moment later, it broke and birthed a beast too foul. A beast too hideous.</p>

      <p>It was the ultimate result of the Gouz-Maise Gang and all they had done.</p>

      <p>It wouldn’t have been an exaggeration to say that this creature — this gathering of villainous flesh and emotion — was like a being straight out of hell. The corpses of hundreds were linked together like a jigsaw puzzle, forming the shape of an ox-headed horse-man.</p>

      <p>Instead of blood, the only thing flowing through its veins was ill will, malicious grudges.</p>

      <p>The gathering of the deceased showed nothing but disdain for all living creatures and moved only with the dark intention to make the whole world as dead as they were.</p>

      <p>And, of course, the first target of its grudge was...</p>

      <p>“Ah... Eh... Aahh?” ...the last survivor of the Gouz-Maise Gang.</p>

      <p>The abomination’s cadaverous hands grabbed hold of the man. Then it switched to holding him by the arms — with only its thumbs and index fingers — before beginning to pull on them. The action was so slow that it almost seemed gentle.</p>

      <p>“AGH! AAGHYAAAAAHHHH!”</p>

      <p>Slowly, surely... like a child toying with an insect... it continued pulling until one of the man’s arms was torn from his body. Then it did exactly the same with the legs. And when the man was left with only one limb, the ox-headed horse-man opened its large mouth.</p>

      <p>Though the pain he was in drove the man to the edge of insanity, he still had enough mind to understand why the creature was doing what it did. After all, he’d seen it happen many times during his days with the Gouz-Maise Gang.</p>

      <p>“Ahaha... am I the... dessert...?”</p>

      <p>Torn apart like an insect, the man was finally pulled into the ox’s mouth and crushed by the countless, lethal fangs there.</p>

      <p>And so, the Gouz-Maise Gang became one. Literally as one, they all composed a single being of hatred.</p>

      <p>While the metaphorical sense might’ve been noble and grand, what was actually happening here was nothing short of vomit-inducing.</p>

      <p>It was the birth of the most hideous undead.</p>

      <p class="centerp section-marking">◆◆◆</p>

      <p><em>[Non-player announcement]</em><br/><br/></p>

      <p class="noindent"><b>[Discovered a monster that meets the conditions to be recognized as a Unique Boss Monster]</b></p>

      <p class="noindent"><b>[Confirmed that no similar specimens have existed prior]</b></p>

      <p class="noindent"><b>[Informed the control AI managing UBMs]</b></p>

      <p class="noindent"><b>[Received approval from the control AI managing UBMs]</b></p>

      <p class="noindent"><b>[Recognizing target as UBM]</b></p>

      <p class="noindent"><b>[Strengthening the target’s ability and providing it with the upon-death special reward function]</b></p>

      <p class="noindent"><b>[Granting the target Epic status. Granting the target the name of “Revenant Ox-Horse, Gouz-Maise”]</b></p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter5">
    <div class="main">
      <h1>Chapter Five: Revenant Ox-Horse</h1>

      <p><em>Paladin Ray Starling</em></p>

      <p>The children had already woken up by the time we got to the dungeon, likely because the Lich had fallen.</p>

      <p>At first, they thought we were with the bandits. They began to cry with fear, but thanks to Cyco and Nemesis calming them down, they soon believed that we wouldn’t harm them.</p>

      <p>As it turned out, Roddie — the child our quest requested us to save — was the very same boy that’d slit my throat back in the lab. He had no memory of ever being controlled, so I didn’t see the need to bring it up.</p>

      <p>When we were about to take the children back to the surface, I saw Hugo — who’d been looking around the lab — inquisitively examine the documents he’d found on the table there.</p>

      <p>“Research on grudge, the Crystal of Resentment... and that’s not all,” he said. “It looks like he’d been studying the means of creating a Flesh Golem that uses grudge as its power source. Heh, reminds me of that one prototype we had. I guess people thinking the exact same thing exist everywhere in this world. Though I’d never have expected anyone to create something like this completely on their own... It’s both impressive and horrific at the same time.”</p>

      <p>He put the documents he’d been examining into his inventory.</p>

      <p>“What are those, Hugo?” I asked.</p>

      <p>“Oh, just the research papers left behind by the Lich who made this fortress his hideout — Maise or whatever he was called. The concept is similar to the one behind a robot our clan was researching a while back, so I decided to take it to them. You know — as a souvenir.”</p>

      <p>“A robot?” I asked. “What does grudge have to do with that?”</p>

      <p>“Let’s go. I’ll explain on the way.”</p>

      <p>We began walking out of the dungeon, and I was instantly met with a certain problem. Because they had been sleeping for so long, some of the children had become weak, rendering them unable to walk properly. Due to that, we had them ride Silver or carried them on our backs, but...</p>

      <p>“Woof woof! Woof woof!” one of the kids cried.</p>

      <p><em>Yep, I still have the dog ears,</em> I thought. <em>And the kids just can’t stop playing with them.</em></p>

      <p>“Me next! Me next!”</p>

      <p>“No, me!”</p>

      <p><em>I’m not sure how I feel about this popularity.</em></p>

      <p>The relatively lively children were pestering me for a piggyback ride just so they could reach the dog ears.</p>

      <p>“Looks like they’re a big hit,” smiled Hugo.</p>

      <p>“...Good to see they’re useful for <em>something</em>,” I replied.</p>

      <p><em>But man, they sure last a long time,</em> I thought. Flamingo had told me they’d be gone by sunset, but it was already evening and they still didn’t show any signs of disappearing.</p>

      <p>“How curious,” said Nemesis. “The lack of the Horse Riding skill made you fall down the first time you got on, yet these younglings can ride without any problem.”</p>

      <p>Getting the children out of the dungeon was a task that needed more people, so Nemesis was in her human form. She held Silver’s reins as he was strutting forward like a pony.</p>

      <p>Since it was unlikely that they had the Horse Riding skill, I was wondering about that, too. I could only assume that making Silver run while riding and simply leading him by holding the reins were completely different things.</p>

      <p>“Okay,” I spoke up. “So tell me about this thing about grudge and robots.”</p>

      <p>“All right,” nodded Hugo. “The clan I’m in is focused mainly on crafting, and our current main products are Magingears. In fact, the Marshall II — Dryfe’s official mass-produced machine — started out as an original item made by us.”</p>

      <p><em>That robot was actually built from scratch?</em> I thought.</p>

      <p>“Since Marshall II’s completion, we’ve been developing new models, variation models, and better-armed models, but recently, we’ve been making plans to merge it with other crafts,” he went on. “One of those plans focuses on the creation of a machine that uses dead people’s grudge as a power source.”</p>

      <p>“Well, that sure doesn’t sound good,” I commented. “Why did that plan even exist?”</p>

      <p>“Because all of Dryfe’s machines — not just the Magingears — are huge MP sinks,” he answered. “Replacing that MP with grudge would allow us to operate for longer and simplify the usage of stronger weaponry. That’s the grudge power plan.”</p>

      <p>“How can grudge become power, anyway?” I asked.</p>

      <p>“Heh,” Hugo grinned. “You saw the answer to that just a few minutes ago, didn’t you?”</p>

      <p><em>I did? What does he mean?</em></p>

      <p>“The last magic skill used by the Lich — Deadly Mixer.”</p>

      <p>“Oh, that,” I said.</p>

      <p>That attack had been immensely powerful. If I hadn’t blocked it with Counter Absorption, I’d have vanished along with the fortress. In fact, the skill was even stronger than Figaro’s chains. It was just that Counter Absorption was tougher now, due to Nemesis being in her second form, so the attack this time just barely hadn’t been strong enough to break through it.</p>

      <p>“That was a vile skill that turns grudge into destructive physical power and releases it at the target,” Hugo continued. “Our craftsmen thought that — provided it was released on a smaller scale and handled more carefully — the same power could be used to power our engines. After all, this world already has Living Armor, which move due to the souls of the dead haunting it.”</p>

      <p><em>Living Armor, huh?</em> I thought. <em>A not-too-uncommon monster type in fantasy RPGs.</em></p>

      <p>“One of our members said, ‘If this goes well, we might create a weapon that absorbs the grudge permeating the battlefields and stays active semi-permanently,’” Hugo quoted. “Our clan was intrigued by the idea, so we got the help of a famous Master from the Necromancer grouping and began researching the utilization of grudge power, but...”</p>

      <p>Hugo suddenly stopped talking, making me instantly understand how it must’ve gone down.</p>

      <p>“It failed, huh?” I said.</p>

      <p>“And how.” He nodded. “The prototype was a failure that was both hard to control and had a tendency to go on a rampage. I helped with its disassembly and disposal. It happened back when I was still leveling up my Mechanic job.”</p>

      <p>“So, you’re saying that the Lich... Maise had the same thing in his research paper?” I asked.</p>

      <p>“Not at all,” he said. “Though modified, the thing we at The Triangle of Wisdom were trying to build was but a machine weapon, while this is more along the lines of a Flesh Golem.”</p>

      <p>Flesh Golems were exactly what it said in the name — golems made of joined human or animal flesh. They were common in the more grotesque RPGs.</p>

      <p><em>Now that I think about it, though I’ve encountered a number Zombies and Skeletons here, I haven’t seen a single Flesh Golem...</em> I thought.</p>

      <p>“But if the Lich did such research, why didn’t he use it?” I asked. “It sounds pretty strong.”</p>

      <p>“Clearly, it was because he couldn’t control it,” said Hugo. “The problem with the grudge power plan was that it involved absorbing the grudge from the surroundings. That was the prime obstruction to any success it could’ve had.”</p>

      <p>Hugo momentarily stopped talking and made the child on his back sit on his shoulders instead. Then, with his hands free, he raised up both of his index fingers.</p>

      <p>“When a Necromancer uses grudge to power a Living Armor or a Flesh Golem, he normally uses a single person’s grudge or soul for a single unit.”</p>

      <p>He then raised all of his fingers on only his right hand, indicating either “five” or just “many.”</p>

      <p>“However, grudge power absorbs all the surrounding grudge,” he said. “And it doesn’t matter how many and varied the source creatures are.”</p>

      <p>That was enough for me to understand the problem.</p>

      <p>“So the individual grudges start fighting for the lead, and that makes the thing impossible to control, right?” I asked.</p>

      <p>“Right,” he nodded. “At least, that’s what happened with the experimental machines our clan created. Our people then tried using both magic techniques and programming to ensure control, but apparently, their efforts were in vain.”</p>

      <p>Grudge-powered creatures seemed comparable to action game characters that were being controlled by tens of people fighting for the controller. There was no way they’d act properly.</p>

      <p>“In the end, they went on rampages and began acting based on the consensus of the grudges,” he went on.</p>

      <p>“Consensus?” I raised an eyebrow.</p>

      <p>“It always boiled down to the expansion of the grudge. They’d begin attacking either undead or other grudge power machines and attempt to merge with them. Then they’d react to the grudge — and negative emotions in general — of the living, and attack them instead. They’d continue rampaging like that until they broke.”</p>

      <p><em>...Man, that sounds bad,</em> I thought.</p>

      <p>“And so, the project was a failure,” Hugo continued. “It was made clear that, while the grudge of many could be gathered and used for offense with skills such as Deadly Mixer, unifying and controlling it was a fool’s errand.”</p>

      <p>“I see.” I nodded.</p>

      <p>As we talked, we finished going up the stairs and finally returned to the surface.</p>

      <p>“...Huh?” I said.</p>

      <p>A moment later, Nemesis, I, Cyco, Hugo and even the children... all shook with dread.</p>

      <p>I could feel weak vibrations below me and heard voices coming from the outside — though it was arguable whether the term “voices” was appropriate. It was more like a choir of the macabre. Weeping, crying, sobbing, bellowing and just about any other possible sound representing negative emotion. That was more than enough for me to grasp that something alarmingly abnormal was happening outside.</p>

      <p>“...Hey, Hugo.” Urged by the bad feeling I had — or, rather, the very certain chills going down my spine — I spoke up.</p>

      <p>“Yes?” he replied.</p>

      <p>“If grudge power isn’t controllable... what would happen if you used it regardless?”</p>

      <p>“Heh, that’s obvious,” he said.</p>

      <p>Beyond the gates leading outside, within the light of the sun sinking to the horizon, I saw the shadow of something massive.</p>

      <p>“The uncontrolled grudge-powered thing would start absorbing the surrounding grudge, converting it into power, reacting to negative emotions, killing the source if it’s alive, and once again absorbing the residual grudge,” Hugo said.</p>

      <p>I heard a loud roar and felt the ground under my feet vibrate as the massive <em>thing</em> shuddered and shifted.</p>

      <p>“It would repeat that ad infinitum... and thus you’d have a rampaging monster equipped with a semi-permanent engine.”</p>

      <p>The beast outside the fortress came into sight. It looked like it came straight out of hell.</p>

      <p>The first thing I saw were its repulsive legs, clearly made from human corpses. Then, as it moved nearer, I became certain of what it was.</p>

      <p>The creature with the words “Revenant Ox-Horse, Gouz-Maise” above its head was a gigantic undead that seemed more abnormal the more I looked at it. It had the head of an ox, the silhouette of a horse-man, and dead, familiar faces mixed in with the parts forming it. And it had a naming pattern used only by Unique Boss Monsters.</p>

      <p>The visages of the dead were voicing words or merely sounds that were thick with negative emotion.</p>

      <p>They were the Gouz-Maise Gang members that Hugo had killed. I could even see the faces of those we’d encountered back in Gideon.</p>

      <p>...That was enough for me to conclude that it was made of the corpses of the gang.</p>

      <p>“I see,” said Hugo slowly. “It looks about the same as the predicted result.”</p>

      <p>Hugo took the documents out of his inventory and began looking through them. Sure enough, there was a picture of an ox-headed horse-man with countless dead faces on it.</p>

      <p>“So he prepared for his own death by making a plan to create that thing by sacrificing everyone in the Gouz-Maise Gang,” I said.</p>

      <p>“Or perhaps he merely planned to use the surrounding corpses, and it just so happened that the ones around him were those of the bandits,” added Hugo. “The ox-head, however, was a guaranteed ingredient.”</p>

      <p><em>Well, he’s certainly following the plan,</em> I thought.</p>

      <p>“ＦｆＧｇＳｓｓＦｆｆＳｓＤｄｄＷｗＳｓＳＤｄｓＳＤｄｅＥＷｗＤＡｓｓＳａＡＡａａＡａＡ———！！”</p>

      <p>Gouz-Maise was passionately smashing something to pieces, letting out a roar no sane mind could comprehend.</p>

      <p>Exposed to that noise, and such violence, the children started to scream in fear. Cyco embraced them to make them feel safe and gently tried to calm them down.</p>

      <p>“Is that your...?” I began.</p>

      <p>I noticed that the thing Gouz-Maise was breaking was the Magingear used by Hugo. Even though it no longer had a hint of its original shape, the monster didn’t stop attacking it. Since it was running solely on the power of countless grudges, it was currently on a warpath. Due to that, I’d have expected it to spread its violence with no rhyme or reason, but it seemed to focus solely on the Magingear.</p>

      <p><em>Are most of the ones that became the “ingredients” of that thing actually acting united due to their collective grudge towards Hugo and the robot?</em> I thought.</p>

      <p>“I’m the one who killed most of them, after all,” he said. “It’s only natural for my Marshall II to become its target.”</p>

      <p><em>So, even in that state, they haven’t forgotten their resentments from when they were alive... Wait, no. It’s more like that resentment is all that they are.</em></p>

      <p>“Heh.” Hugo grinned. “I feel like I’m looking at Rodin’s Gates of Hell.”</p>

      <p>“Ironic of you to say that, Hugo,” said Cyco.</p>

      <p><em>The Gates of Hell, huh?</em> I thought. <em>Yeah, watching this gathering of dead sinners is much like looking at that sculpture. And on the note of Rodin’s sculptures, it’s high time I stopped being The Thinker and actually did something about that abomination.</em></p>

      <p>“Well, Master?” spoke Nemesis. “Do we defeat it?”</p>

      <p>“I’d love to if I can, but...” I could feel it in my bones. That thing was stronger than even Gardranda. Hell, I was certain that ten out of ten fights between Gouz-Maise and Gardranda would end in Gardranda’s defeat.</p>

      <p>“Man, creating UBMs is just unfair,” I mumbled.</p>

      <p>“Normally, it’d be completely impossible,” said Hugo. “I know a person who can do something similar — with a higher standard, too — and even he has yet to create a single UBM. In fact, if it were possible to mass-produce UBMs, someone would be making them nonstop. After all, defeating them gets you special rewards.”</p>

      <p><em>So they could constantly create items such as my Miasmaflame Bracers, huh?</em> I thought.</p>

      <p>“That ‘Revenant Ox-Horse, Gouz-Maise,’” he continued, “is the result of several unfortunate superimposed coincidences.”</p>

      <p>“Accidents?” I raised an eyebrow.</p>

      <p>“First of all, this place is bad,” he said. “It’s an abandoned fortress on an ancient battlefield. There are tons of corpses filled with grudge right under our feet.”</p>

      <p>He pointed at the ground, then at himself.</p>

      <p>“Second, I killed most of the gang. Due to that, the surroundings became thick with the grudge of vile scoundrels and got covered in fresh corpses. Corpses of people from a single group, even. There was even the Strong Gladiator Gouz — a real tough guy.”</p>

      <p>Next, he pointed at me.</p>

      <p>“Third, you cornered Maise and pushed him into using the Crystal of Resentment — a concentrated gathering of grudge — as a medium to release a Deadly Mixer. Though you survived it, the dense grudge that didn’t get used with the skill was released into the air. And let’s not forget the Lich’s own grudge after you killed him.”</p>

      <p>Finally, he pointed at Gouz-Maise.</p>

      <p>“Lastly, someone activated the grudge-powered undead creation spell that was mentioned in the papers — Undead Grudge Construction. It used the surrounding grudge and corpses to form a grudge-powered Flesh Golem. However, due to the conditions being far too good, the resulting undead greatly surpassed its original specifications and — because of how abnormal and otherworldly it was — reached the realm of UBMs. With a slight change of perspective, it’s safe to say that this creature is the child born from you, me, and the Lich.”</p>

      <p>“Well, that sure sucks,” I said. “So, what now?”</p>

      <p>“We simply lack the power to face it,” replied Hugo. “It’s far too strong an enemy for just two high-rank Masters and their low-rank Embryos. Not only that, but — as things are — it’s highly incompatible with Cyco’s power, and... well, just look at my weapon.”</p>

      <p>After shifting his gaze at the Magingear — which was reduced to a pile of scrap with pieces so small they could each be held in hand — Hugo heaved a long sigh.</p>

      <p>I could still use Vengeance is Mine in the same way I’d used it against Gardranda, but it would be far more complicated in this case. Since the battle with the demon, I had gotten some levels, equipped the Miasmaflame Bracers, learned Purifying Silverlight, and become stronger overall.</p>

      <p>However, the difference between Gardranda and <em>that thing</em> was just far too great. Its size alone was at least four times greater. Its height was about the same as that of an eight-story building. And naturally, its stats were much higher. I wasn’t confident that I could survive until I charged up the damage needed to kill it. I also had only one more Counter Absorption use.</p>

      <p><em>There’s little doubt that I’d die if I fought it,</em> I thought.</p>

      <p>“True,” agreed Nemesis. “...Hm?”</p>

      <p><em>What’s wrong?</em> I asked.</p>

      <p>“I just felt something strange... but it instantly went away. Was I just imagining it?”</p>

      <p>“Ray,” Hugo addressed me. “For now, our priority should be taking the children — including the ones in the carriages — and leaving this place as quickly as possible.”</p>

      <p>He pointed at the two carriages with the newly-kidnapped children inside them. Unlike the one at the front — which Hugo had destroyed with his preemptive attack — those two were in fine shape.</p>

      <p>It was good thing that Gouz-Maise was too busy destroying the Magingear to do anything to harm the children. I could only assume that it was because they were sleeping, and thus weren’t releasing any negative emotions that could’ve attracted it. Whatever the case, it was good that they were okay.</p>

      <p>“Yeah, the carriages look ready to go at any time,” I said. Both of them were already linked to horses.</p>

      <p><em>Why didn’t it attack the horses, though?</em> I thought. <em>Does it only react to people?</em></p>

      <p>“Thankfully, both Cyco and I have the Piloting skill,” said Hugo. “It works with carriages, too, to a certain extent, so we can both handle one carriage each.”</p>

      <p>“What about after we escape, though?” I asked. “Just leaving it there to do its thing doesn’t seem like a good idea.”</p>

      <p>“We’ll go to the Adventurer’s Guild and tell them everything about it,” answered Hugo. “It’s a UBM, after all. There will be lots of Masters who’ll go after it to get the special reward. Though, since I’m with Dryfe, you’ll have to be the one to tell them about it.”</p>

      <p>“All right,” I nodded. “Now, let’s find the right timing to get to the carriages and... Ah!”</p>

      <p>As we were about to act out the plan we’d set up, the situation suddenly changed.</p>

      <p>We had been too unobservant...</p>

      <p>...and we had failed to consider a certain scenario.</p>

      <p>“Mommyyy! Daddyyy!”</p>

      <p>It was the scenario in which the children in the carriages woke up and walked out of them.</p>

      <p>“ＧｇＨｈｕＵｓＳｓＤｄＳｓｓＤｃＣａＡａａＳｓｓＷｗｇＧｂｂＢａＡＳＡａＡＡ！！”</p>

      <p>Releasing a scream that nature surely didn’t intend, Gouz-Maise turned around. Its gaze became fixed on the crying children, all exuding the negative emotion we knew as “fear.”</p>

      <p>“ｇＧｏＯｌｌＬｆｆＦｆＡａＳｓｓＡａａＡａＡａａＡ！！”</p>

      <p>It was hard to tell whether the action was caused by the consensus of all the grudges, or the <em>eating habits</em> one of them had had while it was alive. However, Gouz-Maise’s intentions were clear the moment it began running towards the children. Its right arm was extended towards them, saliva was pooling from its mouth.</p>

      <p>“Damn it!” Before I could even think things through, I’d jumped out through the gate, and aimed my left bracer at the abomination. “Purgatorial Flames — full power!”</p>

      <p>The Miasmaflame Bracer began violently draining my MP and converting it into fire. Though it was less intense than the deadly flame once used by the Great Miasmic Demon, Gardranda, the blaze I launched could easily reduce a hundred standard undead to ash, and it went straight for the arm that Gouz-Maise was extending towards the children.</p>

      <p>“ＹｅＥｇａａＡａｘＸＡｘＳｓＡａａＡｆＦｆａａＡａａＡａ？！”</p>

      <p>The way it screamed and swung its arm around was enough reason to believe that — despite being reduced to an amalgam of corpses — Gouz-Maise still felt pain.</p>

      <p>“Take this! Gahh!!” Making use of the opportunity, I closed in on it and swung Nemesis — blessed with the Silverlight — at its front left leg.</p>

      <p>The undead-killing shine split apart the dead faces of the gang and severely damaged both flesh and bone.</p>

      <p>Though the leg was too thick for my attack to sever it, it was enough to make the abomination lose its balance.</p>

      <p>“Cutting it feels awful!” Nemesis squealed in disgust.</p>

      <p>Gouz-Maise dropped to the ground and made it shake like a demolished building would. As I’d somewhat intended, the monster’s body landed in the direction opposite to the carriages.</p>

      <p>“Hugo!” I shouted. “I’ll divert its attention! Leave this to us and get out of here!”</p>

      <p>“Ray, but you...!”</p>

      <p>I knew what he wanted to say. If the carriages left, I wouldn’t be able to run away from Gouz-Maise. Though I had Silver, I couldn’t ride him, and my legs weren’t fast enough to let me outrun the abomination. My death penalty would be guaranteed, and I’d end up missing the time we’d decided on with Marie.</p>

      <p>However...</p>

      <p>“There’s no other option!” I shouted again. “Hurry up and get the children out of here!”</p>

      <p>I brandished Nemesis, kept her blessed with the Silverlight, closed in on Gouz-Maise’s head — which was near the ground due to it falling over — and swung at its eyes. Though my prime objective was to buy time for Hugo and the children, I still wanted to try my best to survive... and perhaps even win.</p>

      <p>“ＧＥｅｅＨＡａａＡｕＡａｓｓＳａＡｇＧＡａ！！”</p>

      <p>As liquid rot oozed out of its eye sockets, Gouz-Maise began to writhe. Due to its great size, the vibrations caused by that action were like a minor calamity.</p>

      <p>“This thing’s body is unexpectedly fragile,” I commented.</p>

      <p>“It’s a gathering of cadavers, after all. It’s only natural for it to not be particularly tough,” said Nemesis. “However...”</p>

      <p>“...Yeah, I expected it to have such tricks up its sleeve.”</p>

      <p>Once the fire on its arm faded, new rotten flesh popped up from under the carbonized skin. The leg, too, fixed itself while releasing some filthy fluids. The eyes I’d split fell out of their sockets and were replaced by new ones.</p>

      <p>“It has Automatic Restoration,” said Nemesis.</p>

      <p><em>But undead hit by Silverlight are supposed have wounds that will not heal,</em> I thought. <em>How can it restore itself from that?</em></p>

      <p>“I believe the grudge power is being used to sustain and mend its large corpus,” said Nemesis.</p>

      <p><em>And that allows it to come back from such great damage in mere seconds? Is it unkillable or something?</em></p>

      <p>“Well, it’s already dead,” said Nemesis.</p>

      <p>“Not the time for such jokes!”</p>

      <p>Still on the ground, the UBM swung its left arm at me, which I avoided by jumping backwards.</p>

      <p>The swing seemed rather clumsy — probably due to its eyesight not being back yet — but it was still aimed at my direction.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert5">
    <img alt="insert5" class="insert" src="../Images/Insert5.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter51">
    <div class="main">
      <p>Backing away from the carriages, I focused on evading its attacks.</p>

      <p>“What now?” asked Nemesis. “We’ve opened hostilities on the fiend, but we don’t really have anything that would be effective against it.”</p>

      <p>“The regeneration is too fast for most of our attacks to have any meaning,” I said. “If there’s something we can do, it’s...”</p>

      <p>...the same thing we’d done against Gardranda — a well-charged Vengeance aimed at its weak spot.</p>

      <p>“Though the charging process would be really difficult here,” I muttered. The fiend’s defense was much lower than I’d expected, but the way it was rampaging was more than enough to show just how powerful it was. One or two good hits would kill me.</p>

      <p>“It would’ve been grand to have a full stock of Counter Absorptions, but... oh, there’s that strange feeling again,” said Nemesis.</p>

      <p>“What?” I asked.</p>

      <p>“It’s the same feeling as before,” she said. “It has something to do with my accumulated damage counter and... Oh, it’s gone again. What am I supposed to make of this?”</p>

      <p>“Gouz-Maise might be up to something,” I said. “Be on your guard.”</p>

      <p>“No need to tell me that.”</p>

      <p>As I talked with Nemesis, I looked at the carriages at the edge of my vision. Hugo and Cyco were sitting on separate carriages and were about to drive off.</p>

      <p>I was about to make sure that Gouz-Maise didn’t attack them by cutting its leg again but... the abomination wasn’t moving at all. Instead, it simply used its freshly-healed eyes to stare directly at me.</p>

      <p>“ＧｇｉｉＩＮｎｎＮＮｎＡｓＳａａＡｓＳｓｓａａＳａＡａＡａＳＡｄＤＷｗＤｗＷｄＤａＡＱｑＡｑ！！”</p>

      <p>Acknowledging my form made it feel or remember something that caused it to release a furious roar.</p>

      <p>“...Oh, I see,” I said. A few minutes ago, the grudge of those who had become materials for Gouz-Maise had caused it to go on a rage and vehemently attack Hugo’s Magingear. However, this monster had been created by the Lich himself, whose grudge was in it, as well. Thus, its primary target was...</p>

      <p>“...me, of course!” I yelled.</p>

      <p>Gouz-Maise raised its front legs and reared like a horse. Then, with great speed, it threw its pillar-like front legs towards me and the ground beneath.</p>

      <p>I quickly evaded it, but the attack was powerful enough to pulverize the ground and sink it slightly. Not missing the opportunity, I closed in to attack a leg again, but unlike before, it nimbly kicked me away.</p>

      <p>“GUH!” I blocked it with the broad side of my greatsword, yet I still got blown away about six meters back.</p>

      <p>“...Well, looks like someone got in the mood,” I said.</p>

      <p>Unlike before, when it had simply been rampaging, Gouz-Maise was now moving with the intention to kill me. Apparently, seeing me had caused it to get serious.</p>

      <p>“How troublesome,” I mumbled.</p>

      <p>“However, I now see a glimmer of hope for us,” said Nemesis.</p>

      <p>“What? How?”</p>

      <p>I checked on the carriages at the edge of my vision. They were moving away from here.</p>

      <p><em>Well, that’s one success,</em> I thought.</p>

      <p>“You know how I told you about my accumulated damage counter?” asked Nemesis.</p>

      <p>“Yeah,” I nodded.</p>

      <p>“The damage we received just now made me understand what was causing it. It was happening because it had already given us a great... no, the <em>greatest</em> amount of damage we’ve ever accumulated against a single creature.”</p>

      <p>“What?” I asked.</p>

      <p><em>The greatest amount? But we only just started fighting it.</em></p>

      <p>“Remember Deadly Mixer?” she said. “The skill the Lich used before you killed him? We absorbed its damage with Counter Absorption, but we ended up not having to use Vengeance. It’s still there.”</p>

      <p>“Wait, that doesn’t make sense,” I said. “The Lich and Gouz-Maise are separate... Oh.”</p>

      <p>I suddenly understood. Lich Maise and Revenant Ox-Horse, Gouz-Maise were different... but not completely separate.</p>

      <p>“The Lich’s grudge is in there, after all,” Nemesis continued. “Thus, the accumulated damage is still valid. However, it seems to come and go at random. Vengeance will probably only be effective when his grudge is the dominant one.”</p>

      <p>One Gouz-Maise body. Tens of grudges controlling it. My chance at defeating it existed only when it was being possessed by the grudge of the Lich.</p>

      <p>“I see how it is,” I nodded. All I had to do now was find the core and hit it with Vengeance is Mine while Maise was the one in charge. Though still challenging, defeating the abomination was no longer a fool’s errand.</p>

      <p>So...</p>

      <p>“It’s possible for us to win against this undead,” said Nemesis.</p>

      <p>“Good enough for me.” I readied myself.</p>

      <p>...There was only one thing left for me to do.</p>

      <p>It was exactly the same thing I’d done when I’d fought the Demi-Dragon Worm and the Great Miasmic Demon, Gardranda. I simply had to give my all to that possibility.</p>

      <p>“ＧＥｅｒＲｒｒＲｕｕＵＵＡａＡＳｚＤｄＳｓＡａａＡＡａ！！”</p>

      <p>As the fiend bellowed out the sound of its grudge, the faces and mouths covering its body began to whisper, oozing pus and blood as they did so.</p>

      <p>“You won’t escape!”</p>

      <p>“You’re dead!”</p>

      <p>“Join us!”</p>

      <p>“Kill them all!”</p>

      <p>“Destroy!”</p>

      <p>“Eat!”</p>

      <p>“Ravage!”</p>

      <p>Those were the kinds of things they were saying.</p>

      <p>Even after they’d become a giant abomination, these men were thinking the exact same things they had when they were alive. Thus...</p>

      <p>“Revenant Ox-Horse, Gouz-Maise!” Nemesis shouted. “You beasts who have inflicted great suffering upon countless younglings, taken many lives and are still endangering the living...”</p>

      <p>I pointed my greatsword towards it. “We refuse to let you kill anyone ever again!”</p>

      <p>I looked straight up into its eyes, and became one with Nemesis as we both proclaimed:</p>

      <p>“You will fall by our hand!”<br/><br/></p>

      <p>Now, about ten minutes since it had begun, our battle against the Revenant Ox-Horse, Gouz-Maise reached peak intensity. I was searching for its core, while the abomination tried to crush me beneath its feet. The battle would end the moment either of us were successful.</p>

      <p>Both of us had attack potential that surpassed the opponent’s HP. Gouz-Maise’s offensive ability was truly overwhelming. Unlike Maise, it didn’t use undead or cast magic debuff skills, but its physical prowess was incomparable to that of the Lich.</p>

      <p>A single punch or kick could put me on the verge of death. I had only one use of my fatal attack. The conditions weren’t in my favor.</p>

      <p>“Hhah!!”</p>

      <p>To both divert the abomination’s attention and make it lose its balance, I swung Nemesis — blessed with the Silverlight — towards its leg.</p>

      <p>“ＧＤｄＥＳｓａａＡａＡＡＳｓＡａＡａ！！”</p>

      <p>As the thing howled in pain, I jumped backwards.</p>

      <p>A moment after I distanced myself from it, Gouz-Maise swept its leg through the place where I was standing. By that time, the wound had already healed.</p>

      <p>I’d been repeating the same attack for a while now. I probably looked stupid, but through such repetition, people could notice things they didn’t before.</p>

      <p>“I was wondering why this undead thing could heal from wounds left by Silverlight... and I’ve finally figured it out,” I announced.</p>

      <p>I could see small bits of flesh sticking to the area around its injuries. At first glance, they looked like pieces I’d chopped off with my attacks. However, they were actually flesh that had it cut off <em>by itself</em>.</p>

      <p>“It removes the flesh around the injury and then restores itself by multiplying its cells.”</p>

      <p>To undead like Gouz-Maise, wounds from weapons enchanted with Silverlight were unmendable. Thus, the abomination simply killed the cells surrounding the wound, disconnected the wound from itself, and effectively turned the Silverlight injury into normal damage. Since the corpses used in its creation were fresh, the cells were still alive, so making them multiply for healing purposes wasn’t a hard task. That was the reasoning behind the trick.</p>

      <p>The restoration was probably done by using the energy of the same grudge driving it. Also, Gouz-Maise was protecting the living cells from dying. This trick was impossible for Skeletons — since they were nothing but bone — and Zombies — since most of their cells were dead.</p>

      <p><em>But man, grudge energy sure is versatile,</em> I thought. <em>I can see why the Imperium wanted to utilize it.</em></p>

      <p>“So the cells are alive...” said Nemesis. “Though that comes with the demerit of pain sensitivity, which is unusual for undead.”</p>

      <p>“Seems like it,” I nodded.</p>

      <p>I’d gained some experience fighting undead during the night I’d spent in the Tomb Labyrinth. Not a single Skeleton or Zombie I’d fought there seemed to care about any damage they’d received. Thus, it was fair to assume that sensitivity to pain was a feature unique to Gouz-Maise.</p>

      <p>“Or perhaps the Lich deliberately left the pain sensitivity in to make any damage caused to it increase its grudge,” mused Nemesis.</p>

      <p>“I see,” I said. “So it could be less of a demerit and more like a proper part of the equatio—”</p>

      <p>Before I could finish my sentence, I had to jump to the side. A moment later, the abomination’s hoof landed right where I’d been standing.</p>

      <p>While evading it, I swung my greatsword and cut into the hoof. The injury that caused was weaker than the previous ones, but if Gouz-Maise wanted to detach it and restore itself, it would surely lose its balance.</p>

      <p>“Purgatorial Flames!” I complemented that wound with a stream of fire from my left Miasmaflame Gauntlet.</p>

      <p>“ＨｈｏｏＯＳｓＳＤｄＡＡＳｓａａＡＡａＡｈｈ！！”</p>

      <p>It staggered and fell over, making the ground shake.</p>

      <p>“GAH!!” I screamed, using the opportunity to get to its side. I changed Nemesis into The Flag Halberd and forced her into the area where the heart should’ve been. The Silverlight burned and melted both the faces on the surface and the rotten flesh under them before reaching the heart behind its ribcage.</p>

      <p>“ＧＥＥＥＥＡＡＡＡＡＡＥＥｅｅＥＥｅｅＡＡａａＡＡａａＥｅｅＥｅＡＡＡＡＡ！！”</p>

      <p>Though the scream the monster released as it writhed violently was of a higher pitch than the previous ones, it didn’t show any signs of becoming weaker.</p>

      <p>Its flesh and skin fixed themselves the moment I pulled Nemesis out. That applied to the heart, as well.</p>

      <p>“Doesn’t seem like the core is in the heart!” I shouted.</p>

      <p>“Then it must be the head!” said Nemesis.</p>

      <p>Reason suggested that cores had to be put in either the heart area, the head area, or in the stomach area, as it had been with Gardranda. Due to other parts of the body being used in combat, no one in their right mind would put such a weak spot in the limbs.</p>

      <p><em>After all, that would be the equivalent of punching people with your own innards,</em> I thought.</p>

      <p>“Or hitting them with your testicles!” added Nemesis.</p>

      <p><em>I’m not fond of that example in any way whatsoever.</em></p>

      <p>“Now, it’s fine if it’s in the head,” I said. “But things would get a bit troublesome if it’s in the stomach.”</p>

      <p>Once you included the horse part, the monster’s stomach was pretty damn large. If the core was in there, searching for and destroying it would be extremely difficult. If it was doable, I wanted to use Vengeance is Mine while directly touching the core.</p>

      <p>“Why?” asked Nemesis. “With the current amount of accumulated damage, it’ll be possible to destroy a considerably large part of its body.”</p>

      <p>Well, it was true that the hit I’d landed on Gardranda’s head had also destroyed its chest, but...</p>

      <p>“It’s different this time,” I said. “With this self-amputation thing Gouz-Maise has going on, there’s a chance that it could negate the damage from Vengeance.”</p>

      <p>I didn’t know what would happen if I landed Vengeance on the general area of the core and it suddenly detached the part that I’d hit. However, I had a feeling that the spread of the damage wouldn’t go beyond the detached part.</p>

      <p>That assumption was based on my experience as one who’d used Vengeance is Mine many times before. No matter how great the damage I’d give back to my enemies, the skill never seemed to have a noticeable effect on the surroundings. Vengeance merely doubled the damage I received from hostiles and gave it back to them — it didn’t do any physical damage on its own. So, if the abomination could detach the part of the body I hit, there was a chance that the damage — no matter how great — wouldn’t reach the core. I couldn’t risk having my one chance go to waste like that.</p>

      <p>“The best move right now is hitting the undetachable core and <em>then</em> using the skill,” I said. “Now, let’s try the skull!”</p>

      <p>“Understood!” said Nemesis. “First, we have to make it fall to the ground again!”</p>

      <p>Gouz-Maise was already standing tall, and the wounds we’d given it were gone without a trace.</p>

      <p><em>We’ll get it to the ground, hit its head, see how it reacts and... Huh?</em></p>

      <p>“Ｇｈｕｏｏｈ...”</p>

      <p>For some reason, it had completely stopped moving. The creature had shifted its gaze away from me and was staring somewhere far into the distance.</p>

      <p>“Master,” Nemesis said.</p>

      <p>“What is it, Nemesis?” I asked.</p>

      <p>“The accumulated damage counter has disappeared.”</p>

      <p>“Wait, you don’t mean that...”</p>

      <p>The moment I understood what she meant by that, Gouz-Maise had already begun moving.</p>

      <p>“ＧＩｉｉｏｏＵｕＪｊｊａａａＡａＡ！！”</p>

      <p>Unlike before, it now completely ignored me and started to run to where Hugo and Cyco had taken the carriages. Nemesis’ words and the abomination’s actions led me to the one reasonable conclusion.</p>

      <p>“Damn it!”</p>

      <p><em>The dominant grudge has changed!</em> I thought, panic setting in. I didn’t know if it happened because of the repeated restoration making the total grudge level drop or because I’d destroyed the heart once. However, it was obvious that the body was now being controlled by a grudge that didn’t belong to the Lich.</p>

      <p>From the fact that it was going after Hugo, it was safe to assume that it was someone he’d killed. Or perhaps it was only going after the children so it could kill them and stock up on more resentment.</p>

      <p>“What now?!” screamed Nemesis.</p>

      <p>“We’ll do what we have to!” I yelled back.</p>

      <p>To defeat Gouz-Maise, I had to find a means to make the Lich’s grudge the dominant one again. And I happened to have a plan for that.</p>

      <p>“Where is it...?” I asked while looking at the ground. “Found it.”</p>

      <p>I picked up a certain item and put it into my pocket rather than the inventory. With that, I was prepared. The only problem now was catching up to the monster. I needed something that could let me move fast enough to catch up to that semi-equestrian body.</p>

      <p><em>I don’t have the time to hesitate about this,</em> I thought.</p>

      <p>“Silver!”</p>

      <p>My mount instantly answered my call and ran over to my side.</p>

      <p>“...You’re doing <em>that</em> again?” asked Nemesis.</p>

      <p>“Not like I have any other options,” I replied. “Though it should be a bit better than before.”</p>

      <p>I grabbed a piece of detached Magingear armor that was lying on the ground and put it under my feet. Then I grabbed hold of Silver’s reins...</p>

      <p>“Away!”</p>

      <p>...and ordered him to move.</p>

      <p>He soon began speeding through the road. Holding on to his reins, I was trailing right beside him while using the armor plate to slide on the ground.</p>

      <p>Fortunately, the path we were following was a simple dirt road with no tree-like flora on it. It was good enough for the armor plate to slide on relatively smoothly. Though it was only slightly better than having my feet get dragged on the ground, I didn’t mind it. After all, I was certain that I could catch up to Gouz-Maise this way.</p>

      <p>“Don’t forget to heal when necessary,” said Nemesis.</p>

      <p>“I know.” I cast First Heal on myself.</p>

      <p>Water skiing: land edition was a little bit too hard on my legs. If I didn’t heal, the damage to my feet by the time I arrived would be severe enough to render me unable to walk.</p>

      <p>After a few minutes of such sliding...</p>

      <p>“I see it!” shouted Nemesis.</p>

      <p>“Me too!”</p>

      <p>...we found the giant creature. Its base form was that of a horse-man, but since Maise — the only one there who knew how to move such a body — wasn’t the one in charge, it wasn’t running as fast as it could. Silver’s speed was more than enough for us to catch up to it.</p>

      <p>“But man, this is bad,” I said. “I can see Hugo’s group less than a hundred meters away from it.”</p>

      <p>“At this rate, it will...” Nemesis cut her words short. “Can’t you use the Miasmaflame Bracers’ flamethrower?!”</p>

      <p>“No.”</p>

      <p>I couldn’t launch Purgatorial Flames because Silver’s movement speed was greater than the projectile speed of the fire. Not only would it not reach Gouz-Maise, it’d end up burning <em>us</em>.</p>

      <p>However, the creature was going to reach the carriages before we caught up with it.</p>

      <p>“Hey, wait,” I said. “I still have some of those, don’t I?”</p>

      <p>As I held the reins with my right hand, I used my left to reach into my inventory and take something out.</p>

      <p>“Those are...!” Nemesis seemed surprised.</p>

      <p>“Guess leaving some of these unused worked in our favor!” I cried.</p>

      <p>And so, I threw the items — the leftover White Lance Gems I’d used against Spirits while leveling in the Tomb Labyrinth — towards the abomination. Mid-air, the Gems changed into spears of light and went straight towards the back right leg of Gouz-Maise.</p>

      <p>These Gems were basically the market’s substitutes for offensive magic. Though the spell inside was a skill from low-rank jobs, it was purely anti-undead. Its effects were evident the moment the White Lances hit Gouz-Maise’s leg as it ran. A fist-sized hole opened up in its flesh, causing it to completely lose its balance and fall to the ground.</p>

      <p>“Go!” I shouted.</p>

      <p>Silver closed the distance between us and the abomination. I brandished Nemesis in my left hand, enchanted her with Silverlight, and had Silver go parallel to the creature.</p>

      <p>Syncing my attack with my horse’s running, I sunk the blade into Gouz-Maise’s body. Breaking through the many faces on its skin, my silver sword cut through its back.</p>

      <p>First, it was the horse-like back, then the part linking the horse and human bodies, then the back of the human-like body. I evenly split the spinal cord.</p>

      <p>“ＧａＥｉＩｒｕＵｒＲｕｕＯｕｕＵｅｅＥＡａａＥＫｅｅａＡＡ！！”</p>

      <p>Releasing a scream from all the mouths it had, the abomination writhed and tried to crush us, but Silver quickly fixed the distance between us and went out of its reach.</p>

      <p>“It’s not over yet!” I roared.</p>

      <p>My blade went through its back, cervical vertebrae, skull, and finally reached the brain.</p>

      <p>“ＧｈＨ！！ ＤａＳｑＱ！ ＡａＳｚ！ ｗＱａＡ？！”</p>

      <p>It released cries of pain that were completely unlike any previous ones and quickly got up with an intense jump. That action made me release the reins, and I was thrown several meters away, dropping to the ground with a roll. The impact made me turn off the Silverlight. However, it was fully worth it.</p>

      <p>“That reaction was...!” said Nemesis.</p>

      <p>“Found it!” I shouted.</p>

      <p>It had reacted to that damage in a completely different way than before. There was no room for doubt that the core was in its skull.</p>

      <p>“This is where we’ll end the battle,” I said.</p>

      <p>I took out the thing in my pocket and threw it upwards. It was a piece of a shattered crystal. Specifically — a piece of the Crystal of Resentment that the Lich had so treasured.</p>

      <p>“ＨＥＥＩＹＡＡＡＳＡＡＳＡＧＡＡＡＡＡＡＡ！”</p>

      <p>Upon seeing the shard, Gouz-Maise released a roar that seemed somewhat unlike the others. I felt like it was thick with desolation, frustration, and regret.</p>

      <p>“The accumulated damage counter is back!” shouted Nemesis. “He’s the one controlling it!”</p>

      <p><em>Just as planned.</em></p>

      <p>“Let’s bring it down to the ground!” I yelled.</p>

      <p>“All right!”</p>

      <p>I channeled the Silverlight again and used all of my STR, buffed by the Miasmaflame Bracers, to jump. The shock caused by me preparing for the jump made the ground under my right foot crack, but I paid it no heed. The jump covered more than ten meters worth of distance and put me right next to Gouz-Maise’s legs.</p>

      <p>“Ghh...!”</p>

      <p>Going all-out took a toll on my muscles and brought them close to tearing, while my right leg turned somewhat numb.</p>

      <p><em>Still, I’ll end it here and now!</em> I thought.</p>

      <p>Using my left leg — the one I’d landed with — as the origin, I put the impact and speed of the jump into my greatsword and swung it at the abomination’s front right leg.</p>

      <p>“SPLIT APAAAAAART!”</p>

      <p>With the sounds of a slash and Silverlight’s light burning, the blade smoothly cut through its skin, flesh, and skeleton. Gouz-Maise’s leg bone was completely cleaved open. The skin and flesh on the opposite side of the cut wasn’t enough to let the leg function and made the creature lose its balance. Obviously, it instantly tried to detach the wound and fix it, but...</p>

      <p>“Not happening! Haaaahh!!!” I followed up my attack with another slash aimed at the injury, causing its leg to break off completely. Without its support, Gouz-Maise lost all the balance it had left and fell to its right.</p>

      <p>I used my left leg to jump away from there and then ran straight towards the place where its head was about to land.</p>

      <p>The plan was simple — hit it with Vengeance is Mine.</p>

      <p>“With this...” I screamed.</p>

      <p><em>...it’s done!</em> I added silently. <em>Victory is ours! We’ve won!</em></p>

      <p>I suddenly had a feeling that we weren’t the only ones to think that. As the distance between me and Gouz-Maise’s head shortened, an inexplicable chill went down my spine, and not for the first time, either. It was much like the one I’d felt when I was about to launch my final attack on Gardranda.</p>

      <p>My eyes met with the two eyes on its face... and the third eye on its forehead.</p>

      <p>No. There was no such thing. That wasn’t an eye.</p>

      <p>The thing peeking out of its torn forehead was a gem-like stone that didn’t reflect any light.</p>

      <p><em>What is that?</em> I thought.</p>

      <p>But I knew exactly what it was. It was the abomination’s core.</p>

      <p>Why had it revealed it to us — the ones trying to destroy it?</p>

      <p>“...!”</p>

      <p>The answer to that came in the form of great gathering of energy that started to whirl around its forehead. It was reminiscent of something I’d already experienced today — the transformation of grudge into unbridled, overwhelming power.</p>

      <p>The <em>Deadly Mixer</em>.</p>

      <p>The magical destructive force the Lich had used for his last stand.</p>

      <p>I’d been too careless. The fact that Gouz-Maise didn’t manipulate undead or use magic debuff skills had made me believe that it couldn’t use this, either. However, Hugo had said that Gouz-Maise operated by transforming grudge into energy. Thus, it was perfectly reasonable for it to be able to use Deadly Mixer, which worked on the same principle.</p>

      <p>Still on the ground, the abomination fixed its aim on us as we closed in on its head. Just like myself, the thing was looking for a good opportunity to finish me off. Its grudge helped...</p>

      <p>No — its grudge was the very reason why it was able to gather its shattered intelligence and devise a plan to end the life of the one it was compelled to kill.</p>

      <p><b>“ＤｄＥｅＡａＡＤｄｄＬｌＬｙｙＹｙｙ ＭｍＭｉｉＩｘｘＸｅｅｅＥＥｅｒＲｒｒＲＲｒ！”</b></p>

      <p>Due to Gouz-Maise being an amalgam of grudge, the sorcery that it released, which converted grudge into destructive power, was nearly instantaneous.</p>

      <p>“Counter Absorption!” I screamed.</p>

      <p>I hastily extended Nemesis and used the last Counter Absorption I had in stock. That was enough to block its Deadly Mixer. However, that didn’t save me from being placed into checkmate.</p>

      <p>After all, the distance between us had become short...</p>

      <p><em>Short enough for its arms to reach me.</em></p>

      <p>Guarding against the Deadly Mixer had rendered me unable to move. Gouz-Maise used the opportunity to swing its boulder-like fists at me. The next moment, my body was launched into the air... and my consciousness faded.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Maiden of Vengeance, Nemesis</em></p>

      <p>Right after we used Counter Absorption to block Gouz-Maise’s Deadly Mixer, its large fists hit Ray’s body. Still holding me in my greatsword form, my Master was blasted to the side. Passing between the trees in the forest, he flew through the air like a leaf in the wind.</p>

      <p>The scene was reminiscent of a truck accident from Ray’s memory... and the time the Superior Killer had given him his first death penalty.</p>

      <p>“Ray!” I called out to him, but he didn’t answer.</p>

      <p>He had already lost consciousness. And his unconscious body was heading straight for a tree.</p>

      <p>“Ah!” I quickly went into my human form, held him from behind, and tightly closed my eyes. A moment later, I felt a strong impact and pain spread through my back. As the tree we hit shook, we both fell to the ground beneath.</p>

      <p>“Khh... Ah...” The pain was still there after we hit the surface. The impact I’d felt when squeezed between the tree and Ray — who was considerably larger than me — seemed to have made my ribs crack. However, I was certain that it prevented Ray from feeling any of that pain. That was more than enough for me.</p>

      <p>“Ray!” I called out to him, but he didn’t show any signs of waking up.</p>

      <p>Looking at his status, I saw that his HP was below 10% and that he had status effects such as Fainting and several Bone Fractures. Reaching into his inventory, I took out an HP recovery Potion and poured it over him. That healed some of his HP, but it didn’t take care of a single one of his status effects. The wounds were simply too deep. Also, Potion-type consumables were more effective when ingested, and due to being unconscious, Ray couldn’t drink any Potions I tried giving him.</p>

      <p>“Forgive me!” I poured the content of the Potion into my mouth and pushed my lips against his. I then did it two more times. With that, I got Ray to swallow an entire bottle’s worth of medicine.</p>

      <p>It became effective almost instantly, healing about a third of his HP and fixing the lighter Bone Fractures. His HP stopped going down, as well.</p>

      <p>Though Ray was still unconscious, it was clear that he was no longer on the verge of dying. However, I was unsure if I could look him in the eye after this.</p>

      <p>“Now’s not the time to think about that!” I cried desperately.</p>

      <p>We were still in a particularly dire situation. I could hear tremors encroaching towards us, warning me that Gouz-Maise was getting closer. If the aberration saw Ray in this state, it would instantly kill him.</p>

      <p>He would die a second time.</p>

      <p>“I won’t allow that.”</p>

      <p>I couldn’t stomach the idea of Ray being killed by that <em>thing</em>.</p>

      <p>“Ray,” I said.</p>

      <p>Still unconscious, my Master was lying near the tree we’d hit.</p>

      <p>I gently caressed his cheek and turned away from him. “I will buy you some time.”</p>

      <p><em>I believe in you. The evening after we lost to the Superior Killer, we made a promise. Back then, we were both weak and could do nothing against him. Thus, we agreed to become stronger and emerge victorious. Now, we both fight as one. I know you will wake up soon. So I will buy you all the time you need... because that is what will lead us to victory.</em></p>

      <p>“Here I go!” I transformed my right hand into a black blade. Though relatively small, it was about as strong a weapon as my sword form.</p>

      <p>I shoved myself in front of Gouz-Maise before it could find Ray. “You’re not getting past me, Gouz-Maise!”</p>

      <p>“ＤＨＩＳＳＳＳＩＩＩＩＵＡＡＡＡＡＡＡ！！”</p>

      <p>Every face on its body screamed. Each and every eye on its body swiveled and fixed on me.</p>

      <p>The counter within me didn’t react, which meant that it wasn’t being controlled by the Lich’s grudge. It had noticed me simply because I was a living creature.</p>

      <p>I had to face it and keep it occupied long enough for Ray to wake up.</p>

      <p>“Augh!” I used my right hand-blade to attack Gouz-Maise.</p>

      <p>My strategy was the same as Ray’s. I attacked it, was attacked back, and evaded.</p>

      <p>Though Gouz-Maise was tough and powerful, it wasn’t fast at all. Even I didn’t have any problems dodging its attacks.</p>

      <p>However, unlike when Ray had swung me, I didn’t seem to be able to hurt it at all. Without Silverlight, the most I could do was give it the most meager of cuts.</p>

      <p>My stats were far below Ray’s. Not only that, but I was out of uses of the one skill I could do by myself — Counter Absorption.</p>

      <p>Gouz-Maise, on the other hand, attacked me with nothing but blows that could kill me instantly. Unlike when I was a sword, a single direct hit would make my body shatter.</p>

      <p>Though a single mistake could be fatal, I pressed on. If I gave up, the possibility of Ray waking up and us emerging victorious would become zero.</p>

      <p>Neither Ray nor I could accept that. Thus, I fought to keep the possibility alive.</p>

      <p>This feeling had been within me ever since I was born. I was certain that Ray had it, as well.</p>

      <p>It was the one true thing that kept us tethered and connected.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Paladin Ray Starling, within a dream</em></p>

      <p>I instantly understood that I was dreaming.</p>

      <p>I still had the appearance of my <em>Infinite Dendrogram</em> avatar, but everything felt somewhat <em>hazy</em>, making me feel like I was in a lucid dream.</p>

      <p>Despite that, however, I had no trouble processing my situation and the state of my surroundings. For example, I could clearly see a child — a young me, to be precise — running somewhere.</p>

      <p>“Oh... I remember this,” I said.</p>

      <p>I could easily tell that this dream depicted the past. I even knew the time. It was the summer of 2035 — nearly ten years ago.</p>

      <p>Obviously, <em>Infinite Dendrogram</em> hadn’t been out yet, so my brother and I were playing different games.</p>

      <p>Back then — when he was 16 — Shu had been all about retro games and martial arts. He’d gradually improved his fighting skills by frequenting a long-running dojo run by the family of our sister’s friend, and he’d eventually become a considerably famous contestant through U-17 — a tournament for minors.</p>

      <p>My days back then had consisted of playing retro games with him while looking forward to seeing his matches. On days when those happened, I’d tended to head to the venues they were held in while being all giddy about it.</p>

      <p>Just like in this memory.</p>

      <p>“Man, what <em>is</em> this?” I muttered.</p>

      <p>My question was only natural. After all, I — as my avatar, Ray — was following my younger self. Not only that, but I had something unknown standing next to me. If I had to describe it with one word, it would’ve been “silhouette.”</p>

      <p>Yes — a humanoid silhouette was just floating in the middle of this normal-looking midsummer day. Its color was a mix of red and black, making it seem somewhat sinister. In my Ray form and still wearing all my armor, I was walking through this standard Japanese day with this silhouette by my side. The strangeness of this situation was another reason why I’d concluded that I was in a dream. Something this weird would only happen in a dream.</p>

      <p>The silhouette was completely silent.</p>

      <p>“How about you say something?” I spoke to it.</p>

      <p>“R e p l a y,” it said.</p>

      <p><em>R-Replay?</em></p>

      <p>“So this is your doing?” I asked.</p>

      <p>Since the silhouette’s voice was feminine, I momentarily assumed it was Nemesis, but I quickly got the feeling that it wasn’t.</p>

      <p>“I w a n t t o a s k.”</p>

      <p><em>Hey, I have several questions, too,</em> I thought.</p>

      <p>“T u r n s.”</p>

      <p><em>Turns...? So we’ll take turns asking questions?</em> I thought.</p>

      <p>“Okay,” I nodded.</p>

      <p>And so, myself and this dark red silhouette that seemed to be able to read my mind had a little information exchange.</p>

      <p>“W h e r e i s t h e b o y g o i n g?” asked the entity.</p>

      <p>“The venue where my brother’s having a tournament match,” I answered. “This is when, uh...”</p>

      <p>Of course, I knew exactly where I was heading, what was supposed to take place there... and what would actually happen.</p>

      <p>“This is when he participated in Un-kra’s U-17 tournament.”</p>

      <p>“U n - k r a?” The dark red entity questioningly tilted its head, but now it was my turn to ask a question.</p>

      <p>“Tell me,” I spoke up. “If this is a dream, then what’s happening to me? I’m quite sure I was in the middle of fighting Gouz-Maise. Did I get the death penalty?”</p>

      <p>That seemed unlikely, since it seemed like I was still in the game.</p>

      <p>“A l i v e . . . F a i n t e d.”</p>

      <p><em>So I’m unconscious, huh?</em> I thought. <em>...Wait, doesn’t that mean that I’m open to getting hit by a finishing blow at any moment?</em></p>

      <p>“W h a t ’ s U n - k r a?”</p>

      <p>“A death match-type martial arts tournament with no weight limit, no style limit, no rules besides the use of weapons and threats, and no end without KOs and give ups — Unlimited Pankration. Also known as ‘Un-kra.’”</p>

      <p>It was a popular tournament that had begun — if I recalled correctly — in 2027. With it allowing karate, judo, boxing, kickboxing, sumo, wrestling, Muay Thai, capoeira, koryu, and countless other styles, it seemed like an event from some fighting manga. The level of violence earned it lots of criticism, but it continued to be popular regardless.</p>

      <p>“. . .” The silhouette looked somewhat excited.</p>

      <p><em>Does it like martial arts?</em> I asked myself. <em>Or death matches?</em></p>

      <p>“My turn to ask,” I said. “How do you not know what Un-kra is if — as you said yourself — you’re the one replaying this scene?”</p>

      <p>Nemesis had had some of my memories since the moment she was created, so I found it weird that this entity didn’t.</p>

      <p>“O n l y . . . r e p l a y i n g . . . n e c e s s a r y . . . m e m o r i e s.”</p>

      <p><em>So it’s replaying only the memories deemed necessary, huh?</em> I thought. <em>But man, if it can scan my memories, yet isn’t an Embryo... just what is it? I guess I could ask it directly...</em></p>

      <p>“W h a t w i l l h a p p e n n o w . . . ?”</p>

      <p><em>I’d expect someone replaying the scene to know that much,</em> I thought.</p>

      <p>“Keep watching and you’ll see in a few minutes,” I said. “Now, my question: have we met before?”</p>

      <p>“Y e s,” it replied. “H e r e , w e a r e a l w a y s t o g e t h e r . . .”</p>

      <p>“What...?” I said, baffled.</p>

      <p><em>“Here,” as in, within </em>Infinite Dendrogram?<em> But the only person I’m always together with in this world is Nemesis.</em></p>

      <p>“B o y i s a l o n e , n o t d a n g e r o u s . . . ?” the silhouette asked while pointing at young me.</p>

      <p>“The security system observing public roads was already there ten years ago, so no, I wasn’t in danger of getting kidnapped or anything,” I said.</p>

      <p>I had trouble remembering when the security guard machines had become widespread. I had a feeling they’d already been there by the time I was born.</p>

      <p>“S t i l l , a c h i l d b y h i mself . . . ?”</p>

      <p>“It might’ve been my summer holiday, but it was still a normal weekday for adults, so yeah. ...Wait, wasn’t that a second question?”</p>

      <p>“Ask t w ice , t o o , Ray.” Though its words were still monotonous, it was gradually getting better at talking.</p>

      <p>“How can I regain consciousness?” I asked.</p>

      <p>“Wake u p w h e n f i nished w a t ching.”</p>

      <p>“Finished watching what?” I asked.</p>

      <p>“Your b i r t h.”</p>

      <p><em>M-My birth...?</em></p>

      <p>“Watch why y o u beca m e t h e Ray y o u a r e.”</p>

      <p>“...I see,” I said.</p>

      <p><em>The reason why I turned out to be the way I am, huh? Seeing the events that are about to transpire will be more than enough to know that.</em></p>

      <p>“Won’t be long now.” Saying that, I pointed at young me, who was walking before us.</p>

      <p>He was already near the venue and only needed to walk through a pedestrian crossing to get to the entrance. As eight-year-old me waited for the traffic light to change, there was an even younger girl standing right next to him. She had a childish accessory in her hair, but due to the poor way she’d put it on, it flew off the moment a stronger gust of wind went by. It fell on the road.</p>

      <p>The light was still green for traffic, and when the girl tried to go and take her accessory, she didn’t notice the truck headed right for her. A few moments before it could hit her, the young me ran in, took her hand, and tried pulling her off the road. However, he was too slow and weak.</p>

      <p>At eight years old, he was far too powerless to take her to safety before the truck hit them both. As a result, all young me did back then was simply increase the number of victims. And so, the truck was about to run over two children.</p>

      <p>However, a moment later, a person who’d come over from the other side of the road took them both and jumped out of the way.</p>

      <p>Normally, that person wouldn’t have made it. In fact, normally that person wouldn’t have made it even if he’d come over the moment the girl ran out to the road. However, the feat was perfectly possible for this person. Due to his astounding leg strength, he’d closed the distance in but a moment and swiftly taken the girl by the hand.</p>

      <p>However, there was also me — who was nothing but a burden at this point. Due to me jumping out to the road, the person needed to take both of us. And though he was capable of jumping while holding two children, it — naturally — slowed him down.</p>

      <p>I remembered it clearly. After a moment of being airborne, there was another impact. Then — while still being held — I rolled on the ground.</p>

      <p>Even so, I didn’t feel any pain. The person holding us did a great job protecting us. I could hear some people nearby start to scream. I, on the other hand, was at a loss for words.</p>

      <p>That was only natural. After all — the one who’d saved us was my brother.</p>

      <p>Knowing I was coming, he’d walked out to meet up with me. And it just so happened that he’d saw us in great peril and saved us. He’d paid a price for that — his right leg was hit by the truck. With how blue-black and swollen it was, you didn’t need to be an expert to know that it was broken.</p>

      <p>Shu was about to participate in the final match of the tournament. However, right before it happened, his leg got shattered...</p>

      <p>...and it was all because of me trying to save the girl while being completely powerless to do so.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="chapter6">
    <div class="main">
      <h1>Chapter Six: Beyond the Radix Point</h1>

      <p><em>At a certain place in the City of Duels, Gideon.</em></p>

      <p>“Heyoo! Haven’t seen you fur a while, Figgy.”</p>

      <p>“Oh? I know that voice, but not the face. A new costume, Shu?”</p>

      <p>“You assume correctly. This is an MVP special reward called ‘Hind Bear.’”</p>

      <p>“...Another costume, I see.”</p>

      <p>“Yeah, it’s another costume. Got a problem with that?”</p>

      <p>“How many do you have by now?”</p>

      <p>“Sorry, but that’s not something I bear in mind. All I know is that I only have one that <em>isn’t</em> a costume.”</p>

      <p>“...I see there’s a bit of a bias.”</p>

      <p>“<em>Every</em> special reward besides the thing I got from Gloria is a costume! This makes bearly any sense!”</p>

      <p>“It’s quite unusual to be able to defeat so many UBMs, though.”</p>

      <p>“Sorry, but those words have bearly any weight when said by <em>you</em>, of all people.”</p>

      <p>“You’re probably right. Oh, it just hit me... You’ve worn bear costumes since that time, right?”</p>

      <p>“‘That time,’ as in...?”</p>

      <p>“The time we met.”</p>

      <p>“Oh yeah, I was beary ursine back then, too. Though that one was store-bought.”</p>

      <p>“It was also the first time we fought UBMs, right?”</p>

      <p>“Yeah. That takes me back.”</p>

      <p>“We sure had a hard time handling them.”</p>

      <p>“It happened when <em>Infinite Dendrogram</em> had only been out for only ten or so days, right? Our levels were still pretty low.”</p>

      <p>“Yep, that sounds about right.”</p>

      <p>“I’m still impressed that we were able to win... To be honest, looking back at it, it’s actually beary weird that we did.”</p>

      <p>“But you didn’t show any signs of giving up back then, right?”</p>

      <p>“Ha ha ha! As if I would. Like I said back then: ‘The possibility is always...’”</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Paladin Ray Starling, within a dream of the past</em></p>

      <p>On that summer day of 2035, my brother had gotten into an accident while protecting us. His life hadn’t been in danger. However, his right leg — hit by the truck — had been seriously injured. The flesh was swollen, the blood vessels under the skin had burst, and the bone was broken. In a game, healing magic or items would’ve made short work of such a wound, but in reality, it was a grave injury that would need quite a while to be fixed.</p>

      <p>It was bad enough for him to be hospitalized. And the tournament’s final match was supposed to happen about an hour after he’d received it.</p>

      <p>“Nothing t h a t cou l d be done?” asked the entity.</p>

      <p>“Indeed,” I nodded. “It was hopeless for him.”</p>

      <p><em>...If reason had its say, anyway,</em> I thought.</p>

      <p>I could see the passersby begin to surround us and make a stir. Some were panicking, others were calling ambulances, while some journalist-looking sorts who were focusing on my brother as a fighter in the final match called out to him with a “Mr. Mukudori!”</p>

      <p>Standing next to my brother — who was lying on the ground — was young me and the girl, both crying. The girl was probably crying because of the fear of being involved in such an accident, while I was crying due to the fact that Shu had gotten injured because of me.</p>

      <p>I could clearly remember the things I’d thought back then. It could be summed up as guilt about what I’d done to him mixed with begging someone to help him.</p>

      <p>In response to all the sympathetic looks and my sentiment, my brother — still on the ground — looked at young me for a moment and...</p>

      <p>“Owie!”</p>

      <p>...jumped up after saying that in a tone one would use when accidentally hitting their head on a ceiling frame.</p>

      <p>Everyone was dumbfounded.</p>

      <p>The young me, the girl, and the passersby all looked at him with eyes open wide with shock. To add to that — even the silhouette right next to me seemed surprised.</p>

      <p>“Well, darn... This sure looks broken,” he said as he looked down on his broken right leg while standing on his healthy left. Yet again, his tone was unfitting, making him sound like he’d broken a piece of a plastic model rather than his limb. And no, it wasn’t “better than it looked” — his leg was severely injured.</p>

      <p>“That r e a ction is s t range.” The silhouette made a comment.</p>

      <p>“Well, it’s him we’re talking about, so yeah.” I was used to seeing my brother act and talk like that by now. But the young me still hadn’t had much exposure to his eccentricity at that point in time, so he was reasonably shocked.</p>

      <p>“I-I just called an ambulance! It should be here soon! Please don’t move too much!” one of the passersby told my brother.</p>

      <p>However, in response, Shu said, “Eh? Oh... Well, thank you for the concern. But there’s no need for that right now.”</p>

      <p>“‘No need’?” a number of people simultaneously repeated his words in disbelief.</p>

      <p>“I have a final match to participate in over at that building, so I’ll go to the hospital after that’s done,” he said.</p>

      <p>The moment he’d said that, I’d felt as though time had stopped.</p>

      <p>It seemed like I and everyone else on the scene — except for my brother — was thinking exactly the same thing: <em>What is this guy saying?</em></p>

      <p>From its reaction, it was safe to assume that the silhouette shared the sentiment.</p>

      <p class="centerp section-marking">◇</p>

      <p>The place of the dream changed, and we were now in Shu’s waiting room.</p>

      <p>Moments before this scene, this place had included doctor who’d given my brother some first aid and the master from his dojo who’d tagged along to see the fight, but they were no longer here. The only ones present now were me and Shu.</p>

      <p>His right leg was covered in a compress and bandaged. But that was all. There was no cast or any kind of support on it. After all, Shu was about to go fight in the match. He’d refused casts and supports because they would’ve been counted as weaponry. The injury was bad enough to need an operation, and yet...</p>

      <p></p>

      <p>“. . . H e w ill fight?” asked the entity.</p>

      <p>“Yeah,” I nodded.</p>

      <p>Due to the lack of expression on the silhouette, it was hard to tell what it was thinking, but even I could tell that it was half amazed and half shocked. “No one s t o ps him?”</p>

      <p>“In a normal martial arts tournament, the fight would’ve been called off due to doctor’s orders, but this is Un-kra we’re talking about.”</p>

      <p>Again, Un-kra allowed anything besides the use of weaponry and threats, and would only end with KOs and give-ups. It was actually strange that such a tournament could exist in this day and age.</p>

      <p>“But it’s b roken,” the silhouette protested. “He ca n win? Doesn’t nee d right l eg?”</p>

      <p>“The koryu martial arts dojo my brother went to is based around blows, rather than throws and such,” I answered. “Naturally, kicks are a crucial part of it, and proper leg control while punching is highly important, as well.”</p>

      <p><em>Now that I think about it, that style is ridiculously manga-like,</em> I thought. <em>Seriously, during the demonstrations I saw, their kicks were breaking logs as thick as people’s torsos. What was the name of that kick, again? All I can remember is that it sounded pretty cool.</em></p>

      <p>“Is h i s opponent w eak?” asked the entity.</p>

      <p>“The opponent in the final match was Gregory Asimov Kaiser,” I said. “He was nearly two meters tall and weighed over a hundred kilos, most of which was well-trained muscle. Being well-versed in blows, holds, throws, and locks, he was easily the strongest student participant at that time. He’s now doing his best to be the top professional martial artist.”</p>

      <p>“Student... c h ild... child?”</p>

      <p>“He was seventeen at that time, which is underage, so yeah.” Also, even after ten years had passed, Gregory was still a well-known face in the end-of-year martial arts shows. Last New Year’s Eve — when my brother had returned home for the occasion — I could recall us both watching TV and seeing Gregory still doing his thing.</p>

      <p>“Brot her can’ t wi n, n o?”</p>

      <p>“He would’ve had little chance even if he was in top form, and yet he went in with a broken leg,” I said. “It’s only reasonable that people tried to stop him.”</p>

      <p><em>Not like he listened,</em> I thought. <em>Now that I think about it, the master from his dojo was one of the few who didn’t try to make him reconsider.</em></p>

      <p>“Shu, don’t! If you fight someone so strong with <em>that</em> wound, you’ll die!” The young me was still trying to get him to withdraw from the match.</p>

      <p>That was only natural. After all, when Shu had gotten injured because of me, I’d been overwhelmed by great fear. And yet, despite his state, he was about to go on and do something reckless, if not downright crazy. My fear back then hadn’t allowed me to stay silent and let him do it.</p>

      <p>“Well, I guess doing the Kodachi with my leg like this isn’t the best idea,” said Shu, completely nonchalant.</p>

      <p><em>Oh, yeah,</em> I thought. <em>That’s what the kick from his school is called.</em></p>

      <p>“Kodachi,” the wood-splitter or “battle ax,” was a frontwards roundhouse kick aimed at the opponent’s head. My brother was particularly good at it. The kick which — as the name implied — was strong enough to split wood and seemed capable of doing the same to people’s heads was feared as much as Gregory.</p>

      <p>However, with his right leg broken, my brother couldn’t do it anymore. He couldn’t do it with his left leg, either, since he would’ve had to use his right as the pivot leg. Shu was going to have to fight without his ultimate kick.</p>

      <p>That meant only one thing — he had no chance of winning.</p>

      <p>He’d gotten the wound because of me. And since it was going to be the reason for his defeat — or perhaps even death — I couldn’t stop blaming myself. Thus, I was trying to stop him.</p>

      <p>However, Shu showed no sign of changing his mind. He was always like that. Though facetious and eccentric, my brother wasn’t one to easily let go of something he’d resolved to do.</p>

      <p>Once the young me came to understand that trying to convince him was useless, he bowed his head in sadness.</p>

      <p>“I shouldn’t have jumped out to the road...” he muttered to himself.</p>

      <p>“Hmm.” Hearing that, Shu thought about something, leaned over to the young me, placed his hands on his shoulders, and looked him in the eyes. “Honestly, Reiji... I think you would’ve regretted it more if you <em>hadn’t</em> tried to save her.”</p>

      <p>“B-But you’re the one who actually saved her!” the young me protested. “I couldn’t do it by myself! All I did was get you hurt!” The young me wept about his powerlessness. All he felt was regret, grief, and anger at himself.</p>

      <p>“You’re right. I got hurt.” Shu agreed with me. “But you know, it’s entirely possible that I wouldn’t have saved her if you hadn’t tried it.”</p>

      <p>“Eh?” That surprised the young me.</p>

      <p>“Because you tried to save the girl, I — without thinking — jumped out to save both of you,” he explained. “In the end, she was saved because of <em>your</em> choice.”</p>

      <p>That might’ve been the truth, or just a lie to make me feel better. However, there was sincerity in his eyes.</p>

      <p>“That’s good enough, Reiji,” he said. “There’s no need to regret the act of choosing something. After all, it’s the ultimate premise to grabbing hold of the possibility leading to the future you desire.”</p>

      <p>He added a lot of emphasis to the words that followed.</p>

      <p>“After choosing something, all that matters is whether you can see it or not and grab hold of it or not.”</p>

      <p>“Grab hold of it or not?” the young me asked.</p>

      <p>“Yeah. The possibility is always...”</p>

      <p>These words of his...</p>

      <p>“The possibility is always there — <em>with your will</em>. No matter how small, no matter behind how many zeros beyond the radix point it lies — it <em>always</em> exists. The only time the possibility isn’t there is when you’ve given up on grabbing hold of the future you desire. As long as you don’t give up and keep making choices towards the future you want to see, the possibility won’t disappear, even if it’s far beyond the radix point.”</p>

      <p>These words of his were still etched onto my very core.</p>

      <p>“That’s why your choice to save the girl back there wasn’t a mistake,” he added.</p>

      <p>“Shu...” the young me said.</p>

      <p>He gave the young me an intrepid smile and stood up. “Today’s the perfect chance, so I’ll show you the ropes. You’ll soon see what it means to give your all to grab hold of the possibility.”</p>

      <p>With those words as his last, Shu left the waiting room and used his crutches to make his way to where the match would take place.</p>

      <p class="centerp section-marking">◇</p>

      <p>That was when the dream portraying my memories reached its end. The venue we were in vanished, leaving only an empty dreamscape vaguely reminiscent of a pale haze.</p>

      <p>The young me and my brother were nowhere in sight, meaning that the only ones here now were me, as Ray, and the silhouette.</p>

      <p>“Is it o v er?” asked the entity.</p>

      <p>“Well, the match was supposed to happen right after this,” I replied.</p>

      <p><em>Though, if the dream’s objective was to display my roots, it makes sense for it to end with the exchange between me and Shu,</em> I thought.</p>

      <p>“Can I ask a n o ther thi n g?”</p>

      <p>“Sure.” I knew exactly what it was gonna ask.</p>

      <p>“Di d h e win?”</p>

      <p>“He did.”</p>

      <p>Indeed — Shu had gone into the final match against Gregory and actually emerged victorious.</p>

      <p>“H o w?” the silhouette asked.</p>

      <p><em>Man, I really don’t wanna say it,</em> I thought. <em>Though I don’t want to keep the silhouette in suspense, either, so I guess I will.</em></p>

      <p>The news about my brother’s right leg being rendered useless had already spread among the people in the venue. Even the spectators around my seat had been talking about it. Also, the way Shu had gone towards the ring — crutches and all — had made him look extremely pitiful. While he was climbing into the ring, he hadn’t let his right leg touch the floor beneath him. Having to use his left one alone had given him a really hard time and gotten people to understand just how bad of an injury it was.</p>

      <p>For some reason, the people already knew that it was caused by an accident he’d gotten into while saving children, making him get lots of sympathetic glances. Some martial artists were praising him for not withdrawing from the match after getting such a grave wound, calling him “a true fighter.”</p>

      <p>His opponent, Gregory, shared the sentiment. “It’s a shame I don’t get to fight you at your best,” he said. “Though I’m sure that one day we’ll get to go all-out on each other.”</p>

      <p>Though he looked menacing, Gregory was actually quite a gentle person.</p>

      <p>“I’m sure we will,” replied my brother in a rather cheerful manner.</p>

      <p>There was a difference in height. In weight class. And a critical problem with the state of one contestant. The outcome was clear. What was about to happen was nothing but a ritual-like event meant only to preserve my brother’s pride and honor as a martial artist.</p>

      <p>That was what everyone present thought.</p>

      <p>Thus, the gong sounded... and Shu launched from his right leg, performed Kodachi, smacked Gregory across the jaw, and knocked him unconscious.</p>

      <p>The match had ended there.</p>

      <p>The fifth Unlimited Pankration U-17 had ended with my brother’s victory.</p>

      <p>“That was nuts,” I said.</p>

      <p>“...It <em>w a s</em> broken, righ t?” asked the silhouette.</p>

      <p>“Yes, he actually used his broken right leg to launch a jaw-cracking kick that gave his enemy a cerebral concussion and won by one-hit KO,” I said.</p>

      <p>Naturally, no one had expected Shu to do something <em>that</em> intense with his injured leg. Gregory certainly hadn’t seen it coming and hadn’t been ready to guard against it, letting my brother land a clean hit.</p>

      <p>“...Unfai r.”</p>

      <p>“You can say <em>that</em> again,” I said. He’d made all the sympathy he’d gotten from the audience go to waste.</p>

      <p><em>Now that I think about it, it was kinda suspicious how the very reason for that sympathy — the news of him getting into that accident — spread throughout the whole venue,</em> I thought. It had allowed him to perform the perfect surprise attack. That was enough reason to believe that Shu had actually done something to make it happen.</p>

      <p>And with that in mind, it was possible to assume that even his cheerfulness before the match had actually been a strategic move in preparation for the kick.</p>

      <p>Whatever the case, that reckless attack had naturally made the injury worse, extending the recovery period from one month to three months.</p>

      <p>Once I’d met my brother after the event, he had put up the most obnoxiously proud face and said something along the lines of “<em>This</em> is what it means to give your all to grab hold of the possibility!”</p>

      <p>To which I had replied with, “Bro, you idiot! What are you doing?!” while throwing a towel at his face.</p>

      <p><em>Oh yeah,</em> I thought. <em>That was actually the point when I started calling him “bro.”</em></p>

      <p>“What an inte n s e brother,” commented the silhouette.</p>

      <p>“Indeed he is,” I nodded.</p>

      <p>Even though he’d seriously ruined the words he’d said back in the waiting room, they were still etched deep into my heart. That was the reason why I was always ready to reach for the possibility leading me to a future without regret or bad aftertastes.</p>

      <p>“That was probably why the replay ended after the talk in the waiting room,” I said. The match itself wouldn’t have added anything of value.</p>

      <p>Though it was probably a good show of his “grab hold of the possibility no matter what it takes” stance, I wasn’t the type to take the mentality <em>that</em> far. I’d also never thought I’d get into a situation where I’d have to, but...</p>

      <p>“Despe r a te times, desperate m e a sures,” said the silhouette.</p>

      <p>“Yeah,” I said.</p>

      <p>With the memory replay being over, I was about to wake up. Once that happened, I would have to face Gouz-Maise in an even worse situation than before. Thus, if I was going to seize the possibility, I’d have to get some new methods.</p>

      <p>“Well, I’ll have a go at it, anyway,” I said.</p>

      <p>“I s ee,” nodded the silhouette. “The n, wake up.”</p>

      <p>It seemed to me as though the entity smiled.</p>

      <p>“Ray, hav e a question?”</p>

      <p><em>Well, there’s one thing I want to know,</em> I thought.</p>

      <p>“All right, I’ll ask directly... What are you?” My own conjecture wasn’t enough to figure out its identity.</p>

      <p>“...Eheh e h.” I couldn’t see any eyes on the dark red silhouette, but I could easily tell that it looked into mine and laughed. “You wo n ’t mas ter me if you on l y use the flames, Ray.”</p>

      <p>Those words were enough for me to understand what the entity was. “Y-You’re Gardran...?”</p>

      <p>Before I could finish that sentence, the world of dreams began to fade.</p>

      <p>“I am a fragment. A power left unused because of you defeating us while we were incomplete. I am the life and mind that the demon failed to birth. The life that was reborn as your item. I am the ‘me’ that wants to know the man who slaughtered my mother.”</p>

      <p>The silhouette — Gardranda — spoke while its appearance gradually became less vague. Its form wasn’t that of the great demon, but that of a small girl with horns.</p>

      <p>“I understand you now,” she said. “So please, understand <em>me</em>, too.”</p>

      <p>And so, our world of memories and dreams began fade.</p>

      <p>“Wake up, use all you have, including me and Nemesis, and grab hold of the possibility, okay?” She spoke those words, and reality came flooding back.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Maiden of Vengeance, Nemesis</em></p>

      <p>As I had evaded its attacks and used feints, I’d bought about five minutes of time. My body was covered in many light wounds. Though I was able to dodge its legs and fists, I was getting damaged by the pieces of the ground and trees that it shattered.</p>

      <p>Though it hurt to admit it — my non-weapon form was weak. Since I had no means of healing myself, I wouldn’t last long.</p>

      <p>Gouz-Maise, on the other hand, was completely unharmed. Since my blade couldn’t even give it as much as a scratch, it didn’t even need to use Automatic Restoration.</p>

      <p>“ＢｏＵｓｙｕＳｓＡｄａＳＡＡ ａａＡ!” Even though it wasn’t hurt, Gouz-Maise was irritated that it couldn’t kill me and expressed it by letting out enraged roars and secreting some indescribable bile from the faces all over its body.</p>

      <p>The sight was downright vile.</p>

      <p>The creature was the very embodiment of the vileness involved in any gathering of corpses. Both its appearance and way of existing were revolting enough to turn the very sight of it into something that made my mind creak. That was how I felt about undead in general.</p>

      <p>Back when Ray and I had visited the Tomb Labyrinth, I’d been scared beyond words. I didn’t know why, but undead were extremely dreadful to me. When looking through Ray’s memories for an answer, I’d thought that I was simply weak to horror.</p>

      <p>However, that wasn’t it. I had come to understand it after facing the undead in the dungeon and the abomination before me. I wasn’t afraid of their appearances. What I found dreadful was their very existence.</p>

      <p>They were dead, yet they didn’t go to any afterlife, nor were they reborn.</p>

      <p>They were dead, yet they continued to walk among us.</p>

      <p>That nightmarish state was so frightening it made my heart tighten.</p>

      <p>I didn’t know the reason why.</p>

      <p>However, my heart was telling me that I simply couldn’t let it continue on like this.</p>

      <p>“My heart, eh?” I murmured.</p>

      <p><em>How peculiar,</em> I thought. <em>According to Ray’s knowledge, I am nothing but an AI inside a game. Do I really have a heart? Wait.</em></p>

      <p>“At the very least, I have enough of it to feel one thing,” I said.</p>

      <p>It was certainly there. I had a heart that felt something for Ray.</p>

      <p>“Heh heh.” I couldn’t help but laugh. There was no denying that it was quite comical. After all — he was the very cause of my existence. Yet, the way my heart felt about him was no falsehood.</p>

      <p>I...</p>

      <p>“Ｄ Ａ ｓ ｄ ａ Ｓ Ａ Ａ ａ Ａ ａ ａ ａ Ａ!”</p>

      <p>“You just <em>had</em> to ruin the moment, didn’t you, you uncouth lout?” I snapped.</p>

      <p>Lengthy protrusions squirmed out of several mouths all over Gouz-Maise’s body.</p>

      <p>They were tongues. The rot dripping down from them wasn’t the only thing suggesting that they were quite unlike those of humans — their very shape was reminiscent of the tongues used by chameleons or frogs from Ray’s memory.</p>

      <p>It was obvious what it was planning to use them for.</p>

      <p>Clearly, it had grown sick and tired of my constant evasion. Much like snakes raising their heads, the tongues were readied to strike at me.</p>

      <p>“I won’t be able to dodge this,” I said. Not only was I injured — I simply didn’t have the skill and ability to evade such an attack. There was no way for me to stall it any longer.</p>

      <p>“...Heh heh.”</p>

      <p><em>Look at me, Ray,</em> I thought. <em>This is how strong I am by my lonesome. This is the extent of what I can do when I’m just by myself. While alone, I can’t go any farther than this. So...</em></p>

      <p>“So just come here already.”</p>

      <p>The moment Gouz-Maise was about to pierce me with its tongues...</p>

      <p>“Sure.”</p>

      <p>...I heard that single word, which was followed by a stream of dark red fire that burned the fleshy extensions.</p>

      <p>The fire on its tongues made Gouz-Maise wail in anguish. At this point, the blazing, dark red flames were familiar to me. After all, the one commanding them was my Master.</p>

      <p>“You sure took your time, Ray,” I said.</p>

      <p>“Sorry, a little dream made me oversleep,” he replied.</p>

      <p>“You shouldn’t keep a lady waiting too long,” I scolded. “But, well... you made it in time, so I don’t mind.”</p>

      <p>“Thanks, Nemesis.”</p>

      <p>Hearing that made my expression turn softer, but I made a conscious effort not to show it.</p>

      <p>“So, shall we continue?” I asked. “We’re out of Absorption uses and have wounds all over us. The situation is worse than before. Do you think we can do it?”</p>

      <p>“Yeah,” Ray nodded. “I remembered something... no, two things. We’ll use them to defeat this thing.”</p>

      <p>“Remembered two things? Care to share?”</p>

      <p>Before answering my question, Ray wore an intrepid grin. “Something I neglected to use... and my brother’s words.”</p>

      <p>The moment he said that, I instantly understood what he was thinking and came to know his plan.</p>

      <p><em>Oh my,</em> I thought, both impressed and slightly shocked.</p>

      <p>“Heh heh! Are you insane?” I asked.</p>

      <p>“Nope,” he answered.</p>

      <p>“This will be an act of pure madness with a low probability of success. It will be as dangerous as a walk on a tightrope, won’t it?!” I was thoroughly puzzled by his thought process.</p>

      <p>“If the possibility is there, I’ll just give my all to seize it,” he said.</p>

      <p><em>I see,</em> I thought. <em>Then I shall accompany you.</em></p>

      <p>“Though, the chance of this plan leading us to victory is about... 30%, and that’s being generous,” he added.</p>

      <p><em>About a third, eh?</em></p>

      <p>“Seems enough to me,” I said.</p>

      <p>“More than enough,” Ray agreed. After that exchange, I took my sword form and became Ray’s weapon.</p>

      <p>“Let’s win, shall we?” I said.</p>

      <p>“Yeah, let’s win.”</p>

      <p>And so, turning to face the abomination that was Gouz-Maise, Ray and I became one.</p>

      <p class="centerp section-marking">◆◆◆</p>

      <p><em>Revenant Ox-Horse, Gouz-Maise</em></p>

      <p>The creature the world proclaimed to be “Revenant Ox-Horse, Gouz-Maise” was enraged.</p>

      <p>Since the moment it’d been born, Gouz-Maise had felt only indescribable amounts of hatred. That was because the creature was an actual amalgam of the rage and resentment left behind by the deceased. It was the <em>result</em> of those who had left nothing else behind but regret.</p>

      <p>“ＧＵｄｓＦＤｇａａｄＡＳａａＡＡａＡｄＳｄＡＡａ!”</p>

      <p>That was <em>all</em> that Gouz-Maise was.</p>

      <p>The dead that were its base were those who had lived by avarice and vice — people who had failed to leave behind anything but their grudge. If at least one of those inside had died with love in their heart, this amalgam of death probably wouldn’t have grown this powerful and might not have become a UBM. But alas, that hadn’t happened, and Gouz-Maise — as it was now — would never reflect upon itself. The grudge boiling within the creature was enraging it, compelling it to use its might against the living and forcing them to join the grudgeful chaos within it.</p>

      <p>However, at this point in time, Gouz-Maise was even more enraged than usual. That was because the puny, mouse-like living creature below it couldn’t die.</p>

      <p>It was a Master.</p>

      <p>Masters were immortal.</p>

      <p>Killing them just made them momentarily disappear. However — that was the extent of it. These living creatures would simply brush off that transient death as if it was nothing and then just continue existing.</p>

      <p>This one, in particular, had faced Gouz-Maise and tried to prevent it from drowning other living creatures into its grudge.</p>

      <p>Even if hurt, left alone, or shattered with a punch, the Master would continue getting in its way.</p>

      <p>Gouz-Maise couldn’t stomach that. It didn’t have a mind to understand why, but it just couldn’t tolerate that Master.</p>

      <p>However, it was about to be over. Gouz-Maise had a means of ending it. It was a powerful spell used by one of those who’d become the creature. The undead intended to finally kill the Master by casting it once again.</p>

      <p>Once that was done, it intended to go to town. A significant part of its grudge wished to kill the people inhabiting the places within its memory and make them join the grudge within it. It believed that — in doing so — it could become more powerful and thus become able to sink even more living creatures into its grudge. And it would continue until the whole world was sunk.</p>

      <p><em>Yes... yeah, I... we are all dead here. So, a world where people still live is a mistake. It’s... wrong, it’s so wrong! All of it, all of it, all of it, all of it, all of it must sink into the abyss. Kill and consume everything there is in this world.</em></p>

      <p>Gouz-Maise’s consciousness was like a colored marble that mixed objectivity and subjectivity. Chaotic as its mind was, however, it could still become puzzled. Not by its own thoughts, obviously, but by the actions of the puny one below.</p>

      <p>The puny one used his left hand to push a cloth against his mouth... while the bracer on his right was directed at Gouz-Maise.</p>

      <p>Those bracers released fire. Gouz-Maise already knew that much. However, so far, only the left bracer had released the flames, and it had no recollection of the right one ever doing the same.</p>

      <p>As Gouz-Maise’s chaotic mind tried to figure out what the right bracer released...</p>

      <p>“Hellish Miasma... full power!”</p>

      <p>...the blond man declared something, making a dark purple smoke gush out of his right bracer with great intensity.</p>

      <p>Gouz-Maise wasn’t familiar with this attack. It didn’t know what it was, its effects, or what the enemy was planning. Using its limited reasoning power, Gouz-Maise tried to understand what it was, and it didn’t take long for it to come to a conclusion.</p>

      <p>The smoke was harmless to it — beneficial, even.</p>

      <p>It was miasma. A poisonous mist that afflicted, weakened, and led the living through a slow death.</p>

      <p>To Gouz-Maise — an undead — it wasn’t much of a problem.</p>

      <p>Because it had living cells, it couldn’t avoid the debuffs, but their impact on its body was insignificant. In the first place, slight amounts of Weakness and Intoxication were meaningless against an amalgam of corpses. Even if Gouz-Maise received the debuffs, their effect was negligible. Though Poison damaged its cells, it wasn’t anything that couldn’t be taken care of by its Automatic Restoration.</p>

      <p>Thus, because it only pushed living people closer to death, the miasma was a net positive for Gouz-Maise. Trying to figure out why the man had done something so foolish, it finally became aware of a certain fact.</p>

      <p>It couldn’t see anything. The dark purple smoke had spread all the way up to the base of its throat, and not even the use of the eyes on the faces all over its body could help it make sense of the surroundings.</p>

      <p>This smokescreen was exactly what the man had intended. Even though the miasma was dangerous to him, he’d used it regardless just to hinder Gouz-Maise’s vision.</p>

      <p>“ＤａａＤＦｄＺｆａａＡＳｓａＤＡＳａｓＡａＡａａＡＡ!” Gouz-Maise roared and began rampaging wildly. Its ground-shattering, indiscriminate movements were meant to crush the man, who was surely still around. Gouz-Maise kept stomping for a while — not minding the damage it was doing to both the surface and the faces on its legs — yet it didn’t feel anything living under its feet.</p>

      <p>It couldn’t hit the man. Nor did it know where he was. That situation made it both angry and uneasy, but within its chaotic grudge, there was a composed part that came to a certain conclusion.</p>

      <p><em>The man is aiming for the head. However, he’s both puny and cannot fly. To attack the head, he will try to cut the legs. At that moment, we must cast the ultimate spell and kill him along with the limb he attacks.</em></p>

      <p>The plan involved sacrificing a part of itself. However, due to Gouz-Maise possessing Automatic Restoration, it wasn’t a heavy price. Even if the man had hidden himself, there was still only one way for him to emerge victorious. As long as Gouz-Maise didn’t let him do that, its victory was assured. The man could still use the flames, but they only gave it pain and never came close to being fatal.</p>

      <p><em>Next moment... The next moment we feel pain, we will launch the spell towards it,</em> thought Gouz-Maise. <em>The cost of using it a second time is heavy. However, it’s a small price to pay to kill him.</em></p>

      <p>With those thoughts, it focused its attention on its legs and gave the body’s control to the grudge that could use the spell.</p>

      <p>Then, it exposed the core in its head and readied itself to cast the magic.</p>

      <p>Suddenly, Gouz-Maise’s back left leg was touched, causing its semi-rotten neural system to send it a signal.</p>

      <p>“Ｄ Ｅ ｅ ｅ Ｅ ａ Ａ Ｄ ｄ Ｌ ｙ ｙ Ｙ ｙ Ｍ ｉ ｘ ｅ Ｅ Ｅ ｅ ｅ Ｒ ｒ ｒ Ｒ Ｒ Ｒ ｒ Ｒ!!”</p>

      <p>A moment later, it launched the spell with the intention to disintegrate both the man and its own leg.</p>

      <p>The speed at which it had turned its head to do that caused the rotten skin on its neck to rip and shred apart, but it didn’t care. Though its aim was extremely forced, the power of the attack was great enough to make its back left leg disappear. Gouz-Maise lost its footing and screamed due to the searing pain it felt, but the damage wasn’t something that couldn’t be handled by its restorative ability.</p>

      <p><em>What’s important is that we killed hi—</em></p>

      <p>The second that thought went through its head, the man that was supposed to be disintegrated jumped up on Gouz-Maise’s back.</p>

      <p>It couldn’t understand what had happened. Countless grudges within it became astir and caused it to momentarily stiffen.</p>

      <p>Then, it noticed the man’s state.</p>

      <p>His right hand was covered in blood and held a familiar piece of flesh. It was a part of Gouz-Maise’s body, and — by looking at his mouth — it was easy to tell that he’d <em>taken a bite of it</em>. Lastly, he held a halberd with a black flag flying behind its ax blade.</p>

      <p>Just now, with abnormal swiftness, he’d jumped on Gouz-Maise’s back, and he was now getting ready to charge towards its head. His speed was far greater than it had been a few moments ago, or even when he’d been completely unhurt. It was hard to believe that he was heavily hurt. In fact, his wounds were disappearing right before its eyes.</p>

      <p>Suddenly, the grudge that controlled Gouz-Maise shuddered with fear. After all — it was reminiscent of the chase back in the dungeon.</p>

      <p>“Looks like... it worked,” said the man through his ragged breath. The deathly faces all over its body heard the man’s mutter. “If you get a debuff by eating a part of a debuffed opponent’s body... Reversal recognizes it as a negative effect caused by the enemy. That was proven by the Grapevine I fought this morning.”</p>

      <p>Gouz-Maise didn’t understand what the man was saying.</p>

      <p>“I didn’t know if Hellish Miasma had any effect on undead, and there was a chance that the thing with the Grapevine only happened because it was caused by its attack,” the man said. “If that was the case, I’d have ended up dying from my own attack... but it worked.”</p>

      <p>Gouz-Maise couldn’t make sense of the man’s current state.</p>

      <p>“Ha ha... What a disgusting gamble,” the man laughed.</p>

      <p>Gouz-Maise just barely had enough mind to understand that the man had created this situation by consuming its rotten flesh.</p>

      <p>“ＧｇｉｉＩｉｉｅＥｅ!? ＤｄＧｇＡａａＡＡａＡｑＱａＡａ!?” it screamed through its head and all the mouths all over its body.</p>

      <p>“You scared?” the man asked.</p>

      <p>Indeed — Gouz-Maise was afraid. All as one, the consensus of the Gouz-Maise Gang — the group of scoundrels that had taken many lives and consumed great amounts of human flesh — feared the man before them.</p>

      <p>“Guess it’s the first time <em>you’ve</em> gotten eaten, huh,” the man said. This was the man who, as if to give it payback for its sins, had consumed Gouz-Maise’s flesh and drawn ever closer to end its deathless life.</p>

      <p>Naturally, the amalgam of undead was afraid of the way the man functioned.</p>

      <p>He was truly a God of Death.</p>

      <p>His hands — one blood crimson, other a deathly black — held a dark flag. On his head, there were wolf-like ears. He didn’t hesitate to consume the flesh of man-eaters. If he wasn’t the reaper sent himself to end them — no one was.</p>

      <p>“Ｋ Ａ ｄ ｓ Ｆ ａ ! ? Ａ ｓ ａ Ｓ Ａ Ｄ ａ ａ Ａ ｑ Ａ Ｓ Ｑ ａ!”</p>

      <p>Gouz-Maise began wildly swinging its arms down at him, but the man was able to evade it all, making it seem as though the amalgam of corpses had become pitifully sluggish. Not only that — he jumped on the left arm it swung down and began running up towards its head.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert6">
    <img alt="insert6" class="insert" src="../Images/Insert6.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="chapter61">
    <div class="main">
      <p>Little by little, the god of death... the Grim Reaper... the ultimate end... approached Gouz-Maise.</p>

      <p>Overwhelmed by despair, it used its final card.</p>

      <p>“Ｄ ｅ Ｅ ｅ Ａ Ａ — Ｄ ｅ Ｅ ａ ａ Ｄ Ａ ａ ａ — Ｄ ｄ ｄ Ｄ Ｌ Ｙ ｙ ｙ Ｍ ｉ Ｘ ｅ Ｅ ｅ ｅ Ｅ Ｅ ｒ ｒ Ｒ Ｒ ｒ Ｒ !?!?”</p>

      <p>That was the third time it cast the ultimate spell.</p>

      <p>It didn’t care about what would happen because of that. Since the spell consumed great amounts of grudge — which was the core of Gouz-Maise’s being — there was a chance that using it thrice in such a short period of time could made itself self-destruct. However, its fear of the man running up its arm was just too great for it to hold back.</p>

      <p>The burst of destructive magic made the god of death and everything below the elbow completely vanish. Though Gouz-Maise’s arm was thicker than a large tree, the spell disintegrated even its bones.</p>

      <p>The pain signals were abnormally powerful, and due to the loss of its grudge, its Automatic Restoration didn’t work at full capacity. The grudge flowing through its corpus was reduced to just that of the one who could cast Deadly Mixer and a few others. Despite that, however, the faces covering its body and the few remaining grudges all smiled in relief.</p>

      <p>One leg, one arm, and approximately 80% of the grudge composing it.</p>

      <p>The losses were great, but they had been enough to make their bane — the reaper himself — disappear. The battle was over. Now, it simply had to wait for the Automatic Restoration to complete, head to town to stock up on new grudge and...</p>

      <p>“ＡａＨｈＨｈ?” All of a sudden, a shadow came over it from above its head.</p>

      <p>Gouz-Maise looked upwards.</p>

      <p>Before the sunset, bathed in the light of the sinking sun, there was the source of the shadow.</p>

      <p>The black silhouette held a black sword in the hand behind him. And, with great speed, he closed in towards Gouz-Maise’s head.</p>

      <p>“You beasts, wallowing in undeath...” a feminine voice began.</p>

      <p>“...go to sleep... forever!” the Reaper finished.</p>

      <p>The tip of the black greatsword pierced through Gouz-Maise’s forehead and touched its core.</p>

      <p>“VENGEANCE IS MINE!”</p>

      <p>Thus, a strike worth all the damage Gouz-Maise had ever given the man... no — a retributive attack avenging all the people that had suffered because of those composing the amalgam of death...</p>

      <p>...completely destroyed its core and ended its very existence.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="epilogue">
    <div class="main">
      <h1>Epilogue: A Morning of Smiles</h1>

      <p><em>Undisclosed Location</em><br/><br/></p>

      <p class="noindent"><b>[“Maw of the Desert, Azmore” was defeated]</b></p>

      <p class="noindent"><b>[Final level: 56]</b></p>

      <p class="noindent"><b>[MVP: “The Earth” Fatoum, level 1,157 (total level: 1,657)]</b></p>

      <p class="noindent"><b>[Embryo: “Overflowing Divine Vessel, The Grail”]</b></p>

      <p class="noindent"><b>[MVP special reward: Legendary item, “Bag of the Desert, Azmore”]</b></p>

      <p class="noindent">■</p>

      <p class="noindent"><b>[“The Crimson Armor, Exademon” was defeated</b>]</p>

      <p class="noindent"><b>[Final level: 63]</b></p>

      <p class="noindent"><b>[MVP: “King of Termination” Albert Schwartzkaiser, level 620 (total level: 1,120)]</b></p>

      <p class="noindent"><b>[Embryo: “Seven Star Turnover, Septentrion”]</b></p>

      <p class="noindent"><b>[MVP special reward: Ancient Legendary item, “Crimson Armor-Piercer, Exademon”]</b></p>

      <p class="noindent">■</p>

      <p class="noindent"><b>[“Four-Dimensional Kaiju, Todoghilas”]</b></p>

      <p class="noindent"><b>[Final level: 51]</b></p>

      <p class="noindent"><b>[MVP: “Commander-in-Chief” Gray α Centauri, level 490 (total level: 990)]</b></p>

      <p class="noindent"><b>[Embryo: “Unidentified Flying Stronghold, Laputa”]</b></p>

      <p class="noindent"><b>[MVP special reward: Ancient Legendary item, “Ultimate Suit Series, Todoghilas”]</b></p>

      <p class="noindent">■</p>

      <p class="noindent"><b>[“Revenant Ox-Horse, Gouz-Maise”]</b></p>

      <p class="noindent"><b>[Final level: 34]</b></p>

      <p class="noindent"><b>[MVP: “Paladin” Ray Starling, level 35 (total level: 35)]</b></p>

      <p class="noindent"><b>[Embryo: “Maiden of Vengeance, Nemesis”]</b></p>

      <p class="noindent"><b>[MVP special reward: Epic item, “Grudge-soaked Greaves, Gouz-Maise”]</b><br/><br/></p>

      <p>“...Hm?”</p>

      <p>In a space enlightened by countless data windows, <em>it</em> sounded a voice of confusion.</p>

      <p>At first glance, it appeared to be an adult male human, but upon further inspection, one would notice that the skin covering its body had patches of draconic scales and beastly leather, while its head was decorated by devilish horns. Overall, it certainly looked more like a “humanoid monster” than a person, but the glasses it sported successfully moved the impression it gave off into the “human” territory — if only barely.</p>

      <p>It was doing one of the jobs it was assigned to — the checking of the data concerning the defeat of UBMs over a set period of time. In <em>Infinite Dendrogram</em>, its role was the acknowledgement of UBMs.</p>

      <p>Though UBMs were abnormally powerful and had abilities just as strong, their primary unique feature was their transformation into special rewards upon defeat.</p>

      <p>Many non-UBM boss monsters also had great strength and unique abilities. When defeated — either by people or other monsters — they dropped Treasure Coffers or items they possessed before death.</p>

      <p>However, the special rewards left by UBMs were completely unlike any basic boss monster drops. They were the materializations of the image — the concepts — surrounding the abilities of the defeated UBM, adjusted to best suit the most valuable person in the battle.</p>

      <p>Indeed, it wasn’t their strength or abilities. That very transformation was the prime feature of UBMs.</p>

      <p>No standard monster possessed it. But if the control AI responsible for UBMs acknowledged a unit as a UBM, it would become exactly that — a monster with the function to transform into a special reward upon death.</p>

      <p>The creature working in this space was Jabberwock — the very same control AI responsible for acknowledging, giving features to, and sometimes even designing UBMs.</p>

      <p>“‘Ray Starling,’” it murmured. “Going by Earth time, I saw this player name yesterday.”</p>

      <p>It was the very same player that had, at an unreasonably low level, defeated the Great Miasmic Demon, Gardranda — a UBM of Jabberwock’s design. Naturally, Jabberwock was slightly surprised to see the same person become an MVP in a UBM fight two days in a row.</p>

      <p>In this world, the UBMs Jabberwock had either designed or acknowledged were many. However, the same couldn’t be said for MVPs.</p>

      <p>Many people couldn’t defeat them. Others couldn’t even encounter them. Others just plain couldn’t become MVPs.</p>

      <p>Not to mention that the strongest of the strong — Superiors — were actively hunting UBMs. As a result, only the few lucky enough to encounter <em>and</em> successfully defeat them could become MVPs.</p>

      <p>Thus, Jabberwock was quite intrigued by an entity that had faced UBMs two days in a row and — through hard struggles — emerged victorious both times.</p>

      <p>“Fascinating,” it said. “If only most defeated UBMs like he did. I’m quite dissatisfied by how Superiors hunt them as if it’s a chore. Truly, treasure is best when earned through harsh struggles and intense drama. No good saga or epic is complete without those things, after all.” Jabberwock continuously nodded to his own words before beginning to ponder. “I believe I should make my designs even more tenacious.”</p>

      <p>Saying that, he closed his eyes in thought...</p>

      <p>“Let’s start by giving it atomic breath. Like Godzilla.”</p>

      <p>The moment Jabberwock said something truly foreboding, something gave a response. “No radioactive pollution, pleease!” Before he’d realized it, a cat-like mascot was sitting in the space behind him.</p>

      <p>It was Cheshire — control AI no. 13. Shaking its head at just how troublesome its colleague was, it began commenting about what Jabberwock was trying to do.</p>

      <p>“Leave the unreasonable amounts of power to SUBMs. They create enough calamities as it iis. We don’t need anything that could cause irregular evolutioon. Do you have any idea how much trouble we had with the last two irregularrs? Even Humpty’s favorite and Granvaloa’s Superiors could barely stop the Corpse Stronghold, while the Disaster Bioweapon is still space-sealed in Red King’s ‘gaol,’ you know? The ones who do all the work to take care of your UBMs are the tians, us, and the players, you know?”</p>

      <p>“I’m aware,” said Jabberwock. “Now, what is your business here, thirteen?”</p>

      <p>“Oh yeah, I almost forgot,” said Cheshire. “The control AI responsible for monsters, Queen, has a message for you.”</p>

      <p>“Which is...?”</p>

      <p>“‘Explain your previous acknowledgement.’”</p>

      <p>“What am I supposed to make of that?” Jabberwock demanded.</p>

      <p>“She gave me a letter, but — just as you’d expect from her — it was both overly emotional and too verbose, so I shortened iit,” said Cheshire. “Also, it’s about Gouz-Maise — the last monster you acknowledged as a UBM.”</p>

      <p>“I see.” That was enough for Jabberwock to understand Queen’s problem.</p>

      <p>“If I had to add a bit more detail to that, it’d be, ‘It wasn’t born naturally, nor was it created or arranged by us. Why are you giving UBM status to an undead born from human sorceryy?’”</p>

      <p>“Gouz-Maise had interesting unique abilities,” said Jabberwock. “Its stats and the circumstances behind its birth were more than enough to give it Epic status. Also, by looking at the series of events that led to its creation, it’s safe to say that there will never be another Gouz-Maise.”</p>

      <p>Thus, Jabberwock believed that acknowledging it as a UBM had made perfect sense.</p>

      <p>“That’s truue,” said Cheshire. “Queen is probably just complaining because she’s upset that not many of the boss monsters she singled out and improved are being acknowledged as UBMs.”</p>

      <p>“I’m just doing my job,” replied Jabberwock. “Also, does it actually matter to us whether I acknowledge something as a UBM or not?”</p>

      <p>“...I think she’s just being peevish because she doesn’t feel appreciateed,” said Cheshire. “But oh weell.”</p>

      <p>While thinking about the relationship between this thickheaded fellow AI and the Queen, Cheshire heaved a sigh.</p>

      <p>“Also, no. 3’s designs are unrefined at best, and overly predictable, at worst. Too lacking in both inventiveness and potential,” added Jabberwock. “When it comes to those points, this Gouz-Maise creature and some player designs make far better UBMs.”</p>

      <p>“Queen is a simple and straightforward girl, after aall... Wait, what?” Cheshire realized that Jabberwock had just said something that simply couldn’t be ignored. “Player designs? What do you mean?”</p>

      <p>“Exactly what I said,” said Jabberwock. “I’m talking about that Superior from Dryfe.”</p>

      <p>“...Ohh.” The mention of that single person was more than enough for Cheshire. The Superior in question was more than capable of creating a monster that could catch Jabberwock’s eye.</p>

      <p>“A part of me feels like Ray will get involved in thaat,” said Cheshire.</p>

      <p>There was no basis for the cat’s assumption. One could write it off as standard intuition, but with the control AIs all having calculational capabilities that no human could match, it was difficult to call it “standard.”</p>

      <p>Jabberwock wondered why Cheshire’s mutter had included the name of the player he’d been intrigued by just a moment ago, but chose not to react to it in any meaningful way.</p>

      <p>The cat in question, on the other hand, became curious about something relating to its own murmur and chose to ask about it. “Oh, yeah. Thinking of Ray made me remember. Hey, Jabberwock.”</p>

      <p>“Yes?”</p>

      <p>“Remember the ‘Great Miasmic Demon, Gardranda’ that he defeated recently?” said Cheshire. “What would’ve happened if it had reached completion? It died when it was only in its second form, so I’m kinda curious.”</p>

      <p><em>I know it’s my own fault for telling Ray its weak point, but still,</em> it thought.</p>

      <p>In response...</p>

      <p>“It would’ve been born.”</p>

      <p>...Jabberwock said something far too concise.</p>

      <p>“...Sorry, but I don’t get iit,” said Cheshire.</p>

      <p>So concise, in fact, that not even an AI with inhuman calculational capabilities could make sense of it.</p>

      <p>“Its final form was the creature that was supposed to be born based on the demon’s accumulated fighting experience,” elaborated Jabberwock.</p>

      <p>“A separate unit?” asked Cheshire.</p>

      <p>“No.” The UBM control AI shook his head. “It’s better to look at it this way: the ‘mother’ was only a cover, and the child that was supposed to be born was the true Gardranda. Sadly, it didn’t get a chance to reveal itself.”</p>

      <p>Power left unused — a life and mind that had failed to be birthed. That was exact same thing that the silhouette in Ray’s dream — the non-mother Gardranda — had told him.</p>

      <p><em>So that’s why the demon’s weak point was the stomaach,</em> Cheshire thought and nodded to itself. “By the way, what kind of creature would it have been born aas?”</p>

      <p>“If I recall correctly, the mother fought and ate primarily humans,” said Jabberwock. “Thus, it’s fair to assume that it would’ve been humanoid.”</p>

      <p>“It’s also fair to assume that it won’t get another chance at being born, riight?” Cheshire asked.</p>

      <p>“Yes, indeed.”</p>

      <p><em>However,</em> Jabberwock thought to himself, <em>that might change depending on the final skill it received when it became an item.</em></p>

      <p>There was a chance that the effect of the skill Ray had yet to unlock could give another chance to the creature that’d failed to be birthed. However, due to there not being any similar cases, Jabberwock concluded that it was highly unlikely.</p>

      <p>“Now, if you’ll excuse me, I have work to return to,” he said.</p>

      <p>“Sure, I have some tasks to do, tooo.”</p>

      <p>Jabberwock ended the conversation and faced a window displaying a stream of information.</p>

      <p>Cheshire left his colleague’s work area and went to do his own work.</p>

      <p class="centerp section-marking">◇◇◇</p>

      <p><em>Paladin Ray Starling</em><br/><br/></p>

      <p class="noindent"><b>[UBM, “Revenant Ox-Horse, Gouz-Maise” was defeated]</b></p>

      <p class="noindent"><b>[Selecting MVP]</b></p>

      <p class="noindent"><b>[Ray Starling was selected as MVP]</b></p>

      <p class="noindent"><b>[Ray Starling is presented with an MVP special reward — “Grudge-soaked Greaves, Gouz-Maise”]</b><br/><br/></p>

      <p>“So that’s done, huh...?” I murmured.</p>

      <p>With Gouz-Maise’s body disintegrating into particles of light and me receiving a message window similar to the one I’d gotten after defeating Gardranda, I could finally be relieved that I’d killed the abomination. However, my situation didn’t allow it. After all, since Gouz-Maise was about forty meters tall, defeating it from the head had left me to fall the entire way down.</p>

      <p>Not to mention that I couldn’t move my body, either.</p>

      <p>To win this fight, I’d used a downright insane method of activating Like a Flag Flying the Reversal. Thanks to the debuffs I’d received getting turned into buffs, I had become more powerful than I was at my best, and had been able to emerge victorious against the abomination. However, just like it had been with Gardranda, the switching of weapons or the defeat of the enemy, Gouz-Maise, had caused the skill to get canceled. Thus, I was left burdened with a number of debuffs. My status window displayed Poison, Weakness, and Intoxication — the three effects of Hellish Miasma — along with Curse and Food Poisoning, which I’d most likely gotten for ingesting Gouz-Maise’s flesh.</p>

      <p><em>Well, I ate a part of a goddamn undead’s body, so I can’t really be surprised,</em> I thought.</p>

      <p>Moments after I canceled the Reversal by switching Nemesis to her sword form, I was able to move my body long enough to activate Vengeance is Mine, but the debuffs had gotten worse since then. I could no longer move so much as a muscle.</p>

      <p>As things were, I was seconds away from crashing to the ground, and I would be able to do nothing to break my fall. With my current HP and the general state of my body, it was highly questionable if I could survive the hit.</p>

      <p>“Better say my prayers, then...” I murmured.</p>

      <p>A moment after I closed my eyes and braced myself for impact, I felt the touch of something unnaturally light.</p>

      <p>The sensation repeated a couple of times. After the gentle swaying, I felt my body land on the ground.</p>

      <p>I was thoroughly confused.</p>

      <p>Fearfully, I opened my eyes and saw a shining artificial horse, Silver, standing at my side. Just like the first time I’d fallen off of him, he was looking down at me, seemingly worried.</p>

      <p>It was apparent that Silver had gently caught me as I’d fallen and softly dropped me to the ground. I had no idea how he’d done it with his equestrian frame, but there was no other explanation.</p>

      <p>“Ha ha,” I laughed. “Thanks, Silver.”</p>

      <p>Not being an animal, he had no mouth and thus couldn’t make any natural sounds, so he responded to my gratitude by simply rubbing the end of his “nose” on my cheek. That action made him seem much like a real horse.</p>

      <p>With how he’d helped me chase down the Lich, it was safe to say that Silver had been an invaluable asset in this event. And if I hadn’t had the Miasmaflame Bracers and hadn’t seen that dream, there would have been a large chance of me losing this fight. However, there was someone who’d done more to help me than anyone else.</p>

      <p>“Thanks, Nemesis,” I said. “If you hadn’t persisted like you did, it would’ve all been over for us.”</p>

      <p>If I hadn’t had Nemesis and she hadn’t bought the time I’d needed to regain my consciousness, I’d have been given the death penalty, and that pile of corpses would’ve been free to attack someone else. Nemesis was the sole reason why that hadn’t happened, so I expressed my thanks.</p>

      <p>However, all I got in response was peaceful, systematic breathing. Before I knew it, she’d disappeared from my weapon equipment slot, returned to her humanoid form, and had fallen fast asleep. It reminded me of a similar moment back in the dragon carriage after the battle with Gardranda.</p>

      <p>The peace in her expression felt like the ultimate proof of the hard work she’d done today.</p>

      <p>“Well done... Nemesis.” I touched her with my left hand, causing her to instantly return to the crest.</p>

      <p>Left alone and unable to move, I kept my HP up by casting healing magic on myself, and looked through my items to find a way how to neutralize the status effects. The misadventure from today’s morning had made me learn my lesson, so I’d prepared for the three Hellish Miasma debuffs by buying the appropriate items when shopping.</p>

      <p>After taking those, I lessened the effects of Food Poisoning by vomiting a few times, and made it go away completely by following that up with a swig of the right medicine.</p>

      <p>The last status effect — Curse — went away by itself as I was busy taking care of the others.</p>

      <p>Since I hadn’t gotten attacked at all while doing any of that, I assumed that Gouz-Maise’s rampage had probably caused all the local monsters to scatter, letting me completely heal myself and remove the debuffs completely unbothered.</p>

      <p>Even though my status screen now said that I was in perfect shape, I certainly didn’t feel like it. The entire time interval from the moment I’d infiltrated the fortress until I’d ended the battle with Gouz-Maise had been a great drain on my mental and physical energy. My HP might’ve been at 100%, but I wasn’t confident if I could wring up even 60% of my usual performance. Not to mention that Nemesis was in no state to fight, either.</p>

      <p>Anyway, it was as good a time as any to check out the MVP special reward I’d gotten from Gouz-Maise.</p>

      <p>As it said in the name, the “Grudge-soaked Greaves” were a pair of boots made of a malicious-looking purple metal and some leather — hopefully not human leather — and its description in the window went like so:<br/><br/></p>

      <p class="noindent"><b>[Grudge-soaked Greaves, Gouz-Maise]</b></p>

      <p class="noindent"><b>[Epic Item]</b></p>

      <p class="noindent"><em>An epic item embodying the concepts surrounding the ox-headed horse-man clad in grudge.</em></p>

      <p class="noindent"><em>In addition to converting surrounding negative emotions into pure power, it grants the wearer an understanding of the unity between man and horse.</em></p>

      <p class="noindent"><b>[This item cannot be transferred or traded.]</b><br/><br/></p>

      <p>“‘Epic Item’?” Those were the first words that escaped my lips once I saw the status screen.</p>

      <p>Given that the Miasmaflame Bracers, Gardranda was a “Legendary Item,” I was now curious about what kind of difference those descriptions referred to.</p>

      <p>I looked through the help window and found a section on “MVP special reward ranks.” I couldn’t recall it being there the last time I checked over this general area of help sections, so I could only assume that it had appeared there only recently. If I had to guess, it had probably appeared there after I’d acquired the Miasmaflame Bracers.</p>

      <p>As for the content of the help section, it said that UBMs and the MVP special rewards received upon defeating them had several ranks. Those ranks were primarily decided based on the UBM’s strength and threat level, and from lowest to highest, they went like so: Epic, Legendary, Ancient Legendary, Mythical, and Superior.</p>

      <p>Though I’d gotten stronger since my battle with the demon, I still felt that Gouz-Maise had been more challenging than Gardranda. However, the rank on the Miasmaflame Bracers was above that of the new special reward.</p>

      <p>The stat bonuses reflected that, as well. While the Grudge-soaked Greaves increased my AGI by 30%, Miasmaflame Bracers increased my STR by 100%. Clearly, Gardranda had been above Gouz-Maise.</p>

      <p>I felt that she herself might know something about this. After all, she’d called herself “a power left unused” and “the life and mind that the demon failed to birth.”</p>

      <p>With that in mind, I tried talking to the Miasmaflame Bracers on my hands, but I didn’t get any sort of response.</p>

      <p>That dream had been more than enough for me to confirm that her mind was still intact, but apparently, she had no means of talking to me in reality.</p>

      <p>Suddenly, I was hit with the terrifying idea that Gouz-Maise, too, still had its mind. However, after a moment of consideration, I concluded that the greaves were completely devoid of any sort of consciousness. Though the assumption was based entirely on intuition alone, for one reason or another, I didn’t feel that it was the least bit wrong.</p>

      <p>If I had to add reasoning to this, I’d simply say that the boots simply lacked the grudge that had permeated every inch of everything relating to the creature known as Gouz-Maise.</p>

      <p>With that settled, I began examining the two skills on the Greaves of Grudge.</p>

      <p>The first was Grudge Conversion, which was a downgraded version of the grudge power that had fueled Gouz-Maise. It absorbed the grudge from the surroundings, stored it, and turned it into either SP or MP. Though I assumed it had been part of the monster’s functionality, the skill didn’t come with the Automatic Restoration ability.</p>

      <p>...Upon further thought, I realized that having my lost limbs regrow would be downright freaky, so I was kinda glad it wasn’t there.</p>

      <p>The second skill — Rider and Horse, As One — was clearly based on the fact that Gouz-Maise had been a horse-man. It increased the Horse Riding skill level by one.</p>

      <p>Wait...</p>

      <p><em>Increased the Horse Riding skill level by one.</em></p>

      <p>“I can finally ride Silver!” Overcome with emotion, I shouted out my joy.</p>

      <p><em>This is great,</em> I thought.</p>

      <p>It was exactly what I needed to no longer have to ride Silver like I was performing some circus act.</p>

      <p>The skill also increased AGI while riding a horse by 10% for every Horse Riding skill level. That was pretty good, too... in fact, that was probably the primary effect of the skill. However, since I hadn’t even been able to begin to ride, I appreciated the bonus effect far more.</p>

      <p>With that, I got on Silver and began following the road which Hugo and Cyco had used to get to Gideon. I rode the mechanical horse as its hooves rhythmically hit the ground, and I couldn’t help but be moved by the fact that I wasn’t falling off.</p>

      <p>Feeling exceedingly comfortable, I relaxed and head towards Gideon as I let Silver canter as he pleased.</p>

      <p><em>I hope I can run into Hugo along the way,</em> I thought.<br/><br/></p>

      <p>More than an hour after equipping the Grudge-soaked Greaves, Silver and I were still on a mountain road.</p>

      <p>“Are we there yet...?” I asked no one in particular.</p>

      <p>During this time, my Horse Riding skill had already increased by one, and I’d gotten a message saying that the quest “Rescue Roddie Lancarse” was complete. It seemed safe to believe that Hugo had arrived at Gideon and handed the children over to the quest giver girl and the parents. I, too, wished I was in Gideon with them.</p>

      <p>“I honestly think we should be close by now,” I said. The uncertainty in my tone was due to the fact that I wasn’t sure if the road I was following was the correct one.</p>

      <p>When going from Gideon to the Gouz-Maise hideout, we had used a Magingear, and — to avoid getting spotted — traversed a path where we wouldn’t meet any people. Now, however, I was following a mountain road that was well-maintained enough to not have a single blade of grass growing out of it. When taking my and Silver’s comfort into consideration, this path was far better than the former, but it wasn’t without its problems, either.</p>

      <p>The Cruella Mountain Belt was a net of many roads of various sizes. According to the area’s description in the help window, while some of them had been made on the kingdom’s or Gideon’s orders, many had been randomly created by the local gangs.</p>

      <p>With all the magic in this fantasy world, road-related public works weren’t a hard task. There were even spells that allowed the caster to make vegetation simply move away, so it might’ve even been easier than using heavy machinery.</p>

      <p>Due to that, there were countless roads, which made it difficult for me — a person with no knowledge of the lay of the land — to find my way back. Since I hadn’t gotten to the hideout by taking these mountain paths, my map didn’t display which one led to Gideon, and thus didn’t help with the pathfinding all that much.</p>

      <p>However, since I knew the approximate location of the city, I could make good use of the map window’s cardinal directions. With that as my compass, I was able to make my way to where I thought Gideon was.</p>

      <p>Considering our speed and the amount of time that had passed, the city should’ve — at very least — been in sight by now...</p>

      <p>“Oh.” Just as I thought that, I noticed Gideon’s outline peeking through the spaces between the trees.</p>

      <p>Since we were still on the mountain, I got to look down at it from a particularly high point. Though it was already turning dark, the city was emitting lots of light, making it obvious that its people were still full of energy.</p>

      <p>“Hm?” I murmured.</p>

      <p>A certain sound reached my ears. It was the sound of hooves hitting the ground beneath — something I’d grown familiar with throughout today. Except this time, there were many such sounds, and their sources all seemed to be in one group. Not only that — they seemed to be getting closer to me.</p>

      <p>“What?”</p>

      <p>As I imagined the unlikely and, frankly, silly scenario in which I was being chased by a group of horse-men Liches, the sound suddenly mixed with the sound of metal armor fittings scraping against each other. Soon enough, I saw a group of horses being ridden by people in full plate armor.</p>

      <p>It was a highly familiar group — Liliana’s Knights of the Royal Guard.</p>

      <p>“Hello, Liliana,” I said. “We sure see each other a lot to—”</p>

      <p>“Ray!” she exclaimed before I could finish. “Are you all right?!”</p>

      <p>“...day?” <em>Okay now, why is she looking at me so intensely?</em> I thought. <em>And why are her knights turning all alert and battle-ready? Might I get an explanation?</em></p>

      <p>“Where is the giant undead?!” she continued. “Were you able to escape it?! Or is it still nearby?!”</p>

      <p><em>...Oh, okay, I get it now.</em></p>

      <p>I first explained Liliana that there was no need to worry, and went on to have an exchange of information with her. She gave me a detailed explanation of what had happened on her end.</p>

      <p>After we’d split up at the sweets café, Liliana had gone on to continue her search for the second princess, but come evening, she had received a grim piece of information. One of her people had told her that “The second princess seems to have been kidnapped by a suspicious individual.”</p>

      <p>Liliana had been aware of the vile deeds committed by the Gouz-Maise Gang, and had concluded that it was entirely possible that the second princess had become another one of their victims.</p>

      <p>However, Gouz-Maise Gang’s hideout had been in the mountain belt that acted as the border between the kingdom and Caldina. Moving out with larger groups of soldiers could’ve been seen as an act of war.</p>

      <p>That was why Liliana had formed a party comprised only of the best of the best of the Royal Guard, and planned a raid rescue mission to the Gouz-Maise Gang’s hideout.</p>

      <p>The moment they had prepared themselves and began heading out, two carriages had entered Gideon.</p>

      <p>Due to it being late, the speed at which they’d entered had made them stand out. Once Liliana had asked them to state their identity and business, the coachman, a Master, had told them something that was nothing short of surprising.</p>

      <p>He had said, “I am a Master who accepted the request of one of this city’s citizens to rescue a kidnapped boy. We exterminated the gang and brought back all the children that were still alive. However, as we did that, some strange sorcery made the corpses of the gang merge into a giant undead UBM. We were able to escape using the carriages, but my fellow Master is still holding the beast off somewhere in the mountain belt.”</p>

      <p>The story had been so absurd that some knights simply hadn’t believed it. However, a knight with the Truth Discernment skill had concluded that the Master wasn’t lying. Not to mention that the requester — who’d been waiting for them by the gates — had confirmed that it was all true.</p>

      <p>The shift from a kidnapping event to a UBM assault had made their situation turn quite chaotic. Also, Liliana had gone on to ask for the name of the Master holding back the UBM, causing her to find out that it was someone she was highly familiar with — me.</p>

      <p>She had hastily departed the moment she’d found that out. The knights that had been supposed to join her in the rescue operation had gone after her. Some time after that, they’d run into me, still on edge and ready to face the UBM.</p>

      <p>“I see,” I said. “So Hugo safely got the children to the city. What a relief.”</p>

      <p>I’d known it from the message I’d received, but now that I’d been told the circumstances surrounding it, I could be certain that there was no need for worry.</p>

      <p>“What do you mean, ‘What a relief?!’” Liliana exclaimed. “What happened to the UBM?!”</p>

      <p>“I defeated it,” I curtly answered.</p>

      <p>“Oh, I see, so you... you defeated it?!”</p>

      <p>“Here.” I showed her my boots and opened their informational window.</p>

      <p>“...Ray, if I am not mistaken, you became a Paladin about a week ago and were only level 0 before that, correct?” she asked.</p>

      <p>“That seems about right,” I said. Time went thrice as fast here, after all.</p>

      <p>“Why are you able to defeat an UBM a mere week after starting?! Also, I just realized, but those bracers are...!”</p>

      <p>“Oh. Yes. I got these the day before yesterday...” Saying that, I showed her the Miasmaflame Bracers, Gardranda.</p>

      <p>Liliana froze solid.</p>

      <p>“The scale of what they’re talking about is just ludicrous,” muttered one of the knights to the others. “The only person I know who can defeat a UBM by his lonesome is our late commander.”</p>

      <p>“You need to be kind of insane to even attempt it, honestly,” said another.</p>

      <p>“This is just off. Our vice commander is forced to act out the ‘straight man’ type of character,” commented the third knight. “I mean, she’s normally the ‘natural airhead’ type, isn’t she?”</p>

      <p>“Hhaahh...” sighed Liliana. “Truly, common sense does not apply to you Masters.”</p>

      <p>“Well, it’s not like I won just because of my own abilities,” I said. “I had my comrades, lady luck, this horse named Silver, and Nemesis with me.”</p>

      <p>“Speaking of Nemesis, where is she now?” Lilliana asked.</p>

      <p>“She’s currently resting,” I said. “The things she had to do left her completely drained.”</p>

      <p>I unequipped the Miasmaflame Bracers and gently rubbed the crest on my left hand, where Nemesis was sleeping.</p>

      <p>“Ray... Nemesis...” Liliana spoke again. “I cannot express how valuable your actions are. Because of you, the awful series of kidnappings in Gideon are over and the UBM disaster was prevented. I believe I speak for all the people of the city when I give you my gratitude. Thank you very much.”</p>

      <p>“Well...” I had trouble reacting to that. “It just happened to turn out this way, for some reason.”</p>

      <p>I had accepted a quest, gone to save a child, gotten mentally overwhelmed by the tragic sight in the dungeon, let my fury drive me into killing the Lich, and gone on to struggle against the Revenant Ox-Horse. Seriously, I was completely confused as to why things had turned out this way.</p>

      <p>Thinking back on it, there had been events which got me all choked up. I’d felt both deathly dread and disgust. My heart had burned with a fire strong enough to sear my very being.</p>

      <p>However, once I’d found out that the children had all returned to the city, safe and sound, the aftertaste of this whole event had become a bit better.</p>

      <p>Once we were done with the information exchange, we grouped up and made our way back to Gideon.</p>

      <p>Since there was no need to worry about any UBM attacks, Liliana and her knights decided to accompany me. Apparently, she’d noticed how tired I was and had chosen to see to it that I returned to Gideon safely. I highly appreciated that.</p>

      <p>“...Ah.”</p>

      <p>Suddenly, a certain question went through my mind.</p>

      <p>“By the way, what happened with the search for Her Highness the princess?” I asked. “I appreciate your company, but shouldn’t you be focusing on that, instead...?”</p>

      <p>My questions made Liliana’s expression turn stiff. At the same time, I felt a strong air of nervousness envelop the other knights.</p>

      <p><em>D-Did I say something bad?</em> I thought.</p>

      <p>“Based on what you told me, Her Highness was kidnapped by the gang, right?” I continued. “I didn’t get a chance to take a look at the faces of the children in the carriages, so...”</p>

      <p>“Her Highness wasn’t in the carriages.” Liliana’s voice as she said that seemed somewhat... flat.</p>

      <p>“Does that mean that...?” I asked slowly.</p>

      <p><em>Are there actually more gang members? Did they take her to some other area in the mountains...?</em></p>

      <p>“The kidnapping itself was misinformation,” she said. “A short while ago, one of our people contacted me via communication magic and told me that she’d returned home, safe and sound.”</p>

      <p>“That’s grea—”</p>

      <p>“I was also told that she was carrying a store-bought mask, sweets, a goldfish, and a painting. She looked thoroughly satisfied.”</p>

      <p>“I... uh...”</p>

      <p>“The one thing she said to the people of the place she is staying at was, ‘It was most riveting!’”</p>

      <p>I was dumbfounded.</p>

      <p><em>...Your Highness, could you please read the mood?</em> I thought. <em>These people spent the entire day searching for you.</em></p>

      <p>Though the way she’d explained the situation to me was highly smooth and matter-of-fact, I could see Lilliana’s forehead twitching in anger.</p>

      <p>“Eheheheheheheheheh...” she laughed ominously.</p>

      <p>“A-Ahahahahahahah...” I reluctantly joined her.</p>

      <p>“Eheheheheheheheheh... Let us change the subject.”</p>

      <p>“Good idea.”</p>

      <p>Both the mood of the situation and my very instincts told me that delving into this was a bad idea.</p>

      <p>We switched to doing some idle chatter and continued following the road towards Gideon.</p>

      <p class="centerp section-marking">◇</p>

      <p>When we finally reached the city, I couldn’t help but notice that its atmosphere was exactly the same as it had been back when I’d entered it for the first time. One of Liliana’s fellow knights used a communication magic skill to inform the guards about the defeat of the Epic-rank UBM — Revenant Ox-Horse, Gouz-Maise — causing them to no longer stand on alert.</p>

      <p>Once we passed the gates, I looked around, but Hugo and Cyco were nowhere in sight.</p>

      <p>“Liliana, there’s something I’d like to ask you,” I spoke up. “Have you seen Hugo...? He’s my comrade. The guy who brought the carriages with the children here.”</p>

      <p>“Do forgive me,” she said. “I ran out the second he told me of the situation. Give me a moment to ask about him.”</p>

      <p>After saying that, Liliana began speaking to the guards stationed around the gates.</p>

      <p>A moment later, one of them took a step forward. “After explaining the situation and handing the children over to us, the person in question said, ‘I must return to the other side’ and vanished.”</p>

      <p><em>Vanished?</em> I asked myself. <em>What did he mean by “other side”? Dryfe? No...</em></p>

      <p>“So he logged out, huh?” I said. He’d probably done it to avoid getting questions he wasn’t allowed to answer. The guy hadn’t gotten cuffed or anything, so he would have been able to go offline with no problem.</p>

      <p><em>I wonder if I’ll meet him again tomorrow,</em> I thought.</p>

      <p>“Also, he gave me this,” said the guard and handed me a letter.</p>

      <p>“Thank you.” I opened it and instantly realized that it was a message he’d left for me.<br/><br/></p>

      <p>“Dear Ray Starling. I leave this message to you just in case you choose to stay in this world and either return here safe and sound or your death penalty expires.</p>

      <p>First of all, I would like to thank you. Without you, I couldn’t have brought the children back to their parents or the lady we’d met in that alley.</p>

      <p>You will likely be offered many rewards for acts such as defeating the Gouz-Maise Gang, and you can rest assured that it all belongs to you. I have no need for any of it. In fact, I’m incapable of taking any rewards from the kingdom’s public institutions.</p>

      <p>It hasn’t been long since we’ve met, but I believe I have a good grasp of what kind of person you are. You will most likely hesitate to accept what you’re offered. However, with you having been the only one capable of doing it, you <em>must</em> be the one to take the rewards.</p>

      <p>Also, you can rest easy knowing that I have already received my prize. My rewards were lady Rebecca’s smile and the tears of joy that she shed when I brought her little brother to her.</p>

      <p>That was more than enough for me.</p>

      <p>If you still feel apprehensive about it, you can pay me back by treating me to lunch the next time we meet.</p>

      <p>Please excuse the fact that it’s in written form, but this is my goodbye to you.</p>

      <p>Farewell. I hope we meet again. <em>Au revoir. À bientôt.</em></p>

      <p>The machine knight of ice and roses, Hugo Lesseps.”<br/><br/></p>

      <p>I was speechless.</p>

      <p><em>In case I choose to stay in this world, huh?</em> I thought. <em>I...</em></p>

      <p>“Umm... Ray?” As I got lost in thought, Liliana looked at me with worry in her eyes.</p>

      <p>“Are you sure you are feeling well?” she asked.</p>

      <p>“Oh, sorry about that,” I said. “I’m quite fine, thank you.”</p>

      <p>“Well, if you say so... Anyway, since you have defeated the Gouz-Maise Gang, please take some time within the next few days to report it to the Adventurers’ Guild and the knight offices. The Adventurers’ Guild is for the bounties, while the knights need to know about the elimination of a criminal organization.”</p>

      <p>“I see. Thank you.”</p>

      <p>“The day is getting late now, and I believe you are exhausted beyond belief, so please go have some well-deserved rest,” she said.</p>

      <p>“I really should,” I agreed. “It’s been a really long day, after all. What will <em>you</em> do, Liliana?”</p>

      <p>“I will go back to protecting Her Highness.”</p>

      <p>“...Clearly, I’m not the only one here who deserves to be thanked for all their efforts.”</p>

      <p>“Oh, there’s no need, eheheh...”</p>

      <p>“All right, I will take my leave now,” I said.</p>

      <p>“Feel free to,” she said. “Let us meet again.”</p>

      <p>With that, Liliana and I parted ways.</p>

      <p>Still logged in, I went on to take a nap in one of Gideon’s inns. Once I let myself fall on the bed, all the events of the day flashed through my mind. However, due to how exhausted I was, the sandman took me before I could think about any of it.</p>

      <p>This time, I didn’t have any dreams.</p>

      <p class="centerp section-marking">◇</p>

      <p>The next morning, I woke up surprisingly early.</p>

      <p>There was no sunlight flowing through the window and the sky outside only looked mildly bright, so it was probably before dawn. I placed my hand on my head and instantly found that the dog ears that had tortured me throughout all of yesterday were gone. With me spending the night in-game, they’d likely gone away due to the time limit.</p>

      <p>“Have you awoken, Ray?” a voice asked.</p>

      <p>I looked to where I’d heard the voice — the side opposite to the window. There, I saw Nemesis, who was sitting in a chair and looking at me.</p>

      <p>“Morning, Nemesis,” I greeted her.</p>

      <p>“Good morning, Ray,” she responded.</p>

      <p>After that, we both just wordlessly looked at one another.</p>

      <p>Eventually, I broke the silence and invited Nemesis for a walk. I took her to the plains right beyond Gideon’s northern gates. With it being my third time here, the area was already becoming familiar to me.</p>

      <p>Nemesis and I were speeding through it while riding Silver. I held the reins and controlled the steed while Nemesis sat behind and held onto me by my waist.</p>

      <p>“This is truly pleasant,” said Nemesis.</p>

      <p>“Sure is,” I agreed.</p>

      <p>As I had such meaningless exchanges with Nemesis, I continued making Silver gallop through the plains. After about thirty minutes had passed, I saw the sun begin to show itself from behind the eastern mountains.</p>

      <p>“Will you leave this world?” That was when Nemesis asked me that question.</p>

      <p>I said nothing. She was referring to what I had been considering back in the fortress’ basement.</p>

      <p>If I processed <em>Infinite Dendrogram</em> the same way I did reality, it was questionable whether staying in a world so filled with death would be a good thing for me. The sight of the corpses of children I didn’t even know had been enough to make me feel as though my heart had been gouged out. If they were people I was familiar with, like Liliana or Milianne, it would probably hurt me as much as a loss of a friend in reality.</p>

      <p>However...</p>

      <p>“There’s more to this world than just loss,” I said.</p>

      <p><em>If I hadn’t started </em>Infinite Dendrogram<em>, I would’ve never met the sisters, Rook, Marie, Hugo, Cyco and — of course — you, Nemesis. I simply couldn’t have come to know any of them if I’d only stayed there, and Nemesis wouldn’t even have been born.</em></p>

      <p>“You <em>are</em> aware that you might go through something painful again, no?” she said.</p>

      <p><em>Of course I am,</em> I thought. <em>You’re completely right about that. Events like what we went through yesterday are probably a daily occurrence here. But still...</em></p>

      <p>“If something that would leave a bad taste in my mouth starts happening before me... I’ll just stop it,” I said.</p>

      <p>This time, it had been all over by the time I’d gotten there. However, if I was ever in the right place at the right time, I would do everything I could to prevent such a tragedy. After all, the possibility leading to the desired future was there, as long as you didn’t give up.</p>

      <p>“I would give my all to grab hold of the possibility,” I said.</p>

      <p>“I see,” Nemesis spoke from behind me. “I feel like you are shouldering far more than you should, but I cannot say that this is unlike you. Yes — you should fight to protect. And while you do that...”</p>

      <p>Still behind me, Nemesis gently patted me on the head.</p>

      <p>The softness of the hand made me turn around.</p>

      <p>“...<em>I</em> will be the one protecting <em>you</em>.”</p>

      <p>Nemesis, covered in morning light, gave me the most gentle smile.</p>

      <p>That expression made me face forward again and swing Silver’s reins to make him canter ahead. For some reason, I had become bashful enough that I was unable to look at her face again. Still, I felt that I had to say something back to her.</p>

      <p>“Thanks... Nemesis...” That was all that came out.</p>

      <p>As she held onto me, I felt as though she smiled once again.</p>

      <p>After that, neither of us said anything more.</p>

      <p>Still on Silver’s back, we dashed through the fields as we let that gentle morning of smiles embrace us.</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="insert7">
    <img alt="insert7" class="insert" src="../Images/Insert7.jpg"/>
  </section>

  <section epub:type="bodymatter chapter" id="conjunction">
    <div class="main">
      <h1>Conjunction Episode: The Night Before</h1>

      <p><em>The surroundings of the east gate of Gideon, the city of duels</em></p>

      <p>Midnight.</p>

      <p>The day when Ray had fought and prevailed against the Revenant Ox-Horse, Gouz-Maise had reached its end.</p>

      <p>The surroundings of the east gate of Gideon — which were completely devoid of people with the exception of the few guards on their night shifts — were suddenly intruded by the appearance of a pair of people emitting a faint light.</p>

      <p>One of them was a man clad in a military uniform reminiscent of a pilot suit — Hugo Lesseps, High Pilot of the Dryfe Imperium. Next to him was his Embryo, Cocytus.</p>

      <p>After the last event, Hugo had logged out to avoid further questioning from the kingdom, and had now logged back in again after waiting for the right time.</p>

      <p>After logging in, the two of them quickly walked away from the gate, entered a small alleyway, and began waiting for something. Less than a minute passed until someone came.</p>

      <p>It wasn’t a drunkard or some hoodlum.</p>

      <p>Instead, it was a person wearing a penguin suit.</p>

      <p>It was the very same penguin that had appeared before Ray last morning, pronounced himself “Dr. Flamingo,” and gotten rid of Ray’s debuffs while also giving him a pair of dog ears.</p>

      <p>“Kept ya waiting,” said the penguin.</p>

      <p>“Not at all,” replied Hugo. “I spent most of the waiting time offline.”</p>

      <p>“You were pretty busy today, weren’t ya? Took care of the gang that was troubling this town, eh?”</p>

      <p>“You’re aware?” Hugo asked.</p>

      <p>“Indeed I am,” said the penguin. “I was doing some wiretapping on Ray, you see.”</p>

      <p>“Wiretapping Ray? How?”</p>

      <p>“Not telling. I’ve been listening on him like I would a radio drama, and boy, was it a good one. He’s as much of a Maiden’s Master as you are, Hugh.” The penguin made his body sway and chuckled.</p>

      <p>“Well, if you know what he was doing, there’s something I’d like you to tell me...” said Hugo.</p>

      <p>“Yep, he won,” the penguin answered the question before it was even asked. “Victory is his. He actually solo’d a UBM.”</p>

      <p>“I see. That’s good to know.” Hugo wasn’t lying when he said that. However, that sentiment was followed by thoughts that completely contradicted it.</p>

      <p><em>If the UBM had given him the death penalty, we probably wouldn’t have to face each other today. After all, a person so straightforward in nature will surely try to stop the plan. Wait, in the first place, should I really be taking an active part in a plan that Ray would try to stop?</em></p>

      <p>Little by little, hesitation began to envelop Hugo’s mind.</p>

      <p>“So, Hugh, are you ready for tomorro— no, today’s plan?” the penguin asked, as if it was fully aware of Hugo’s inner struggle.</p>

      <p>Hugo quickly held back the hesitation, and reported something. “The Marshall II was destroyed.”</p>

      <p>“I see,” said the penguin. “Here’s a Garage with a spare one, then. It’s Marshall II Revised — an improved version of the Marshall II you were using before. Its defense and AGI are 30% higher. The fine-tuning is done, too.”</p>

      <p>The penguin reached into his inventory and took out a large, rolled up, metallic scroll much like the one Hugo had used in the afternoon.</p>

      <p>“Thank you very much,” Hugo said gratefully. “Oh, I just remembered this.”</p>

      <p>Hugo took out a bundle of papers from his inventory. It was the sorcery blueprint that he’d discovered in the hideout of the Gouz-Maise Gang.</p>

      <p>“Oh yeah, the sorcery that created that UBM, eh?” said the penguin.</p>

      <p>“Well, with the clan already having scrapped the grudge power plan, I think it’s probably useless to us,” Hugo commented.</p>

      <p>“Well, you think right,” said the penguin. “After all, we got help from the King of Tartarus for that one, so the sorcery of a high-rank tian is just a bit...”</p>

      <p>“Leader?”</p>

      <p>The penguin was looking down at the blueprint and silently examining the text. “I see... So just because it’s grudge, it doesn’t have to... This needs to be verified, though...”</p>

      <p>After making some conclusions, the penguin put the blueprint into his inventory.</p>

      <p>“Back to the matter at hand,” he said. “With that Garage I gave you, you are prepared to be the heart of this plan. Other preparations are just about complete, as well.”</p>

      <p>The penguin began counting down his fingers to confirm what was done or not. Since the suit didn’t have any fingers fit for counting, he obviously did it with the human fingers inside.</p>

      <p>“The deployment of Castling and the gadgets is done. The arrangements to allow us to influence the device are done. The club, Veldorbell, has been taking root there for a few days now. And of course, my — the diamond’s — preparations are done... or so I’d like to say. But there’s something I still have to do. Well, it’s not like I won’t make it in time for the plan.”</p>

      <p>Adding the names of playing card suits here and there, the penguin shared info with Hugo.</p>

      <p>Though it seemed like some sort of coding, it was far simpler than that. When creating plans, the penguin simply had a habit of giving the codenames based on card suits to those who had important roles.</p>

      <p>“The only real cause of worry here is whether the imperator’s joker is actually gonna do her job or not, but it all depends on luck,” said the penguin. “Still, she’ll probably act as long as our sources are correct and the first princess actually comes.”</p>

      <p>“Umm, what’s this plan’s spade?” Hugo realized that that suit hadn’t been mentioned, and decided to ask about it.</p>

      <p>That was because, whenever using suits as codenames, the penguin always gave spade to either the trump card or the most destructive role in his plan.</p>

      <p>The penguin’s answer was simple. “Ah, well... I don’t have one. No spade this time.”</p>

      <p>It seemed as though he was hiding something, but Hugo didn’t bother to doubt him.</p>

      <p>“But man, am I glad. The event is actually happening.” As if to change to subject, the penguin nodded and continued talking. “Seriously, I can’t be more glad. I have no clue what retard was responsible for it, but the blockade caused by the PK happening almost ruined the event and our plan with it.”</p>

      <p>The PK happening. That was the event in which three player-killing clans and the Superior Killer had created a blockade in the four newbie hunting grounds around the capital. Though the kingdom’s four Superiors had taken care of the problem, it had already affected the kingdom’s overall power.</p>

      <p>On the internet, it was rumored that it had been done by the imperium, which was on the verge of war with the kingdom. However, the penguin knew better than everyone that it wasn’t true.</p>

      <p>“Who do you think was responsible for that?” asked Hugo.</p>

      <p>“No clue,” curtly answered the penguin. “They went about it so well that they didn’t leave any proof behind. Though the PKs were rewarded with pretty nice sums of money. And besides our country, there weren’t many groups that relied on using coinage like that.”</p>

      <p>“Caldina, then?” asked Hugo.</p>

      <p>Caldina, the commercial city-state union.</p>

      <p>It was a mercantile country that covered the entire desert in the center of the continent and claimed that the presence or lack of money was everything.</p>

      <p>Its national characteristic was that people there could get special products from all the other countries — albeit for large sums of money. Due to that, many high-end players had moved there, causing it to become the strongest country in terms of the amount of Masters.</p>

      <p>“For what purpose did they do it?” asked Hugo.</p>

      <p>“Well, I think there’s more to it than just sullying the imperium’s reputation,” answered the penguin. “That place has both tians and Superiors that really know how to use their heads. They could have just used Sefirot — their pride and joy — yet instead they messed around with these indirect methods. What a pain.”</p>

      <p>Sefirot was the name of the top clan in the commercial city-state union of Caldina. Though it was only a mere ten members strong, a whole nine of them were Superiors.</p>

      <p>Among those nine were The Earth AKA the “Magically Strongest,” King of Termination AKA the “Seven Death Transformation,” God Hunter AKA the “Multifariously Invincible,” and Ace AKA the “Blue Sky Songstress,” all of whom were famous for their battle prowess.</p>

      <p>Because of that, Sefirot was considered to be the strongest clan in all of <em>Infinite Dendrogram.</em></p>

      <p>“What is the likelihood of Sefirot showing up while the plan is commencing?” asked Hugo.</p>

      <p>“I’m pretty sure they’re unaware of it,” said the penguin. “After all, if the plan is successful, it’s likely that the kingdom will give up before the war even happens. It’s like the imperium’s decisive blow. If they knew about it, they would’ve already done something.”</p>

      <p>After saying that, the penguin began to consider.</p>

      <p>“However, there’s a chance that one or few of them came to see the event... The Clash of Superiors. If that happens, I’ll just have to wreck their shit with the spade.”</p>

      <p>The penguin’s words made Hugo begin to ponder.</p>

      <p>Upon seeing that, the penguin talked to him with a gentle tone. “No need to overthink it, Hugo. If this goes well, the war will end with only minimal casualties.”</p>

      <p>“Minimal?” asked Hugo.</p>

      <p>“Indeed. His Excellency the General(lel) wants an all-out war, but that would be a waste of all kinds of resources. Such things are best handled in ways that are both smart and exciting.” Saying that, the penguin removed his suit. At the same time, he reached into his inventory, took out a lab coat, and put it on.</p>

      <p>The result was a lean, spectacled man clad in a lab coat. He extended his hands to the sides and made a sonorous declaration.</p>

      <p>“Tomorrow, we — The Triangle of Wisdom — will put a decisive end to the war between the imperium and the kingdom.”<br/><br/></p>

      <p><em>To be continued next episode...</em></p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="afterword">
    <div class="main">
      <h1>Afterword</h1>

      <p class="afterwordimages"><img src="../Images/Bear.jpg"/> <img src="../Images/Cat.jpg"/></p>

      <p><b>Bear:</b> “Heyo! Time fur another afterword! (Been awhile since the last one.)”</p>

      <p><b>Cat:</b> “And so, volume 2 was able come out without any probleems.”</p>

      <p><b>Bear:</b> “This is all thanks to the readers who bought volume 1, the stores that sold it...”</p>

      <p><b>Cat:</b> “...the editors, and Taiki and all the wonderful illustrations he drew!”</p>

      <p><b>Bear:</b> “Now, you might be aware of this, but a lot has happened between the releases of volume 1 and volume 2.”</p>

      <p><b>Cat:</b> “First, there was the great <em>Dendro</em> festival on Twitterr!”</p>

      <p><b>Bear:</b> “It had all this unbearably good <em>Dendro</em> art drawn by a whole fifty illustrators!”</p>

      <p><b>Cat:</b> “You can go and check it out in the gallery of the official <em>Dendro</em> siite!”</p>

      <p><b>Bear:</b> “Also, it was announced that <em>Dendro</em> is getting a manga adaptation.”</p>

      <p><b>Cat:</b> “The one working on it is none other than Kami Imai of <em>Needless</em> faame.”</p>

      <p><b>Cat:</b> “Though that still wasn’t revealed at the time this afterword was written.”</p>

      <p><b>Cat:</b> “However, when volume 2 comes out, the first chapter should already be ouut.”</p>

      <p><b>Bear:</b> “It’s highly recommended that readers of these novels get their paws on that!”</p>

      <p><b>Cat:</b> “Search for it on Comic Firee!”</p>

      <p><b>Bear:</b> “Now, a word from our author.”<br/><br/></p>

      <p>Hello, this is Sakon Kaidou.</p>

      <p>First of all, I would like to thank you getting your hands on <em>Infinite Dendrogram</em> volume 2.</p>

      <p>Because of everyone involved and the audience, volume 1 sold well and we were able to release volume 2 into the world without much trouble, and I couldn’t be more grateful for that.</p>

      <p>Now, as you might be aware, the first volume had some typos and mistakes (in the Japanese release) which — unlike with webnovel uploads — couldn’t be fixed after they were done. That made me painfully aware of my own lack of experience.</p>

      <p>Releasing books into the world and having an audience buy them involved a level of responsibility completely unlike that of a webnovel author. I will try to become familiar with it and continue publishing <em>Infinite Dendrogram</em> to the best of my ability.</p>

      <p>With that settled, it’s planned that in the upcoming volumes 3 and 4, you’ll be presented with the climax of the first part of <em>Infinite Dendrogram.</em></p>

      <p>New characters, a great event in the city of duels, Superiors making their moves, and the first clash between Ray and a certain person who’s been involved with him since the very beginning.</p>

      <p>I would be a very happy author if you, the readers of volume 2, became reasonably excited for what’s to come.</p>

      <p>Thank you once again, and I hope this continues.</p>

      <p class="signature">Sakon Kaidou<br/><br/></p>

      <p><b>Cat:</b> “...I suuure hope volume 2 doesn’t have any typos.”</p>

      <p><b>Bear:</b> “Well, according to head editor K, ‘typos happen.’”</p>

      <p><b>Cat:</b> “And with that, it’s time to end volume 2’s afterwoord.”</p>

      <p><b>Bear:</b> “It was brought to you by Brother Bear the bear...”</p>

      <p><b>Cat:</b> “...and Cheshire the caat!”</p>

      <p><b>Bear:</b> “Volume 3 is set to come out this year, so bear with us until then!”</p>

      <p><b>Cat:</b> “...It would be pretty surprising if it doesn’t come out in 2017, right?”</p>

      <p><b>Bear:</b> “I-I’m sure it’ll come out just fine.”</p>
    </div>
  </section>

  <section epub:type="bodymatter chapter" id="bonus1">
    <div class="main">
      <h1>Bonus Short Stories</h1>

      <h2>Marilyn</h2>

      <p><em>Paladin, Ray Starling</em></p>

      <p>While on our way to Gideon, our group had set up camp for the night.</p>

      <p>It was past dinnertime and we were all well fed. But while most of us were just relaxing around the campfire, Rook was taking care of Marilyn, who probably needed it, considering that she’d spent the whole day pulling the dragon carriage.</p>

      <p>Mind you, I couldn’t help but wonder how a person actually takes care of a triceratops-looking dragon, especially since Rook seemed to be cleaning her in a really skilled manner, giving the impression that he was actually accustomed to this activity.</p>

      <p>“You seem pretty used to this,” I said. “Do you have a pet reptile or something?” With him being a foreign player, I could easily picture him owning an iguana or the like.</p>

      <p>“No, I merely happened to learn how to take care of animals,” he answered my question.</p>

      <p><em>...Did he go to a vet school or something?</em> I thought.</p>

      <p>“But your learning didn’t actually cover dinosaurs, right?”</p>

      <p>“Right,” Rook nodded. “I had to go through a bit of trial and error, but I’m gradually getting a grasp of how Marilyn prefers to be touched.”</p>

      <p>After saying that, he used a particularly thick piece of cloth to wash the inner part of Marilyn’s neck, making her “MHOO” in a gleeful manner. That action made the triceratops-looking dragon seem somewhat dog-like, reminding me of the dog I used to own.</p>

      <p>“It hasn’t even been five days since Grantzian gave her to me, but I feel that Marilyn and I are getting along just fine,” said Rook.</p>

      <p>“Speaking of which, I know you got her as a reward, but why did the artist have her in the first place?” I asked.</p>

      <p>To my mind, artists were recluses who shut themselves in their studios and spent their days painting, sculpting or whatever, so I found it a bit strange that he’d had a Demi-Dragon like Marilyn <em>and</em> a dragon carriage to go with her.</p>

      <p>“Grantzian is highly passionate when it comes to looking for inspiration for his works, so, a few times a year, he goes on a dragon carriage ride around the kingdom,” Rook answered.</p>

      <p>That made sense. The guy’s model searching quest was difficulty level 6, which made it pretty obvious that his standards for inspiration were through the roof and thus couldn’t be contained in just a single area.</p>

      <p>“Wait, then why was he okay with giving Marilyn away?” I asked. After all, he couldn’t go on his inspiration-searching without a dragon carriage and a Demi-Dragon to pull it.</p>

      <p>“He has a few more land-dragons like her in his possession,” Rook said. “In fact, there’s even a Pure-Dragon, so losing Marilyn isn’t a problem for him.”</p>

      <p><em>I hear that Pure-Dragons are a luxury enjoyed by only the wealthiest of merchants, so I can only assume that Grantzian is making some serious money with his art.</em></p>

      <p>That thought seemed to appear on my face, and Rook didn’t hesitate to tell me a certain fact.</p>

      <p>“The cheapest of Grantzian’s works go for 10,000,000 lir.”</p>

      <p>That was far more than I could possibly imagine. Picturing a work that would go for that much was just otherworldly to me, which probably had to do with the fact that my siblings and I were all completely out of touch with the concept of art. My big sister’s artistic sense needed a sanity check, my big brother’s idea of art didn’t make any sense whatsoever, while I was just painfully average in that regard.</p>

      <p>“Anyway, he uses them in his search for artistic inspiration, right?” I said. “Well, with Marilyn — a Demi-Dragon — utterly destroying the monsters in this area, I imagine that Pure-Dragons allow him to go farther and... Oh, right.”</p>

      <p>My words made me remember something.</p>

      <p>“Didn’t a monster she killed today drop a box?” I asked.</p>

      <p>Boss monsters such as the Demi-Dragon Worm I’d defeated dropped boxes that had several items in them. The bear-like boss monster that Marilyn had killed while we were traveling through the mountain hadn’t been an exception.</p>

      <p>“Yes it did,” said Rook. “Shall I open it?”</p>

      <p>“Yeah, I’m a bit curious about what it dropped.”</p>

      <p>And so, he began opening the box.</p>

      <p class="centerp section-marking">◇</p>

      <p>The Honey Bear Claw that Rook received from the box became the cause of the terrible incident known as “Marie’s Midnight Snack Madness,” but that was a different story entirely...</p>

      <h2>Hugo and Piloting</h2>

      <p><em>Paladin, Ray Starling</em></p>

      <p>Riding Hugo’s Magingear, we made our way towards the hideout of the Gouz-Maise Gang. It was located in the Cruella Mountain Belt — specifically, the second closest mountain from Gideon. Naturally, arriving there would take a while, so we used the travel time to discuss how our quest could go and how we’d handle it. While we were having such talks, however, a certain question came to mind.</p>

      <p>“How are you controlling this thing, anyway?” I asked.</p>

      <p>Though he was still in his Magingear, I could tell that my question somewhat perplexed him.</p>

      <p>“I’m honestly not sure how to answer that,” he said. “There’s nothing more to it than the Piloting skill, really.”</p>

      <p>“That’s exactly what I’m wondering about. Can you really control a robot just by having the skill? Is it seriously that simple?”</p>

      <p>A short while ago, I’d fallen off Silver because I hadn’t had the Horse Riding skill. That made sense — I’d merely lacked the grasp of the necessary technique for it. However, I didn’t really think I could do it just by learning Horse Riding. I’d never properly ridden a horse before, and a single skill just didn’t seem like enough to overcome that. Due to the very same reasons, it was hard for me to imagine that something as complex as a robot could be piloted just by meeting the skill requirement.</p>

      <p>“I see,” he said. “I had the very same question when I began. As for the answer, well... having the skill <em>is</em> enough.”</p>

      <p>“Seriously?”</p>

      <p>“Piloting, Horse Riding, and Riding are not just requirements and mount-strengthening skills — they’re also sense skills that tell you how you should control your mounts.”</p>

      <p><em>Sense skills... Like the ones that allow you to draw well and cook good food, huh?</em> I thought.</p>

      <p>“Basically,” he added, “if I think that ‘I want to raise the Marshall II’s right arm,’ I get a mental image of what I should do with the controls to accomplish that.”</p>

      <p>“So you instantly understand the controls based on what you wish to do at that particular moment?” I asked.</p>

      <p>“That’s about right,” said Hugo. “However, it’s not always ‘instant.’ It takes more time for the mental image to form if the pilot’s skill level is low. That delay is almost gone by the time they reach skill level 5, which is the maximum for Pilot — the low-rank job in this grouping.”</p>

      <p><em>I see.</em> I thought. <em>I guess the same applies to when they try to do any complex movements. They think it, get the mental image, and follow it by properly handling the levers and gauges and the like.</em></p>

      <p>“If we use the skill to actually and thoroughly learn the controls, we can pilot these robots without having to use the mental images as a crutch,” he added. “Becoming like one of those ace pilots from mecha anime isn’t a pipe dream. Then again, it could always go in the opposite direction.”</p>

      <p>“What do you mean?” I asked.</p>

      <p>“The mental images only help you to do ‘the movements you want to make.’ If the movements you think of are sloppy, the skill won’t help, no matter how high its level is.”</p>

      <p>“Oh, I see,” I said. If the action the pilot wanted to take didn’t fit the situation, actually going through with it would be a mistake.</p>

      <p>“What about you, Hugo?” I asked. “Are you fine in that regard?”</p>

      <p>“...Heh,” he grinned.</p>

      <p><em>Okay, what am I supposed to make from that implicative, pompous smile?</em></p>

      <p>“When he started piloting, Hugo broke a Magingear by making it move in a weird way,” said Cyco.</p>

      <p>“Don’t mind that. I’ve gotten a lot better since then,” interjected Hugo. “I’m far past the point of failing a landing and dislocating the robot’s hip joint.”</p>

      <p>Not saying a word in response, I pictured that scenario with the Magingear we were riding, and the result was pretty surreal.</p>

      <p>“Again, I assure you that there’s no problem with my piloting now. I’m valuable on the battlefield — you can count on that.”</p>

      <p>“All right,” I said. “I’ll be relying on you, then.”</p>

      <p>With my question answered, we continued making our way towards the hideout.<br/><br/><br/><br/></p>

      <p><em>Due to possible spoilers, it’s recommended you only read this after finishing Volume 2!</em></p>

      <h2>Hugo and...</h2>

      <p><em>A certain day of a certain month, Mechanic, Hugo Lesseps</em></p>

      <p>After reaching maximum level on Pilot, I chose Mechanic as my second job. It was the optimal choice not only because it increased the amount of things I could do in the clan, but also because it helped me fulfill the “Have a certain amount of machine-related skills” condition for the high-rank job I was aiming for — High Pilot.</p>

      <p>I spent my days raising my job and skill levels by completing the mechanic’s guild quests that got to me through my clan. At the rate I was going, I would reach max level in just two weeks or so. On a seemingly-standard day when I was doing regular Mechanic work, the clan’s headquarters suddenly got noisy. The place was always full of hustle and bustle, but I could easily tell that whatever caused the noise was completely outside the norm.</p>

      <p>“Did something happen?” I asked a fellow clan member.</p>

      <p>“The experimental machine from the fourth laboratory behind this wall here seems to have gone on a rampage,” he said. “They’re trying to get it under control now.”</p>

      <p>I quickly recalled that the fourth laboratory was testing grudge-driven engines. A machine powered by such a thing had gone on a rampage?</p>

      <p>“We might be in danger...” I said.</p>

      <p><em>Afer all, unlike standard Magingears, they don’t need the pilot’s MP and can stay active just by absorbing the surrounding grudge. We can only stop it by destroying it, but—</em></p>

      <p>Suddenly, before I could even finish my thought, a Magingear broke through the wall to the facility I was in.</p>

      <p>It looked much like a Marshall II, but the details were different. The biggest one was the fact that, instead of a cockpit, it had a glass case-like object with a dark purple light flickering inside it. There was little doubt that it was the rampaging experimental machine.</p>

      <p>“UUUUAAAAAAAHHHH!” it roared in an unworldly manner.</p>

      <p>After haphazardly destroying anything within its reach, it fixed its sights on the living. Masters or tians working within the clan — they were all the same to it.</p>

      <p>“Oh no! I have to get the Garage, and...!”</p>

      <p>I tried to take out the Marshall II that the clan leader had given me, but I was far too slow. Before I could even spread the sheet, let alone begin to fight against it, it got close to the nearby tians. Right when I thought that they would surely die...</p>

      <p>“Deadly Explosion.”</p>

      <p>The grudge flickering within the machine gathered into one point and created a small explosion. The scattering of the grudge — the power and the will forcing it to act — made the experimental machine drop the ground and cease all movement. It was now more like a corpse than anything else. The grudge-driven machine that had been about to hurt people had suddenly lost all the malice driving it to do that.</p>

      <p>“Th-Thank you, Mr. Benetnasch!” Zerbahl exclaimed. He was one of our clan members.</p>

      <p>“I should’ve been there to observe the experiment. My apologies,” a man I didn’t recognize answered.</p>

      <p>He was a man with a predominantly purple girl at his side. Though I couldn’t recognize him by appearance, I was familiar with the name “Benetnasch.” He was the King of Tartarus — a Superior who didn’t belong to any of the seven countries and a collaborator in this experiment, responsible for gathering the required grudge, among other tasks. It was clear that he was the one who’d stopped the rampaging robot.</p>

      <p>Despite that, however, he apologized for this event as if everything bad that ever happened around him was entirely his fault.</p>

      <p>After he left, as part of my Mechanic work, I helped with the dismantling of the experimental machine. In the end, I didn’t get to talk to the King of Tartarus directly.</p>

      <p>However, though I didn’t know when or where, I had a hunch that he — a fellow Master with a Maiden-Type Embryo — and I would meet again one day, in some form.</p>

      <h2>Carriage</h2>

      <p><em>Paladin, Ray Starling</em></p>

      <p>Our group was making our way towards Gideon.</p>

      <p>“Riding this thing really strengthens my awareness of the fact that I’m in a fantasy world,” I said as I looked at the scenery outside the carriage’s window. Our means of transport on this journey was Rook’s very own dragon carriage, drawn by Marilyn... a Trihorn Demi-Dragon.</p>

      <p>A dragon carriage was like your usual carriage, except larger and sturdier, which gave a unique sort of “power” to the overall impression it gave off. Also, with Marilyn having the appearance of a triceratops, this vehicle had a particularly strong “fantasy” vibe to it. I was told that dragon carriages such as this were quite popular among merchants. That wasn’t just because dragons had tougher legs than equestrian monsters and could thus pull more weight, but also because they were simply stronger.</p>

      <p>Marilyn had killed that bear-like boss monster that had gotten in our way in just one hit, clearly showing that — as was standard in fantasy — <em>Infinite Dendrogram</em>’s dragons were creatures of great strength. They were far more reliable than the average hired guard. Even I would have tons of trouble beating Marilyn without Nemesis’s skills. After all, being a Demi-Dragon, she was on the same tier as the Demi-Dragon Worm I had struggled against right after entering this world.</p>

      <p>Due to that strength, most standard merchant carriages were pulled by either battle-ready Demi-Dragons or smaller, dinosaur-like monsters, while the traders with the fattest purses would get themselves a Pure-Dragon. Pure-Dragons were quite a rarity on the markets, and even the Masters that had them were almost always true veterans.</p>

      <p>“With a beauteous mountain scenery such as this, snacks become simply superb.”</p>

      <p>The sudden voice made me shift my gaze from the view outside to the inside of the carriage. I saw Nemesis, looking through the window at the opposite side as she ate the ice cream we’d bought back at the capital. The ice cream looked completely new — not showing any signs of melting. The reason for that, too, was this dragon carriage. It had once been owned by an artist known as Grantzian. Thus, for comfort’s sake, it had come equipped with a time-stopped inventory.</p>

      <p>Marie had said that their inventories were another reason why dragon carriages were so widely used. They allowed a carriage to belie its apparent capacity and carry as many goods as a freight train. Also, if you were willing to part with a nice sum of money, you could have them equipped with time-stopped inventories that allowed the transportation of food without the risk of it rotting. This was the reason why the capital’s restaurants had fresh seafood on the menus despite the city being landlocked, and the reason why these carriages were such a popular means of transporting goods.</p>

      <p>Trains, on the other hand, were highly unreliable due to monsters often destroying the tracks, and from what I’d been told, such technology had yet to go beyond the experimental trams in the imperium’s capital.</p>

      <p><em>Man, the environment sure has a strong effect on the development of transportation,</em> I thought while being told about those circumstances.</p>

      <p>“You should also get your own means of transportation,” said Nemesis. “After all, you’re a Paladin — a holy <em>knight</em>.”</p>

      <p><em>You have a point. A knight without a horse to ride seems pretty off. Is it necessary for a knight’s mount to be a horse, though? To be honest, I’m more used to motorbikes.</em></p>

      <p>“Then why not get a horse that <em>feels</em> like a motorbike?” asked Nemesis.</p>

      <p>“Yeah. Nice joke,” I said in response.</p>

      <p><em>I know this is a fantasy world and all, but such horses just don’t exist,</em> I thought.</p>

      <p class="centerp section-marking">◇</p>

      <p>It took a mere three days for me to be proven wrong.</p>

      <h2>The Prism Steed</h2>

      <p><em>Ten Months Ago, The Tomb Labyrinth</em></p>

      <p>It was said that the world of <em>Infinite Dendrogram</em> had once been home to a civilization with technology far more advanced than it was now. The relics of that civilization seemed to be the result of merging magic and machinery into one. Such relics could be found by either excavating the dungeons known as “Ruins,” which were found all over the world, or as random drops from created dungeons like the Tomb Labyrinth.</p>

      <p>“A horse?” said a man who’d just received one such relic by exploring a created dungeon.</p>

      <p>It was a robotic horse. Covered in black, shining armor reminiscent of obsidian and equipped with eight legs like Sleipnir of Norse myth, it bore the name “Obsidian Earth-Edge.”</p>

      <p>It was one of the five original Prism Steeds that had been created by Flagman, an artisan from the pre-ancient civilization. Being both a powerful, special piece of equipment and a work of art worth many a million, it was a treasure coveted by countless people. Anyone to receive it would surely be gleeful...</p>

      <p>“It’s not like I can use it, though.”</p>

      <p>...yet the man was painfully lukewarm about it.</p>

      <p>“...!”</p>

      <p>Unsatisfied with its new owner’s reaction, Obsidian Earth-Edge kicked the ground as if to show off.</p>

      <p>It seemed to be saying, “Try riding me and then decide,” so the man did exactly that. He didn’t have the Horse Riding skill, so he only got on Obsidian Earth-Edge after equipping an item that gave it to him: the Amulet of the Equestrian Tribe.</p>

      <p>The jet-black, robotic steed instantly began galloping. Its eight metallic legs thundered on the ground, echoing far and wide. The power of its kicks and the speed it reached were simply incomparable to that of any equestrian monster the man had ever ridden. As if that weren’t enough, Obsidian Earth-Edge neighed and used its ability to display its true power.</p>

      <p>It was a skill that allowed it to control the earth. In but a moment, countless stone pillars popped out of the ground below. The metallic steed then began jumping on their sides, from one to the other, making it feel as though it was running on air, following a path that hadn’t been there before. With that, Obsidian Earth-Edge finished demonstrating its powers, and the technological prowess of the olden civilization, to its new master.</p>

      <p>After that was done, the metallic steed neighed as if to say “How do you like me now?”</p>

      <p>“You’re a pretty great horse,” the new owner said in response, fully recognizing the power of Obsidian Earth-Edge. “Still, I won’t be using you,” he added, fully rejecting the Prism Steed as viable equipment.</p>

      <p>“?!”</p>

      <p>Obsidian Earth-Edge looked wholly confused and wanted to know the reason for the man’s decision.</p>

      <p>“After all, I’m faster on foot,” said the man, Over Gladiator Figaro, casually.</p>

      <p>Figaro was the owner a vanguard-type Superior Job and a Superior Embryo, so his battle speed could easily break the sound barrier. No matter how advanced Obsidian Earth-Edge was, it couldn’t go that fast, disqualifying it from being used by its new owner. While looking as though it wanted to say “How does that make any sense?” the Prism Steed was put into Figaro’s inventory.</p>

      <p class="centerp section-marking">◇</p>

      <p>Though Obsidian Earth-Edge didn’t meet the ludicrous requirements to be used by Figaro on a daily basis, there were some duels that could only be done on mounts, so the Over Gladiator participated in those by using the Prism Steed.</p>

      <p>The metallic relic was glad that it didn’t end up being completely useless.</p>

      <h2>License</h2>

      <p><em>Paladin, Ray Starling</em></p>

      <p>“This wind feels great,” said Nemesis.</p>

      <p>“Seriously,” I agreed.</p>

      <p>It was early in the morning. Nemesis and I were in the Nex Plains, riding Silver and testing him.</p>

      <p>“On the road to Gideon, we rode Marilyn’s dragon carriage, and it surprises me just how different rideable objects can be,” she commented.</p>

      <p>“Oh, yeah. You haven’t ridden many things yet, huh?”</p>

      <p>“Indeed,” she nodded. “The dragon carriage, Silver, and the Magingear are the only things that come to mind. And I was in my weapon form while riding that last one.”</p>

      <p><em>Infinite Dendrogram</em> had many rideable things. In the Kingdom of Altar, the most popular type was equestrian monsters. There were also lots of inorganic ones, such as Dryfe’s “Magingear” machines and Granvaloa’s ships. For all I knew, Huang He, being a fantasy country based on ancient China, might have flying clouds. You could probably roleplay some <em>Journey to the West</em> or pretend you were searching for the Dragonballs.</p>

      <p>“Still, I feel that this one is unlike any of them,” I said.</p>

      <p>Nemesis said nothing.</p>

      <p>Silver, the mount I was riding, was a fully metallic robot horse. Riding it didn’t actually remind me of any horse I’d ridden in the past. If anything, Silver felt more like a horse-shaped motorbike.</p>

      <p>“Now that I think about it, it’s been a while since I’ve ridden a motorbike,” I added.</p>

      <p>I’d gotten my license in my first year of high school, but I hadn’t ridden one since I’d started focusing on my exams in the middle of my second year. This was largely because I didn’t have my own motorbike — I’d only used the one that my big sister left at the house. These days, I did my real-life shopping and the like by using public transport or my bicycle.</p>

      <p>Since I had the license, it might be a good idea to get my own motorbike. Or perhaps, with me being a college student now, it was time for me to get a car driver’s license. However, that would mean having to go to a driving school, which would likely lessen my <em>Dendro</em> time.</p>

      <p>College was also starting in two weeks, which would surely affect my schedule in that regard. Unlike my brother, I didn’t have all the income and time in the world.</p>

      <p>“Learning to ride a vehicle on the other side seems like a time-consuming activity,” commented Nemesis.</p>

      <p>“Well, I certainly can’t deny that,” I said.</p>

      <p><em>Having to get the required skills in </em>Dendro<em> can be pretty draining, too, though, as you’re aware,</em> I thought.</p>

      <p>“By the way, ‘motorbike license,’ was it?” said Nemesis. “You say that you have one, but what about Brother Bear?”</p>

      <p>“Yeah, my brother has a cruiser motorbike, and also a driver’s license with a large car to go with it,” I answered.</p>

      <p>“I see.”</p>

      <p>“Oh, he also has licenses for boats and wheeled construction vehicles.”</p>

      <p>“...Hm?”</p>

      <p>“There’s also the helicopter license, and... oh yeah, he can also fly light aircraft. Like Cessnas.”</p>

      <p><em>He got the license for that in Hawaii,</em> I remembered.</p>

      <p>“Does Brother Bear have some unique occupation?” asked Nemesis.</p>

      <p>“Nope, he’s unemployed.”</p>

      <p>He hadn’t had anything better to do during his school years and afterwards, during his NEET life after he’d graduated from college (which still continued to this day), so he went around taking any licenses he could get his hands on. Due to that, he often walked around with a notebook full of <em>only</em> licenses.</p>

      <p>“My brother’s a... <em>very</em> skilled individual,” I concluded.</p>

      <p>“I hope we get a chance to be on a ship he pilots someday,” said Nemesis.</p>

      <p>I said nothing.</p>

      <p>My brother’s ship license only existed in reality. However, he rode a tank here in <em>Dendro,</em> so it wouldn’t be too surprising if he had a boat, as well.</p>

      <p>“I’ll call and ask him about that,” I said.</p>

      <p>With that thought on my mind, I continued riding Silver.</p>

      <h2>Lei-Lei and Fishing</h2>

      <p><em>A certain day of a certain month, in the West Sea</em></p>

      <p>To the west of the Kingdom of Altar, there was an area of ocean known simply as the “West Sea.” Surrounded by a scenery with no land in sight, a single boat was floating in the middle of it. Those familiar with real-life fishing boats would instantly recognize it as one and likely make a comment about it being quite sizeable.</p>

      <p>“The seaaa iiis broooaaad aaand biiiig...”</p>

      <p>A strange song was coming from the boat, sung by a needlessly moving, beautiful voice. The singer herself was as strange as her lyrics. Despite having the physical appearance of a Scandinavian beauty, she was wearing a Chinese qipao. The fact that she was on a boat and looked like that while holding a fishing rod made her into quite the bundle of mysteries.</p>

      <p>She was Lei-Lei the “Prodigal of Feasts.” Among the four Superiors of the kingdom, she was infamous for being even more unpredictable than King of Destruction the “Unknown.” Such a person was now merely fishing in the West Sea.</p>

      <p>“Oh! We’ve got a live one!” she said, upon feeling something pull on the fishing line. She began winding the reel on the rod. Upon further examination, one would notice that the rod was metallic, while the line was much like a wire.</p>

      <p>“It feels like we <em>grabbed hold</em> of something big!” she cried. The rod bent to its absolute limit and the boat began to tilt, clearly showing that whatever was on the other side of the line was considerably heavy.</p>

      <p>Any bystanders would think that the rod would break or the ship would flip, but that had little chance of happening. The Mythical metal that the rod had been made out of allowed it to continue doing its job even as it bent the way it did.</p>

      <p>“Heeere, fishy fishy!” she called after a few minutes of struggling, sounding completely overjoyed. At the same time, the shape of something gigantic appeared on the water’s surface. It was a sea-dragon reminiscent of a plesiosaurus — clearly a Pure-Dragon, too.</p>

      <p>“Ha HA! How I could bear two whole hours without this sweet sunlight is just beyond me!” And holding on to its neck, there was a guy in a bear suit — Shu Starling. There was a metal wire wrapped around his waist, and it didn’t even need to be said that it was connected to Lei-Lei’s fishing rod.</p>

      <p>“Good job on getting this big boy!” she said.</p>

      <p>“The boat won’t bear the weight, you know?” he said. “Save the praises for later! Hurry up and catch this thing before it flips!”</p>

      <p>Shu held on to the flailing sea-dragon, urging Lei-Lei to stop holding her thumb up and get to business.</p>

      <p>“Sure, sure!” Lei-Lei replied as she took out some drugs and threw them into the water.</p>

      <p>They were the kind that gave the Charm status effect. Normally, such drugs would have little effect on a Pure-Dragon. However, with Lei-Lei’s Superior Embryo’s skill — the negation of status effect resistances — the mighty and proud sea-dragon got Charmed as if it were no big deal. Then Lei-Lei changed her job to Tamer and tamed it just as easily.</p>

      <p>“And that’s the quest done!” she exclaimed.</p>

      <p>“Good work,” said Shu.</p>

      <p>The two were on a quest to capture a sea-dragon type Pure-Dragon. Though Lei-Lei was a player that couldn’t log in all that often, she and Shu would sometimes go on difficult quests together. The fact that he was almost always online helped a lot with those arrangements.</p>

      <p>In this quest, Shu’d had the role of being the hook and catching the sea-dragon, while Lei-Lei had had to pull them both up and tame the thing. Clearly, Shu had been the one with the harder role, but no one involved had any problems with that. The only problem was with the suit.</p>

      <p>“Shu, you reek of the sea,” said Lei-Lei. “Your pelt is all stiff, too.”</p>

      <p>“I could breathe just fine with the Underwater Breathing accessory, but the seawater sure wasn’t good fur my fur,” said Shu in response.</p>

      <p>He had dived into the sea while wearing a bear suit, so that result was to be expected. In fact, normally, that action would be suicide. Many might’ve suggested that he should’ve taken off the suit before diving, but that was a thought that neither of them had considered.</p>

      <p>After reflecting upon this incident, Shu spent two weeks at sea, hunting for a UBM to get a special reward suit for underwater activities, but that was a story for another time.</p>
    </div>
  </section>
</body>
</html>
